
Side_project_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb34  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0800fd08  0800fd08  0001fd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010518  08010518  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010518  08010518  00020518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010520  08010520  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010520  08010520  00020520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010524  08010524  00020524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08010528  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005558  200000a0  080105c8  000300a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200055f8  080105c8  000355f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002037e  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a24  00000000  00000000  0005044e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c08  00000000  00000000  00054e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  00056a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002867e  00000000  00000000  00058490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023637  00000000  00000000  00080b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecd61  00000000  00000000  000a4145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d2c  00000000  00000000  00190ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fcec 	.word	0x0800fcec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	0800fcec 	.word	0x0800fcec

08000210 <cr4_fft_64_stm32>:
;* Return         : None
;********************************************************************************/
.thumb_func
cr4_fft_64_stm32:

        STMFD   SP!, {R4-R11, LR}
 8000210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        
        MOV r12, #0
 8000214:	f04f 0c00 	mov.w	ip, #0
        MOV r3, r0 
 8000218:	4603      	mov	r3, r0
        MOV r0,#0
 800021a:	f04f 0000 	mov.w	r0, #0

0800021e <preloop_v7>:
        
preloop_v7:
        ADD     r14, r1, r12, LSR#26 
 800021e:	eb01 6e9c 	add.w	lr, r1, ip, lsr #26
       
        LDRSH r5, [r14, #2]
 8000222:	f9be 5002 	ldrsh.w	r5, [lr, #2]
        LDRSH r4, [r14],#NPT
 8000226:	f93e 4b40 	ldrsh.w	r4, [lr], #64
        LDRSH r9, [r14, #2]
 800022a:	f9be 9002 	ldrsh.w	r9, [lr, #2]
        LDRSH r8, [r14],#NPT
 800022e:	f93e 8b40 	ldrsh.w	r8, [lr], #64
        LDRSH r7, [r14, #2]
 8000232:	f9be 7002 	ldrsh.w	r7, [lr, #2]
        LDRSH r6, [r14],#NPT
 8000236:	f93e 6b40 	ldrsh.w	r6, [lr], #64
        LDRSH r11, [r14, #2]
 800023a:	f9be b002 	ldrsh.w	fp, [lr, #2]
        LDRSH r10, [r14],#NPT
 800023e:	f93e ab40 	ldrsh.w	sl, [lr], #64

        ADD     r8, r8, r10
 8000242:	44d0      	add	r8, sl
        ADD     r9, r9, r11
 8000244:	44d9      	add	r9, fp
        SUB     r10, r8, r10, LSL#1  
 8000246:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
        SUB     r11, r9, r11, LSL#1  
 800024a:	eba9 0b4b 	sub.w	fp, r9, fp, lsl #1

        MOV     r4, r4, ASR#2
 800024e:	ea4f 04a4 	mov.w	r4, r4, asr #2
        MOV     r5, r5, ASR#2
 8000252:	ea4f 05a5 	mov.w	r5, r5, asr #2
        ADD     r4, r4, r6, ASR#2
 8000256:	eb04 04a6 	add.w	r4, r4, r6, asr #2
        ADD     r5, r5, r7, ASR#2
 800025a:	eb05 05a7 	add.w	r5, r5, r7, asr #2
        SUB     r6, r4, r6, ASR#1
 800025e:	eba4 0666 	sub.w	r6, r4, r6, asr #1
        SUB     r7, r5, r7, ASR#1
 8000262:	eba5 0767 	sub.w	r7, r5, r7, asr #1

        ADD     r4, r4, r8, ASR#2
 8000266:	eb04 04a8 	add.w	r4, r4, r8, asr #2
        ADD     r5, r5, r9, ASR#2
 800026a:	eb05 05a9 	add.w	r5, r5, r9, asr #2
        SUB     r8, r4, r8, ASR#1
 800026e:	eba4 0868 	sub.w	r8, r4, r8, asr #1
        SUB     r9, r5, r9, ASR#1
 8000272:	eba5 0969 	sub.w	r9, r5, r9, asr #1

        ADD     r6, r6, r11, ASR#2
 8000276:	eb06 06ab 	add.w	r6, r6, fp, asr #2
        SUB     r7, r7, r10, ASR#2
 800027a:	eba7 07aa 	sub.w	r7, r7, sl, asr #2
        SUB     r11, r6, r11, ASR#1
 800027e:	eba6 0b6b 	sub.w	fp, r6, fp, asr #1
        ADD     r10, r7, r10, ASR#1
 8000282:	eb07 0a6a 	add.w	sl, r7, sl, asr #1
   
        STRH    r5, [r3, #2]
 8000286:	805d      	strh	r5, [r3, #2]
        STRH    r4, [r3], #4
 8000288:	f823 4b04 	strh.w	r4, [r3], #4
        STRH    r7, [r3, #2]
 800028c:	805f      	strh	r7, [r3, #2]
        STRH    r6, [r3], #4
 800028e:	f823 6b04 	strh.w	r6, [r3], #4
        STRH    r9, [r3, #2]
 8000292:	f8a3 9002 	strh.w	r9, [r3, #2]
        STRH    r8, [r3], #4
 8000296:	f823 8b04 	strh.w	r8, [r3], #4
        STRH    r10, [r3, #2]  
 800029a:	f8a3 a002 	strh.w	sl, [r3, #2]
        STRH    r11, [r3], #4
 800029e:	f823 bb04 	strh.w	fp, [r3], #4
        
         ADD r0, r0, #1
 80002a2:	f100 0001 	add.w	r0, r0, #1
         
         RBIT r12, r0 
 80002a6:	fa90 fca0 	rbit	ip, r0
         
         CMP r0,#16  
 80002aa:	2810      	cmp	r0, #16
         BNE  preloop_v7
 80002ac:	d1b7      	bne.n	800021e <preloop_v7>

         SUB     r1, r3, r2, LSL#2
 80002ae:	eba3 0182 	sub.w	r1, r3, r2, lsl #2
         MOV     r0, #16
 80002b2:	f04f 0010 	mov.w	r0, #16
         MOVS    r2, r2, LSR#4   
 80002b6:	0912      	lsrs	r2, r2, #4
;      in your main file.
;   2. Decomment the line LDR.W pssK, =TableFFT and comment the line 
;      ADRL    pssK, TableFFT_V7
;   3. Comment all the TableFFT_V7 data.
;------------------------------------------------------------------------------*/
         ADR    r3, TableFFT_V7
 80002b8:	f20f 132e 	addw	r3, pc, #302	; 0x12e

080002bc <passloop_v7>:
         /*LDR.W r3, =TableFFT*/


passloop_v7:
         STMFD   SP!, {r1,r2}
 80002bc:	e92d 0006 	stmdb	sp!, {r1, r2}
         ADD     r12, r0, r0, LSL#1
 80002c0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
         ADD     r1, r1, r12
 80002c4:	4461      	add	r1, ip
         SUB     r2, r2, #1<<16
 80002c6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000

080002ca <grouploop_v7>:

grouploop_v7:
         ADD     r2,r2,r0,LSL#(16-2)
 80002ca:	eb02 3280 	add.w	r2, r2, r0, lsl #14

080002ce <butterloop_v7>:

butterloop_v7:
        		
         LDRSH r5, [r1, #2]
 80002ce:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
         LDRSH r4, [r1]
 80002d2:	f9b1 4000 	ldrsh.w	r4, [r1]
         SUB r1, r1, r0
 80002d6:	eba1 0100 	sub.w	r1, r1, r0

      	LDRSH r11, [r3, #2]
 80002da:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
      	LDRSH r10, [r3]
 80002de:	f9b3 a000 	ldrsh.w	sl, [r3]
      	ADD r3, r3, #4
 80002e2:	f103 0304 	add.w	r3, r3, #4

         SUB  r14, r5, r4         
 80002e6:	eba5 0e04 	sub.w	lr, r5, r4
         MUL  r12, r14, r11        
 80002ea:	fb0e fc0b 	mul.w	ip, lr, fp
         ADD  r14, r10, r11, LSL#1  
 80002ee:	eb0a 0e4b 	add.w	lr, sl, fp, lsl #1
         MLA  r11, r5, r10, r12     
 80002f2:	fb05 cb0a 	mla	fp, r5, sl, ip
         MLA  r10, r4, r14, r12   
 80002f6:	fb04 ca0e 	mla	sl, r4, lr, ip

         LDRSH r5, [r1, #2]
 80002fa:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
         LDRSH r4, [r1]
 80002fe:	f9b1 4000 	ldrsh.w	r4, [r1]
         SUB r1, r1, r0
 8000302:	eba1 0100 	sub.w	r1, r1, r0
				
      	LDRSH r9, [r3, #2]
 8000306:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
      	LDRSH r8, [r3]
 800030a:	f9b3 8000 	ldrsh.w	r8, [r3]
      	ADD r3, r3, #4
 800030e:	f103 0304 	add.w	r3, r3, #4
        
         SUB  r14, r5, r4         
 8000312:	eba5 0e04 	sub.w	lr, r5, r4
         MUL  r12, r14, r9        
 8000316:	fb0e fc09 	mul.w	ip, lr, r9
         ADD  r14, r8, r9, LSL#1  
 800031a:	eb08 0e49 	add.w	lr, r8, r9, lsl #1
         MLA  r9, r5, r8, r12     
 800031e:	fb05 c908 	mla	r9, r5, r8, ip
         MLA  r8, r4, r14, r12   
 8000322:	fb04 c80e 	mla	r8, r4, lr, ip
	
         LDRSH r5, [r1, #2]
 8000326:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
         LDRSH r4, [r1]
 800032a:	f9b1 4000 	ldrsh.w	r4, [r1]
         SUB r1, r1, r0
 800032e:	eba1 0100 	sub.w	r1, r1, r0
				
         LDRSH r7, [r3, #2]
 8000332:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
      	LDRSH r6, [r3]
 8000336:	f9b3 6000 	ldrsh.w	r6, [r3]
      	ADD r3, r3, #4
 800033a:	f103 0304 	add.w	r3, r3, #4
		
         SUB  r14, r5, r4        
 800033e:	eba5 0e04 	sub.w	lr, r5, r4
         MUL  r12, r14, r7        
 8000342:	fb0e fc07 	mul.w	ip, lr, r7
         ADD  r14, r6, r7, LSL#1  
 8000346:	eb06 0e47 	add.w	lr, r6, r7, lsl #1
         MLA  r7, r5, r6, r12     
 800034a:	fb05 c706 	mla	r7, r5, r6, ip
         MLA  r6, r4, r14, r12   
 800034e:	fb04 c60e 	mla	r6, r4, lr, ip
		
         LDRSH r5, [r1, #2]
 8000352:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
      	LDRSH r4, [r1]
 8000356:	f9b1 4000 	ldrsh.w	r4, [r1]
    		
         ADD     r8, r8, r10
 800035a:	44d0      	add	r8, sl
         ADD     r9, r9, r11
 800035c:	44d9      	add	r9, fp
         SUB     r10, r8, r10, LSL#1
 800035e:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
         SUB     r11, r9, r11, LSL#1
 8000362:	eba9 0b4b 	sub.w	fp, r9, fp, lsl #1

         MOV     r4, r4, ASR#2
 8000366:	ea4f 04a4 	mov.w	r4, r4, asr #2
         MOV     r5, r5, ASR#2
 800036a:	ea4f 05a5 	mov.w	r5, r5, asr #2
         ADD     r4, r4, r6, ASR#(2+14)
 800036e:	eb04 4426 	add.w	r4, r4, r6, asr #16
         ADD     r5, r5, r7, ASR#(2+14)
 8000372:	eb05 4527 	add.w	r5, r5, r7, asr #16
         SUB     r6, r4, r6, ASR#(1+14)
 8000376:	eba4 36e6 	sub.w	r6, r4, r6, asr #15
         SUB     r7, r5, r7, ASR#(1+14)
 800037a:	eba5 37e7 	sub.w	r7, r5, r7, asr #15

         ADD     r4, r4, r8, ASR#(2+14)
 800037e:	eb04 4428 	add.w	r4, r4, r8, asr #16
         ADD     r5, r5, r9, ASR#(2+14)
 8000382:	eb05 4529 	add.w	r5, r5, r9, asr #16
         SUB     r8, r4, r8, ASR#(1+14)
 8000386:	eba4 38e8 	sub.w	r8, r4, r8, asr #15
         SUB     r9, r5, r9, ASR#(1+14)
 800038a:	eba5 39e9 	sub.w	r9, r5, r9, asr #15

         ADD     r6, r6, r11, ASR#(2+14)
 800038e:	eb06 462b 	add.w	r6, r6, fp, asr #16
         SUB     r7, r7, r10, ASR#(2+14)
 8000392:	eba7 472a 	sub.w	r7, r7, sl, asr #16
         SUB     r11, r6, r11, ASR#(1+14)
 8000396:	eba6 3beb 	sub.w	fp, r6, fp, asr #15
         ADD     r10, r7, r10, ASR#(1+14)      
 800039a:	eb07 3aea 	add.w	sl, r7, sl, asr #15

         STRH    r5, [r1, #2]
 800039e:	804d      	strh	r5, [r1, #2]
         STRH    r4, [r1]
 80003a0:	800c      	strh	r4, [r1, #0]
         ADD 	r1, r1, r0
 80003a2:	4401      	add	r1, r0
         STRH    r7, [r1, #2]
 80003a4:	804f      	strh	r7, [r1, #2]
         STRH    r6, [r1]
 80003a6:	800e      	strh	r6, [r1, #0]
         ADD     r1, r1, r0
 80003a8:	4401      	add	r1, r0
         STRH    r9, [r1, #2]
 80003aa:	f8a1 9002 	strh.w	r9, [r1, #2]
         STRH    r8, [r1]
 80003ae:	f8a1 8000 	strh.w	r8, [r1]
         ADD     r1, r1, r0
 80003b2:	4401      	add	r1, r0
         STRH    r10, [r1, #2]  
 80003b4:	f8a1 a002 	strh.w	sl, [r1, #2]
         STRH    r11, [r1], #4
 80003b8:	f821 bb04 	strh.w	fp, [r1], #4
         SUBS        r2,r2, #1<<16
 80003bc:	f5b2 3280 	subs.w	r2, r2, #65536	; 0x10000
         BGE     butterloop_v7
 80003c0:	da85      	bge.n	80002ce <butterloop_v7>
         ADD     r12, r0, r0, LSL#1
 80003c2:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
         ADD     r1, r1, r12
 80003c6:	4461      	add	r1, ip

         SUB     r2, r2, #1
 80003c8:	f1a2 0201 	sub.w	r2, r2, #1
         MOVS    r14, r2, LSL#16
 80003cc:	ea5f 4e02 	movs.w	lr, r2, lsl #16
         IT      ne
 80003d0:	bf18      	it	ne
         SUBNE   r3, r3, r12
 80003d2:	eba3 030c 	subne.w	r3, r3, ip
         BNE     grouploop_v7
 80003d6:	f47f af78 	bne.w	80002ca <grouploop_v7>

         LDMFD   sp!, {r1, r2}
 80003da:	bc06      	pop	{r1, r2}
         MOV  r0,r0,LSL#2		
 80003dc:	ea4f 0080 	mov.w	r0, r0, lsl #2
         MOVS    r2, r2, LSR#2
 80003e0:	0892      	lsrs	r2, r2, #2
       	BNE     passloop_v7
 80003e2:	f47f af6b 	bne.w	80002bc <passloop_v7>
       	LDMFD   SP!, {R4-R11, PC}
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003ea <TableFFT_V7>:
 80003ea:	4000      	.short	0x4000
 80003ec:	40000000 	.word	0x40000000
 80003f0:	40000000 	.word	0x40000000
 80003f4:	dd5d0000 	.word	0xdd5d0000
 80003f8:	22a33b21 	.word	0x22a33b21
 80003fc:	0000187e 	.word	0x0000187e
 8000400:	a57e2d41 	.word	0xa57e2d41
 8000404:	00002d41 	.word	0x00002d41
 8000408:	c0002d41 	.word	0xc0002d41
 800040c:	dd5d4000 	.word	0xdd5d4000
 8000410:	dd5de782 	.word	0xdd5de782
 8000414:	a57e3b21 	.word	0xa57e3b21
 8000418:	40002d41 	.word	0x40002d41
 800041c:	40000000 	.word	0x40000000
 8000420:	40000000 	.word	0x40000000
 8000424:	2aaa0000 	.word	0x2aaa0000
 8000428:	396b1294 	.word	0x396b1294
 800042c:	32490646 	.word	0x32490646
 8000430:	11a80c7c 	.word	0x11a80c7c
 8000434:	3249238e 	.word	0x3249238e
 8000438:	22a30c7c 	.word	0x22a30c7c
 800043c:	f721187e 	.word	0xf721187e
 8000440:	2aaa3179 	.word	0x2aaa3179
 8000444:	11a81294 	.word	0x11a81294
 8000448:	dd5d238e 	.word	0xdd5d238e
 800044c:	22a33b21 	.word	0x22a33b21
 8000450:	0000187e 	.word	0x0000187e
 8000454:	c6952d41 	.word	0xc6952d41
 8000458:	1a463fb1 	.word	0x1a463fb1
 800045c:	ee581e2b 	.word	0xee581e2b
 8000460:	b4be3537 	.word	0xb4be3537
 8000464:	11a83ec5 	.word	0x11a83ec5
 8000468:	dd5d238e 	.word	0xdd5d238e
 800046c:	a9633b21 	.word	0xa9633b21
 8000470:	08df3871 	.word	0x08df3871
 8000474:	cdb7289a 	.word	0xcdb7289a
 8000478:	a57e3ec5 	.word	0xa57e3ec5
 800047c:	00002d41 	.word	0x00002d41
 8000480:	c0002d41 	.word	0xc0002d41
 8000484:	a9634000 	.word	0xa9634000
 8000488:	f7211e2b 	.word	0xf7211e2b
 800048c:	b4be3179 	.word	0xb4be3179
 8000490:	b4be3ec5 	.word	0xb4be3ec5
 8000494:	ee580c7c 	.word	0xee580c7c
 8000498:	ac613537 	.word	0xac613537
 800049c:	c6953b21 	.word	0xc6953b21
 80004a0:	e5baf9ba 	.word	0xe5baf9ba
 80004a4:	a73b3871 	.word	0xa73b3871
 80004a8:	dd5d3537 	.word	0xdd5d3537
 80004ac:	dd5de782 	.word	0xdd5de782
 80004b0:	a57e3b21 	.word	0xa57e3b21
 80004b4:	f7212d41 	.word	0xf7212d41
 80004b8:	d556d766 	.word	0xd556d766
 80004bc:	a73b3d3f 	.word	0xa73b3d3f
 80004c0:	11a8238e 	.word	0x11a8238e
 80004c4:	cdb7cac9 	.word	0xcdb7cac9
 80004c8:	ac613ec5 	.word	0xac613ec5
 80004cc:	2aaa187e 	.word	0x2aaa187e
 80004d0:	c695c2c1 	.word	0xc695c2c1
 80004d4:	b4be3fb1 	.word	0xb4be3fb1
 80004d8:	0c7c      	.short	0x0c7c

080004da <strcmp>:
 80004da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	bf28      	it	cs
 80004e6:	429a      	cmpcs	r2, r3
 80004e8:	d0f7      	beq.n	80004da <strcmp>
 80004ea:	1ad0      	subs	r0, r2, r3
 80004ec:	4770      	bx	lr

080004ee <strlen>:
 80004ee:	4603      	mov	r3, r0
 80004f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d1fb      	bne.n	80004f0 <strlen+0x2>
 80004f8:	1a18      	subs	r0, r3, r0
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
	...

08000500 <memchr>:
 8000500:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000504:	2a10      	cmp	r2, #16
 8000506:	db2b      	blt.n	8000560 <memchr+0x60>
 8000508:	f010 0f07 	tst.w	r0, #7
 800050c:	d008      	beq.n	8000520 <memchr+0x20>
 800050e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000512:	3a01      	subs	r2, #1
 8000514:	428b      	cmp	r3, r1
 8000516:	d02d      	beq.n	8000574 <memchr+0x74>
 8000518:	f010 0f07 	tst.w	r0, #7
 800051c:	b342      	cbz	r2, 8000570 <memchr+0x70>
 800051e:	d1f6      	bne.n	800050e <memchr+0xe>
 8000520:	b4f0      	push	{r4, r5, r6, r7}
 8000522:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000526:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800052a:	f022 0407 	bic.w	r4, r2, #7
 800052e:	f07f 0700 	mvns.w	r7, #0
 8000532:	2300      	movs	r3, #0
 8000534:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000538:	3c08      	subs	r4, #8
 800053a:	ea85 0501 	eor.w	r5, r5, r1
 800053e:	ea86 0601 	eor.w	r6, r6, r1
 8000542:	fa85 f547 	uadd8	r5, r5, r7
 8000546:	faa3 f587 	sel	r5, r3, r7
 800054a:	fa86 f647 	uadd8	r6, r6, r7
 800054e:	faa5 f687 	sel	r6, r5, r7
 8000552:	b98e      	cbnz	r6, 8000578 <memchr+0x78>
 8000554:	d1ee      	bne.n	8000534 <memchr+0x34>
 8000556:	bcf0      	pop	{r4, r5, r6, r7}
 8000558:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800055c:	f002 0207 	and.w	r2, r2, #7
 8000560:	b132      	cbz	r2, 8000570 <memchr+0x70>
 8000562:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000566:	3a01      	subs	r2, #1
 8000568:	ea83 0301 	eor.w	r3, r3, r1
 800056c:	b113      	cbz	r3, 8000574 <memchr+0x74>
 800056e:	d1f8      	bne.n	8000562 <memchr+0x62>
 8000570:	2000      	movs	r0, #0
 8000572:	4770      	bx	lr
 8000574:	3801      	subs	r0, #1
 8000576:	4770      	bx	lr
 8000578:	2d00      	cmp	r5, #0
 800057a:	bf06      	itte	eq
 800057c:	4635      	moveq	r5, r6
 800057e:	3803      	subeq	r0, #3
 8000580:	3807      	subne	r0, #7
 8000582:	f015 0f01 	tst.w	r5, #1
 8000586:	d107      	bne.n	8000598 <memchr+0x98>
 8000588:	3001      	adds	r0, #1
 800058a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800058e:	bf02      	ittt	eq
 8000590:	3001      	addeq	r0, #1
 8000592:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000596:	3001      	addeq	r0, #1
 8000598:	bcf0      	pop	{r4, r5, r6, r7}
 800059a:	3801      	subs	r0, #1
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <__aeabi_drsub>:
 80005a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	e002      	b.n	80005ac <__adddf3>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dsub>:
 80005a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005ac <__adddf3>:
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	bf1f      	itttt	ne
 80005c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d2:	f000 80e2 	beq.w	800079a <__adddf3+0x1ee>
 80005d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005de:	bfb8      	it	lt
 80005e0:	426d      	neglt	r5, r5
 80005e2:	dd0c      	ble.n	80005fe <__adddf3+0x52>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea80 0202 	eor.w	r2, r0, r2
 80005ea:	ea81 0303 	eor.w	r3, r1, r3
 80005ee:	ea82 0000 	eor.w	r0, r2, r0
 80005f2:	ea83 0101 	eor.w	r1, r3, r1
 80005f6:	ea80 0202 	eor.w	r2, r0, r2
 80005fa:	ea81 0303 	eor.w	r3, r1, r3
 80005fe:	2d36      	cmp	r5, #54	; 0x36
 8000600:	bf88      	it	hi
 8000602:	bd30      	pophi	{r4, r5, pc}
 8000604:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000608:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800060c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000610:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000614:	d002      	beq.n	800061c <__adddf3+0x70>
 8000616:	4240      	negs	r0, r0
 8000618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000620:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000624:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000628:	d002      	beq.n	8000630 <__adddf3+0x84>
 800062a:	4252      	negs	r2, r2
 800062c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000630:	ea94 0f05 	teq	r4, r5
 8000634:	f000 80a7 	beq.w	8000786 <__adddf3+0x1da>
 8000638:	f1a4 0401 	sub.w	r4, r4, #1
 800063c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000640:	db0d      	blt.n	800065e <__adddf3+0xb2>
 8000642:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000646:	fa22 f205 	lsr.w	r2, r2, r5
 800064a:	1880      	adds	r0, r0, r2
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	fa03 f20e 	lsl.w	r2, r3, lr
 8000654:	1880      	adds	r0, r0, r2
 8000656:	fa43 f305 	asr.w	r3, r3, r5
 800065a:	4159      	adcs	r1, r3
 800065c:	e00e      	b.n	800067c <__adddf3+0xd0>
 800065e:	f1a5 0520 	sub.w	r5, r5, #32
 8000662:	f10e 0e20 	add.w	lr, lr, #32
 8000666:	2a01      	cmp	r2, #1
 8000668:	fa03 fc0e 	lsl.w	ip, r3, lr
 800066c:	bf28      	it	cs
 800066e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000672:	fa43 f305 	asr.w	r3, r3, r5
 8000676:	18c0      	adds	r0, r0, r3
 8000678:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	d507      	bpl.n	8000692 <__adddf3+0xe6>
 8000682:	f04f 0e00 	mov.w	lr, #0
 8000686:	f1dc 0c00 	rsbs	ip, ip, #0
 800068a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800068e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000692:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000696:	d31b      	bcc.n	80006d0 <__adddf3+0x124>
 8000698:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800069c:	d30c      	bcc.n	80006b8 <__adddf3+0x10c>
 800069e:	0849      	lsrs	r1, r1, #1
 80006a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80006a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006a8:	f104 0401 	add.w	r4, r4, #1
 80006ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006b4:	f080 809a 	bcs.w	80007ec <__adddf3+0x240>
 80006b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	ea41 0105 	orr.w	r1, r1, r5
 80006ce:	bd30      	pop	{r4, r5, pc}
 80006d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006d4:	4140      	adcs	r0, r0
 80006d6:	eb41 0101 	adc.w	r1, r1, r1
 80006da:	3c01      	subs	r4, #1
 80006dc:	bf28      	it	cs
 80006de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80006e2:	d2e9      	bcs.n	80006b8 <__adddf3+0x10c>
 80006e4:	f091 0f00 	teq	r1, #0
 80006e8:	bf04      	itt	eq
 80006ea:	4601      	moveq	r1, r0
 80006ec:	2000      	moveq	r0, #0
 80006ee:	fab1 f381 	clz	r3, r1
 80006f2:	bf08      	it	eq
 80006f4:	3320      	addeq	r3, #32
 80006f6:	f1a3 030b 	sub.w	r3, r3, #11
 80006fa:	f1b3 0220 	subs.w	r2, r3, #32
 80006fe:	da0c      	bge.n	800071a <__adddf3+0x16e>
 8000700:	320c      	adds	r2, #12
 8000702:	dd08      	ble.n	8000716 <__adddf3+0x16a>
 8000704:	f102 0c14 	add.w	ip, r2, #20
 8000708:	f1c2 020c 	rsb	r2, r2, #12
 800070c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000710:	fa21 f102 	lsr.w	r1, r1, r2
 8000714:	e00c      	b.n	8000730 <__adddf3+0x184>
 8000716:	f102 0214 	add.w	r2, r2, #20
 800071a:	bfd8      	it	le
 800071c:	f1c2 0c20 	rsble	ip, r2, #32
 8000720:	fa01 f102 	lsl.w	r1, r1, r2
 8000724:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000728:	bfdc      	itt	le
 800072a:	ea41 010c 	orrle.w	r1, r1, ip
 800072e:	4090      	lslle	r0, r2
 8000730:	1ae4      	subs	r4, r4, r3
 8000732:	bfa2      	ittt	ge
 8000734:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000738:	4329      	orrge	r1, r5
 800073a:	bd30      	popge	{r4, r5, pc}
 800073c:	ea6f 0404 	mvn.w	r4, r4
 8000740:	3c1f      	subs	r4, #31
 8000742:	da1c      	bge.n	800077e <__adddf3+0x1d2>
 8000744:	340c      	adds	r4, #12
 8000746:	dc0e      	bgt.n	8000766 <__adddf3+0x1ba>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0220 	rsb	r2, r4, #32
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f302 	lsl.w	r3, r1, r2
 8000758:	ea40 0003 	orr.w	r0, r0, r3
 800075c:	fa21 f304 	lsr.w	r3, r1, r4
 8000760:	ea45 0103 	orr.w	r1, r5, r3
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	f1c4 040c 	rsb	r4, r4, #12
 800076a:	f1c4 0220 	rsb	r2, r4, #32
 800076e:	fa20 f002 	lsr.w	r0, r0, r2
 8000772:	fa01 f304 	lsl.w	r3, r1, r4
 8000776:	ea40 0003 	orr.w	r0, r0, r3
 800077a:	4629      	mov	r1, r5
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	fa21 f004 	lsr.w	r0, r1, r4
 8000782:	4629      	mov	r1, r5
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	f094 0f00 	teq	r4, #0
 800078a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800078e:	bf06      	itte	eq
 8000790:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000794:	3401      	addeq	r4, #1
 8000796:	3d01      	subne	r5, #1
 8000798:	e74e      	b.n	8000638 <__adddf3+0x8c>
 800079a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800079e:	bf18      	it	ne
 80007a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007a4:	d029      	beq.n	80007fa <__adddf3+0x24e>
 80007a6:	ea94 0f05 	teq	r4, r5
 80007aa:	bf08      	it	eq
 80007ac:	ea90 0f02 	teqeq	r0, r2
 80007b0:	d005      	beq.n	80007be <__adddf3+0x212>
 80007b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80007b6:	bf04      	itt	eq
 80007b8:	4619      	moveq	r1, r3
 80007ba:	4610      	moveq	r0, r2
 80007bc:	bd30      	pop	{r4, r5, pc}
 80007be:	ea91 0f03 	teq	r1, r3
 80007c2:	bf1e      	ittt	ne
 80007c4:	2100      	movne	r1, #0
 80007c6:	2000      	movne	r0, #0
 80007c8:	bd30      	popne	{r4, r5, pc}
 80007ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007ce:	d105      	bne.n	80007dc <__adddf3+0x230>
 80007d0:	0040      	lsls	r0, r0, #1
 80007d2:	4149      	adcs	r1, r1
 80007d4:	bf28      	it	cs
 80007d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80007da:	bd30      	pop	{r4, r5, pc}
 80007dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80007e0:	bf3c      	itt	cc
 80007e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80007e6:	bd30      	popcc	{r4, r5, pc}
 80007e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd30      	pop	{r4, r5, pc}
 80007fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007fe:	bf1a      	itte	ne
 8000800:	4619      	movne	r1, r3
 8000802:	4610      	movne	r0, r2
 8000804:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000808:	bf1c      	itt	ne
 800080a:	460b      	movne	r3, r1
 800080c:	4602      	movne	r2, r0
 800080e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000812:	bf06      	itte	eq
 8000814:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000818:	ea91 0f03 	teqeq	r1, r3
 800081c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000820:	bd30      	pop	{r4, r5, pc}
 8000822:	bf00      	nop

08000824 <__aeabi_ui2d>:
 8000824:	f090 0f00 	teq	r0, #0
 8000828:	bf04      	itt	eq
 800082a:	2100      	moveq	r1, #0
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000834:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000838:	f04f 0500 	mov.w	r5, #0
 800083c:	f04f 0100 	mov.w	r1, #0
 8000840:	e750      	b.n	80006e4 <__adddf3+0x138>
 8000842:	bf00      	nop

08000844 <__aeabi_i2d>:
 8000844:	f090 0f00 	teq	r0, #0
 8000848:	bf04      	itt	eq
 800084a:	2100      	moveq	r1, #0
 800084c:	4770      	bxeq	lr
 800084e:	b530      	push	{r4, r5, lr}
 8000850:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000854:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000858:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800085c:	bf48      	it	mi
 800085e:	4240      	negmi	r0, r0
 8000860:	f04f 0100 	mov.w	r1, #0
 8000864:	e73e      	b.n	80006e4 <__adddf3+0x138>
 8000866:	bf00      	nop

08000868 <__aeabi_f2d>:
 8000868:	0042      	lsls	r2, r0, #1
 800086a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800086e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000872:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000876:	bf1f      	itttt	ne
 8000878:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800087c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000880:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000884:	4770      	bxne	lr
 8000886:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800088a:	bf08      	it	eq
 800088c:	4770      	bxeq	lr
 800088e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000892:	bf04      	itt	eq
 8000894:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000898:	4770      	bxeq	lr
 800089a:	b530      	push	{r4, r5, lr}
 800089c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	e71c      	b.n	80006e4 <__adddf3+0x138>
 80008aa:	bf00      	nop

080008ac <__aeabi_ul2d>:
 80008ac:	ea50 0201 	orrs.w	r2, r0, r1
 80008b0:	bf08      	it	eq
 80008b2:	4770      	bxeq	lr
 80008b4:	b530      	push	{r4, r5, lr}
 80008b6:	f04f 0500 	mov.w	r5, #0
 80008ba:	e00a      	b.n	80008d2 <__aeabi_l2d+0x16>

080008bc <__aeabi_l2d>:
 80008bc:	ea50 0201 	orrs.w	r2, r0, r1
 80008c0:	bf08      	it	eq
 80008c2:	4770      	bxeq	lr
 80008c4:	b530      	push	{r4, r5, lr}
 80008c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008ca:	d502      	bpl.n	80008d2 <__aeabi_l2d+0x16>
 80008cc:	4240      	negs	r0, r0
 80008ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008de:	f43f aed8 	beq.w	8000692 <__adddf3+0xe6>
 80008e2:	f04f 0203 	mov.w	r2, #3
 80008e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008ea:	bf18      	it	ne
 80008ec:	3203      	addne	r2, #3
 80008ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008f2:	bf18      	it	ne
 80008f4:	3203      	addne	r2, #3
 80008f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008fa:	f1c2 0320 	rsb	r3, r2, #32
 80008fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	fa01 fe03 	lsl.w	lr, r1, r3
 800090a:	ea40 000e 	orr.w	r0, r0, lr
 800090e:	fa21 f102 	lsr.w	r1, r1, r2
 8000912:	4414      	add	r4, r2
 8000914:	e6bd      	b.n	8000692 <__adddf3+0xe6>
 8000916:	bf00      	nop

08000918 <__aeabi_dmul>:
 8000918:	b570      	push	{r4, r5, r6, lr}
 800091a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800091e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000922:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000926:	bf1d      	ittte	ne
 8000928:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800092c:	ea94 0f0c 	teqne	r4, ip
 8000930:	ea95 0f0c 	teqne	r5, ip
 8000934:	f000 f8de 	bleq	8000af4 <__aeabi_dmul+0x1dc>
 8000938:	442c      	add	r4, r5
 800093a:	ea81 0603 	eor.w	r6, r1, r3
 800093e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000942:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000946:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800094a:	bf18      	it	ne
 800094c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000958:	d038      	beq.n	80009cc <__aeabi_dmul+0xb4>
 800095a:	fba0 ce02 	umull	ip, lr, r0, r2
 800095e:	f04f 0500 	mov.w	r5, #0
 8000962:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000966:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800096a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800096e:	f04f 0600 	mov.w	r6, #0
 8000972:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000976:	f09c 0f00 	teq	ip, #0
 800097a:	bf18      	it	ne
 800097c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000980:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000984:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000988:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800098c:	d204      	bcs.n	8000998 <__aeabi_dmul+0x80>
 800098e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000992:	416d      	adcs	r5, r5
 8000994:	eb46 0606 	adc.w	r6, r6, r6
 8000998:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800099c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80009a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80009a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80009a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80009ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b0:	bf88      	it	hi
 80009b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b6:	d81e      	bhi.n	80009f6 <__aeabi_dmul+0xde>
 80009b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80009c2:	f150 0000 	adcs.w	r0, r0, #0
 80009c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80009d0:	ea46 0101 	orr.w	r1, r6, r1
 80009d4:	ea40 0002 	orr.w	r0, r0, r2
 80009d8:	ea81 0103 	eor.w	r1, r1, r3
 80009dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	f300 80ab 	bgt.w	8000b50 <__aeabi_dmul+0x238>
 80009fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009fe:	bfde      	ittt	le
 8000a00:	2000      	movle	r0, #0
 8000a02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a06:	bd70      	pople	{r4, r5, r6, pc}
 8000a08:	f1c4 0400 	rsb	r4, r4, #0
 8000a0c:	3c20      	subs	r4, #32
 8000a0e:	da35      	bge.n	8000a7c <__aeabi_dmul+0x164>
 8000a10:	340c      	adds	r4, #12
 8000a12:	dc1b      	bgt.n	8000a4c <__aeabi_dmul+0x134>
 8000a14:	f104 0414 	add.w	r4, r4, #20
 8000a18:	f1c4 0520 	rsb	r5, r4, #32
 8000a1c:	fa00 f305 	lsl.w	r3, r0, r5
 8000a20:	fa20 f004 	lsr.w	r0, r0, r4
 8000a24:	fa01 f205 	lsl.w	r2, r1, r5
 8000a28:	ea40 0002 	orr.w	r0, r0, r2
 8000a2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a38:	fa21 f604 	lsr.w	r6, r1, r4
 8000a3c:	eb42 0106 	adc.w	r1, r2, r6
 8000a40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a44:	bf08      	it	eq
 8000a46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	f1c4 040c 	rsb	r4, r4, #12
 8000a50:	f1c4 0520 	rsb	r5, r4, #32
 8000a54:	fa00 f304 	lsl.w	r3, r0, r4
 8000a58:	fa20 f005 	lsr.w	r0, r0, r5
 8000a5c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a60:	ea40 0002 	orr.w	r0, r0, r2
 8000a64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a6c:	f141 0100 	adc.w	r1, r1, #0
 8000a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a74:	bf08      	it	eq
 8000a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f1c4 0520 	rsb	r5, r4, #32
 8000a80:	fa00 f205 	lsl.w	r2, r0, r5
 8000a84:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a88:	fa20 f304 	lsr.w	r3, r0, r4
 8000a8c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a90:	ea43 0302 	orr.w	r3, r3, r2
 8000a94:	fa21 f004 	lsr.w	r0, r1, r4
 8000a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a9c:	fa21 f204 	lsr.w	r2, r1, r4
 8000aa0:	ea20 0002 	bic.w	r0, r0, r2
 8000aa4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000aa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000aac:	bf08      	it	eq
 8000aae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f094 0f00 	teq	r4, #0
 8000ab8:	d10f      	bne.n	8000ada <__aeabi_dmul+0x1c2>
 8000aba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000abe:	0040      	lsls	r0, r0, #1
 8000ac0:	eb41 0101 	adc.w	r1, r1, r1
 8000ac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ac8:	bf08      	it	eq
 8000aca:	3c01      	subeq	r4, #1
 8000acc:	d0f7      	beq.n	8000abe <__aeabi_dmul+0x1a6>
 8000ace:	ea41 0106 	orr.w	r1, r1, r6
 8000ad2:	f095 0f00 	teq	r5, #0
 8000ad6:	bf18      	it	ne
 8000ad8:	4770      	bxne	lr
 8000ada:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000ade:	0052      	lsls	r2, r2, #1
 8000ae0:	eb43 0303 	adc.w	r3, r3, r3
 8000ae4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000ae8:	bf08      	it	eq
 8000aea:	3d01      	subeq	r5, #1
 8000aec:	d0f7      	beq.n	8000ade <__aeabi_dmul+0x1c6>
 8000aee:	ea43 0306 	orr.w	r3, r3, r6
 8000af2:	4770      	bx	lr
 8000af4:	ea94 0f0c 	teq	r4, ip
 8000af8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000afc:	bf18      	it	ne
 8000afe:	ea95 0f0c 	teqne	r5, ip
 8000b02:	d00c      	beq.n	8000b1e <__aeabi_dmul+0x206>
 8000b04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b08:	bf18      	it	ne
 8000b0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b0e:	d1d1      	bne.n	8000ab4 <__aeabi_dmul+0x19c>
 8000b10:	ea81 0103 	eor.w	r1, r1, r3
 8000b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
 8000b1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b22:	bf06      	itte	eq
 8000b24:	4610      	moveq	r0, r2
 8000b26:	4619      	moveq	r1, r3
 8000b28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b2c:	d019      	beq.n	8000b62 <__aeabi_dmul+0x24a>
 8000b2e:	ea94 0f0c 	teq	r4, ip
 8000b32:	d102      	bne.n	8000b3a <__aeabi_dmul+0x222>
 8000b34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b38:	d113      	bne.n	8000b62 <__aeabi_dmul+0x24a>
 8000b3a:	ea95 0f0c 	teq	r5, ip
 8000b3e:	d105      	bne.n	8000b4c <__aeabi_dmul+0x234>
 8000b40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b44:	bf1c      	itt	ne
 8000b46:	4610      	movne	r0, r2
 8000b48:	4619      	movne	r1, r3
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dmul+0x24a>
 8000b4c:	ea81 0103 	eor.w	r1, r1, r3
 8000b50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	bd70      	pop	{r4, r5, r6, pc}
 8000b62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}

08000b6c <__aeabi_ddiv>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b7a:	bf1d      	ittte	ne
 8000b7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b80:	ea94 0f0c 	teqne	r4, ip
 8000b84:	ea95 0f0c 	teqne	r5, ip
 8000b88:	f000 f8a7 	bleq	8000cda <__aeabi_ddiv+0x16e>
 8000b8c:	eba4 0405 	sub.w	r4, r4, r5
 8000b90:	ea81 0e03 	eor.w	lr, r1, r3
 8000b94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b9c:	f000 8088 	beq.w	8000cb0 <__aeabi_ddiv+0x144>
 8000ba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ba4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ba8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000bac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000bb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000bb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000bb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000bbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000bc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000bc4:	429d      	cmp	r5, r3
 8000bc6:	bf08      	it	eq
 8000bc8:	4296      	cmpeq	r6, r2
 8000bca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000bce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000bd2:	d202      	bcs.n	8000bda <__aeabi_ddiv+0x6e>
 8000bd4:	085b      	lsrs	r3, r3, #1
 8000bd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bda:	1ab6      	subs	r6, r6, r2
 8000bdc:	eb65 0503 	sbc.w	r5, r5, r3
 8000be0:	085b      	lsrs	r3, r3, #1
 8000be2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000be6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000bea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000bee:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bf6:	bf22      	ittt	cs
 8000bf8:	1ab6      	subcs	r6, r6, r2
 8000bfa:	4675      	movcs	r5, lr
 8000bfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c00:	085b      	lsrs	r3, r3, #1
 8000c02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c0e:	bf22      	ittt	cs
 8000c10:	1ab6      	subcs	r6, r6, r2
 8000c12:	4675      	movcs	r5, lr
 8000c14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c18:	085b      	lsrs	r3, r3, #1
 8000c1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c26:	bf22      	ittt	cs
 8000c28:	1ab6      	subcs	r6, r6, r2
 8000c2a:	4675      	movcs	r5, lr
 8000c2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c3e:	bf22      	ittt	cs
 8000c40:	1ab6      	subcs	r6, r6, r2
 8000c42:	4675      	movcs	r5, lr
 8000c44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c4c:	d018      	beq.n	8000c80 <__aeabi_ddiv+0x114>
 8000c4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c6a:	d1c0      	bne.n	8000bee <__aeabi_ddiv+0x82>
 8000c6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c70:	d10b      	bne.n	8000c8a <__aeabi_ddiv+0x11e>
 8000c72:	ea41 0100 	orr.w	r1, r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c7e:	e7b6      	b.n	8000bee <__aeabi_ddiv+0x82>
 8000c80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c84:	bf04      	itt	eq
 8000c86:	4301      	orreq	r1, r0
 8000c88:	2000      	moveq	r0, #0
 8000c8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c8e:	bf88      	it	hi
 8000c90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c94:	f63f aeaf 	bhi.w	80009f6 <__aeabi_dmul+0xde>
 8000c98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c9c:	bf04      	itt	eq
 8000c9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ca6:	f150 0000 	adcs.w	r0, r0, #0
 8000caa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000cb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000cb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000cbc:	bfc2      	ittt	gt
 8000cbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000cc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000cc6:	bd70      	popgt	{r4, r5, r6, pc}
 8000cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ccc:	f04f 0e00 	mov.w	lr, #0
 8000cd0:	3c01      	subs	r4, #1
 8000cd2:	e690      	b.n	80009f6 <__aeabi_dmul+0xde>
 8000cd4:	ea45 0e06 	orr.w	lr, r5, r6
 8000cd8:	e68d      	b.n	80009f6 <__aeabi_dmul+0xde>
 8000cda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000cde:	ea94 0f0c 	teq	r4, ip
 8000ce2:	bf08      	it	eq
 8000ce4:	ea95 0f0c 	teqeq	r5, ip
 8000ce8:	f43f af3b 	beq.w	8000b62 <__aeabi_dmul+0x24a>
 8000cec:	ea94 0f0c 	teq	r4, ip
 8000cf0:	d10a      	bne.n	8000d08 <__aeabi_ddiv+0x19c>
 8000cf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000cf6:	f47f af34 	bne.w	8000b62 <__aeabi_dmul+0x24a>
 8000cfa:	ea95 0f0c 	teq	r5, ip
 8000cfe:	f47f af25 	bne.w	8000b4c <__aeabi_dmul+0x234>
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	e72c      	b.n	8000b62 <__aeabi_dmul+0x24a>
 8000d08:	ea95 0f0c 	teq	r5, ip
 8000d0c:	d106      	bne.n	8000d1c <__aeabi_ddiv+0x1b0>
 8000d0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d12:	f43f aefd 	beq.w	8000b10 <__aeabi_dmul+0x1f8>
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	e722      	b.n	8000b62 <__aeabi_dmul+0x24a>
 8000d1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d20:	bf18      	it	ne
 8000d22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d26:	f47f aec5 	bne.w	8000ab4 <__aeabi_dmul+0x19c>
 8000d2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d2e:	f47f af0d 	bne.w	8000b4c <__aeabi_dmul+0x234>
 8000d32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d36:	f47f aeeb 	bne.w	8000b10 <__aeabi_dmul+0x1f8>
 8000d3a:	e712      	b.n	8000b62 <__aeabi_dmul+0x24a>

08000d3c <__gedf2>:
 8000d3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000d40:	e006      	b.n	8000d50 <__cmpdf2+0x4>
 8000d42:	bf00      	nop

08000d44 <__ledf2>:
 8000d44:	f04f 0c01 	mov.w	ip, #1
 8000d48:	e002      	b.n	8000d50 <__cmpdf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__cmpdf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d60:	bf18      	it	ne
 8000d62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d66:	d01b      	beq.n	8000da0 <__cmpdf2+0x54>
 8000d68:	b001      	add	sp, #4
 8000d6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d6e:	bf0c      	ite	eq
 8000d70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d74:	ea91 0f03 	teqne	r1, r3
 8000d78:	bf02      	ittt	eq
 8000d7a:	ea90 0f02 	teqeq	r0, r2
 8000d7e:	2000      	moveq	r0, #0
 8000d80:	4770      	bxeq	lr
 8000d82:	f110 0f00 	cmn.w	r0, #0
 8000d86:	ea91 0f03 	teq	r1, r3
 8000d8a:	bf58      	it	pl
 8000d8c:	4299      	cmppl	r1, r3
 8000d8e:	bf08      	it	eq
 8000d90:	4290      	cmpeq	r0, r2
 8000d92:	bf2c      	ite	cs
 8000d94:	17d8      	asrcs	r0, r3, #31
 8000d96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d9a:	f040 0001 	orr.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000da8:	d102      	bne.n	8000db0 <__cmpdf2+0x64>
 8000daa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dae:	d107      	bne.n	8000dc0 <__cmpdf2+0x74>
 8000db0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000db8:	d1d6      	bne.n	8000d68 <__cmpdf2+0x1c>
 8000dba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dbe:	d0d3      	beq.n	8000d68 <__cmpdf2+0x1c>
 8000dc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_cdrcmple>:
 8000dc8:	4684      	mov	ip, r0
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4662      	mov	r2, ip
 8000dce:	468c      	mov	ip, r1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4663      	mov	r3, ip
 8000dd4:	e000      	b.n	8000dd8 <__aeabi_cdcmpeq>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_cdcmpeq>:
 8000dd8:	b501      	push	{r0, lr}
 8000dda:	f7ff ffb7 	bl	8000d4c <__cmpdf2>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	bf48      	it	mi
 8000de2:	f110 0f00 	cmnmi.w	r0, #0
 8000de6:	bd01      	pop	{r0, pc}

08000de8 <__aeabi_dcmpeq>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff fff4 	bl	8000dd8 <__aeabi_cdcmpeq>
 8000df0:	bf0c      	ite	eq
 8000df2:	2001      	moveq	r0, #1
 8000df4:	2000      	movne	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_dcmplt>:
 8000dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e00:	f7ff ffea 	bl	8000dd8 <__aeabi_cdcmpeq>
 8000e04:	bf34      	ite	cc
 8000e06:	2001      	movcc	r0, #1
 8000e08:	2000      	movcs	r0, #0
 8000e0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0e:	bf00      	nop

08000e10 <__aeabi_dcmple>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff ffe0 	bl	8000dd8 <__aeabi_cdcmpeq>
 8000e18:	bf94      	ite	ls
 8000e1a:	2001      	movls	r0, #1
 8000e1c:	2000      	movhi	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_dcmpge>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffce 	bl	8000dc8 <__aeabi_cdrcmple>
 8000e2c:	bf94      	ite	ls
 8000e2e:	2001      	movls	r0, #1
 8000e30:	2000      	movhi	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_dcmpgt>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffc4 	bl	8000dc8 <__aeabi_cdrcmple>
 8000e40:	bf34      	ite	cc
 8000e42:	2001      	movcc	r0, #1
 8000e44:	2000      	movcs	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_d2iz>:
 8000e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e54:	d215      	bcs.n	8000e82 <__aeabi_d2iz+0x36>
 8000e56:	d511      	bpl.n	8000e7c <__aeabi_d2iz+0x30>
 8000e58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e60:	d912      	bls.n	8000e88 <__aeabi_d2iz+0x3c>
 8000e62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e72:	fa23 f002 	lsr.w	r0, r3, r2
 8000e76:	bf18      	it	ne
 8000e78:	4240      	negne	r0, r0
 8000e7a:	4770      	bx	lr
 8000e7c:	f04f 0000 	mov.w	r0, #0
 8000e80:	4770      	bx	lr
 8000e82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e86:	d105      	bne.n	8000e94 <__aeabi_d2iz+0x48>
 8000e88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e92:	4770      	bx	lr
 8000e94:	f04f 0000 	mov.w	r0, #0
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <__aeabi_d2uiz>:
 8000e9c:	004a      	lsls	r2, r1, #1
 8000e9e:	d211      	bcs.n	8000ec4 <__aeabi_d2uiz+0x28>
 8000ea0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ea4:	d211      	bcs.n	8000eca <__aeabi_d2uiz+0x2e>
 8000ea6:	d50d      	bpl.n	8000ec4 <__aeabi_d2uiz+0x28>
 8000ea8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000eac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000eb0:	d40e      	bmi.n	8000ed0 <__aeabi_d2uiz+0x34>
 8000eb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ebe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ec2:	4770      	bx	lr
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	4770      	bx	lr
 8000eca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ece:	d102      	bne.n	8000ed6 <__aeabi_d2uiz+0x3a>
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	4770      	bx	lr
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	4770      	bx	lr

08000edc <__aeabi_d2f>:
 8000edc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ee0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ee4:	bf24      	itt	cs
 8000ee6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000eea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000eee:	d90d      	bls.n	8000f0c <__aeabi_d2f+0x30>
 8000ef0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ef8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000efc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000f00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000f04:	bf08      	it	eq
 8000f06:	f020 0001 	biceq.w	r0, r0, #1
 8000f0a:	4770      	bx	lr
 8000f0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000f10:	d121      	bne.n	8000f56 <__aeabi_d2f+0x7a>
 8000f12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000f16:	bfbc      	itt	lt
 8000f18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000f1c:	4770      	bxlt	lr
 8000f1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f26:	f1c2 0218 	rsb	r2, r2, #24
 8000f2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000f2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f32:	fa20 f002 	lsr.w	r0, r0, r2
 8000f36:	bf18      	it	ne
 8000f38:	f040 0001 	orrne.w	r0, r0, #1
 8000f3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f48:	ea40 000c 	orr.w	r0, r0, ip
 8000f4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000f50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f54:	e7cc      	b.n	8000ef0 <__aeabi_d2f+0x14>
 8000f56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f5a:	d107      	bne.n	8000f6c <__aeabi_d2f+0x90>
 8000f5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f60:	bf1e      	ittt	ne
 8000f62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f6a:	4770      	bxne	lr
 8000f6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__aeabi_uldivmod>:
 8000f7c:	b953      	cbnz	r3, 8000f94 <__aeabi_uldivmod+0x18>
 8000f7e:	b94a      	cbnz	r2, 8000f94 <__aeabi_uldivmod+0x18>
 8000f80:	2900      	cmp	r1, #0
 8000f82:	bf08      	it	eq
 8000f84:	2800      	cmpeq	r0, #0
 8000f86:	bf1c      	itt	ne
 8000f88:	f04f 31ff 	movne.w	r1, #4294967295
 8000f8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f90:	f000 b974 	b.w	800127c <__aeabi_idiv0>
 8000f94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f9c:	f000 f806 	bl	8000fac <__udivmoddi4>
 8000fa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa8:	b004      	add	sp, #16
 8000faa:	4770      	bx	lr

08000fac <__udivmoddi4>:
 8000fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb0:	9d08      	ldr	r5, [sp, #32]
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	468e      	mov	lr, r1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d14d      	bne.n	8001056 <__udivmoddi4+0xaa>
 8000fba:	428a      	cmp	r2, r1
 8000fbc:	4694      	mov	ip, r2
 8000fbe:	d969      	bls.n	8001094 <__udivmoddi4+0xe8>
 8000fc0:	fab2 f282 	clz	r2, r2
 8000fc4:	b152      	cbz	r2, 8000fdc <__udivmoddi4+0x30>
 8000fc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000fca:	f1c2 0120 	rsb	r1, r2, #32
 8000fce:	fa20 f101 	lsr.w	r1, r0, r1
 8000fd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000fda:	4094      	lsls	r4, r2
 8000fdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fe0:	0c21      	lsrs	r1, r4, #16
 8000fe2:	fbbe f6f8 	udiv	r6, lr, r8
 8000fe6:	fa1f f78c 	uxth.w	r7, ip
 8000fea:	fb08 e316 	mls	r3, r8, r6, lr
 8000fee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ff2:	fb06 f107 	mul.w	r1, r6, r7
 8000ff6:	4299      	cmp	r1, r3
 8000ff8:	d90a      	bls.n	8001010 <__udivmoddi4+0x64>
 8000ffa:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffe:	f106 30ff 	add.w	r0, r6, #4294967295
 8001002:	f080 811f 	bcs.w	8001244 <__udivmoddi4+0x298>
 8001006:	4299      	cmp	r1, r3
 8001008:	f240 811c 	bls.w	8001244 <__udivmoddi4+0x298>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	1a5b      	subs	r3, r3, r1
 8001012:	b2a4      	uxth	r4, r4
 8001014:	fbb3 f0f8 	udiv	r0, r3, r8
 8001018:	fb08 3310 	mls	r3, r8, r0, r3
 800101c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001020:	fb00 f707 	mul.w	r7, r0, r7
 8001024:	42a7      	cmp	r7, r4
 8001026:	d90a      	bls.n	800103e <__udivmoddi4+0x92>
 8001028:	eb1c 0404 	adds.w	r4, ip, r4
 800102c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001030:	f080 810a 	bcs.w	8001248 <__udivmoddi4+0x29c>
 8001034:	42a7      	cmp	r7, r4
 8001036:	f240 8107 	bls.w	8001248 <__udivmoddi4+0x29c>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001042:	1be4      	subs	r4, r4, r7
 8001044:	2600      	movs	r6, #0
 8001046:	b11d      	cbz	r5, 8001050 <__udivmoddi4+0xa4>
 8001048:	40d4      	lsrs	r4, r2
 800104a:	2300      	movs	r3, #0
 800104c:	e9c5 4300 	strd	r4, r3, [r5]
 8001050:	4631      	mov	r1, r6
 8001052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001056:	428b      	cmp	r3, r1
 8001058:	d909      	bls.n	800106e <__udivmoddi4+0xc2>
 800105a:	2d00      	cmp	r5, #0
 800105c:	f000 80ef 	beq.w	800123e <__udivmoddi4+0x292>
 8001060:	2600      	movs	r6, #0
 8001062:	e9c5 0100 	strd	r0, r1, [r5]
 8001066:	4630      	mov	r0, r6
 8001068:	4631      	mov	r1, r6
 800106a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800106e:	fab3 f683 	clz	r6, r3
 8001072:	2e00      	cmp	r6, #0
 8001074:	d14a      	bne.n	800110c <__udivmoddi4+0x160>
 8001076:	428b      	cmp	r3, r1
 8001078:	d302      	bcc.n	8001080 <__udivmoddi4+0xd4>
 800107a:	4282      	cmp	r2, r0
 800107c:	f200 80f9 	bhi.w	8001272 <__udivmoddi4+0x2c6>
 8001080:	1a84      	subs	r4, r0, r2
 8001082:	eb61 0303 	sbc.w	r3, r1, r3
 8001086:	2001      	movs	r0, #1
 8001088:	469e      	mov	lr, r3
 800108a:	2d00      	cmp	r5, #0
 800108c:	d0e0      	beq.n	8001050 <__udivmoddi4+0xa4>
 800108e:	e9c5 4e00 	strd	r4, lr, [r5]
 8001092:	e7dd      	b.n	8001050 <__udivmoddi4+0xa4>
 8001094:	b902      	cbnz	r2, 8001098 <__udivmoddi4+0xec>
 8001096:	deff      	udf	#255	; 0xff
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	2a00      	cmp	r2, #0
 800109e:	f040 8092 	bne.w	80011c6 <__udivmoddi4+0x21a>
 80010a2:	eba1 010c 	sub.w	r1, r1, ip
 80010a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010aa:	fa1f fe8c 	uxth.w	lr, ip
 80010ae:	2601      	movs	r6, #1
 80010b0:	0c20      	lsrs	r0, r4, #16
 80010b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80010b6:	fb07 1113 	mls	r1, r7, r3, r1
 80010ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010be:	fb0e f003 	mul.w	r0, lr, r3
 80010c2:	4288      	cmp	r0, r1
 80010c4:	d908      	bls.n	80010d8 <__udivmoddi4+0x12c>
 80010c6:	eb1c 0101 	adds.w	r1, ip, r1
 80010ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80010ce:	d202      	bcs.n	80010d6 <__udivmoddi4+0x12a>
 80010d0:	4288      	cmp	r0, r1
 80010d2:	f200 80cb 	bhi.w	800126c <__udivmoddi4+0x2c0>
 80010d6:	4643      	mov	r3, r8
 80010d8:	1a09      	subs	r1, r1, r0
 80010da:	b2a4      	uxth	r4, r4
 80010dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80010e0:	fb07 1110 	mls	r1, r7, r0, r1
 80010e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010e8:	fb0e fe00 	mul.w	lr, lr, r0
 80010ec:	45a6      	cmp	lr, r4
 80010ee:	d908      	bls.n	8001102 <__udivmoddi4+0x156>
 80010f0:	eb1c 0404 	adds.w	r4, ip, r4
 80010f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80010f8:	d202      	bcs.n	8001100 <__udivmoddi4+0x154>
 80010fa:	45a6      	cmp	lr, r4
 80010fc:	f200 80bb 	bhi.w	8001276 <__udivmoddi4+0x2ca>
 8001100:	4608      	mov	r0, r1
 8001102:	eba4 040e 	sub.w	r4, r4, lr
 8001106:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800110a:	e79c      	b.n	8001046 <__udivmoddi4+0x9a>
 800110c:	f1c6 0720 	rsb	r7, r6, #32
 8001110:	40b3      	lsls	r3, r6
 8001112:	fa22 fc07 	lsr.w	ip, r2, r7
 8001116:	ea4c 0c03 	orr.w	ip, ip, r3
 800111a:	fa20 f407 	lsr.w	r4, r0, r7
 800111e:	fa01 f306 	lsl.w	r3, r1, r6
 8001122:	431c      	orrs	r4, r3
 8001124:	40f9      	lsrs	r1, r7
 8001126:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800112a:	fa00 f306 	lsl.w	r3, r0, r6
 800112e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001132:	0c20      	lsrs	r0, r4, #16
 8001134:	fa1f fe8c 	uxth.w	lr, ip
 8001138:	fb09 1118 	mls	r1, r9, r8, r1
 800113c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001140:	fb08 f00e 	mul.w	r0, r8, lr
 8001144:	4288      	cmp	r0, r1
 8001146:	fa02 f206 	lsl.w	r2, r2, r6
 800114a:	d90b      	bls.n	8001164 <__udivmoddi4+0x1b8>
 800114c:	eb1c 0101 	adds.w	r1, ip, r1
 8001150:	f108 3aff 	add.w	sl, r8, #4294967295
 8001154:	f080 8088 	bcs.w	8001268 <__udivmoddi4+0x2bc>
 8001158:	4288      	cmp	r0, r1
 800115a:	f240 8085 	bls.w	8001268 <__udivmoddi4+0x2bc>
 800115e:	f1a8 0802 	sub.w	r8, r8, #2
 8001162:	4461      	add	r1, ip
 8001164:	1a09      	subs	r1, r1, r0
 8001166:	b2a4      	uxth	r4, r4
 8001168:	fbb1 f0f9 	udiv	r0, r1, r9
 800116c:	fb09 1110 	mls	r1, r9, r0, r1
 8001170:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001174:	fb00 fe0e 	mul.w	lr, r0, lr
 8001178:	458e      	cmp	lr, r1
 800117a:	d908      	bls.n	800118e <__udivmoddi4+0x1e2>
 800117c:	eb1c 0101 	adds.w	r1, ip, r1
 8001180:	f100 34ff 	add.w	r4, r0, #4294967295
 8001184:	d26c      	bcs.n	8001260 <__udivmoddi4+0x2b4>
 8001186:	458e      	cmp	lr, r1
 8001188:	d96a      	bls.n	8001260 <__udivmoddi4+0x2b4>
 800118a:	3802      	subs	r0, #2
 800118c:	4461      	add	r1, ip
 800118e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001192:	fba0 9402 	umull	r9, r4, r0, r2
 8001196:	eba1 010e 	sub.w	r1, r1, lr
 800119a:	42a1      	cmp	r1, r4
 800119c:	46c8      	mov	r8, r9
 800119e:	46a6      	mov	lr, r4
 80011a0:	d356      	bcc.n	8001250 <__udivmoddi4+0x2a4>
 80011a2:	d053      	beq.n	800124c <__udivmoddi4+0x2a0>
 80011a4:	b15d      	cbz	r5, 80011be <__udivmoddi4+0x212>
 80011a6:	ebb3 0208 	subs.w	r2, r3, r8
 80011aa:	eb61 010e 	sbc.w	r1, r1, lr
 80011ae:	fa01 f707 	lsl.w	r7, r1, r7
 80011b2:	fa22 f306 	lsr.w	r3, r2, r6
 80011b6:	40f1      	lsrs	r1, r6
 80011b8:	431f      	orrs	r7, r3
 80011ba:	e9c5 7100 	strd	r7, r1, [r5]
 80011be:	2600      	movs	r6, #0
 80011c0:	4631      	mov	r1, r6
 80011c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c6:	f1c2 0320 	rsb	r3, r2, #32
 80011ca:	40d8      	lsrs	r0, r3
 80011cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d0:	fa21 f303 	lsr.w	r3, r1, r3
 80011d4:	4091      	lsls	r1, r2
 80011d6:	4301      	orrs	r1, r0
 80011d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011dc:	fa1f fe8c 	uxth.w	lr, ip
 80011e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80011e4:	fb07 3610 	mls	r6, r7, r0, r3
 80011e8:	0c0b      	lsrs	r3, r1, #16
 80011ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011ee:	fb00 f60e 	mul.w	r6, r0, lr
 80011f2:	429e      	cmp	r6, r3
 80011f4:	fa04 f402 	lsl.w	r4, r4, r2
 80011f8:	d908      	bls.n	800120c <__udivmoddi4+0x260>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8001202:	d22f      	bcs.n	8001264 <__udivmoddi4+0x2b8>
 8001204:	429e      	cmp	r6, r3
 8001206:	d92d      	bls.n	8001264 <__udivmoddi4+0x2b8>
 8001208:	3802      	subs	r0, #2
 800120a:	4463      	add	r3, ip
 800120c:	1b9b      	subs	r3, r3, r6
 800120e:	b289      	uxth	r1, r1
 8001210:	fbb3 f6f7 	udiv	r6, r3, r7
 8001214:	fb07 3316 	mls	r3, r7, r6, r3
 8001218:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800121c:	fb06 f30e 	mul.w	r3, r6, lr
 8001220:	428b      	cmp	r3, r1
 8001222:	d908      	bls.n	8001236 <__udivmoddi4+0x28a>
 8001224:	eb1c 0101 	adds.w	r1, ip, r1
 8001228:	f106 38ff 	add.w	r8, r6, #4294967295
 800122c:	d216      	bcs.n	800125c <__udivmoddi4+0x2b0>
 800122e:	428b      	cmp	r3, r1
 8001230:	d914      	bls.n	800125c <__udivmoddi4+0x2b0>
 8001232:	3e02      	subs	r6, #2
 8001234:	4461      	add	r1, ip
 8001236:	1ac9      	subs	r1, r1, r3
 8001238:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800123c:	e738      	b.n	80010b0 <__udivmoddi4+0x104>
 800123e:	462e      	mov	r6, r5
 8001240:	4628      	mov	r0, r5
 8001242:	e705      	b.n	8001050 <__udivmoddi4+0xa4>
 8001244:	4606      	mov	r6, r0
 8001246:	e6e3      	b.n	8001010 <__udivmoddi4+0x64>
 8001248:	4618      	mov	r0, r3
 800124a:	e6f8      	b.n	800103e <__udivmoddi4+0x92>
 800124c:	454b      	cmp	r3, r9
 800124e:	d2a9      	bcs.n	80011a4 <__udivmoddi4+0x1f8>
 8001250:	ebb9 0802 	subs.w	r8, r9, r2
 8001254:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001258:	3801      	subs	r0, #1
 800125a:	e7a3      	b.n	80011a4 <__udivmoddi4+0x1f8>
 800125c:	4646      	mov	r6, r8
 800125e:	e7ea      	b.n	8001236 <__udivmoddi4+0x28a>
 8001260:	4620      	mov	r0, r4
 8001262:	e794      	b.n	800118e <__udivmoddi4+0x1e2>
 8001264:	4640      	mov	r0, r8
 8001266:	e7d1      	b.n	800120c <__udivmoddi4+0x260>
 8001268:	46d0      	mov	r8, sl
 800126a:	e77b      	b.n	8001164 <__udivmoddi4+0x1b8>
 800126c:	3b02      	subs	r3, #2
 800126e:	4461      	add	r1, ip
 8001270:	e732      	b.n	80010d8 <__udivmoddi4+0x12c>
 8001272:	4630      	mov	r0, r6
 8001274:	e709      	b.n	800108a <__udivmoddi4+0xde>
 8001276:	4464      	add	r4, ip
 8001278:	3802      	subs	r0, #2
 800127a:	e742      	b.n	8001102 <__udivmoddi4+0x156>

0800127c <__aeabi_idiv0>:
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff f930 	bl	80004ee <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <Send_Uart+0x28>)
 800129a:	f006 f994 	bl	80075c6 <HAL_UART_Transmit>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200009f8 	.word	0x200009f8

080012ac <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80012b4:	2201      	movs	r2, #1
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <Mount_SD+0x38>)
 80012ba:	f009 fae7 	bl	800a88c <f_mount>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <Mount_SD+0x3c>)
 80012c4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <Mount_SD+0x3c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <Mount_SD+0x2a>
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <Mount_SD+0x40>)
 80012d0:	f7ff ffd6 	bl	8001280 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 80012d4:	e002      	b.n	80012dc <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <Mount_SD+0x44>)
 80012d8:	f7ff ffd2 	bl	8001280 <Send_Uart>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000bc 	.word	0x200000bc
 80012e8:	20000538 	.word	0x20000538
 80012ec:	0800fd08 	.word	0x0800fd08
 80012f0:	0800fd2c 	.word	0x0800fd2c

080012f4 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	2000      	movs	r0, #0
 8001302:	f009 fac3 	bl	800a88c <f_mount>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <Unmount_SD+0x38>)
 800130c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <Unmount_SD+0x38>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <Unmount_SD+0x2a>
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <Unmount_SD+0x3c>)
 8001318:	f7ff ffb2 	bl	8001280 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 800131c:	e002      	b.n	8001324 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <Unmount_SD+0x40>)
 8001320:	f7ff ffae 	bl	8001280 <Send_Uart>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000538 	.word	0x20000538
 8001330:	0800fd50 	.word	0x0800fd50
 8001334:	0800fd78 	.word	0x0800fd78

08001338 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 800133e:	2014      	movs	r0, #20
 8001340:	f00c fb6a 	bl	800da18 <pvPortMalloc>
 8001344:	6378      	str	r0, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <Format_SD+0xb4>)
 8001348:	4929      	ldr	r1, [pc, #164]	; (80013f0 <Format_SD+0xb8>)
 800134a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800134c:	f00c fd8e 	bl	800de6c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001354:	4618      	mov	r0, r3
 8001356:	f009 ff1e 	bl	800b196 <f_opendir>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <Format_SD+0xbc>)
 8001360:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <Format_SD+0xbc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d136      	bne.n	80013d8 <Format_SD+0xa0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4922      	ldr	r1, [pc, #136]	; (80013f8 <Format_SD+0xc0>)
 800136e:	4618      	mov	r0, r3
 8001370:	f009 ffb5 	bl	800b2de <f_readdir>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <Format_SD+0xbc>)
 800137a:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <Format_SD+0xbc>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d125      	bne.n	80013d0 <Format_SD+0x98>
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <Format_SD+0xc0>)
 8001386:	7a5b      	ldrb	r3, [r3, #9]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d021      	beq.n	80013d0 <Format_SD+0x98>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <Format_SD+0xc0>)
 800138e:	7a1b      	ldrb	r3, [r3, #8]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	d011      	beq.n	80013bc <Format_SD+0x84>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001398:	4918      	ldr	r1, [pc, #96]	; (80013fc <Format_SD+0xc4>)
 800139a:	4819      	ldr	r0, [pc, #100]	; (8001400 <Format_SD+0xc8>)
 800139c:	f7ff f89d 	bl	80004da <strcmp>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <Format_SD+0x94>
            	fresult = f_unlink(fno.fname);
 80013a6:	4815      	ldr	r0, [pc, #84]	; (80013fc <Format_SD+0xc4>)
 80013a8:	f00a f81c 	bl	800b3e4 <f_unlink>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <Format_SD+0xbc>)
 80013b2:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <Format_SD+0xbc>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b07      	cmp	r3, #7
 80013ba:	e7d6      	b.n	800136a <Format_SD+0x32>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80013bc:	480f      	ldr	r0, [pc, #60]	; (80013fc <Format_SD+0xc4>)
 80013be:	f00a f811 	bl	800b3e4 <f_unlink>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <Format_SD+0xbc>)
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e7ce      	b.n	800136a <Format_SD+0x32>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80013cc:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80013ce:	e7cc      	b.n	800136a <Format_SD+0x32>
            }
        }
        f_closedir(&dir);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f009 ff58 	bl	800b288 <f_closedir>
    }
    vPortFree(path);
 80013d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013da:	f00c fbe9 	bl	800dbb0 <vPortFree>
    return fresult;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <Format_SD+0xbc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3738      	adds	r7, #56	; 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0800fdcc 	.word	0x0800fdcc
 80013f0:	0800fd9c 	.word	0x0800fd9c
 80013f4:	20000538 	.word	0x20000538
 80013f8:	20000520 	.word	0x20000520
 80013fc:	20000529 	.word	0x20000529
 8001400:	0800fda0 	.word	0x0800fda0

08001404 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800140c:	4940      	ldr	r1, [pc, #256]	; (8001510 <Create_File+0x10c>)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f009 ffa8 	bl	800b364 <f_stat>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <Create_File+0x110>)
 800141a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <Create_File+0x110>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d111      	bne.n	8001448 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001424:	2064      	movs	r0, #100	; 0x64
 8001426:	f00c faf7 	bl	800da18 <pvPortMalloc>
 800142a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	493a      	ldr	r1, [pc, #232]	; (8001518 <Create_File+0x114>)
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f00c fd1b 	bl	800de6c <siprintf>
		Send_Uart(buf);
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff ff22 	bl	8001280 <Send_Uart>
		vPortFree(buf);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f00c fbb7 	bl	800dbb0 <vPortFree>
	    return fresult;
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <Create_File+0x110>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	e05f      	b.n	8001508 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001448:	220b      	movs	r2, #11
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4833      	ldr	r0, [pc, #204]	; (800151c <Create_File+0x118>)
 800144e:	f009 fa81 	bl	800a954 <f_open>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <Create_File+0x110>)
 8001458:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <Create_File+0x110>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d014      	beq.n	800148c <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f00c fad8 	bl	800da18 <pvPortMalloc>
 8001468:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <Create_File+0x110>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	492b      	ldr	r1, [pc, #172]	; (8001520 <Create_File+0x11c>)
 8001474:	6938      	ldr	r0, [r7, #16]
 8001476:	f00c fcf9 	bl	800de6c <siprintf>
			Send_Uart(buf);
 800147a:	6938      	ldr	r0, [r7, #16]
 800147c:	f7ff ff00 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 8001480:	6938      	ldr	r0, [r7, #16]
 8001482:	f00c fb95 	bl	800dbb0 <vPortFree>
		    return fresult;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <Create_File+0x110>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	e03d      	b.n	8001508 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800148c:	2064      	movs	r0, #100	; 0x64
 800148e:	f00c fac3 	bl	800da18 <pvPortMalloc>
 8001492:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4923      	ldr	r1, [pc, #140]	; (8001524 <Create_File+0x120>)
 8001498:	69f8      	ldr	r0, [r7, #28]
 800149a:	f00c fce7 	bl	800de6c <siprintf>
			Send_Uart(buf);
 800149e:	69f8      	ldr	r0, [r7, #28]
 80014a0:	f7ff feee 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 80014a4:	69f8      	ldr	r0, [r7, #28]
 80014a6:	f00c fb83 	bl	800dbb0 <vPortFree>
		}

		fresult = f_close(&fil);
 80014aa:	481c      	ldr	r0, [pc, #112]	; (800151c <Create_File+0x118>)
 80014ac:	f009 fe44 	bl	800b138 <f_close>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <Create_File+0x110>)
 80014b6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <Create_File+0x110>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d012      	beq.n	80014e6 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f00c faa9 	bl	800da18 <pvPortMalloc>
 80014c6:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <Create_File+0x110>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4915      	ldr	r1, [pc, #84]	; (8001528 <Create_File+0x124>)
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f00c fcca 	bl	800de6c <siprintf>
			Send_Uart(buf);
 80014d8:	6978      	ldr	r0, [r7, #20]
 80014da:	f7ff fed1 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f00c fb66 	bl	800dbb0 <vPortFree>
 80014e4:	e00e      	b.n	8001504 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014e6:	2064      	movs	r0, #100	; 0x64
 80014e8:	f00c fa96 	bl	800da18 <pvPortMalloc>
 80014ec:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	490e      	ldr	r1, [pc, #56]	; (800152c <Create_File+0x128>)
 80014f2:	69b8      	ldr	r0, [r7, #24]
 80014f4:	f00c fcba 	bl	800de6c <siprintf>
			Send_Uart(buf);
 80014f8:	69b8      	ldr	r0, [r7, #24]
 80014fa:	f7ff fec1 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 80014fe:	69b8      	ldr	r0, [r7, #24]
 8001500:	f00c fb56 	bl	800dbb0 <vPortFree>
		}
	}
    return fresult;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <Create_File+0x110>)
 8001506:	781b      	ldrb	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000520 	.word	0x20000520
 8001514:	20000538 	.word	0x20000538
 8001518:	0800ff48 	.word	0x0800ff48
 800151c:	200002f0 	.word	0x200002f0
 8001520:	0800ff80 	.word	0x0800ff80
 8001524:	0800ffa8 	.word	0x0800ffa8
 8001528:	0800ffe8 	.word	0x0800ffe8
 800152c:	0800ff28 	.word	0x0800ff28

08001530 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800153a:	4953      	ldr	r1, [pc, #332]	; (8001688 <Update_File+0x158>)
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f009 ff11 	bl	800b364 <f_stat>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <Update_File+0x15c>)
 8001548:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <Update_File+0x15c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d011      	beq.n	8001576 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f00c fa60 	bl	800da18 <pvPortMalloc>
 8001558:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	494c      	ldr	r1, [pc, #304]	; (8001690 <Update_File+0x160>)
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f00c fc84 	bl	800de6c <siprintf>
		Send_Uart (buf);
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f7ff fe8b 	bl	8001280 <Send_Uart>
		vPortFree(buf);
 800156a:	68b8      	ldr	r0, [r7, #8]
 800156c:	f00c fb20 	bl	800dbb0 <vPortFree>
	    return fresult;
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <Update_File+0x15c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	e083      	b.n	800167e <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001576:	2232      	movs	r2, #50	; 0x32
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4846      	ldr	r0, [pc, #280]	; (8001694 <Update_File+0x164>)
 800157c:	f009 f9ea 	bl	800a954 <f_open>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <Update_File+0x15c>)
 8001586:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <Update_File+0x15c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d014      	beq.n	80015ba <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001590:	2064      	movs	r0, #100	; 0x64
 8001592:	f00c fa41 	bl	800da18 <pvPortMalloc>
 8001596:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <Update_File+0x15c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	493d      	ldr	r1, [pc, #244]	; (8001698 <Update_File+0x168>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f00c fc62 	bl	800de6c <siprintf>
	    	Send_Uart(buf);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff fe69 	bl	8001280 <Send_Uart>
	        vPortFree(buf);
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f00c fafe 	bl	800dbb0 <vPortFree>
	        return fresult;
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <Update_File+0x15c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	e061      	b.n	800167e <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f7fe ff97 	bl	80004ee <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <Update_File+0x16c>)
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	4833      	ldr	r0, [pc, #204]	; (8001694 <Update_File+0x164>)
 80015c8:	f009 fb89 	bl	800acde <f_write>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b2e      	ldr	r3, [pc, #184]	; (800168c <Update_File+0x15c>)
 80015d2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <Update_File+0x15c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d012      	beq.n	8001602 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80015dc:	2064      	movs	r0, #100	; 0x64
 80015de:	f00c fa1b 	bl	800da18 <pvPortMalloc>
 80015e2:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <Update_File+0x15c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	492c      	ldr	r1, [pc, #176]	; (80016a0 <Update_File+0x170>)
 80015ee:	69b8      	ldr	r0, [r7, #24]
 80015f0:	f00c fc3c 	bl	800de6c <siprintf>
	    	Send_Uart(buf);
 80015f4:	69b8      	ldr	r0, [r7, #24]
 80015f6:	f7ff fe43 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 80015fa:	69b8      	ldr	r0, [r7, #24]
 80015fc:	f00c fad8 	bl	800dbb0 <vPortFree>
 8001600:	e00e      	b.n	8001620 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001602:	2064      	movs	r0, #100	; 0x64
 8001604:	f00c fa08 	bl	800da18 <pvPortMalloc>
 8001608:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4925      	ldr	r1, [pc, #148]	; (80016a4 <Update_File+0x174>)
 800160e:	69f8      	ldr	r0, [r7, #28]
 8001610:	f00c fc2c 	bl	800de6c <siprintf>
	    	Send_Uart(buf);
 8001614:	69f8      	ldr	r0, [r7, #28]
 8001616:	f7ff fe33 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 800161a:	69f8      	ldr	r0, [r7, #28]
 800161c:	f00c fac8 	bl	800dbb0 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001620:	481c      	ldr	r0, [pc, #112]	; (8001694 <Update_File+0x164>)
 8001622:	f009 fd89 	bl	800b138 <f_close>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <Update_File+0x15c>)
 800162c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <Update_File+0x15c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d012      	beq.n	800165c <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001636:	2064      	movs	r0, #100	; 0x64
 8001638:	f00c f9ee 	bl	800da18 <pvPortMalloc>
 800163c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <Update_File+0x15c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4918      	ldr	r1, [pc, #96]	; (80016a8 <Update_File+0x178>)
 8001648:	6938      	ldr	r0, [r7, #16]
 800164a:	f00c fc0f 	bl	800de6c <siprintf>
	    	Send_Uart(buf);
 800164e:	6938      	ldr	r0, [r7, #16]
 8001650:	f7ff fe16 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 8001654:	6938      	ldr	r0, [r7, #16]
 8001656:	f00c faab 	bl	800dbb0 <vPortFree>
 800165a:	e00e      	b.n	800167a <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800165c:	2064      	movs	r0, #100	; 0x64
 800165e:	f00c f9db 	bl	800da18 <pvPortMalloc>
 8001662:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4911      	ldr	r1, [pc, #68]	; (80016ac <Update_File+0x17c>)
 8001668:	6978      	ldr	r0, [r7, #20]
 800166a:	f00c fbff 	bl	800de6c <siprintf>
	    	Send_Uart(buf);
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff fe06 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 8001674:	6978      	ldr	r0, [r7, #20]
 8001676:	f00c fa9b 	bl	800dbb0 <vPortFree>
	     }
	}
    return fresult;
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <Update_File+0x15c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000520 	.word	0x20000520
 800168c:	20000538 	.word	0x20000538
 8001690:	0800fdd0 	.word	0x0800fdd0
 8001694:	200002f0 	.word	0x200002f0
 8001698:	0800fdf0 	.word	0x0800fdf0
 800169c:	2000053c 	.word	0x2000053c
 80016a0:	0801000c 	.word	0x0801000c
 80016a4:	08010034 	.word	0x08010034
 80016a8:	0800ff00 	.word	0x0800ff00
 80016ac:	0800ff28 	.word	0x0800ff28

080016b0 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ba:	4802      	ldr	r0, [pc, #8]	; (80016c4 <SELECT+0x14>)
 80016bc:	f003 ffd8 	bl	8005670 <HAL_GPIO_WritePin>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800

080016c8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d2:	4802      	ldr	r0, [pc, #8]	; (80016dc <DESELECT+0x14>)
 80016d4:	f003 ffcc 	bl	8005670 <HAL_GPIO_WritePin>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020800 	.word	0x40020800

080016e0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&SPI_HABDLE) != HAL_SPI_STATE_READY);
 80016ea:	bf00      	nop
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <SPI_TxByte+0x30>)
 80016ee:	f005 f95a 	bl	80069a6 <HAL_SPI_GetState>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d1f9      	bne.n	80016ec <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&SPI_HABDLE, &data, 1, SPI_TIMEOUT);
 80016f8:	1df9      	adds	r1, r7, #7
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	2201      	movs	r2, #1
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <SPI_TxByte+0x30>)
 8001702:	f004 fe72 	bl	80063ea <HAL_SPI_Transmit>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200008cc 	.word	0x200008cc

08001714 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800171a:	23ff      	movs	r3, #255	; 0xff
 800171c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&SPI_HABDLE) != HAL_SPI_STATE_READY));
 8001722:	bf00      	nop
 8001724:	4809      	ldr	r0, [pc, #36]	; (800174c <SPI_RxByte+0x38>)
 8001726:	f005 f93e 	bl	80069a6 <HAL_SPI_GetState>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d1f9      	bne.n	8001724 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&SPI_HABDLE, &dummy, &data, 1, SPI_TIMEOUT);
 8001730:	1dba      	adds	r2, r7, #6
 8001732:	1df9      	adds	r1, r7, #7
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <SPI_RxByte+0x38>)
 800173e:	f004 ff90 	bl	8006662 <HAL_SPI_TransmitReceive>
  
  return data;
 8001742:	79bb      	ldrb	r3, [r7, #6]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200008cc 	.word	0x200008cc

08001750 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001758:	f7ff ffdc 	bl	8001714 <SPI_RxByte>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	701a      	strb	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <SD_ReadyWait+0x34>)
 8001774:	2232      	movs	r2, #50	; 0x32
 8001776:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001778:	f7ff ffcc 	bl	8001714 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800177c:	f7ff ffca 	bl	8001714 <SPI_RxByte>
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d004      	beq.n	8001794 <SD_ReadyWait+0x28>
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SD_ReadyWait+0x34>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f3      	bne.n	800177c <SD_ReadyWait+0x10>
  
  return res;
 8001794:	79fb      	ldrb	r3, [r7, #7]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2000180e 	.word	0x2000180e

080017a4 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80017aa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80017ae:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80017b0:	f7ff ff8a 	bl	80016c8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e005      	b.n	80017c6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80017ba:	20ff      	movs	r0, #255	; 0xff
 80017bc:	f7ff ff90 	bl	80016e0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	3301      	adds	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	ddf6      	ble.n	80017ba <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80017cc:	f7ff ff70 	bl	80016b0 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80017d0:	2340      	movs	r3, #64	; 0x40
 80017d2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80017e4:	2395      	movs	r3, #149	; 0x95
 80017e6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e009      	b.n	8001802 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80017ee:	1d3a      	adds	r2, r7, #4
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff72 	bl	80016e0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b05      	cmp	r3, #5
 8001806:	ddf2      	ble.n	80017ee <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8001808:	e002      	b.n	8001810 <SD_PowerOn+0x6c>
  {
    Count--;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3b01      	subs	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001810:	f7ff ff80 	bl	8001714 <SPI_RxByte>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d002      	beq.n	8001820 <SD_PowerOn+0x7c>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f4      	bne.n	800180a <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001820:	f7ff ff52 	bl	80016c8 <DESELECT>
  SPI_TxByte(0XFF);
 8001824:	20ff      	movs	r0, #255	; 0xff
 8001826:	f7ff ff5b 	bl	80016e0 <SPI_TxByte>
  
  PowerFlag = 1;
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <SD_PowerOn+0x94>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000541 	.word	0x20000541

0800183c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <SD_PowerOff+0x14>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000541 	.word	0x20000541

08001854 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <SD_CheckPower+0x14>)
 800185a:	781b      	ldrb	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000541 	.word	0x20000541

0800186c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <SD_RxDataBlock+0x68>)
 8001878:	220a      	movs	r2, #10
 800187a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800187c:	f7ff ff4a 	bl	8001714 <SPI_RxByte>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d104      	bne.n	8001894 <SD_RxDataBlock+0x28>
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <SD_RxDataBlock+0x68>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f3      	bne.n	800187c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2bfe      	cmp	r3, #254	; 0xfe
 8001898:	d001      	beq.n	800189e <SD_RxDataBlock+0x32>
    return FALSE;
 800189a:	2300      	movs	r3, #0
 800189c:	e016      	b.n	80018cc <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff53 	bl	8001750 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff4d 	bl	8001750 <SPI_RxBytePtr>
  } while(btr -= 2);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3b02      	subs	r3, #2
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ed      	bne.n	800189e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80018c2:	f7ff ff27 	bl	8001714 <SPI_RxByte>
  SPI_RxByte();
 80018c6:	f7ff ff25 	bl	8001714 <SPI_RxByte>
  
  return TRUE;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	2000180d 	.word	0x2000180d

080018d8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80018e8:	f7ff ff40 	bl	800176c <SD_ReadyWait>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d001      	beq.n	80018f6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e040      	b.n	8001978 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fef1 	bl	80016e0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	2bfd      	cmp	r3, #253	; 0xfd
 8001902:	d031      	beq.n	8001968 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fee5 	bl	80016e0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fede 	bl	80016e0 <SPI_TxByte>
    } while (--wc);
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	3b01      	subs	r3, #1
 8001928:	73bb      	strb	r3, [r7, #14]
 800192a:	7bbb      	ldrb	r3, [r7, #14]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1eb      	bne.n	8001908 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001930:	f7ff fef0 	bl	8001714 <SPI_RxByte>
    SPI_RxByte();
 8001934:	f7ff feee 	bl	8001714 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001938:	e00b      	b.n	8001952 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800193a:	f7ff feeb 	bl	8001714 <SPI_RxByte>
 800193e:	4603      	mov	r3, r0
 8001940:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	2b05      	cmp	r3, #5
 800194a:	d006      	beq.n	800195a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800194c:	7b7b      	ldrb	r3, [r7, #13]
 800194e:	3301      	adds	r3, #1
 8001950:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001952:	7b7b      	ldrb	r3, [r7, #13]
 8001954:	2b40      	cmp	r3, #64	; 0x40
 8001956:	d9f0      	bls.n	800193a <SD_TxDataBlock+0x62>
 8001958:	e000      	b.n	800195c <SD_TxDataBlock+0x84>
        break;
 800195a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800195c:	bf00      	nop
 800195e:	f7ff fed9 	bl	8001714 <SPI_RxByte>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0fa      	beq.n	800195e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b05      	cmp	r3, #5
 8001970:	d101      	bne.n	8001976 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800198c:	f7ff feee 	bl	800176c <SD_ReadyWait>
 8001990:	4603      	mov	r3, r0
 8001992:	2bff      	cmp	r3, #255	; 0xff
 8001994:	d001      	beq.n	800199a <SD_SendCmd+0x1a>
    return 0xFF;
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	e040      	b.n	8001a1c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe9f 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	0e1b      	lsrs	r3, r3, #24
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe99 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe93 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe8d 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fe88 	bl	80016e0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d101      	bne.n	80019de <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80019da:	2395      	movs	r3, #149	; 0x95
 80019dc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b48      	cmp	r3, #72	; 0x48
 80019e2:	d101      	bne.n	80019e8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80019e4:	2387      	movs	r3, #135	; 0x87
 80019e6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fe78 	bl	80016e0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b4c      	cmp	r3, #76	; 0x4c
 80019f4:	d101      	bne.n	80019fa <SD_SendCmd+0x7a>
    SPI_RxByte();
 80019f6:	f7ff fe8d 	bl	8001714 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80019fa:	230a      	movs	r3, #10
 80019fc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80019fe:	f7ff fe89 	bl	8001714 <SPI_RxByte>
 8001a02:	4603      	mov	r3, r0
 8001a04:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001a06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da05      	bge.n	8001a1a <SD_SendCmd+0x9a>
 8001a0e:	7bbb      	ldrb	r3, [r7, #14]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	73bb      	strb	r3, [r7, #14]
 8001a14:	7bbb      	ldrb	r3, [r7, #14]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f1      	bne.n	80019fe <SD_SendCmd+0x7e>
  
  return res;
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d5      	b.n	8001be4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001a38:	4b6c      	ldr	r3, [pc, #432]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <SD_disk_initialize+0x2a>
    return Stat;        
 8001a46:	4b69      	ldr	r3, [pc, #420]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	e0ca      	b.n	8001be4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001a4e:	f7ff fea9 	bl	80017a4 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001a52:	f7ff fe2d 	bl	80016b0 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2040      	movs	r0, #64	; 0x40
 8001a5e:	f7ff ff8f 	bl	8001980 <SD_SendCmd>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 80a5 	bne.w	8001bb4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001a6c:	2264      	movs	r2, #100	; 0x64
 8001a6e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001a70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a74:	2048      	movs	r0, #72	; 0x48
 8001a76:	f7ff ff83 	bl	8001980 <SD_SendCmd>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d158      	bne.n	8001b32 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e00c      	b.n	8001aa0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a86:	7bfc      	ldrb	r4, [r7, #15]
 8001a88:	f7ff fe44 	bl	8001714 <SPI_RxByte>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f104 0310 	add.w	r3, r4, #16
 8001a94:	443b      	add	r3, r7
 8001a96:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d9ef      	bls.n	8001a86 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001aa6:	7abb      	ldrb	r3, [r7, #10]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f040 8083 	bne.w	8001bb4 <SD_disk_initialize+0x190>
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	2baa      	cmp	r3, #170	; 0xaa
 8001ab2:	d17f      	bne.n	8001bb4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2077      	movs	r0, #119	; 0x77
 8001ab8:	f7ff ff62 	bl	8001980 <SD_SendCmd>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d807      	bhi.n	8001ad2 <SD_disk_initialize+0xae>
 8001ac2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ac6:	2069      	movs	r0, #105	; 0x69
 8001ac8:	f7ff ff5a 	bl	8001980 <SD_SendCmd>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1eb      	bne.n	8001ab4 <SD_disk_initialize+0x90>
 8001adc:	e000      	b.n	8001ae0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001ade:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d064      	beq.n	8001bb4 <SD_disk_initialize+0x190>
 8001aea:	2100      	movs	r1, #0
 8001aec:	207a      	movs	r0, #122	; 0x7a
 8001aee:	f7ff ff47 	bl	8001980 <SD_SendCmd>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d15d      	bne.n	8001bb4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e00c      	b.n	8001b18 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001afe:	7bfc      	ldrb	r4, [r7, #15]
 8001b00:	f7ff fe08 	bl	8001714 <SPI_RxByte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	f104 0310 	add.w	r3, r4, #16
 8001b0c:	443b      	add	r3, r7
 8001b0e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	3301      	adds	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d9ef      	bls.n	8001afe <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001b1e:	7a3b      	ldrb	r3, [r7, #8]
 8001b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SD_disk_initialize+0x108>
 8001b28:	2306      	movs	r3, #6
 8001b2a:	e000      	b.n	8001b2e <SD_disk_initialize+0x10a>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	73bb      	strb	r3, [r7, #14]
 8001b30:	e040      	b.n	8001bb4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001b32:	2100      	movs	r1, #0
 8001b34:	2077      	movs	r0, #119	; 0x77
 8001b36:	f7ff ff23 	bl	8001980 <SD_SendCmd>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d808      	bhi.n	8001b52 <SD_disk_initialize+0x12e>
 8001b40:	2100      	movs	r1, #0
 8001b42:	2069      	movs	r0, #105	; 0x69
 8001b44:	f7ff ff1c 	bl	8001980 <SD_SendCmd>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d801      	bhi.n	8001b52 <SD_disk_initialize+0x12e>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e000      	b.n	8001b54 <SD_disk_initialize+0x130>
 8001b52:	2301      	movs	r3, #1
 8001b54:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d10e      	bne.n	8001b7a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2077      	movs	r0, #119	; 0x77
 8001b60:	f7ff ff0e 	bl	8001980 <SD_SendCmd>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d80e      	bhi.n	8001b88 <SD_disk_initialize+0x164>
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2069      	movs	r0, #105	; 0x69
 8001b6e:	f7ff ff07 	bl	8001980 <SD_SendCmd>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001b78:	e00d      	b.n	8001b96 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2041      	movs	r0, #65	; 0x41
 8001b7e:	f7ff feff 	bl	8001980 <SD_SendCmd>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e1      	bne.n	8001b56 <SD_disk_initialize+0x132>
 8001b92:	e000      	b.n	8001b96 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001b94:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <SD_disk_initialize+0x18c>
 8001ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba4:	2050      	movs	r0, #80	; 0x50
 8001ba6:	f7ff feeb 	bl	8001980 <SD_SendCmd>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <SD_disk_initialize+0x1d0>)
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001bba:	f7ff fd85 	bl	80016c8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001bbe:	f7ff fda9 	bl	8001714 <SPI_RxByte>
  
  if (type) 
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e001      	b.n	8001bde <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001bda:	f7ff fe2f 	bl	800183c <SD_PowerOff>
  }
  
  return Stat;
 8001bde:	4b03      	ldr	r3, [pc, #12]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	2000180d 	.word	0x2000180d
 8001bf4:	20000540 	.word	0x20000540

08001bf8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e002      	b.n	8001c12 <SD_disk_status+0x1a>
  
  return Stat;
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SD_disk_status+0x28>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <SD_disk_read+0x1c>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <SD_disk_read+0x20>
    return RES_PARERR;
 8001c40:	2304      	movs	r3, #4
 8001c42:	e051      	b.n	8001ce8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <SD_disk_read+0xcc>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e048      	b.n	8001ce8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001c56:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <SD_disk_read+0xd0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001c68:	f7ff fd22 	bl	80016b0 <SELECT>
  
  if (count == 1) 
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d111      	bne.n	8001c96 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	2051      	movs	r0, #81	; 0x51
 8001c76:	f7ff fe83 	bl	8001980 <SD_SendCmd>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d129      	bne.n	8001cd4 <SD_disk_read+0xb0>
 8001c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	f7ff fdf1 	bl	800186c <SD_RxDataBlock>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <SD_disk_read+0xb0>
      count = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	e01e      	b.n	8001cd4 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	2052      	movs	r0, #82	; 0x52
 8001c9a:	f7ff fe71 	bl	8001980 <SD_SendCmd>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d117      	bne.n	8001cd4 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca8:	68b8      	ldr	r0, [r7, #8]
 8001caa:	f7ff fddf 	bl	800186c <SD_RxDataBlock>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00a      	beq.n	8001cca <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cba:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ed      	bne.n	8001ca4 <SD_disk_read+0x80>
 8001cc8:	e000      	b.n	8001ccc <SD_disk_read+0xa8>
          break;
 8001cca:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001ccc:	2100      	movs	r1, #0
 8001cce:	204c      	movs	r0, #76	; 0x4c
 8001cd0:	f7ff fe56 	bl	8001980 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001cd4:	f7ff fcf8 	bl	80016c8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001cd8:	f7ff fd1c 	bl	8001714 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000540 	.word	0x20000540

08001cf8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <SD_disk_write+0x1c>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <SD_disk_write+0x20>
    return RES_PARERR;
 8001d14:	2304      	movs	r3, #4
 8001d16:	e06b      	b.n	8001df0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001d18:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <SD_disk_write+0x100>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e062      	b.n	8001df0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <SD_disk_write+0x100>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e059      	b.n	8001df0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <SD_disk_write+0x104>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	025b      	lsls	r3, r3, #9
 8001d4c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001d4e:	f7ff fcaf 	bl	80016b0 <SELECT>
  
  if (count == 1) 
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d110      	bne.n	8001d7a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	2058      	movs	r0, #88	; 0x58
 8001d5c:	f7ff fe10 	bl	8001980 <SD_SendCmd>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d13a      	bne.n	8001ddc <SD_disk_write+0xe4>
 8001d66:	21fe      	movs	r1, #254	; 0xfe
 8001d68:	68b8      	ldr	r0, [r7, #8]
 8001d6a:	f7ff fdb5 	bl	80018d8 <SD_TxDataBlock>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d033      	beq.n	8001ddc <SD_disk_write+0xe4>
      count = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	e030      	b.n	8001ddc <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <SD_disk_write+0x104>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d86:	2100      	movs	r1, #0
 8001d88:	2077      	movs	r0, #119	; 0x77
 8001d8a:	f7ff fdf9 	bl	8001980 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	2057      	movs	r0, #87	; 0x57
 8001d92:	f7ff fdf5 	bl	8001980 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	2059      	movs	r0, #89	; 0x59
 8001d9a:	f7ff fdf1 	bl	8001980 <SD_SendCmd>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11b      	bne.n	8001ddc <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001da4:	21fc      	movs	r1, #252	; 0xfc
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f7ff fd96 	bl	80018d8 <SD_TxDataBlock>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001db8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ee      	bne.n	8001da4 <SD_disk_write+0xac>
 8001dc6:	e000      	b.n	8001dca <SD_disk_write+0xd2>
          break;
 8001dc8:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001dca:	21fd      	movs	r1, #253	; 0xfd
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fd83 	bl	80018d8 <SD_TxDataBlock>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <SD_disk_write+0xe4>
      {        
        count = 1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001ddc:	f7ff fc74 	bl	80016c8 <DESELECT>
  SPI_RxByte();
 8001de0:	f7ff fc98 	bl	8001714 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000540 	.word	0x20000540

08001e00 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b08b      	sub	sp, #44	; 0x2c
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	603a      	str	r2, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e11b      	b.n	8002056 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d129      	bne.n	8001e7e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d017      	beq.n	8001e62 <SD_disk_ioctl+0x62>
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	dc1f      	bgt.n	8001e76 <SD_disk_ioctl+0x76>
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <SD_disk_ioctl+0x40>
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d00b      	beq.n	8001e56 <SD_disk_ioctl+0x56>
 8001e3e:	e01a      	b.n	8001e76 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001e40:	f7ff fd08 	bl	8001854 <SD_CheckPower>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001e4a:	f7ff fcf7 	bl	800183c <SD_PowerOff>
      res = RES_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e54:	e0fd      	b.n	8002052 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001e56:	f7ff fca5 	bl	80017a4 <SD_PowerOn>
      res = RES_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e60:	e0f7      	b.n	8002052 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	1c5c      	adds	r4, r3, #1
 8001e66:	f7ff fcf5 	bl	8001854 <SD_CheckPower>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e74:	e0ed      	b.n	8002052 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001e76:	2304      	movs	r3, #4
 8001e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e7c:	e0e9      	b.n	8002052 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001e7e:	4b78      	ldr	r3, [pc, #480]	; (8002060 <SD_disk_ioctl+0x260>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0e2      	b.n	8002056 <SD_disk_ioctl+0x256>
    
    SELECT();
 8001e90:	f7ff fc0e 	bl	80016b0 <SELECT>
    
    switch (ctrl) 
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	2b0d      	cmp	r3, #13
 8001e98:	f200 80cc 	bhi.w	8002034 <SD_disk_ioctl+0x234>
 8001e9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <SD_disk_ioctl+0xa4>)
 8001e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea2:	bf00      	nop
 8001ea4:	08001f9f 	.word	0x08001f9f
 8001ea8:	08001edd 	.word	0x08001edd
 8001eac:	08001f8f 	.word	0x08001f8f
 8001eb0:	08002035 	.word	0x08002035
 8001eb4:	08002035 	.word	0x08002035
 8001eb8:	08002035 	.word	0x08002035
 8001ebc:	08002035 	.word	0x08002035
 8001ec0:	08002035 	.word	0x08002035
 8001ec4:	08002035 	.word	0x08002035
 8001ec8:	08002035 	.word	0x08002035
 8001ecc:	08002035 	.word	0x08002035
 8001ed0:	08001fb1 	.word	0x08001fb1
 8001ed4:	08001fd5 	.word	0x08001fd5
 8001ed8:	08001ff9 	.word	0x08001ff9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001edc:	2100      	movs	r1, #0
 8001ede:	2049      	movs	r0, #73	; 0x49
 8001ee0:	f7ff fd4e 	bl	8001980 <SD_SendCmd>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 80a8 	bne.w	800203c <SD_disk_ioctl+0x23c>
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2110      	movs	r1, #16
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fcba 	bl	800186c <SD_RxDataBlock>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 809e 	beq.w	800203c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001f00:	7b3b      	ldrb	r3, [r7, #12]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10e      	bne.n	8001f28 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f0a:	7d7b      	ldrb	r3, [r7, #21]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	7d3b      	ldrb	r3, [r7, #20]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001f1e:	8bfb      	ldrh	r3, [r7, #30]
 8001f20:	029a      	lsls	r2, r3, #10
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e02e      	b.n	8001f86 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001f28:	7c7b      	ldrb	r3, [r7, #17]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	7dbb      	ldrb	r3, [r7, #22]
 8001f32:	09db      	lsrs	r3, r3, #7
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	7d7b      	ldrb	r3, [r7, #21]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 0306 	and.w	r3, r3, #6
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f50:	7d3b      	ldrb	r3, [r7, #20]
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	7cbb      	ldrb	r3, [r7, #18]
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f78:	8bfa      	ldrh	r2, [r7, #30]
 8001f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f7e:	3b09      	subs	r3, #9
 8001f80:	409a      	lsls	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001f8c:	e056      	b.n	800203c <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f94:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f9c:	e055      	b.n	800204a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001f9e:	f7ff fbe5 	bl	800176c <SD_ReadyWait>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2bff      	cmp	r3, #255	; 0xff
 8001fa6:	d14b      	bne.n	8002040 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fae:	e047      	b.n	8002040 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2049      	movs	r0, #73	; 0x49
 8001fb4:	f7ff fce4 	bl	8001980 <SD_SendCmd>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d142      	bne.n	8002044 <SD_disk_ioctl+0x244>
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	6a38      	ldr	r0, [r7, #32]
 8001fc2:	f7ff fc53 	bl	800186c <SD_RxDataBlock>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d03b      	beq.n	8002044 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fd2:	e037      	b.n	8002044 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	204a      	movs	r0, #74	; 0x4a
 8001fd8:	f7ff fcd2 	bl	8001980 <SD_SendCmd>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d132      	bne.n	8002048 <SD_disk_ioctl+0x248>
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	6a38      	ldr	r0, [r7, #32]
 8001fe6:	f7ff fc41 	bl	800186c <SD_RxDataBlock>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d02b      	beq.n	8002048 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ff6:	e027      	b.n	8002048 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	207a      	movs	r0, #122	; 0x7a
 8001ffc:	f7ff fcc0 	bl	8001980 <SD_SendCmd>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800200c:	e00b      	b.n	8002026 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800200e:	6a3c      	ldr	r4, [r7, #32]
 8002010:	1c63      	adds	r3, r4, #1
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	f7ff fb7e 	bl	8001714 <SPI_RxByte>
 8002018:	4603      	mov	r3, r0
 800201a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800201c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002020:	3301      	adds	r3, #1
 8002022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002026:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800202a:	2b03      	cmp	r3, #3
 800202c:	d9ef      	bls.n	800200e <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002034:	2304      	movs	r3, #4
 8002036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800203a:	e006      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 800203c:	bf00      	nop
 800203e:	e004      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 8002040:	bf00      	nop
 8002042:	e002      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 8002044:	bf00      	nop
 8002046:	e000      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 8002048:	bf00      	nop
    }
    
    DESELECT();
 800204a:	f7ff fb3d 	bl	80016c8 <DESELECT>
    SPI_RxByte();
 800204e:	f7ff fb61 	bl	8001714 <SPI_RxByte>
  }
  
  return res;
 8002052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002056:	4618      	mov	r0, r3
 8002058:	372c      	adds	r7, #44	; 0x2c
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000

08002064 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a07      	ldr	r2, [pc, #28]	; (8002090 <vApplicationGetIdleTaskMemory+0x2c>)
 8002074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <vApplicationGetIdleTaskMemory+0x30>)
 800207a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000544 	.word	0x20000544
 8002094:	20000598 	.word	0x20000598

08002098 <Critical_section_Uart>:
void LPT_task(void *argument);
void VLPT_task(void *argument);
void VVLPT_task(void *argument);

void Critical_section_Uart(int len,char *str)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	xSemaphoreTake(SimMutex,portMAX_DELAY);
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <Critical_section_Uart+0x44>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f04f 31ff 	mov.w	r1, #4294967295
 80020aa:	4618      	mov	r0, r3
 80020ac:	f009 ff7c 	bl	800bfa8 <xQueueSemaphoreTake>
	HAL_UART_Transmit_DMA(&huart4, (uint8_t *)str,len);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	4809      	ldr	r0, [pc, #36]	; (80020e0 <Critical_section_Uart+0x48>)
 80020ba:	f005 fb17 	bl	80076ec <HAL_UART_Transmit_DMA>
	HAL_Delay(1);
 80020be:	2001      	movs	r0, #1
 80020c0:	f001 fd68 	bl	8003b94 <HAL_Delay>
	xSemaphoreGive(SimMutex);
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <Critical_section_Uart+0x44>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	2300      	movs	r3, #0
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	f009 fddf 	bl	800bc90 <xQueueGenericSend>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000798 	.word	0x20000798
 80020e0:	200009b4 	.word	0x200009b4

080020e4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART4)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a7f      	ldr	r2, [pc, #508]	; (8002304 <HAL_UART_RxCpltCallback+0x20c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 80f6 	bne.w	80022f8 <HAL_UART_RxCpltCallback+0x200>
	{
		if(rx_buf[1]==0x31)
 800210c:	4b7e      	ldr	r3, [pc, #504]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b31      	cmp	r3, #49	; 0x31
 8002112:	d157      	bne.n	80021c4 <HAL_UART_RxCpltCallback+0xcc>
		{
			if(rx_buf[2]==0x02)
 8002114:	4b7c      	ldr	r3, [pc, #496]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d10b      	bne.n	8002134 <HAL_UART_RxCpltCallback+0x3c>
			{
				if(rx_buf[3]==0x01)stop_button=1;
 800211c:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 800211e:	78db      	ldrb	r3, [r3, #3]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d103      	bne.n	800212c <HAL_UART_RxCpltCallback+0x34>
 8002124:	4b79      	ldr	r3, [pc, #484]	; (800230c <HAL_UART_RxCpltCallback+0x214>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]
			{

			}
		}
	}
}
 800212a:	e0e5      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else stop_button=0;
 800212c:	4b77      	ldr	r3, [pc, #476]	; (800230c <HAL_UART_RxCpltCallback+0x214>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
}
 8002132:	e0e1      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x05)
 8002134:	4b74      	ldr	r3, [pc, #464]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 8002136:	789b      	ldrb	r3, [r3, #2]
 8002138:	2b05      	cmp	r3, #5
 800213a:	d111      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x68>
				time_scale_tune=time_scale*2;
 800213c:	4b74      	ldr	r3, [pc, #464]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4a74      	ldr	r2, [pc, #464]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 8002144:	6013      	str	r3, [r2, #0]
				if(time_scale_tune<128)time_scale=time_scale_tune;
 8002146:	4b73      	ldr	r3, [pc, #460]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b7f      	cmp	r3, #127	; 0x7f
 800214c:	dc04      	bgt.n	8002158 <HAL_UART_RxCpltCallback+0x60>
 800214e:	4b71      	ldr	r3, [pc, #452]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6f      	ldr	r2, [pc, #444]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 8002154:	6013      	str	r3, [r2, #0]
}
 8002156:	e0cf      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else time_scale=128;
 8002158:	4b6d      	ldr	r3, [pc, #436]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	601a      	str	r2, [r3, #0]
}
 800215e:	e0cb      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x06)
 8002160:	4b69      	ldr	r3, [pc, #420]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 8002162:	789b      	ldrb	r3, [r3, #2]
 8002164:	2b06      	cmp	r3, #6
 8002166:	d114      	bne.n	8002192 <HAL_UART_RxCpltCallback+0x9a>
				time_scale_tune=time_scale/2;
 8002168:	4b69      	ldr	r3, [pc, #420]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0fda      	lsrs	r2, r3, #31
 800216e:	4413      	add	r3, r2
 8002170:	105b      	asrs	r3, r3, #1
 8002172:	461a      	mov	r2, r3
 8002174:	4b67      	ldr	r3, [pc, #412]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 8002176:	601a      	str	r2, [r3, #0]
				if(time_scale_tune>1)time_scale=time_scale_tune;
 8002178:	4b66      	ldr	r3, [pc, #408]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	dd04      	ble.n	800218a <HAL_UART_RxCpltCallback+0x92>
 8002180:	4b64      	ldr	r3, [pc, #400]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a62      	ldr	r2, [pc, #392]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	e0b6      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else time_scale=1;
 800218a:	4b61      	ldr	r3, [pc, #388]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]
}
 8002190:	e0b2      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x0A)
 8002192:	4b5d      	ldr	r3, [pc, #372]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 8002194:	789b      	ldrb	r3, [r3, #2]
 8002196:	2b0a      	cmp	r3, #10
 8002198:	d10b      	bne.n	80021b2 <HAL_UART_RxCpltCallback+0xba>
				if(rx_buf[3]==0x01)FFT_button=1;
 800219a:	4b5b      	ldr	r3, [pc, #364]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 800219c:	78db      	ldrb	r3, [r3, #3]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d103      	bne.n	80021aa <HAL_UART_RxCpltCallback+0xb2>
 80021a2:	4b5d      	ldr	r3, [pc, #372]	; (8002318 <HAL_UART_RxCpltCallback+0x220>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	e0a6      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else FFT_button=0;
 80021aa:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <HAL_UART_RxCpltCallback+0x220>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	e0a2      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x08)
 80021b2:	4b55      	ldr	r3, [pc, #340]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 80021b4:	789b      	ldrb	r3, [r3, #2]
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	f040 809e 	bne.w	80022f8 <HAL_UART_RxCpltCallback+0x200>
				SD_flag=1;//let sd_falg=1,when write is done,reset flag=0;
 80021bc:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_UART_RxCpltCallback+0x224>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
}
 80021c2:	e099      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			if(rx_buf[2]==0x02)
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 80021c6:	789b      	ldrb	r3, [r3, #2]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d10b      	bne.n	80021e4 <HAL_UART_RxCpltCallback+0xec>
				if(rx_buf[3]==0x01)stop_button=1;
 80021cc:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 80021ce:	78db      	ldrb	r3, [r3, #3]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d103      	bne.n	80021dc <HAL_UART_RxCpltCallback+0xe4>
 80021d4:	4b4d      	ldr	r3, [pc, #308]	; (800230c <HAL_UART_RxCpltCallback+0x214>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]
}
 80021da:	e08d      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else stop_button=0;
 80021dc:	4b4b      	ldr	r3, [pc, #300]	; (800230c <HAL_UART_RxCpltCallback+0x214>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
}
 80021e2:	e089      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x05)
 80021e4:	4b48      	ldr	r3, [pc, #288]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 80021e6:	789b      	ldrb	r3, [r3, #2]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d111      	bne.n	8002210 <HAL_UART_RxCpltCallback+0x118>
				time_scale_tune=time_scale*2;
 80021ec:	4b48      	ldr	r3, [pc, #288]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 80021f4:	6013      	str	r3, [r2, #0]
				if(time_scale_tune<128)time_scale=time_scale_tune;
 80021f6:	4b47      	ldr	r3, [pc, #284]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b7f      	cmp	r3, #127	; 0x7f
 80021fc:	dc04      	bgt.n	8002208 <HAL_UART_RxCpltCallback+0x110>
 80021fe:	4b45      	ldr	r3, [pc, #276]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a43      	ldr	r2, [pc, #268]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 8002204:	6013      	str	r3, [r2, #0]
}
 8002206:	e077      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else time_scale=128;
 8002208:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 800220a:	2280      	movs	r2, #128	; 0x80
 800220c:	601a      	str	r2, [r3, #0]
}
 800220e:	e073      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x06)
 8002210:	4b3d      	ldr	r3, [pc, #244]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 8002212:	789b      	ldrb	r3, [r3, #2]
 8002214:	2b06      	cmp	r3, #6
 8002216:	d114      	bne.n	8002242 <HAL_UART_RxCpltCallback+0x14a>
				time_scale_tune=time_scale/2;
 8002218:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0fda      	lsrs	r2, r3, #31
 800221e:	4413      	add	r3, r2
 8002220:	105b      	asrs	r3, r3, #1
 8002222:	461a      	mov	r2, r3
 8002224:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 8002226:	601a      	str	r2, [r3, #0]
				if(time_scale_tune>1)time_scale=time_scale_tune;
 8002228:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	dd04      	ble.n	800223a <HAL_UART_RxCpltCallback+0x142>
 8002230:	4b38      	ldr	r3, [pc, #224]	; (8002314 <HAL_UART_RxCpltCallback+0x21c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a36      	ldr	r2, [pc, #216]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	e05e      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else time_scale=1;
 800223a:	4b35      	ldr	r3, [pc, #212]	; (8002310 <HAL_UART_RxCpltCallback+0x218>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	e05a      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x07)
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 8002244:	789b      	ldrb	r3, [r3, #2]
 8002246:	2b07      	cmp	r3, #7
 8002248:	d112      	bne.n	8002270 <HAL_UART_RxCpltCallback+0x178>
				mag_scale_tune=mag_scale*2;
 800224a:	4b35      	ldr	r3, [pc, #212]	; (8002320 <HAL_UART_RxCpltCallback+0x228>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b34      	ldr	r3, [pc, #208]	; (8002324 <HAL_UART_RxCpltCallback+0x22c>)
 8002254:	701a      	strb	r2, [r3, #0]
				if(mag_scale_tune<32)mag_scale=mag_scale_tune;
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_UART_RxCpltCallback+0x22c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b1f      	cmp	r3, #31
 800225c:	d804      	bhi.n	8002268 <HAL_UART_RxCpltCallback+0x170>
 800225e:	4b31      	ldr	r3, [pc, #196]	; (8002324 <HAL_UART_RxCpltCallback+0x22c>)
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	4b2f      	ldr	r3, [pc, #188]	; (8002320 <HAL_UART_RxCpltCallback+0x228>)
 8002264:	701a      	strb	r2, [r3, #0]
}
 8002266:	e047      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else mag_scale=32;
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <HAL_UART_RxCpltCallback+0x228>)
 800226a:	2220      	movs	r2, #32
 800226c:	701a      	strb	r2, [r3, #0]
}
 800226e:	e043      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x08)
 8002270:	4b25      	ldr	r3, [pc, #148]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 8002272:	789b      	ldrb	r3, [r3, #2]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d112      	bne.n	800229e <HAL_UART_RxCpltCallback+0x1a6>
				mag_scale_tune=mag_scale/2;
 8002278:	4b29      	ldr	r3, [pc, #164]	; (8002320 <HAL_UART_RxCpltCallback+0x228>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	085b      	lsrs	r3, r3, #1
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <HAL_UART_RxCpltCallback+0x22c>)
 8002282:	701a      	strb	r2, [r3, #0]
				if(mag_scale_tune>1)mag_scale=mag_scale_tune;
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_UART_RxCpltCallback+0x22c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d904      	bls.n	8002296 <HAL_UART_RxCpltCallback+0x19e>
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_UART_RxCpltCallback+0x22c>)
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	4b23      	ldr	r3, [pc, #140]	; (8002320 <HAL_UART_RxCpltCallback+0x228>)
 8002292:	701a      	strb	r2, [r3, #0]
}
 8002294:	e030      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else mag_scale=1;
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_UART_RxCpltCallback+0x228>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
}
 800229c:	e02c      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x09)
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 80022a0:	789b      	ldrb	r3, [r3, #2]
 80022a2:	2b09      	cmp	r3, #9
 80022a4:	d112      	bne.n	80022cc <HAL_UART_RxCpltCallback+0x1d4>
				scope_bias_tune=scope_bias_tune+5;
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <HAL_UART_RxCpltCallback+0x230>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	3305      	adds	r3, #5
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <HAL_UART_RxCpltCallback+0x230>)
 80022b0:	701a      	strb	r2, [r3, #0]
				if(scope_bias_tune<255)scope_bias=scope_bias_tune;
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_UART_RxCpltCallback+0x230>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2bff      	cmp	r3, #255	; 0xff
 80022b8:	d004      	beq.n	80022c4 <HAL_UART_RxCpltCallback+0x1cc>
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_UART_RxCpltCallback+0x230>)
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_UART_RxCpltCallback+0x234>)
 80022c0:	701a      	strb	r2, [r3, #0]
}
 80022c2:	e019      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else scope_bias=255;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_UART_RxCpltCallback+0x234>)
 80022c6:	22ff      	movs	r2, #255	; 0xff
 80022c8:	701a      	strb	r2, [r3, #0]
}
 80022ca:	e015      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
			else if(rx_buf[2]==0x0A)
 80022cc:	4b0e      	ldr	r3, [pc, #56]	; (8002308 <HAL_UART_RxCpltCallback+0x210>)
 80022ce:	789b      	ldrb	r3, [r3, #2]
 80022d0:	2b0a      	cmp	r3, #10
 80022d2:	d111      	bne.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				scope_bias_tune=scope_bias_tune-5;
 80022d4:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_UART_RxCpltCallback+0x230>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	3b05      	subs	r3, #5
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_UART_RxCpltCallback+0x230>)
 80022de:	701a      	strb	r2, [r3, #0]
				if(scope_bias_tune>0)scope_bias=scope_bias_tune;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_UART_RxCpltCallback+0x230>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d004      	beq.n	80022f2 <HAL_UART_RxCpltCallback+0x1fa>
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <HAL_UART_RxCpltCallback+0x230>)
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_UART_RxCpltCallback+0x234>)
 80022ee:	701a      	strb	r2, [r3, #0]
}
 80022f0:	e002      	b.n	80022f8 <HAL_UART_RxCpltCallback+0x200>
				else scope_bias=0;
 80022f2:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_UART_RxCpltCallback+0x234>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40004c00 	.word	0x40004c00
 8002308:	20000b6c 	.word	0x20000b6c
 800230c:	20000b5c 	.word	0x20000b5c
 8002310:	20000008 	.word	0x20000008
 8002314:	20000004 	.word	0x20000004
 8002318:	20000b60 	.word	0x20000b60
 800231c:	20000b64 	.word	0x20000b64
 8002320:	2000000d 	.word	0x2000000d
 8002324:	2000000c 	.word	0x2000000c
 8002328:	20000b68 	.word	0x20000b68
 800232c:	20000b69 	.word	0x20000b69

08002330 <get_sinval>:
//-------------sin waveform generate-----------------//
//---------------------------------------------------//
uint32_t sin_val[100];//for saving sin waveform sample data

void get_sinval ()
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
	for(int i=0;i<100;i++)
 8002336:	2300      	movs	r3, #0
 8002338:	607b      	str	r3, [r7, #4]
 800233a:	e03a      	b.n	80023b2 <get_sinval+0x82>
	{
		sin_val[i]=(sin(i*2*PI*1/100)*(4096/2)+2048);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fa7f 	bl	8000844 <__aeabi_i2d>
 8002346:	a323      	add	r3, pc, #140	; (adr r3, 80023d4 <get_sinval+0xa4>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f7fe fae4 	bl	8000918 <__aeabi_dmul>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4610      	mov	r0, r2
 8002356:	4619      	mov	r1, r3
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <get_sinval+0x98>)
 800235e:	f7fe fc05 	bl	8000b6c <__aeabi_ddiv>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	ec43 2b17 	vmov	d7, r2, r3
 800236a:	eeb0 0a47 	vmov.f32	s0, s14
 800236e:	eef0 0a67 	vmov.f32	s1, s15
 8002372:	f00c f9dd 	bl	800e730 <sin>
 8002376:	ec51 0b10 	vmov	r0, r1, d0
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <get_sinval+0x9c>)
 8002380:	f7fe faca 	bl	8000918 <__aeabi_dmul>
 8002384:	4602      	mov	r2, r0
 8002386:	460b      	mov	r3, r1
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <get_sinval+0x9c>)
 8002392:	f7fe f90b 	bl	80005ac <__adddf3>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4610      	mov	r0, r2
 800239c:	4619      	mov	r1, r3
 800239e:	f7fe fd7d 	bl	8000e9c <__aeabi_d2uiz>
 80023a2:	4602      	mov	r2, r0
 80023a4:	490a      	ldr	r1, [pc, #40]	; (80023d0 <get_sinval+0xa0>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<100;i++)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3301      	adds	r3, #1
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b63      	cmp	r3, #99	; 0x63
 80023b6:	ddc1      	ble.n	800233c <get_sinval+0xc>
	}
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	f3af 8000 	nop.w
 80023c8:	40590000 	.word	0x40590000
 80023cc:	40a00000 	.word	0x40a00000
 80023d0:	20000fe0 	.word	0x20000fe0
 80023d4:	fc8b007a 	.word	0xfc8b007a
 80023d8:	400921fa 	.word	0x400921fa

080023dc <PowerMag>:
* 形 参：_usFFTPoints FFT点数
* 返 回 值: 无
*********************************************************************************************************
*/
void PowerMag(uint16_t _usFFTPoints)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	80fb      	strh	r3, [r7, #6]
	int16_t lX,lY;
	uint16_t i;
	float32_t mag;
	/* 计算幅值 */
	for (i=0; i < _usFFTPoints; i++)
 80023e6:	2300      	movs	r3, #0
 80023e8:	83fb      	strh	r3, [r7, #30]
 80023ea:	e045      	b.n	8002478 <PowerMag+0x9c>
	{
	lX= (output[i]<<16)>>16; /* 实部*/
 80023ec:	8bfb      	ldrh	r3, [r7, #30]
 80023ee:	4a29      	ldr	r2, [pc, #164]	; (8002494 <PowerMag+0xb8>)
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	83bb      	strh	r3, [r7, #28]
	lY= (output[i]>> 16); /* 虚部 */
 80023f6:	8bfb      	ldrh	r3, [r7, #30]
 80023f8:	4a26      	ldr	r2, [pc, #152]	; (8002494 <PowerMag+0xb8>)
 80023fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fe:	0c1b      	lsrs	r3, r3, #16
 8002400:	837b      	strh	r3, [r7, #26]
	arm_sqrt_f32((float32_t)(lX*lX+ lY*lY), &mag); /* 求模 */
 8002402:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002406:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800240a:	fb03 f202 	mul.w	r2, r3, r2
 800240e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002412:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	ee07 3a90 	vmov	s15, r3
 8002420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002424:	edc7 7a05 	vstr	s15, [r7, #20]
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800242e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002432:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243a:	db09      	blt.n	8002450 <PowerMag+0x74>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800243c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002440:	f00c f9d0 	bl	800e7e4 <sqrtf>
 8002444:	eef0 7a40 	vmov.f32	s15, s0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800244e:	e004      	b.n	800245a <PowerMag+0x7e>
    }
    else
    {
      *pOut = 0.0f;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002458:	bf00      	nop
	Mag[i]= mag*2; /* 求模后乘以2才是实际模值，直流分量不需要乘2 */
 800245a:	edd7 7a03 	vldr	s15, [r7, #12]
 800245e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002462:	8bfb      	ldrh	r3, [r7, #30]
 8002464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002468:	ee17 1a90 	vmov	r1, s15
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <PowerMag+0xbc>)
 800246e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0; i < _usFFTPoints; i++)
 8002472:	8bfb      	ldrh	r3, [r7, #30]
 8002474:	3301      	adds	r3, #1
 8002476:	83fb      	strh	r3, [r7, #30]
 8002478:	8bfa      	ldrh	r2, [r7, #30]
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	429a      	cmp	r2, r3
 800247e:	d3b5      	bcc.n	80023ec <PowerMag+0x10>
	}

	/* 由于上面多乘了2，所以这里直流分量要除以2 */
	Mag[0] = Mag[0]>>1;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <PowerMag+0xbc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	4a04      	ldr	r2, [pc, #16]	; (8002498 <PowerMag+0xbc>)
 8002488:	6013      	str	r3, [r2, #0]
}
 800248a:	bf00      	nop
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	20001288 	.word	0x20001288
 8002498:	20001388 	.word	0x20001388
 800249c:	00000000 	.word	0x00000000

080024a0 <Power_Phase_Radians>:
* 形 参：_usFFTPoints FFT点数， uiCmpValue 阀值
* 返 回 值: 无
*********************************************************************************************************
*/
void Power_Phase_Radians(uint16_t _usFFTPoints, uint32_t _uiCmpValue)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	6039      	str	r1, [r7, #0]
 80024aa:	80fb      	strh	r3, [r7, #6]
	int16_t lX, lY;
	uint16_t i;
	float32_t phase;
	float32_t mag;
	for (i=0; i <_usFFTPoints; i++)
 80024ac:	2300      	movs	r3, #0
 80024ae:	83fb      	strh	r3, [r7, #30]
 80024b0:	e084      	b.n	80025bc <Power_Phase_Radians+0x11c>
	{
		lX= (output[i]<<16)>>16; /* 实部 */
 80024b2:	8bfb      	ldrh	r3, [r7, #30]
 80024b4:	4a48      	ldr	r2, [pc, #288]	; (80025d8 <Power_Phase_Radians+0x138>)
 80024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ba:	83bb      	strh	r3, [r7, #28]
		lY= (output[i] >> 16); /* 虚部 */
 80024bc:	8bfb      	ldrh	r3, [r7, #30]
 80024be:	4a46      	ldr	r2, [pc, #280]	; (80025d8 <Power_Phase_Radians+0x138>)
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	837b      	strh	r3, [r7, #26]
		phase = atan2(lY, lX); /* atan2求解的结果范围是(-pi, pi], 弧度制 */
 80024c8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f9b9 	bl	8000844 <__aeabi_i2d>
 80024d2:	4604      	mov	r4, r0
 80024d4:	460d      	mov	r5, r1
 80024d6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f9b2 	bl	8000844 <__aeabi_i2d>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	ec43 2b11 	vmov	d1, r2, r3
 80024e8:	ec45 4b10 	vmov	d0, r4, r5
 80024ec:	f00c f978 	bl	800e7e0 <atan2>
 80024f0:	ec53 2b10 	vmov	r2, r3, d0
 80024f4:	4610      	mov	r0, r2
 80024f6:	4619      	mov	r1, r3
 80024f8:	f7fe fcf0 	bl	8000edc <__aeabi_d2f>
 80024fc:	4603      	mov	r3, r0
 80024fe:	617b      	str	r3, [r7, #20]
		arm_sqrt_f32((float32_t)(lX*lX+ lY*lY), &mag); /* 求模 */
 8002500:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002504:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002508:	fb03 f202 	mul.w	r2, r3, r2
 800250c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002510:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8002514:	fb01 f303 	mul.w	r3, r1, r3
 8002518:	4413      	add	r3, r2
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002522:	edc7 7a04 	vstr	s15, [r7, #16]
 8002526:	f107 0308 	add.w	r3, r7, #8
 800252a:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 800252c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	db09      	blt.n	800254e <Power_Phase_Radians+0xae>
      *pOut = __builtin_sqrtf(in);
 800253a:	ed97 0a04 	vldr	s0, [r7, #16]
 800253e:	f00c f951 	bl	800e7e4 <sqrtf>
 8002542:	eef0 7a40 	vmov.f32	s15, s0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800254c:	e004      	b.n	8002558 <Power_Phase_Radians+0xb8>
      *pOut = 0.0f;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8002556:	bf00      	nop
		if(_uiCmpValue > mag)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002562:	edd7 7a02 	vldr	s15, [r7, #8]
 8002566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	dd07      	ble.n	8002580 <Power_Phase_Radians+0xe0>
		{
			Phase[i] = 0;
 8002570:	8bfb      	ldrh	r3, [r7, #30]
 8002572:	4a1a      	ldr	r2, [pc, #104]	; (80025dc <Power_Phase_Radians+0x13c>)
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	e01a      	b.n	80025b6 <Power_Phase_Radians+0x116>
		}
		else
		{
			Phase[i] = phase* 180.0f/PI; /* 将求解的结果由弧度转换为角度 */
 8002580:	edd7 7a05 	vldr	s15, [r7, #20]
 8002584:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80025e0 <Power_Phase_Radians+0x140>
 8002588:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258c:	ee17 0a90 	vmov	r0, s15
 8002590:	f7fe f96a 	bl	8000868 <__aeabi_f2d>
 8002594:	a30e      	add	r3, pc, #56	; (adr r3, 80025d0 <Power_Phase_Radians+0x130>)
 8002596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259a:	f7fe fae7 	bl	8000b6c <__aeabi_ddiv>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	8bfc      	ldrh	r4, [r7, #30]
 80025a4:	4610      	mov	r0, r2
 80025a6:	4619      	mov	r1, r3
 80025a8:	f7fe fc98 	bl	8000edc <__aeabi_d2f>
 80025ac:	4602      	mov	r2, r0
 80025ae:	490b      	ldr	r1, [pc, #44]	; (80025dc <Power_Phase_Radians+0x13c>)
 80025b0:	00a3      	lsls	r3, r4, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	601a      	str	r2, [r3, #0]
	for (i=0; i <_usFFTPoints; i++)
 80025b6:	8bfb      	ldrh	r3, [r7, #30]
 80025b8:	3301      	adds	r3, #1
 80025ba:	83fb      	strh	r3, [r7, #30]
 80025bc:	8bfa      	ldrh	r2, [r7, #30]
 80025be:	88fb      	ldrh	r3, [r7, #6]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	f4ff af76 	bcc.w	80024b2 <Power_Phase_Radians+0x12>
		}
	}
}
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bdb0      	pop	{r4, r5, r7, pc}
 80025d0:	fc8b007a 	.word	0xfc8b007a
 80025d4:	400921fa 	.word	0x400921fa
 80025d8:	20001288 	.word	0x20001288
 80025dc:	20001488 	.word	0x20001488
 80025e0:	43340000 	.word	0x43340000

080025e4 <DSP_FFTPhase>:
* 形 参：无
* 返 回 值: 无
*********************************************************************************************************
*/
void DSP_FFTPhase(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	/* 计算64点FFT
	 output：输出结果，高16位是虚部，低16位是实部。
	 input ：输入数据，高16位是虚部，低16位是实部。
	 第三个参数必须是64。
	*/
	cr4_fft_64_stm32(output, input, 64);
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	4906      	ldr	r1, [pc, #24]	; (8002604 <DSP_FFTPhase+0x20>)
 80025ec:	4806      	ldr	r0, [pc, #24]	; (8002608 <DSP_FFTPhase+0x24>)
 80025ee:	f7fd fe0f 	bl	8000210 <cr4_fft_64_stm32>
	/* 求幅值 */
	PowerMag(FFT_length);
 80025f2:	2040      	movs	r0, #64	; 0x40
 80025f4:	f7ff fef2 	bl	80023dc <PowerMag>

	Power_Phase_Radians(FFT_length, 100);
 80025f8:	2164      	movs	r1, #100	; 0x64
 80025fa:	2040      	movs	r0, #64	; 0x40
 80025fc:	f7ff ff50 	bl	80024a0 <Power_Phase_Radians>
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20001188 	.word	0x20001188
 8002608:	20001288 	.word	0x20001288

0800260c <buffer_value_set>:
int sd_buf[64];//store adc data,for save to SD card
int sd_store_counter=0;
int write_counter=0;

void buffer_value_set()
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
	for(int i=0;i<64;i++)
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	e007      	b.n	8002628 <buffer_value_set+0x1c>
	{
		buf_val[i]=i;
 8002618:	4908      	ldr	r1, [pc, #32]	; (800263c <buffer_value_set+0x30>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<64;i++)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3301      	adds	r3, #1
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b3f      	cmp	r3, #63	; 0x3f
 800262c:	ddf4      	ble.n	8002618 <buffer_value_set+0xc>
	}
}
 800262e:	bf00      	nop
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	200015bc 	.word	0x200015bc

08002640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002646:	f001 fa63 	bl	8003b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800264a:	f000 f8b5 	bl	80027b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800264e:	f000 fb0b 	bl	8002c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8002652:	f000 fabb 	bl	8002bcc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002656:	f000 fa8f 	bl	8002b78 <MX_USART2_UART_Init>
  MX_UART4_Init();
 800265a:	f000 fa63 	bl	8002b24 <MX_UART4_Init>
  MX_DAC_Init();
 800265e:	f000 f969 	bl	8002934 <MX_DAC_Init>
  MX_ADC1_Init();
 8002662:	f000 f915 	bl	8002890 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002666:	f000 f9c5 	bl	80029f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800266a:	f000 fa0f 	bl	8002a8c <MX_TIM3_Init>
  MX_SPI3_Init();
 800266e:	f000 f98b 	bl	8002988 <MX_SPI3_Init>
  MX_FATFS_Init();
 8002672:	f006 fa37 	bl	8008ae4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  //SD card setup//
  buffer_value_set();
 8002676:	f7ff ffc9 	bl	800260c <buffer_value_set>


  Mount_SD("/");
 800267a:	4834      	ldr	r0, [pc, #208]	; (800274c <main+0x10c>)
 800267c:	f7fe fe16 	bl	80012ac <Mount_SD>
  Format_SD();
 8002680:	f7fe fe5a 	bl	8001338 <Format_SD>
  Create_File("TEST.TXT");
 8002684:	4832      	ldr	r0, [pc, #200]	; (8002750 <main+0x110>)
 8002686:	f7fe febd 	bl	8001404 <Create_File>
  Unmount_SD("/");
 800268a:	4830      	ldr	r0, [pc, #192]	; (800274c <main+0x10c>)
 800268c:	f7fe fe32 	bl	80012f4 <Unmount_SD>




  //DAC setup//
  HAL_TIM_Base_Start(&htim2);
 8002690:	4830      	ldr	r0, [pc, #192]	; (8002754 <main+0x114>)
 8002692:	f004 fab1 	bl	8006bf8 <HAL_TIM_Base_Start>
  get_sinval();
 8002696:	f7ff fe4b 	bl	8002330 <get_sinval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 800269a:	2300      	movs	r3, #0
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2364      	movs	r3, #100	; 0x64
 80026a0:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <main+0x118>)
 80026a2:	2100      	movs	r1, #0
 80026a4:	482d      	ldr	r0, [pc, #180]	; (800275c <main+0x11c>)
 80026a6:	f002 f887 	bl	80047b8 <HAL_DAC_Start_DMA>
  //ADC_DMA_setup//
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc_dma,1);
 80026aa:	2201      	movs	r2, #1
 80026ac:	492c      	ldr	r1, [pc, #176]	; (8002760 <main+0x120>)
 80026ae:	482d      	ldr	r0, [pc, #180]	; (8002764 <main+0x124>)
 80026b0:	f001 fbaa 	bl	8003e08 <HAL_ADC_Start_DMA>

  //TIM3 interrupt setup//
  HAL_TIM_Base_Start_IT(&htim3);
 80026b4:	482c      	ldr	r0, [pc, #176]	; (8002768 <main+0x128>)
 80026b6:	f004 fb07 	bl	8006cc8 <HAL_TIM_Base_Start_IT>

  //Start Receive IT//
  HAL_UART_Receive_DMA(&huart4, rx_buf, 5);
 80026ba:	2205      	movs	r2, #5
 80026bc:	492b      	ldr	r1, [pc, #172]	; (800276c <main+0x12c>)
 80026be:	482c      	ldr	r0, [pc, #176]	; (8002770 <main+0x130>)
 80026c0:	f005 f892 	bl	80077e8 <HAL_UART_Receive_DMA>



  //create mutex//
  SimMutex = xSemaphoreCreateMutex();
 80026c4:	2001      	movs	r0, #1
 80026c6:	f009 faca 	bl	800bc5e <xQueueCreateMutex>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a29      	ldr	r2, [pc, #164]	; (8002774 <main+0x134>)
 80026ce:	6013      	str	r3, [r2, #0]
  if(SimMutex!=NULL)mutex_flag=1;
 80026d0:	4b28      	ldr	r3, [pc, #160]	; (8002774 <main+0x134>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <main+0x9e>
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <main+0x138>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]

  //create task//
  xTaskCreate(HPT_task,"HPT",128,NULL,5,&HPT_handler);
 80026de:	4b27      	ldr	r3, [pc, #156]	; (800277c <main+0x13c>)
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	2305      	movs	r3, #5
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	2300      	movs	r3, #0
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	4925      	ldr	r1, [pc, #148]	; (8002780 <main+0x140>)
 80026ec:	4825      	ldr	r0, [pc, #148]	; (8002784 <main+0x144>)
 80026ee:	f009 ffba 	bl	800c666 <xTaskCreate>
  xTaskCreate(MPT_task,"MPT",128,NULL,4,&MPT_handler);
 80026f2:	4b25      	ldr	r3, [pc, #148]	; (8002788 <main+0x148>)
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	2304      	movs	r3, #4
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	2300      	movs	r3, #0
 80026fc:	2280      	movs	r2, #128	; 0x80
 80026fe:	4923      	ldr	r1, [pc, #140]	; (800278c <main+0x14c>)
 8002700:	4823      	ldr	r0, [pc, #140]	; (8002790 <main+0x150>)
 8002702:	f009 ffb0 	bl	800c666 <xTaskCreate>
  xTaskCreate(LPT_task,"LPT",128,NULL,3,&LPT_handler);
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <main+0x154>)
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	2303      	movs	r3, #3
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2300      	movs	r3, #0
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	4921      	ldr	r1, [pc, #132]	; (8002798 <main+0x158>)
 8002714:	4821      	ldr	r0, [pc, #132]	; (800279c <main+0x15c>)
 8002716:	f009 ffa6 	bl	800c666 <xTaskCreate>
  xTaskCreate(VLPT_task,"VLPT",128,NULL,2,&VLPT_handler);
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <main+0x160>)
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	2302      	movs	r3, #2
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	2300      	movs	r3, #0
 8002724:	2280      	movs	r2, #128	; 0x80
 8002726:	491f      	ldr	r1, [pc, #124]	; (80027a4 <main+0x164>)
 8002728:	481f      	ldr	r0, [pc, #124]	; (80027a8 <main+0x168>)
 800272a:	f009 ff9c 	bl	800c666 <xTaskCreate>
  xTaskCreate(VVLPT_task,"VVLPT",256,NULL,1,&VVLPT_handler);
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <main+0x16c>)
 8002730:	9301      	str	r3, [sp, #4]
 8002732:	2301      	movs	r3, #1
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	2300      	movs	r3, #0
 8002738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800273c:	491c      	ldr	r1, [pc, #112]	; (80027b0 <main+0x170>)
 800273e:	481d      	ldr	r0, [pc, #116]	; (80027b4 <main+0x174>)
 8002740:	f009 ff91 	bl	800c666 <xTaskCreate>
  vTaskStartScheduler();
 8002744:	f00a f8fa 	bl	800c93c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
 8002748:	e7fe      	b.n	8002748 <main+0x108>
 800274a:	bf00      	nop
 800274c:	08010120 	.word	0x08010120
 8002750:	08010124 	.word	0x08010124
 8002754:	20000924 	.word	0x20000924
 8002758:	20000fe0 	.word	0x20000fe0
 800275c:	20000858 	.word	0x20000858
 8002760:	20000fc0 	.word	0x20000fc0
 8002764:	200007b0 	.word	0x200007b0
 8002768:	2000096c 	.word	0x2000096c
 800276c:	20000b6c 	.word	0x20000b6c
 8002770:	200009b4 	.word	0x200009b4
 8002774:	20000798 	.word	0x20000798
 8002778:	20000b71 	.word	0x20000b71
 800277c:	2000079c 	.word	0x2000079c
 8002780:	08010130 	.word	0x08010130
 8002784:	08002d0d 	.word	0x08002d0d
 8002788:	200007a0 	.word	0x200007a0
 800278c:	08010134 	.word	0x08010134
 8002790:	08002da5 	.word	0x08002da5
 8002794:	200007a4 	.word	0x200007a4
 8002798:	08010138 	.word	0x08010138
 800279c:	08002e71 	.word	0x08002e71
 80027a0:	200007a8 	.word	0x200007a8
 80027a4:	0801013c 	.word	0x0801013c
 80027a8:	08002ef1 	.word	0x08002ef1
 80027ac:	200007ac 	.word	0x200007ac
 80027b0:	08010144 	.word	0x08010144
 80027b4:	08002f11 	.word	0x08002f11

080027b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b094      	sub	sp, #80	; 0x50
 80027bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027be:	f107 031c 	add.w	r3, r7, #28
 80027c2:	2234      	movs	r2, #52	; 0x34
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f00b fb48 	bl	800de5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	607b      	str	r3, [r7, #4]
 80027e0:	4b29      	ldr	r3, [pc, #164]	; (8002888 <SystemClock_Config+0xd0>)
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <SystemClock_Config+0xd0>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6413      	str	r3, [r2, #64]	; 0x40
 80027ec:	4b26      	ldr	r3, [pc, #152]	; (8002888 <SystemClock_Config+0xd0>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f8:	2300      	movs	r3, #0
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <SystemClock_Config+0xd4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a22      	ldr	r2, [pc, #136]	; (800288c <SystemClock_Config+0xd4>)
 8002802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b20      	ldr	r3, [pc, #128]	; (800288c <SystemClock_Config+0xd4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002814:	2301      	movs	r3, #1
 8002816:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800281c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800281e:	2302      	movs	r3, #2
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002826:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002828:	2304      	movs	r3, #4
 800282a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 800282c:	23a0      	movs	r3, #160	; 0xa0
 800282e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002830:	2302      	movs	r3, #2
 8002832:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002834:	2302      	movs	r3, #2
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002838:	2302      	movs	r3, #2
 800283a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	4618      	mov	r0, r3
 8002842:	f003 faab 	bl	8005d9c <HAL_RCC_OscConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800284c:	f000 fd04 	bl	8003258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002850:	230f      	movs	r3, #15
 8002852:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002854:	2302      	movs	r3, #2
 8002856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800285c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002866:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002868:	f107 0308 	add.w	r3, r7, #8
 800286c:	2105      	movs	r1, #5
 800286e:	4618      	mov	r0, r3
 8002870:	f002 ff18 	bl	80056a4 <HAL_RCC_ClockConfig>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d001      	beq.n	800287e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800287a:	f000 fced 	bl	8003258 <Error_Handler>
  }
}
 800287e:	bf00      	nop
 8002880:	3750      	adds	r7, #80	; 0x50
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000

08002890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002896:	463b      	mov	r3, r7
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <MX_ADC1_Init+0x98>)
 80028a4:	4a21      	ldr	r2, [pc, #132]	; (800292c <MX_ADC1_Init+0x9c>)
 80028a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80028a8:	4b1f      	ldr	r3, [pc, #124]	; (8002928 <MX_ADC1_Init+0x98>)
 80028aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028b0:	4b1d      	ldr	r3, [pc, #116]	; (8002928 <MX_ADC1_Init+0x98>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80028b6:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <MX_ADC1_Init+0x98>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028bc:	4b1a      	ldr	r3, [pc, #104]	; (8002928 <MX_ADC1_Init+0x98>)
 80028be:	2200      	movs	r2, #0
 80028c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028c2:	4b19      	ldr	r3, [pc, #100]	; (8002928 <MX_ADC1_Init+0x98>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <MX_ADC1_Init+0x98>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028d0:	4b15      	ldr	r3, [pc, #84]	; (8002928 <MX_ADC1_Init+0x98>)
 80028d2:	4a17      	ldr	r2, [pc, #92]	; (8002930 <MX_ADC1_Init+0xa0>)
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <MX_ADC1_Init+0x98>)
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <MX_ADC1_Init+0x98>)
 80028de:	2201      	movs	r2, #1
 80028e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <MX_ADC1_Init+0x98>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <MX_ADC1_Init+0x98>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028f0:	480d      	ldr	r0, [pc, #52]	; (8002928 <MX_ADC1_Init+0x98>)
 80028f2:	f001 f973 	bl	8003bdc <HAL_ADC_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80028fc:	f000 fcac 	bl	8003258 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002900:	230e      	movs	r3, #14
 8002902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002904:	2301      	movs	r3, #1
 8002906:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002908:	2300      	movs	r3, #0
 800290a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800290c:	463b      	mov	r3, r7
 800290e:	4619      	mov	r1, r3
 8002910:	4805      	ldr	r0, [pc, #20]	; (8002928 <MX_ADC1_Init+0x98>)
 8002912:	f001 fb9d 	bl	8004050 <HAL_ADC_ConfigChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800291c:	f000 fc9c 	bl	8003258 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	200007b0 	.word	0x200007b0
 800292c:	40012000 	.word	0x40012000
 8002930:	0f000001 	.word	0x0f000001

08002934 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800293a:	463b      	mov	r3, r7
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002942:	4b0f      	ldr	r3, [pc, #60]	; (8002980 <MX_DAC_Init+0x4c>)
 8002944:	4a0f      	ldr	r2, [pc, #60]	; (8002984 <MX_DAC_Init+0x50>)
 8002946:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002948:	480d      	ldr	r0, [pc, #52]	; (8002980 <MX_DAC_Init+0x4c>)
 800294a:	f001 ff13 	bl	8004774 <HAL_DAC_Init>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002954:	f000 fc80 	bl	8003258 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002958:	2324      	movs	r3, #36	; 0x24
 800295a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002960:	463b      	mov	r3, r7
 8002962:	2200      	movs	r2, #0
 8002964:	4619      	mov	r1, r3
 8002966:	4806      	ldr	r0, [pc, #24]	; (8002980 <MX_DAC_Init+0x4c>)
 8002968:	f002 f812 	bl	8004990 <HAL_DAC_ConfigChannel>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002972:	f000 fc71 	bl	8003258 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000858 	.word	0x20000858
 8002984:	40007400 	.word	0x40007400

08002988 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800298c:	4b17      	ldr	r3, [pc, #92]	; (80029ec <MX_SPI3_Init+0x64>)
 800298e:	4a18      	ldr	r2, [pc, #96]	; (80029f0 <MX_SPI3_Init+0x68>)
 8002990:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002992:	4b16      	ldr	r3, [pc, #88]	; (80029ec <MX_SPI3_Init+0x64>)
 8002994:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002998:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800299a:	4b14      	ldr	r3, [pc, #80]	; (80029ec <MX_SPI3_Init+0x64>)
 800299c:	2200      	movs	r2, #0
 800299e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <MX_SPI3_Init+0x64>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029a6:	4b11      	ldr	r3, [pc, #68]	; (80029ec <MX_SPI3_Init+0x64>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029ac:	4b0f      	ldr	r3, [pc, #60]	; (80029ec <MX_SPI3_Init+0x64>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80029b2:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <MX_SPI3_Init+0x64>)
 80029b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80029ba:	4b0c      	ldr	r3, [pc, #48]	; (80029ec <MX_SPI3_Init+0x64>)
 80029bc:	2208      	movs	r2, #8
 80029be:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <MX_SPI3_Init+0x64>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80029c6:	4b09      	ldr	r3, [pc, #36]	; (80029ec <MX_SPI3_Init+0x64>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029cc:	4b07      	ldr	r3, [pc, #28]	; (80029ec <MX_SPI3_Init+0x64>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <MX_SPI3_Init+0x64>)
 80029d4:	220a      	movs	r2, #10
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80029d8:	4804      	ldr	r0, [pc, #16]	; (80029ec <MX_SPI3_Init+0x64>)
 80029da:	f003 fc7d 	bl	80062d8 <HAL_SPI_Init>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80029e4:	f000 fc38 	bl	8003258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	200008cc 	.word	0x200008cc
 80029f0:	40003c00 	.word	0x40003c00

080029f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029fa:	f107 0308 	add.w	r3, r7, #8
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a08:	463b      	mov	r3, r7
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a1a:	224f      	movs	r2, #79	; 0x4f
 8002a1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002a24:	4b18      	ldr	r3, [pc, #96]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a32:	4b15      	ldr	r3, [pc, #84]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a38:	4813      	ldr	r0, [pc, #76]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a3a:	f004 f88d 	bl	8006b58 <HAL_TIM_Base_Init>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a44:	f000 fc08 	bl	8003258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a4e:	f107 0308 	add.w	r3, r7, #8
 8002a52:	4619      	mov	r1, r3
 8002a54:	480c      	ldr	r0, [pc, #48]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a56:	f004 faaf 	bl	8006fb8 <HAL_TIM_ConfigClockSource>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a60:	f000 fbfa 	bl	8003258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a64:	2320      	movs	r3, #32
 8002a66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a6c:	463b      	mov	r3, r7
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	; (8002a88 <MX_TIM2_Init+0x94>)
 8002a72:	f004 fccb 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a7c:	f000 fbec 	bl	8003258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a80:	bf00      	nop
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000924 	.word	0x20000924

08002a8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <MX_TIM3_Init+0x90>)
 8002aaa:	4a1d      	ldr	r2, [pc, #116]	; (8002b20 <MX_TIM3_Init+0x94>)
 8002aac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <MX_TIM3_Init+0x90>)
 8002ab0:	224f      	movs	r2, #79	; 0x4f
 8002ab2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <MX_TIM3_Init+0x90>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002aba:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <MX_TIM3_Init+0x90>)
 8002abc:	2263      	movs	r2, #99	; 0x63
 8002abe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac0:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <MX_TIM3_Init+0x90>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac6:	4b15      	ldr	r3, [pc, #84]	; (8002b1c <MX_TIM3_Init+0x90>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002acc:	4813      	ldr	r0, [pc, #76]	; (8002b1c <MX_TIM3_Init+0x90>)
 8002ace:	f004 f843 	bl	8006b58 <HAL_TIM_Base_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002ad8:	f000 fbbe 	bl	8003258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ae2:	f107 0308 	add.w	r3, r7, #8
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	480c      	ldr	r0, [pc, #48]	; (8002b1c <MX_TIM3_Init+0x90>)
 8002aea:	f004 fa65 	bl	8006fb8 <HAL_TIM_ConfigClockSource>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002af4:	f000 fbb0 	bl	8003258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002af8:	2300      	movs	r3, #0
 8002afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b00:	463b      	mov	r3, r7
 8002b02:	4619      	mov	r1, r3
 8002b04:	4805      	ldr	r0, [pc, #20]	; (8002b1c <MX_TIM3_Init+0x90>)
 8002b06:	f004 fc81 	bl	800740c <HAL_TIMEx_MasterConfigSynchronization>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002b10:	f000 fba2 	bl	8003258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	2000096c 	.word	0x2000096c
 8002b20:	40000400 	.word	0x40000400

08002b24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b28:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <MX_UART4_Init+0x4c>)
 8002b2a:	4a12      	ldr	r2, [pc, #72]	; (8002b74 <MX_UART4_Init+0x50>)
 8002b2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002b2e:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <MX_UART4_Init+0x4c>)
 8002b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <MX_UART4_Init+0x4c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <MX_UART4_Init+0x4c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <MX_UART4_Init+0x4c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <MX_UART4_Init+0x4c>)
 8002b4a:	220c      	movs	r2, #12
 8002b4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <MX_UART4_Init+0x4c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <MX_UART4_Init+0x4c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b5a:	4805      	ldr	r0, [pc, #20]	; (8002b70 <MX_UART4_Init+0x4c>)
 8002b5c:	f004 fce6 	bl	800752c <HAL_UART_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002b66:	f000 fb77 	bl	8003258 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200009b4 	.word	0x200009b4
 8002b74:	40004c00 	.word	0x40004c00

08002b78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_USART2_UART_Init+0x4c>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <MX_USART2_UART_Init+0x50>)
 8002b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <MX_USART2_UART_Init+0x4c>)
 8002b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <MX_USART2_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <MX_USART2_UART_Init+0x4c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <MX_USART2_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_USART2_UART_Init+0x4c>)
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <MX_USART2_UART_Init+0x4c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MX_USART2_UART_Init+0x4c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_USART2_UART_Init+0x4c>)
 8002bb0:	f004 fcbc 	bl	800752c <HAL_UART_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bba:	f000 fb4d 	bl	8003258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200009f8 	.word	0x200009f8
 8002bc8:	40004400 	.word	0x40004400

08002bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	4b23      	ldr	r3, [pc, #140]	; (8002c64 <MX_DMA_Init+0x98>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a22      	ldr	r2, [pc, #136]	; (8002c64 <MX_DMA_Init+0x98>)
 8002bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <MX_DMA_Init+0x98>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4b1c      	ldr	r3, [pc, #112]	; (8002c64 <MX_DMA_Init+0x98>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a1b      	ldr	r2, [pc, #108]	; (8002c64 <MX_DMA_Init+0x98>)
 8002bf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b19      	ldr	r3, [pc, #100]	; (8002c64 <MX_DMA_Init+0x98>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c06:	603b      	str	r3, [r7, #0]
 8002c08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2105      	movs	r1, #5
 8002c0e:	200d      	movs	r0, #13
 8002c10:	f001 fd86 	bl	8004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002c14:	200d      	movs	r0, #13
 8002c16:	f001 fd9f 	bl	8004758 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2105      	movs	r1, #5
 8002c1e:	200f      	movs	r0, #15
 8002c20:	f001 fd7e 	bl	8004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002c24:	200f      	movs	r0, #15
 8002c26:	f001 fd97 	bl	8004758 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2105      	movs	r1, #5
 8002c2e:	2010      	movs	r0, #16
 8002c30:	f001 fd76 	bl	8004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002c34:	2010      	movs	r0, #16
 8002c36:	f001 fd8f 	bl	8004758 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2105      	movs	r1, #5
 8002c3e:	2011      	movs	r0, #17
 8002c40:	f001 fd6e 	bl	8004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002c44:	2011      	movs	r0, #17
 8002c46:	f001 fd87 	bl	8004758 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2105      	movs	r1, #5
 8002c4e:	2038      	movs	r0, #56	; 0x38
 8002c50:	f001 fd66 	bl	8004720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002c54:	2038      	movs	r0, #56	; 0x38
 8002c56:	f001 fd7f 	bl	8004758 <HAL_NVIC_EnableIRQ>

}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800

08002c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b088      	sub	sp, #32
 8002c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6e:	f107 030c 	add.w	r3, r7, #12
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <MX_GPIO_Init+0x9c>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <MX_GPIO_Init+0x9c>)
 8002c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8e:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <MX_GPIO_Init+0x9c>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	60bb      	str	r3, [r7, #8]
 8002c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
 8002c9e:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <MX_GPIO_Init+0x9c>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <MX_GPIO_Init+0x9c>)
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <MX_GPIO_Init+0x9c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	607b      	str	r3, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <MX_GPIO_Init+0x9c>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	4a11      	ldr	r2, [pc, #68]	; (8002d04 <MX_GPIO_Init+0x9c>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <MX_GPIO_Init+0x9c>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cd8:	480b      	ldr	r0, [pc, #44]	; (8002d08 <MX_GPIO_Init+0xa0>)
 8002cda:	f002 fcc9 	bl	8005670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ce2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cf0:	f107 030c 	add.w	r3, r7, #12
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4804      	ldr	r0, [pc, #16]	; (8002d08 <MX_GPIO_Init+0xa0>)
 8002cf8:	f002 fb26 	bl	8005348 <HAL_GPIO_Init>

}
 8002cfc:	bf00      	nop
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40020800 	.word	0x40020800

08002d0c <HPT_task>:

/* USER CODE BEGIN 4 */
void HPT_task(void *argument)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(uart_trans_counter>=1000)uart_trans_counter=0;
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <HPT_task+0x74>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d1c:	db02      	blt.n	8002d24 <HPT_task+0x18>
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HPT_task+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

		int value=adc_data_buf[uart_trans_counter]/mag_scale+scope_bias;
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HPT_task+0x74>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a16      	ldr	r2, [pc, #88]	; (8002d84 <HPT_task+0x78>)
 8002d2a:	5cd2      	ldrb	r2, [r2, r3]
 8002d2c:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <HPT_task+0x7c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HPT_task+0x80>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
		if(value>=255)value=255;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2bfe      	cmp	r3, #254	; 0xfe
 8002d44:	dd01      	ble.n	8002d4a <HPT_task+0x3e>
 8002d46:	23ff      	movs	r3, #255	; 0xff
 8002d48:	60fb      	str	r3, [r7, #12]

		int len=sprintf(buf,"add 1,0,%d%s",value,cmd_end);
 8002d4a:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HPT_task+0x84>)
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	4911      	ldr	r1, [pc, #68]	; (8002d94 <HPT_task+0x88>)
 8002d50:	4811      	ldr	r0, [pc, #68]	; (8002d98 <HPT_task+0x8c>)
 8002d52:	f00b f88b 	bl	800de6c <siprintf>
 8002d56:	60b8      	str	r0, [r7, #8]
		if(stop_button==0)
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HPT_task+0x90>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d108      	bne.n	8002d72 <HPT_task+0x66>
		{
		Critical_section_Uart(len,buf);//if stop button=0,send data to display
 8002d60:	490d      	ldr	r1, [pc, #52]	; (8002d98 <HPT_task+0x8c>)
 8002d62:	68b8      	ldr	r0, [r7, #8]
 8002d64:	f7ff f998 	bl	8002098 <Critical_section_Uart>
		uart_trans_counter++;
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HPT_task+0x74>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HPT_task+0x74>)
 8002d70:	6013      	str	r3, [r2, #0]
		}


		vTaskDelay(1*time_scale);
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HPT_task+0x94>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f009 fdac 	bl	800c8d4 <vTaskDelay>
	{
 8002d7c:	e7ca      	b.n	8002d14 <HPT_task+0x8>
 8002d7e:	bf00      	nop
 8002d80:	20000fcc 	.word	0x20000fcc
 8002d84:	20000bd8 	.word	0x20000bd8
 8002d88:	2000000d 	.word	0x2000000d
 8002d8c:	20000b69 	.word	0x20000b69
 8002d90:	20000014 	.word	0x20000014
 8002d94:	0801014c 	.word	0x0801014c
 8002d98:	20000b74 	.word	0x20000b74
 8002d9c:	20000b5c 	.word	0x20000b5c
 8002da0:	20000008 	.word	0x20000008

08002da4 <MPT_task>:
	}
}

void MPT_task(void *argument)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(FFT_button==1&&stop_button==0&&fft_complete_flag==0)
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <MPT_task+0xa0>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d13e      	bne.n	8002e32 <MPT_task+0x8e>
 8002db4:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <MPT_task+0xa4>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d13a      	bne.n	8002e32 <MPT_task+0x8e>
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <MPT_task+0xa8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d136      	bne.n	8002e32 <MPT_task+0x8e>
		{
			if(fft_transfer_counter>=FFT_length)
 8002dc4:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <MPT_task+0xac>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b3f      	cmp	r3, #63	; 0x3f
 8002dca:	dd05      	ble.n	8002dd8 <MPT_task+0x34>
			{
				fft_transfer_counter=0;
 8002dcc:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <MPT_task+0xac>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
				fft_complete_flag=1;//transfer complete set flag to stop transfer data
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	; (8002e4c <MPT_task+0xa8>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
			}

			if(fft_hold_counter!=1)
 8002dd8:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <MPT_task+0xb0>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d003      	beq.n	8002de8 <MPT_task+0x44>
			{
				value_fft=0;
 8002de0:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <MPT_task+0xb4>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e007      	b.n	8002df8 <MPT_task+0x54>
			}
			else value_fft=Mag[fft_transfer_counter];
 8002de8:	4b19      	ldr	r3, [pc, #100]	; (8002e50 <MPT_task+0xac>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1b      	ldr	r2, [pc, #108]	; (8002e5c <MPT_task+0xb8>)
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <MPT_task+0xb4>)
 8002df6:	601a      	str	r2, [r3, #0]

			int len=sprintf(buf_3,"add 1,1,%d%s",value_fft,cmd_end);
 8002df8:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <MPT_task+0xb4>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MPT_task+0xbc>)
 8002dfe:	4919      	ldr	r1, [pc, #100]	; (8002e64 <MPT_task+0xc0>)
 8002e00:	4819      	ldr	r0, [pc, #100]	; (8002e68 <MPT_task+0xc4>)
 8002e02:	f00b f833 	bl	800de6c <siprintf>
 8002e06:	60f8      	str	r0, [r7, #12]
			Critical_section_Uart(len,buf_3);//if FFT_button=1,send data to display
 8002e08:	4917      	ldr	r1, [pc, #92]	; (8002e68 <MPT_task+0xc4>)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f7ff f944 	bl	8002098 <Critical_section_Uart>

			if(fft_hold_counter>=5)
 8002e10:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <MPT_task+0xb0>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	dd07      	ble.n	8002e28 <MPT_task+0x84>
			{
				fft_transfer_counter++;
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <MPT_task+0xac>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <MPT_task+0xac>)
 8002e20:	6013      	str	r3, [r2, #0]
				fft_hold_counter=0;
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <MPT_task+0xb0>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
			}
				fft_hold_counter++;
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <MPT_task+0xb0>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <MPT_task+0xb0>)
 8002e30:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(5*time_scale);
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <MPT_task+0xc8>)
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f009 fd49 	bl	800c8d4 <vTaskDelay>
		if(FFT_button==1&&stop_button==0&&fft_complete_flag==0)
 8002e42:	e7b3      	b.n	8002dac <MPT_task+0x8>
 8002e44:	20000b60 	.word	0x20000b60
 8002e48:	20000b5c 	.word	0x20000b5c
 8002e4c:	2000117c 	.word	0x2000117c
 8002e50:	20001174 	.word	0x20001174
 8002e54:	20001178 	.word	0x20001178
 8002e58:	20001180 	.word	0x20001180
 8002e5c:	20001388 	.word	0x20001388
 8002e60:	20000014 	.word	0x20000014
 8002e64:	0801015c 	.word	0x0801015c
 8002e68:	20000ba4 	.word	0x20000ba4
 8002e6c:	20000008 	.word	0x20000008

08002e70 <LPT_task>:
	}
}

void LPT_task(void *argument)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Receive_DMA(&huart4,rx_buf,5);
 8002e78:	2205      	movs	r2, #5
 8002e7a:	4913      	ldr	r1, [pc, #76]	; (8002ec8 <LPT_task+0x58>)
 8002e7c:	4813      	ldr	r0, [pc, #76]	; (8002ecc <LPT_task+0x5c>)
 8002e7e:	f004 fcb3 	bl	80077e8 <HAL_UART_Receive_DMA>

		if(stop_button==0)
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <LPT_task+0x60>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d118      	bne.n	8002ebc <LPT_task+0x4c>
		{
			int len=sprintf(buf_2,"t0.txt=\"freq=%d Hz\"%s",frequency,cmd_end);
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <LPT_task+0x64>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <LPT_task+0x68>)
 8002e92:	4912      	ldr	r1, [pc, #72]	; (8002edc <LPT_task+0x6c>)
 8002e94:	4812      	ldr	r0, [pc, #72]	; (8002ee0 <LPT_task+0x70>)
 8002e96:	f00a ffe9 	bl	800de6c <siprintf>
 8002e9a:	60f8      	str	r0, [r7, #12]
			Critical_section_Uart(len,buf_2);
 8002e9c:	4910      	ldr	r1, [pc, #64]	; (8002ee0 <LPT_task+0x70>)
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff f8fa 	bl	8002098 <Critical_section_Uart>
			len=sprintf(buf_4,"t1.txt=\"Mag=%d V\"%s",mag_max_int,cmd_end);
 8002ea4:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <LPT_task+0x74>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <LPT_task+0x68>)
 8002eaa:	490f      	ldr	r1, [pc, #60]	; (8002ee8 <LPT_task+0x78>)
 8002eac:	480f      	ldr	r0, [pc, #60]	; (8002eec <LPT_task+0x7c>)
 8002eae:	f00a ffdd 	bl	800de6c <siprintf>
 8002eb2:	60f8      	str	r0, [r7, #12]
			Critical_section_Uart(len,buf_4);
 8002eb4:	490d      	ldr	r1, [pc, #52]	; (8002eec <LPT_task+0x7c>)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f7ff f8ee 	bl	8002098 <Critical_section_Uart>
		}
		vTaskDelay(500);
 8002ebc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ec0:	f009 fd08 	bl	800c8d4 <vTaskDelay>
		HAL_UART_Receive_DMA(&huart4,rx_buf,5);
 8002ec4:	e7d8      	b.n	8002e78 <LPT_task+0x8>
 8002ec6:	bf00      	nop
 8002ec8:	20000b6c 	.word	0x20000b6c
 8002ecc:	200009b4 	.word	0x200009b4
 8002ed0:	20000b5c 	.word	0x20000b5c
 8002ed4:	20000fd4 	.word	0x20000fd4
 8002ed8:	20000014 	.word	0x20000014
 8002edc:	0801016c 	.word	0x0801016c
 8002ee0:	20000b88 	.word	0x20000b88
 8002ee4:	20000fd8 	.word	0x20000fd8
 8002ee8:	08010184 	.word	0x08010184
 8002eec:	20000bb8 	.word	0x20000bb8

08002ef0 <VLPT_task>:
	}
}

void VLPT_task(void *argument)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		DSP_FFTPhase();
 8002ef8:	f7ff fb74 	bl	80025e4 <DSP_FFTPhase>
		fft_complete_flag=0;//when fft update,reset the fft flag
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <VLPT_task+0x1c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

		vTaskDelay(2000);
 8002f02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f06:	f009 fce5 	bl	800c8d4 <vTaskDelay>
		DSP_FFTPhase();
 8002f0a:	e7f5      	b.n	8002ef8 <VLPT_task+0x8>
 8002f0c:	2000117c 	.word	0x2000117c

08002f10 <VVLPT_task>:

	}
}

void VVLPT_task(void *argument)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(SD_flag==1)
 8002f18:	4b1e      	ldr	r3, [pc, #120]	; (8002f94 <VVLPT_task+0x84>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d127      	bne.n	8002f70 <VVLPT_task+0x60>
		{
			if(write_counter!=0)
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <VVLPT_task+0x88>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <VVLPT_task+0x2e>
			sprintf(buf_sd,"%d\n",sd_buf[write_counter]);
 8002f28:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <VVLPT_task+0x88>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1b      	ldr	r2, [pc, #108]	; (8002f9c <VVLPT_task+0x8c>)
 8002f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f32:	461a      	mov	r2, r3
 8002f34:	491a      	ldr	r1, [pc, #104]	; (8002fa0 <VVLPT_task+0x90>)
 8002f36:	481b      	ldr	r0, [pc, #108]	; (8002fa4 <VVLPT_task+0x94>)
 8002f38:	f00a ff98 	bl	800de6c <siprintf>
 8002f3c:	e009      	b.n	8002f52 <VVLPT_task+0x42>
			else
			sprintf(buf_sd,"ADC_value\n%d\n",sd_buf[write_counter]);
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <VVLPT_task+0x88>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <VVLPT_task+0x8c>)
 8002f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4917      	ldr	r1, [pc, #92]	; (8002fa8 <VVLPT_task+0x98>)
 8002f4c:	4815      	ldr	r0, [pc, #84]	; (8002fa4 <VVLPT_task+0x94>)
 8002f4e:	f00a ff8d 	bl	800de6c <siprintf>

			Mount_SD("/");
 8002f52:	4816      	ldr	r0, [pc, #88]	; (8002fac <VVLPT_task+0x9c>)
 8002f54:	f7fe f9aa 	bl	80012ac <Mount_SD>
			Update_File("TEST.TXT",buf_sd);
 8002f58:	4912      	ldr	r1, [pc, #72]	; (8002fa4 <VVLPT_task+0x94>)
 8002f5a:	4815      	ldr	r0, [pc, #84]	; (8002fb0 <VVLPT_task+0xa0>)
 8002f5c:	f7fe fae8 	bl	8001530 <Update_File>
			Unmount_SD("/");
 8002f60:	4812      	ldr	r0, [pc, #72]	; (8002fac <VVLPT_task+0x9c>)
 8002f62:	f7fe f9c7 	bl	80012f4 <Unmount_SD>
			write_counter++;
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <VVLPT_task+0x88>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <VVLPT_task+0x88>)
 8002f6e:	6013      	str	r3, [r2, #0]
		}


		if(write_counter>=64)
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <VVLPT_task+0x88>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b3f      	cmp	r3, #63	; 0x3f
 8002f76:	dd08      	ble.n	8002f8a <VVLPT_task+0x7a>
		{
			sd_store_counter=0;//Let sd_buf can store data again
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <VVLPT_task+0xa4>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
			write_counter=0;
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <VVLPT_task+0x88>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
			SD_flag=0;//if data write complete reset flag
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <VVLPT_task+0x84>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
		}


		vTaskDelay(10);
 8002f8a:	200a      	movs	r0, #10
 8002f8c:	f009 fca2 	bl	800c8d4 <vTaskDelay>
		if(SD_flag==1)
 8002f90:	e7c2      	b.n	8002f18 <VVLPT_task+0x8>
 8002f92:	bf00      	nop
 8002f94:	20000b64 	.word	0x20000b64
 8002f98:	200017c0 	.word	0x200017c0
 8002f9c:	200016bc 	.word	0x200016bc
 8002fa0:	08010198 	.word	0x08010198
 8002fa4:	20001588 	.word	0x20001588
 8002fa8:	0801019c 	.word	0x0801019c
 8002fac:	08010120 	.word	0x08010120
 8002fb0:	08010124 	.word	0x08010124
 8002fb4:	200017bc 	.word	0x200017bc

08002fb8 <HAL_ADC_ConvCpltCallback>:
	}
}


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	adc_val=adc_dma[0];
 8002fc0:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_ADC_ConvCpltCallback+0x20>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_ADC_ConvCpltCallback+0x24>)
 8002fc8:	601a      	str	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000fc0 	.word	0x20000fc0
 8002fdc:	20000bd4 	.word	0x20000bd4

08002fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b5b0      	push	{r4, r5, r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a86      	ldr	r2, [pc, #536]	; (8003208 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ff2:	f000 fdaf 	bl	8003b54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a84      	ldr	r2, [pc, #528]	; (800320c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	f040 80f2 	bne.w	80031e6 <HAL_TIM_PeriodElapsedCallback+0x206>
  {
	sample_counter++;
 8003002:	4b83      	ldr	r3, [pc, #524]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	4a81      	ldr	r2, [pc, #516]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800300a:	6013      	str	r3, [r2, #0]
	//sample counter decide sample rate//
	if(sample_counter>=1*time_scale)
 800300c:	4b80      	ldr	r3, [pc, #512]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	4b80      	ldr	r3, [pc, #512]	; (8003214 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	f2c0 80c6 	blt.w	80031a6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
	{

		sample_counter=0;
 800301a:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
		if(store_counter>=1000)store_counter=0;
 8003020:	4b7d      	ldr	r3, [pc, #500]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003028:	db02      	blt.n	8003030 <HAL_TIM_PeriodElapsedCallback+0x50>
 800302a:	4b7b      	ldr	r3, [pc, #492]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 8003030:	487a      	ldr	r0, [pc, #488]	; (800321c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8003032:	f000 fe17 	bl	8003c64 <HAL_ADC_Start>
		adc_data_buf[store_counter]=adc_val/16;
 8003036:	4b7a      	ldr	r3, [pc, #488]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	091a      	lsrs	r2, r3, #4
 800303c:	4b76      	ldr	r3, [pc, #472]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	b2d1      	uxtb	r1, r2
 8003042:	4a78      	ldr	r2, [pc, #480]	; (8003224 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8003044:	54d1      	strb	r1, [r2, r3]
		store_counter++;
 8003046:	4b74      	ldr	r3, [pc, #464]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3301      	adds	r3, #1
 800304c:	4a72      	ldr	r2, [pc, #456]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800304e:	6013      	str	r3, [r2, #0]

		//save to SD_card buffer//
		if(sd_store_counter<64)
 8003050:	4b75      	ldr	r3, [pc, #468]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b3f      	cmp	r3, #63	; 0x3f
 8003056:	dc0c      	bgt.n	8003072 <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			sd_buf[sd_store_counter]=adc_val;
 8003058:	4b71      	ldr	r3, [pc, #452]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b72      	ldr	r3, [pc, #456]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4611      	mov	r1, r2
 8003062:	4a72      	ldr	r2, [pc, #456]	; (800322c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8003064:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			sd_store_counter++;
 8003068:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	4a6e      	ldr	r2, [pc, #440]	; (8003228 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8003070:	6013      	str	r3, [r2, #0]
		}



		//frequency calculation//
		if(adc_val>=2048)cros_time++;
 8003072:	4b6b      	ldr	r3, [pc, #428]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800307a:	d305      	bcc.n	8003088 <HAL_TIM_PeriodElapsedCallback+0xa8>
 800307c:	4b6c      	ldr	r3, [pc, #432]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3301      	adds	r3, #1
 8003082:	4a6b      	ldr	r2, [pc, #428]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e03d      	b.n	8003104 <HAL_TIM_PeriodElapsedCallback+0x124>
		else if(adc_val<2048&&cros_time!=0)
 8003088:	4b65      	ldr	r3, [pc, #404]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003090:	d238      	bcs.n	8003104 <HAL_TIM_PeriodElapsedCallback+0x124>
 8003092:	4b67      	ldr	r3, [pc, #412]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d034      	beq.n	8003104 <HAL_TIM_PeriodElapsedCallback+0x124>
		{
			frequency=1/(0.0001*time_scale*cros_time*2);
 800309a:	4b5e      	ldr	r3, [pc, #376]	; (8003214 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd fbd0 	bl	8000844 <__aeabi_i2d>
 80030a4:	a352      	add	r3, pc, #328	; (adr r3, 80031f0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd fc35 	bl	8000918 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4614      	mov	r4, r2
 80030b4:	461d      	mov	r5, r3
 80030b6:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fbc2 	bl	8000844 <__aeabi_i2d>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4620      	mov	r0, r4
 80030c6:	4629      	mov	r1, r5
 80030c8:	f7fd fc26 	bl	8000918 <__aeabi_dmul>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4610      	mov	r0, r2
 80030d2:	4619      	mov	r1, r3
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	f7fd fa68 	bl	80005ac <__adddf3>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	f04f 0000 	mov.w	r0, #0
 80030e4:	4953      	ldr	r1, [pc, #332]	; (8003234 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80030e6:	f7fd fd41 	bl	8000b6c <__aeabi_ddiv>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	4610      	mov	r0, r2
 80030f0:	4619      	mov	r1, r3
 80030f2:	f7fd fed3 	bl	8000e9c <__aeabi_d2uiz>
 80030f6:	4603      	mov	r3, r0
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4b4f      	ldr	r3, [pc, #316]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80030fc:	701a      	strb	r2, [r3, #0]
			cros_time=0;
 80030fe:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]
		}

		//magnitude calculation//
		if((adc_val/16)>mag_max)
 8003104:	4b46      	ldr	r3, [pc, #280]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	4a4c      	ldr	r2, [pc, #304]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800310c:	7812      	ldrb	r2, [r2, #0]
 800310e:	4293      	cmp	r3, r2
 8003110:	d931      	bls.n	8003176 <HAL_TIM_PeriodElapsedCallback+0x196>
		{
			mag_max=adc_val/16;//if adc_val >previous value,change max value
 8003112:	4b43      	ldr	r3, [pc, #268]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	091b      	lsrs	r3, r3, #4
 8003118:	b2da      	uxtb	r2, r3
 800311a:	4b48      	ldr	r3, [pc, #288]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800311c:	701a      	strb	r2, [r3, #0]
			mag_max_int=mag_max*3.3*amplify/255;
 800311e:	4b47      	ldr	r3, [pc, #284]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fb8e 	bl	8000844 <__aeabi_i2d>
 8003128:	a333      	add	r3, pc, #204	; (adr r3, 80031f8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	f7fd fbf3 	bl	8000918 <__aeabi_dmul>
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	4614      	mov	r4, r2
 8003138:	461d      	mov	r5, r3
 800313a:	4b41      	ldr	r3, [pc, #260]	; (8003240 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd fb80 	bl	8000844 <__aeabi_i2d>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fbe4 	bl	8000918 <__aeabi_dmul>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4610      	mov	r0, r2
 8003156:	4619      	mov	r1, r3
 8003158:	a329      	add	r3, pc, #164	; (adr r3, 8003200 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	f7fd fd05 	bl	8000b6c <__aeabi_ddiv>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	f7fd fe6f 	bl	8000e4c <__aeabi_d2iz>
 800316e:	4603      	mov	r3, r0
 8003170:	4a34      	ldr	r2, [pc, #208]	; (8003244 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	e017      	b.n	80031a6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
		}
		else
		{
			flush_counter++;
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	4a32      	ldr	r2, [pc, #200]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800317e:	6013      	str	r3, [r2, #0]
			if(flush_counter>=(1000/time_scale))//flush data in period
 8003180:	4b24      	ldr	r3, [pc, #144]	; (8003214 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003188:	fb92 f2f3 	sdiv	r2, r2, r3
 800318c:	4b2e      	ldr	r3, [pc, #184]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	dc08      	bgt.n	80031a6 <HAL_TIM_PeriodElapsedCallback+0x1c6>
			{
				mag_max=0;//reset_mag
 8003194:	4b29      	ldr	r3, [pc, #164]	; (800323c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
				frequency=0;
 800319a:	4b27      	ldr	r3, [pc, #156]	; (8003238 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
				flush_counter=0;
 80031a0:	4b29      	ldr	r3, [pc, #164]	; (8003248 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//save to fft buffer//
	if(fft_sample_counter>=156)
 80031a6:	4b29      	ldr	r3, [pc, #164]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2b9b      	cmp	r3, #155	; 0x9b
 80031ac:	dd16      	ble.n	80031dc <HAL_TIM_PeriodElapsedCallback+0x1fc>
	{
		fft_sample_counter=0;
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
		if(fft_counter>=FFT_length)fft_counter=0;
 80031b4:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b3f      	cmp	r3, #63	; 0x3f
 80031ba:	dd02      	ble.n	80031c2 <HAL_TIM_PeriodElapsedCallback+0x1e2>
 80031bc:	4b24      	ldr	r3, [pc, #144]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
		input[fft_counter]=adc_val/4;
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	0892      	lsrs	r2, r2, #2
 80031cc:	4921      	ldr	r1, [pc, #132]	; (8003254 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80031ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		fft_counter++;
 80031d2:	4b1f      	ldr	r3, [pc, #124]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	3301      	adds	r3, #1
 80031d8:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80031da:	6013      	str	r3, [r2, #0]
	}

	fft_sample_counter++;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a1a      	ldr	r2, [pc, #104]	; (800324c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80031e4:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bdb0      	pop	{r4, r5, r7, pc}
 80031ee:	bf00      	nop
 80031f0:	eb1c432d 	.word	0xeb1c432d
 80031f4:	3f1a36e2 	.word	0x3f1a36e2
 80031f8:	66666666 	.word	0x66666666
 80031fc:	400a6666 	.word	0x400a6666
 8003200:	00000000 	.word	0x00000000
 8003204:	406fe000 	.word	0x406fe000
 8003208:	40010000 	.word	0x40010000
 800320c:	40000400 	.word	0x40000400
 8003210:	20000fc4 	.word	0x20000fc4
 8003214:	20000008 	.word	0x20000008
 8003218:	20000fc8 	.word	0x20000fc8
 800321c:	200007b0 	.word	0x200007b0
 8003220:	20000bd4 	.word	0x20000bd4
 8003224:	20000bd8 	.word	0x20000bd8
 8003228:	200017bc 	.word	0x200017bc
 800322c:	200016bc 	.word	0x200016bc
 8003230:	20000fd0 	.word	0x20000fd0
 8003234:	3ff00000 	.word	0x3ff00000
 8003238:	20000fd4 	.word	0x20000fd4
 800323c:	20000fd5 	.word	0x20000fd5
 8003240:	20000010 	.word	0x20000010
 8003244:	20000fd8 	.word	0x20000fd8
 8003248:	20000fdc 	.word	0x20000fdc
 800324c:	20001184 	.word	0x20001184
 8003250:	20001170 	.word	0x20001170
 8003254:	20001188 	.word	0x20001188

08003258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800325c:	b672      	cpsid	i
}
 800325e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003260:	e7fe      	b.n	8003260 <Error_Handler+0x8>
	...

08003264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_MspInit+0x54>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <HAL_MspInit+0x54>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b0f      	ldr	r3, [pc, #60]	; (80032b8 <HAL_MspInit+0x54>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_MspInit+0x54>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_MspInit+0x54>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_MspInit+0x54>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	210f      	movs	r1, #15
 80032a6:	f06f 0001 	mvn.w	r0, #1
 80032aa:	f001 fa39 	bl	8004720 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800

080032bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c4:	f107 0314 	add.w	r3, r7, #20
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	609a      	str	r2, [r3, #8]
 80032d0:	60da      	str	r2, [r3, #12]
 80032d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a2f      	ldr	r2, [pc, #188]	; (8003398 <HAL_ADC_MspInit+0xdc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d157      	bne.n	800338e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	4b2e      	ldr	r3, [pc, #184]	; (800339c <HAL_ADC_MspInit+0xe0>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a2d      	ldr	r2, [pc, #180]	; (800339c <HAL_ADC_MspInit+0xe0>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_ADC_MspInit+0xe0>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	4b27      	ldr	r3, [pc, #156]	; (800339c <HAL_ADC_MspInit+0xe0>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a26      	ldr	r2, [pc, #152]	; (800339c <HAL_ADC_MspInit+0xe0>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b24      	ldr	r3, [pc, #144]	; (800339c <HAL_ADC_MspInit+0xe0>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003316:	2310      	movs	r3, #16
 8003318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800331a:	2303      	movs	r3, #3
 800331c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	4619      	mov	r1, r3
 8003328:	481d      	ldr	r0, [pc, #116]	; (80033a0 <HAL_ADC_MspInit+0xe4>)
 800332a:	f002 f80d 	bl	8005348 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800332e:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003330:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <HAL_ADC_MspInit+0xec>)
 8003332:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003334:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003336:	2200      	movs	r2, #0
 8003338:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800333a:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003346:	4b17      	ldr	r3, [pc, #92]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800334c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003354:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003356:	4b13      	ldr	r3, [pc, #76]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800335c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800335e:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003364:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003366:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003368:	2200      	movs	r2, #0
 800336a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 800336e:	2200      	movs	r2, #0
 8003370:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003372:	480c      	ldr	r0, [pc, #48]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003374:	f001 fbe6 	bl	8004b44 <HAL_DMA_Init>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800337e:	f7ff ff6b 	bl	8003258 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
 8003388:	4a06      	ldr	r2, [pc, #24]	; (80033a4 <HAL_ADC_MspInit+0xe8>)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800338e:	bf00      	nop
 8003390:	3728      	adds	r7, #40	; 0x28
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40012000 	.word	0x40012000
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020800 	.word	0x40020800
 80033a4:	200007f8 	.word	0x200007f8
 80033a8:	40026410 	.word	0x40026410

080033ac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a2f      	ldr	r2, [pc, #188]	; (8003488 <HAL_DAC_MspInit+0xdc>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d158      	bne.n	8003480 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_DAC_MspInit+0xe0>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	4a2d      	ldr	r2, [pc, #180]	; (800348c <HAL_DAC_MspInit+0xe0>)
 80033d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033dc:	6413      	str	r3, [r2, #64]	; 0x40
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_DAC_MspInit+0xe0>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	4b27      	ldr	r3, [pc, #156]	; (800348c <HAL_DAC_MspInit+0xe0>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a26      	ldr	r2, [pc, #152]	; (800348c <HAL_DAC_MspInit+0xe0>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_DAC_MspInit+0xe0>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003406:	2310      	movs	r3, #16
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800340a:	2303      	movs	r3, #3
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4619      	mov	r1, r3
 8003418:	481d      	ldr	r0, [pc, #116]	; (8003490 <HAL_DAC_MspInit+0xe4>)
 800341a:	f001 ff95 	bl	8005348 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800341e:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_DAC_MspInit+0xec>)
 8003422:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8003424:	4b1b      	ldr	r3, [pc, #108]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 8003426:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800342a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 8003434:	2200      	movs	r2, #0
 8003436:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8003438:	4b16      	ldr	r3, [pc, #88]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 800343a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800343e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 8003442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003446:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 800344a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800344e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003450:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 8003452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003456:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 800345a:	2200      	movs	r2, #0
 800345c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800345e:	4b0d      	ldr	r3, [pc, #52]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 8003460:	2200      	movs	r2, #0
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003464:	480b      	ldr	r0, [pc, #44]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 8003466:	f001 fb6d 	bl	8004b44 <HAL_DMA_Init>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003470:	f7ff fef2 	bl	8003258 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a07      	ldr	r2, [pc, #28]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 8003478:	609a      	str	r2, [r3, #8]
 800347a:	4a06      	ldr	r2, [pc, #24]	; (8003494 <HAL_DAC_MspInit+0xe8>)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003480:	bf00      	nop
 8003482:	3728      	adds	r7, #40	; 0x28
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40007400 	.word	0x40007400
 800348c:	40023800 	.word	0x40023800
 8003490:	40020000 	.word	0x40020000
 8003494:	2000086c 	.word	0x2000086c
 8003498:	40026088 	.word	0x40026088

0800349c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08a      	sub	sp, #40	; 0x28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a21      	ldr	r2, [pc, #132]	; (8003540 <HAL_SPI_MspInit+0xa4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d13c      	bne.n	8003538 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_SPI_MspInit+0xa8>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_SPI_MspInit+0xa8>)
 80034c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034cc:	6413      	str	r3, [r2, #64]	; 0x40
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_SPI_MspInit+0xa8>)
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d6:	613b      	str	r3, [r7, #16]
 80034d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
 80034de:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_SPI_MspInit+0xa8>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a18      	ldr	r2, [pc, #96]	; (8003544 <HAL_SPI_MspInit+0xa8>)
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_SPI_MspInit+0xa8>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0304 	and.w	r3, r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034f6:	2302      	movs	r3, #2
 80034f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8003506:	2305      	movs	r3, #5
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	480d      	ldr	r0, [pc, #52]	; (8003548 <HAL_SPI_MspInit+0xac>)
 8003512:	f001 ff19 	bl	8005348 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003516:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003528:	2306      	movs	r3, #6
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	4805      	ldr	r0, [pc, #20]	; (8003548 <HAL_SPI_MspInit+0xac>)
 8003534:	f001 ff08 	bl	8005348 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003538:	bf00      	nop
 800353a:	3728      	adds	r7, #40	; 0x28
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	40003c00 	.word	0x40003c00
 8003544:	40023800 	.word	0x40023800
 8003548:	40020800 	.word	0x40020800

0800354c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d116      	bne.n	800358c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800355e:	2300      	movs	r3, #0
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <HAL_TIM_Base_MspInit+0x80>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a19      	ldr	r2, [pc, #100]	; (80035cc <HAL_TIM_Base_MspInit+0x80>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b17      	ldr	r3, [pc, #92]	; (80035cc <HAL_TIM_Base_MspInit+0x80>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2105      	movs	r1, #5
 800357e:	201c      	movs	r0, #28
 8003580:	f001 f8ce 	bl	8004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003584:	201c      	movs	r0, #28
 8003586:	f001 f8e7 	bl	8004758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800358a:	e01a      	b.n	80035c2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0f      	ldr	r2, [pc, #60]	; (80035d0 <HAL_TIM_Base_MspInit+0x84>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d115      	bne.n	80035c2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <HAL_TIM_Base_MspInit+0x80>)
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	4a0b      	ldr	r2, [pc, #44]	; (80035cc <HAL_TIM_Base_MspInit+0x80>)
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	6413      	str	r3, [r2, #64]	; 0x40
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <HAL_TIM_Base_MspInit+0x80>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80035b2:	2200      	movs	r2, #0
 80035b4:	2105      	movs	r1, #5
 80035b6:	201d      	movs	r0, #29
 80035b8:	f001 f8b2 	bl	8004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035bc:	201d      	movs	r0, #29
 80035be:	f001 f8cb 	bl	8004758 <HAL_NVIC_EnableIRQ>
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40000400 	.word	0x40000400

080035d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	; 0x30
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035dc:	f107 031c 	add.w	r3, r7, #28
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	60da      	str	r2, [r3, #12]
 80035ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7f      	ldr	r2, [pc, #508]	; (80037f0 <HAL_UART_MspInit+0x21c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f040 8091 	bne.w	800371a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	4b7d      	ldr	r3, [pc, #500]	; (80037f4 <HAL_UART_MspInit+0x220>)
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	4a7c      	ldr	r2, [pc, #496]	; (80037f4 <HAL_UART_MspInit+0x220>)
 8003602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003606:	6413      	str	r3, [r2, #64]	; 0x40
 8003608:	4b7a      	ldr	r3, [pc, #488]	; (80037f4 <HAL_UART_MspInit+0x220>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003610:	61bb      	str	r3, [r7, #24]
 8003612:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	4b76      	ldr	r3, [pc, #472]	; (80037f4 <HAL_UART_MspInit+0x220>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	4a75      	ldr	r2, [pc, #468]	; (80037f4 <HAL_UART_MspInit+0x220>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6313      	str	r3, [r2, #48]	; 0x30
 8003624:	4b73      	ldr	r3, [pc, #460]	; (80037f4 <HAL_UART_MspInit+0x220>)
 8003626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003630:	2303      	movs	r3, #3
 8003632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003634:	2302      	movs	r3, #2
 8003636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003638:	2300      	movs	r3, #0
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363c:	2303      	movs	r3, #3
 800363e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003640:	2308      	movs	r3, #8
 8003642:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	f107 031c 	add.w	r3, r7, #28
 8003648:	4619      	mov	r1, r3
 800364a:	486b      	ldr	r0, [pc, #428]	; (80037f8 <HAL_UART_MspInit+0x224>)
 800364c:	f001 fe7c 	bl	8005348 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003650:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <HAL_UART_MspInit+0x228>)
 8003652:	4a6b      	ldr	r2, [pc, #428]	; (8003800 <HAL_UART_MspInit+0x22c>)
 8003654:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003656:	4b69      	ldr	r3, [pc, #420]	; (80037fc <HAL_UART_MspInit+0x228>)
 8003658:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800365c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800365e:	4b67      	ldr	r3, [pc, #412]	; (80037fc <HAL_UART_MspInit+0x228>)
 8003660:	2240      	movs	r2, #64	; 0x40
 8003662:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003664:	4b65      	ldr	r3, [pc, #404]	; (80037fc <HAL_UART_MspInit+0x228>)
 8003666:	2200      	movs	r2, #0
 8003668:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800366a:	4b64      	ldr	r3, [pc, #400]	; (80037fc <HAL_UART_MspInit+0x228>)
 800366c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003670:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003672:	4b62      	ldr	r3, [pc, #392]	; (80037fc <HAL_UART_MspInit+0x228>)
 8003674:	2200      	movs	r2, #0
 8003676:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003678:	4b60      	ldr	r3, [pc, #384]	; (80037fc <HAL_UART_MspInit+0x228>)
 800367a:	2200      	movs	r2, #0
 800367c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800367e:	4b5f      	ldr	r3, [pc, #380]	; (80037fc <HAL_UART_MspInit+0x228>)
 8003680:	2200      	movs	r2, #0
 8003682:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003684:	4b5d      	ldr	r3, [pc, #372]	; (80037fc <HAL_UART_MspInit+0x228>)
 8003686:	2200      	movs	r2, #0
 8003688:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800368a:	4b5c      	ldr	r3, [pc, #368]	; (80037fc <HAL_UART_MspInit+0x228>)
 800368c:	2200      	movs	r2, #0
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003690:	485a      	ldr	r0, [pc, #360]	; (80037fc <HAL_UART_MspInit+0x228>)
 8003692:	f001 fa57 	bl	8004b44 <HAL_DMA_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800369c:	f7ff fddc 	bl	8003258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a56      	ldr	r2, [pc, #344]	; (80037fc <HAL_UART_MspInit+0x228>)
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34
 80036a6:	4a55      	ldr	r2, [pc, #340]	; (80037fc <HAL_UART_MspInit+0x228>)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80036ac:	4b55      	ldr	r3, [pc, #340]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036ae:	4a56      	ldr	r2, [pc, #344]	; (8003808 <HAL_UART_MspInit+0x234>)
 80036b0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80036b2:	4b54      	ldr	r3, [pc, #336]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036b8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ba:	4b52      	ldr	r3, [pc, #328]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036bc:	2200      	movs	r2, #0
 80036be:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036c0:	4b50      	ldr	r3, [pc, #320]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036c6:	4b4f      	ldr	r3, [pc, #316]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036cc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ce:	4b4d      	ldr	r3, [pc, #308]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036d4:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036dc:	2200      	movs	r2, #0
 80036de:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036e0:	4b48      	ldr	r3, [pc, #288]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80036ec:	4845      	ldr	r0, [pc, #276]	; (8003804 <HAL_UART_MspInit+0x230>)
 80036ee:	f001 fa29 	bl	8004b44 <HAL_DMA_Init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80036f8:	f7ff fdae 	bl	8003258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a41      	ldr	r2, [pc, #260]	; (8003804 <HAL_UART_MspInit+0x230>)
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
 8003702:	4a40      	ldr	r2, [pc, #256]	; (8003804 <HAL_UART_MspInit+0x230>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8003708:	2200      	movs	r2, #0
 800370a:	2105      	movs	r1, #5
 800370c:	2034      	movs	r0, #52	; 0x34
 800370e:	f001 f807 	bl	8004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003712:	2034      	movs	r0, #52	; 0x34
 8003714:	f001 f820 	bl	8004758 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003718:	e066      	b.n	80037e8 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART2)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a3b      	ldr	r2, [pc, #236]	; (800380c <HAL_UART_MspInit+0x238>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d161      	bne.n	80037e8 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	4b32      	ldr	r3, [pc, #200]	; (80037f4 <HAL_UART_MspInit+0x220>)
 800372a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372c:	4a31      	ldr	r2, [pc, #196]	; (80037f4 <HAL_UART_MspInit+0x220>)
 800372e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003732:	6413      	str	r3, [r2, #64]	; 0x40
 8003734:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <HAL_UART_MspInit+0x220>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_UART_MspInit+0x220>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003748:	4a2a      	ldr	r2, [pc, #168]	; (80037f4 <HAL_UART_MspInit+0x220>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6313      	str	r3, [r2, #48]	; 0x30
 8003750:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <HAL_UART_MspInit+0x220>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800375c:	230c      	movs	r3, #12
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800376c:	2307      	movs	r3, #7
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	4619      	mov	r1, r3
 8003776:	4820      	ldr	r0, [pc, #128]	; (80037f8 <HAL_UART_MspInit+0x224>)
 8003778:	f001 fde6 	bl	8005348 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_UART_MspInit+0x23c>)
 800377e:	4a25      	ldr	r2, [pc, #148]	; (8003814 <HAL_UART_MspInit+0x240>)
 8003780:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003782:	4b23      	ldr	r3, [pc, #140]	; (8003810 <HAL_UART_MspInit+0x23c>)
 8003784:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003788:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800378a:	4b21      	ldr	r3, [pc, #132]	; (8003810 <HAL_UART_MspInit+0x23c>)
 800378c:	2240      	movs	r2, #64	; 0x40
 800378e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003790:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <HAL_UART_MspInit+0x23c>)
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003796:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <HAL_UART_MspInit+0x23c>)
 8003798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800379c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800379e:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <HAL_UART_MspInit+0x23c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037a4:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <HAL_UART_MspInit+0x23c>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80037aa:	4b19      	ldr	r3, [pc, #100]	; (8003810 <HAL_UART_MspInit+0x23c>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037b0:	4b17      	ldr	r3, [pc, #92]	; (8003810 <HAL_UART_MspInit+0x23c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037b6:	4b16      	ldr	r3, [pc, #88]	; (8003810 <HAL_UART_MspInit+0x23c>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80037bc:	4814      	ldr	r0, [pc, #80]	; (8003810 <HAL_UART_MspInit+0x23c>)
 80037be:	f001 f9c1 	bl	8004b44 <HAL_DMA_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 80037c8:	f7ff fd46 	bl	8003258 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a10      	ldr	r2, [pc, #64]	; (8003810 <HAL_UART_MspInit+0x23c>)
 80037d0:	635a      	str	r2, [r3, #52]	; 0x34
 80037d2:	4a0f      	ldr	r2, [pc, #60]	; (8003810 <HAL_UART_MspInit+0x23c>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80037d8:	2200      	movs	r2, #0
 80037da:	2105      	movs	r1, #5
 80037dc:	2026      	movs	r0, #38	; 0x26
 80037de:	f000 ff9f 	bl	8004720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037e2:	2026      	movs	r0, #38	; 0x26
 80037e4:	f000 ffb8 	bl	8004758 <HAL_NVIC_EnableIRQ>
}
 80037e8:	bf00      	nop
 80037ea:	3730      	adds	r7, #48	; 0x30
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40004c00 	.word	0x40004c00
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40020000 	.word	0x40020000
 80037fc:	20000a3c 	.word	0x20000a3c
 8003800:	40026070 	.word	0x40026070
 8003804:	20000a9c 	.word	0x20000a9c
 8003808:	40026040 	.word	0x40026040
 800380c:	40004400 	.word	0x40004400
 8003810:	20000afc 	.word	0x20000afc
 8003814:	400260a0 	.word	0x400260a0

08003818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08c      	sub	sp, #48	; 0x30
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003828:	2200      	movs	r2, #0
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	2019      	movs	r0, #25
 800382e:	f000 ff77 	bl	8004720 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003832:	2019      	movs	r0, #25
 8003834:	f000 ff90 	bl	8004758 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	4b1f      	ldr	r3, [pc, #124]	; (80038bc <HAL_InitTick+0xa4>)
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <HAL_InitTick+0xa4>)
 8003842:	f043 0301 	orr.w	r3, r3, #1
 8003846:	6453      	str	r3, [r2, #68]	; 0x44
 8003848:	4b1c      	ldr	r3, [pc, #112]	; (80038bc <HAL_InitTick+0xa4>)
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003854:	f107 0210 	add.w	r2, r7, #16
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f002 f83a 	bl	80058d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003864:	f002 f824 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 8003868:	4603      	mov	r3, r0
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <HAL_InitTick+0xa8>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	0c9b      	lsrs	r3, r3, #18
 8003878:	3b01      	subs	r3, #1
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800387c:	4b11      	ldr	r3, [pc, #68]	; (80038c4 <HAL_InitTick+0xac>)
 800387e:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <HAL_InitTick+0xb0>)
 8003880:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003882:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <HAL_InitTick+0xac>)
 8003884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003888:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800388a:	4a0e      	ldr	r2, [pc, #56]	; (80038c4 <HAL_InitTick+0xac>)
 800388c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <HAL_InitTick+0xac>)
 8003892:	2200      	movs	r2, #0
 8003894:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003896:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_InitTick+0xac>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800389c:	4809      	ldr	r0, [pc, #36]	; (80038c4 <HAL_InitTick+0xac>)
 800389e:	f003 f95b 	bl	8006b58 <HAL_TIM_Base_Init>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d104      	bne.n	80038b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80038a8:	4806      	ldr	r0, [pc, #24]	; (80038c4 <HAL_InitTick+0xac>)
 80038aa:	f003 fa0d 	bl	8006cc8 <HAL_TIM_Base_Start_IT>
 80038ae:	4603      	mov	r3, r0
 80038b0:	e000      	b.n	80038b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3730      	adds	r7, #48	; 0x30
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	431bde83 	.word	0x431bde83
 80038c4:	200017c4 	.word	0x200017c4
 80038c8:	40010000 	.word	0x40010000

080038cc <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <SDTimer_Handler+0x40>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d006      	beq.n	80038e8 <SDTimer_Handler+0x1c>
    Timer1--;
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <SDTimer_Handler+0x40>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	4b09      	ldr	r3, [pc, #36]	; (800390c <SDTimer_Handler+0x40>)
 80038e6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <SDTimer_Handler+0x44>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d006      	beq.n	8003900 <SDTimer_Handler+0x34>
    Timer2--;
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <SDTimer_Handler+0x44>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	4b04      	ldr	r3, [pc, #16]	; (8003910 <SDTimer_Handler+0x44>)
 80038fe:	701a      	strb	r2, [r3, #0]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	2000180d 	.word	0x2000180d
 8003910:	2000180e 	.word	0x2000180e

08003914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003918:	e7fe      	b.n	8003918 <NMI_Handler+0x4>

0800391a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800391e:	e7fe      	b.n	800391e <HardFault_Handler+0x4>

08003920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003924:	e7fe      	b.n	8003924 <MemManage_Handler+0x4>

08003926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800392a:	e7fe      	b.n	800392a <BusFault_Handler+0x4>

0800392c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003930:	e7fe      	b.n	8003930 <UsageFault_Handler+0x4>

08003932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003932:	b480      	push	{r7}
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003944:	4802      	ldr	r0, [pc, #8]	; (8003950 <DMA1_Stream2_IRQHandler+0x10>)
 8003946:	f001 fa95 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000a9c 	.word	0x20000a9c

08003954 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003958:	4802      	ldr	r0, [pc, #8]	; (8003964 <DMA1_Stream4_IRQHandler+0x10>)
 800395a:	f001 fa8b 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800395e:	bf00      	nop
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000a3c 	.word	0x20000a3c

08003968 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800396c:	4802      	ldr	r0, [pc, #8]	; (8003978 <DMA1_Stream5_IRQHandler+0x10>)
 800396e:	f001 fa81 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	2000086c 	.word	0x2000086c

0800397c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003980:	4802      	ldr	r0, [pc, #8]	; (800398c <DMA1_Stream6_IRQHandler+0x10>)
 8003982:	f001 fa77 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	20000afc 	.word	0x20000afc

08003990 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	FatFsCnt++;
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	3301      	adds	r3, #1
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80039a0:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 80039a2:	4b07      	ldr	r3, [pc, #28]	; (80039c0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d904      	bls.n	80039b6 <TIM1_UP_TIM10_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 80039ac:	4b04      	ldr	r3, [pc, #16]	; (80039c0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 80039b2:	f7ff ff8b 	bl	80038cc <SDTimer_Handler>
	}
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039b6:	4803      	ldr	r0, [pc, #12]	; (80039c4 <TIM1_UP_TIM10_IRQHandler+0x34>)
 80039b8:	f003 f9f6 	bl	8006da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80039bc:	bf00      	nop
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	2000180c 	.word	0x2000180c
 80039c4:	200017c4 	.word	0x200017c4

080039c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <TIM2_IRQHandler+0x10>)
 80039ce:	f003 f9eb 	bl	8006da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000924 	.word	0x20000924

080039dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <TIM3_IRQHandler+0x10>)
 80039e2:	f003 f9e1 	bl	8006da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	2000096c 	.word	0x2000096c

080039f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <USART2_IRQHandler+0x10>)
 80039f6:	f003 ff27 	bl	8007848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200009f8 	.word	0x200009f8

08003a04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <UART4_IRQHandler+0x10>)
 8003a0a:	f003 ff1d 	bl	8007848 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	200009b4 	.word	0x200009b4

08003a18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <DMA2_Stream0_IRQHandler+0x10>)
 8003a1e:	f001 fa29 	bl	8004e74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	200007f8 	.word	0x200007f8

08003a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a34:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <_sbrk+0x5c>)
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <_sbrk+0x60>)
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a40:	4b13      	ldr	r3, [pc, #76]	; (8003a90 <_sbrk+0x64>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <_sbrk+0x64>)
 8003a4a:	4a12      	ldr	r2, [pc, #72]	; (8003a94 <_sbrk+0x68>)
 8003a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <_sbrk+0x64>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4413      	add	r3, r2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d207      	bcs.n	8003a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a5c:	f00a f9c6 	bl	800ddec <__errno>
 8003a60:	4603      	mov	r3, r0
 8003a62:	220c      	movs	r2, #12
 8003a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a66:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6a:	e009      	b.n	8003a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <_sbrk+0x64>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <_sbrk+0x64>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4413      	add	r3, r2
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <_sbrk+0x64>)
 8003a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	20020000 	.word	0x20020000
 8003a8c:	00000400 	.word	0x00000400
 8003a90:	20001810 	.word	0x20001810
 8003a94:	200055f8 	.word	0x200055f8

08003a98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <SystemInit+0x20>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <SystemInit+0x20>)
 8003aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000ed00 	.word	0xe000ed00

08003abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ac0:	480d      	ldr	r0, [pc, #52]	; (8003af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ac2:	490e      	ldr	r1, [pc, #56]	; (8003afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ac4:	4a0e      	ldr	r2, [pc, #56]	; (8003b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ac8:	e002      	b.n	8003ad0 <LoopCopyDataInit>

08003aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ace:	3304      	adds	r3, #4

08003ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ad4:	d3f9      	bcc.n	8003aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ad6:	4a0b      	ldr	r2, [pc, #44]	; (8003b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ad8:	4c0b      	ldr	r4, [pc, #44]	; (8003b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003adc:	e001      	b.n	8003ae2 <LoopFillZerobss>

08003ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae0:	3204      	adds	r2, #4

08003ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ae4:	d3fb      	bcc.n	8003ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003ae6:	f7ff ffd7 	bl	8003a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aea:	f00a f985 	bl	800ddf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aee:	f7fe fda7 	bl	8002640 <main>
  bx  lr    
 8003af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003afc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003b00:	08010528 	.word	0x08010528
  ldr r2, =_sbss
 8003b04:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003b08:	200055f8 	.word	0x200055f8

08003b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b0c:	e7fe      	b.n	8003b0c <ADC_IRQHandler>
	...

08003b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b14:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <HAL_Init+0x40>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <HAL_Init+0x40>)
 8003b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b20:	4b0b      	ldr	r3, [pc, #44]	; (8003b50 <HAL_Init+0x40>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a0a      	ldr	r2, [pc, #40]	; (8003b50 <HAL_Init+0x40>)
 8003b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b2c:	4b08      	ldr	r3, [pc, #32]	; (8003b50 <HAL_Init+0x40>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <HAL_Init+0x40>)
 8003b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b38:	2003      	movs	r0, #3
 8003b3a:	f000 fde6 	bl	800470a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b3e:	200f      	movs	r0, #15
 8003b40:	f7ff fe6a 	bl	8003818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b44:	f7ff fb8e 	bl	8003264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023c00 	.word	0x40023c00

08003b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_IncTick+0x20>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_IncTick+0x24>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4413      	add	r3, r2
 8003b64:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_IncTick+0x24>)
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000020 	.word	0x20000020
 8003b78:	20001814 	.word	0x20001814

08003b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_GetTick+0x14>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20001814 	.word	0x20001814

08003b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b9c:	f7ff ffee 	bl	8003b7c <HAL_GetTick>
 8003ba0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bac:	d005      	beq.n	8003bba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bae:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <HAL_Delay+0x44>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bba:	bf00      	nop
 8003bbc:	f7ff ffde 	bl	8003b7c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d8f7      	bhi.n	8003bbc <HAL_Delay+0x28>
  {
  }
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000020 	.word	0x20000020

08003bdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e033      	b.n	8003c5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff fb5e 	bl	80032bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d118      	bne.n	8003c4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c22:	f023 0302 	bic.w	r3, r3, #2
 8003c26:	f043 0202 	orr.w	r2, r3, #2
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fb40 	bl	80042b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f023 0303 	bic.w	r3, r3, #3
 8003c42:	f043 0201 	orr.w	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	641a      	str	r2, [r3, #64]	; 0x40
 8003c4a:	e001      	b.n	8003c50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
	...

08003c64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_Start+0x1a>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e0b2      	b.n	8003de4 <HAL_ADC_Start+0x180>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d018      	beq.n	8003cc6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f042 0201 	orr.w	r2, r2, #1
 8003ca2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ca4:	4b52      	ldr	r3, [pc, #328]	; (8003df0 <HAL_ADC_Start+0x18c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a52      	ldr	r2, [pc, #328]	; (8003df4 <HAL_ADC_Start+0x190>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	0c9a      	lsrs	r2, r3, #18
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003cb8:	e002      	b.n	8003cc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f9      	bne.n	8003cba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d17a      	bne.n	8003dca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cdc:	f023 0301 	bic.w	r3, r3, #1
 8003ce0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003cfe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d12:	d106      	bne.n	8003d22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d18:	f023 0206 	bic.w	r2, r3, #6
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	645a      	str	r2, [r3, #68]	; 0x44
 8003d20:	e002      	b.n	8003d28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d30:	4b31      	ldr	r3, [pc, #196]	; (8003df8 <HAL_ADC_Start+0x194>)
 8003d32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d3c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 031f 	and.w	r3, r3, #31
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d12a      	bne.n	8003da0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_ADC_Start+0x198>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d015      	beq.n	8003d80 <HAL_ADC_Start+0x11c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a29      	ldr	r2, [pc, #164]	; (8003e00 <HAL_ADC_Start+0x19c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d105      	bne.n	8003d6a <HAL_ADC_Start+0x106>
 8003d5e:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <HAL_ADC_Start+0x194>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 031f 	and.w	r3, r3, #31
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a25      	ldr	r2, [pc, #148]	; (8003e04 <HAL_ADC_Start+0x1a0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d136      	bne.n	8003de2 <HAL_ADC_Start+0x17e>
 8003d74:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_ADC_Start+0x194>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0310 	and.w	r3, r3, #16
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d130      	bne.n	8003de2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d129      	bne.n	8003de2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d9c:	609a      	str	r2, [r3, #8]
 8003d9e:	e020      	b.n	8003de2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a15      	ldr	r2, [pc, #84]	; (8003dfc <HAL_ADC_Start+0x198>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d11b      	bne.n	8003de2 <HAL_ADC_Start+0x17e>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d114      	bne.n	8003de2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	e00b      	b.n	8003de2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f043 0210 	orr.w	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f043 0201 	orr.w	r2, r3, #1
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	20000018 	.word	0x20000018
 8003df4:	431bde83 	.word	0x431bde83
 8003df8:	40012300 	.word	0x40012300
 8003dfc:	40012000 	.word	0x40012000
 8003e00:	40012100 	.word	0x40012100
 8003e04:	40012200 	.word	0x40012200

08003e08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_ADC_Start_DMA+0x1e>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e0e9      	b.n	8003ffa <HAL_ADC_Start_DMA+0x1f2>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d018      	beq.n	8003e6e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e4c:	4b6d      	ldr	r3, [pc, #436]	; (8004004 <HAL_ADC_Start_DMA+0x1fc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a6d      	ldr	r2, [pc, #436]	; (8004008 <HAL_ADC_Start_DMA+0x200>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	0c9a      	lsrs	r2, r3, #18
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e60:	e002      	b.n	8003e68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f9      	bne.n	8003e62 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e7c:	d107      	bne.n	8003e8e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	f040 80a1 	bne.w	8003fe0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ea6:	f023 0301 	bic.w	r3, r3, #1
 8003eaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ec8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003edc:	d106      	bne.n	8003eec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	f023 0206 	bic.w	r2, r3, #6
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	645a      	str	r2, [r3, #68]	; 0x44
 8003eea:	e002      	b.n	8003ef2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003efa:	4b44      	ldr	r3, [pc, #272]	; (800400c <HAL_ADC_Start_DMA+0x204>)
 8003efc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	4a43      	ldr	r2, [pc, #268]	; (8004010 <HAL_ADC_Start_DMA+0x208>)
 8003f04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0a:	4a42      	ldr	r2, [pc, #264]	; (8004014 <HAL_ADC_Start_DMA+0x20c>)
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	4a41      	ldr	r2, [pc, #260]	; (8004018 <HAL_ADC_Start_DMA+0x210>)
 8003f14:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003f2e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f3e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	334c      	adds	r3, #76	; 0x4c
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f000 fea6 	bl	8004ca0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d12a      	bne.n	8003fb6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2d      	ldr	r2, [pc, #180]	; (800401c <HAL_ADC_Start_DMA+0x214>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d015      	beq.n	8003f96 <HAL_ADC_Start_DMA+0x18e>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <HAL_ADC_Start_DMA+0x218>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d105      	bne.n	8003f80 <HAL_ADC_Start_DMA+0x178>
 8003f74:	4b25      	ldr	r3, [pc, #148]	; (800400c <HAL_ADC_Start_DMA+0x204>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a27      	ldr	r2, [pc, #156]	; (8004024 <HAL_ADC_Start_DMA+0x21c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d136      	bne.n	8003ff8 <HAL_ADC_Start_DMA+0x1f0>
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <HAL_ADC_Start_DMA+0x204>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d130      	bne.n	8003ff8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d129      	bne.n	8003ff8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	e020      	b.n	8003ff8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a18      	ldr	r2, [pc, #96]	; (800401c <HAL_ADC_Start_DMA+0x214>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d11b      	bne.n	8003ff8 <HAL_ADC_Start_DMA+0x1f0>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d114      	bne.n	8003ff8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	e00b      	b.n	8003ff8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f043 0210 	orr.w	r2, r3, #16
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000018 	.word	0x20000018
 8004008:	431bde83 	.word	0x431bde83
 800400c:	40012300 	.word	0x40012300
 8004010:	080044ad 	.word	0x080044ad
 8004014:	08004567 	.word	0x08004567
 8004018:	08004583 	.word	0x08004583
 800401c:	40012000 	.word	0x40012000
 8004020:	40012100 	.word	0x40012100
 8004024:	40012200 	.word	0x40012200

08004028 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_ADC_ConfigChannel+0x1c>
 8004068:	2302      	movs	r3, #2
 800406a:	e113      	b.n	8004294 <HAL_ADC_ConfigChannel+0x244>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b09      	cmp	r3, #9
 800407a:	d925      	bls.n	80040c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68d9      	ldr	r1, [r3, #12]
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	b29b      	uxth	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	3b1e      	subs	r3, #30
 8004092:	2207      	movs	r2, #7
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43da      	mvns	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	400a      	ands	r2, r1
 80040a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68d9      	ldr	r1, [r3, #12]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	4618      	mov	r0, r3
 80040b4:	4603      	mov	r3, r0
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	4403      	add	r3, r0
 80040ba:	3b1e      	subs	r3, #30
 80040bc:	409a      	lsls	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	60da      	str	r2, [r3, #12]
 80040c6:	e022      	b.n	800410e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6919      	ldr	r1, [r3, #16]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	2207      	movs	r2, #7
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43da      	mvns	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	400a      	ands	r2, r1
 80040ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6919      	ldr	r1, [r3, #16]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	4618      	mov	r0, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	4403      	add	r3, r0
 8004104:	409a      	lsls	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b06      	cmp	r3, #6
 8004114:	d824      	bhi.n	8004160 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	3b05      	subs	r3, #5
 8004128:	221f      	movs	r2, #31
 800412a:	fa02 f303 	lsl.w	r3, r2, r3
 800412e:	43da      	mvns	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	400a      	ands	r2, r1
 8004136:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	4618      	mov	r0, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	3b05      	subs	r3, #5
 8004152:	fa00 f203 	lsl.w	r2, r0, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
 800415e:	e04c      	b.n	80041fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	d824      	bhi.n	80041b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	3b23      	subs	r3, #35	; 0x23
 800417a:	221f      	movs	r2, #31
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	43da      	mvns	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	400a      	ands	r2, r1
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	4618      	mov	r0, r3
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	3b23      	subs	r3, #35	; 0x23
 80041a4:	fa00 f203 	lsl.w	r2, r0, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
 80041b0:	e023      	b.n	80041fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	3b41      	subs	r3, #65	; 0x41
 80041c4:	221f      	movs	r2, #31
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	43da      	mvns	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	400a      	ands	r2, r1
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	b29b      	uxth	r3, r3
 80041e0:	4618      	mov	r0, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	3b41      	subs	r3, #65	; 0x41
 80041ee:	fa00 f203 	lsl.w	r2, r0, r3
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041fa:	4b29      	ldr	r3, [pc, #164]	; (80042a0 <HAL_ADC_ConfigChannel+0x250>)
 80041fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a28      	ldr	r2, [pc, #160]	; (80042a4 <HAL_ADC_ConfigChannel+0x254>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d10f      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x1d8>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b12      	cmp	r3, #18
 800420e:	d10b      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <HAL_ADC_ConfigChannel+0x254>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d12b      	bne.n	800428a <HAL_ADC_ConfigChannel+0x23a>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a1c      	ldr	r2, [pc, #112]	; (80042a8 <HAL_ADC_ConfigChannel+0x258>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d003      	beq.n	8004244 <HAL_ADC_ConfigChannel+0x1f4>
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b11      	cmp	r3, #17
 8004242:	d122      	bne.n	800428a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a11      	ldr	r2, [pc, #68]	; (80042a8 <HAL_ADC_ConfigChannel+0x258>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d111      	bne.n	800428a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004266:	4b11      	ldr	r3, [pc, #68]	; (80042ac <HAL_ADC_ConfigChannel+0x25c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a11      	ldr	r2, [pc, #68]	; (80042b0 <HAL_ADC_ConfigChannel+0x260>)
 800426c:	fba2 2303 	umull	r2, r3, r2, r3
 8004270:	0c9a      	lsrs	r2, r3, #18
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800427c:	e002      	b.n	8004284 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	3b01      	subs	r3, #1
 8004282:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f9      	bne.n	800427e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	40012300 	.word	0x40012300
 80042a4:	40012000 	.word	0x40012000
 80042a8:	10000012 	.word	0x10000012
 80042ac:	20000018 	.word	0x20000018
 80042b0:	431bde83 	.word	0x431bde83

080042b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042bc:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <ADC_Init+0x1f0>)
 80042be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	431a      	orrs	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	021a      	lsls	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800430c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800432e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6899      	ldr	r1, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68da      	ldr	r2, [r3, #12]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004346:	4a58      	ldr	r2, [pc, #352]	; (80044a8 <ADC_Init+0x1f4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800435a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800437c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6899      	ldr	r1, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	e00f      	b.n	80043b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0202 	bic.w	r2, r2, #2
 80043c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	7e1b      	ldrb	r3, [r3, #24]
 80043cc:	005a      	lsls	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01b      	beq.n	8004418 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	3b01      	subs	r3, #1
 800440c:	035a      	lsls	r2, r3, #13
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
 8004416:	e007      	b.n	8004428 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004426:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004436:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	3b01      	subs	r3, #1
 8004444:	051a      	lsls	r2, r3, #20
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800445c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6899      	ldr	r1, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800446a:	025a      	lsls	r2, r3, #9
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6899      	ldr	r1, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	029a      	lsls	r2, r3, #10
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	40012300 	.word	0x40012300
 80044a8:	0f000001 	.word	0x0f000001

080044ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d13c      	bne.n	8004540 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d12b      	bne.n	8004538 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d127      	bne.n	8004538 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004500:	2b00      	cmp	r3, #0
 8004502:	d119      	bne.n	8004538 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0220 	bic.w	r2, r2, #32
 8004512:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0201 	orr.w	r2, r3, #1
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7fe fd3d 	bl	8002fb8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800453e:	e00e      	b.n	800455e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f7ff fd75 	bl	800403c <HAL_ADC_ErrorCallback>
}
 8004552:	e004      	b.n	800455e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff fd57 	bl	8004028 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}

08004582 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2240      	movs	r2, #64	; 0x40
 8004594:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f043 0204 	orr.w	r2, r3, #4
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff fd4a 	bl	800403c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045a8:	bf00      	nop
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045c0:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <__NVIC_SetPriorityGrouping+0x44>)
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045cc:	4013      	ands	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045e2:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <__NVIC_SetPriorityGrouping+0x44>)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	60d3      	str	r3, [r2, #12]
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	e000ed00 	.word	0xe000ed00

080045f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045fc:	4b04      	ldr	r3, [pc, #16]	; (8004610 <__NVIC_GetPriorityGrouping+0x18>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	0a1b      	lsrs	r3, r3, #8
 8004602:	f003 0307 	and.w	r3, r3, #7
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	e000ed00 	.word	0xe000ed00

08004614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800461e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004622:	2b00      	cmp	r3, #0
 8004624:	db0b      	blt.n	800463e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	f003 021f 	and.w	r2, r3, #31
 800462c:	4907      	ldr	r1, [pc, #28]	; (800464c <__NVIC_EnableIRQ+0x38>)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	2001      	movs	r0, #1
 8004636:	fa00 f202 	lsl.w	r2, r0, r2
 800463a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800463e:	bf00      	nop
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	e000e100 	.word	0xe000e100

08004650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800465c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004660:	2b00      	cmp	r3, #0
 8004662:	db0a      	blt.n	800467a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	b2da      	uxtb	r2, r3
 8004668:	490c      	ldr	r1, [pc, #48]	; (800469c <__NVIC_SetPriority+0x4c>)
 800466a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466e:	0112      	lsls	r2, r2, #4
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	440b      	add	r3, r1
 8004674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004678:	e00a      	b.n	8004690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4908      	ldr	r1, [pc, #32]	; (80046a0 <__NVIC_SetPriority+0x50>)
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	3b04      	subs	r3, #4
 8004688:	0112      	lsls	r2, r2, #4
 800468a:	b2d2      	uxtb	r2, r2
 800468c:	440b      	add	r3, r1
 800468e:	761a      	strb	r2, [r3, #24]
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000e100 	.word	0xe000e100
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b089      	sub	sp, #36	; 0x24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f1c3 0307 	rsb	r3, r3, #7
 80046be:	2b04      	cmp	r3, #4
 80046c0:	bf28      	it	cs
 80046c2:	2304      	movcs	r3, #4
 80046c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	3304      	adds	r3, #4
 80046ca:	2b06      	cmp	r3, #6
 80046cc:	d902      	bls.n	80046d4 <NVIC_EncodePriority+0x30>
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	3b03      	subs	r3, #3
 80046d2:	e000      	b.n	80046d6 <NVIC_EncodePriority+0x32>
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43da      	mvns	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	401a      	ands	r2, r3
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046ec:	f04f 31ff 	mov.w	r1, #4294967295
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	fa01 f303 	lsl.w	r3, r1, r3
 80046f6:	43d9      	mvns	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046fc:	4313      	orrs	r3, r2
         );
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3724      	adds	r7, #36	; 0x24
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff ff4c 	bl	80045b0 <__NVIC_SetPriorityGrouping>
}
 8004718:	bf00      	nop
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004732:	f7ff ff61 	bl	80045f8 <__NVIC_GetPriorityGrouping>
 8004736:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	6978      	ldr	r0, [r7, #20]
 800473e:	f7ff ffb1 	bl	80046a4 <NVIC_EncodePriority>
 8004742:	4602      	mov	r2, r0
 8004744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004748:	4611      	mov	r1, r2
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff ff80 	bl	8004650 <__NVIC_SetPriority>
}
 8004750:	bf00      	nop
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	4603      	mov	r3, r0
 8004760:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff ff54 	bl	8004614 <__NVIC_EnableIRQ>
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e014      	b.n	80047b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	791b      	ldrb	r3, [r3, #4]
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fe fe08 	bl	80033ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	795b      	ldrb	r3, [r3, #5]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d101      	bne.n	80047da <HAL_DAC_Start_DMA+0x22>
 80047d6:	2302      	movs	r3, #2
 80047d8:	e0ab      	b.n	8004932 <HAL_DAC_Start_DMA+0x17a>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2201      	movs	r2, #1
 80047de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2202      	movs	r2, #2
 80047e4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d12f      	bne.n	800484c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	4a52      	ldr	r2, [pc, #328]	; (800493c <HAL_DAC_Start_DMA+0x184>)
 80047f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a51      	ldr	r2, [pc, #324]	; (8004940 <HAL_DAC_Start_DMA+0x188>)
 80047fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4a50      	ldr	r2, [pc, #320]	; (8004944 <HAL_DAC_Start_DMA+0x18c>)
 8004802:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004812:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	2b08      	cmp	r3, #8
 8004818:	d013      	beq.n	8004842 <HAL_DAC_Start_DMA+0x8a>
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d845      	bhi.n	80048ac <HAL_DAC_Start_DMA+0xf4>
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_DAC_Start_DMA+0x76>
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	2b04      	cmp	r3, #4
 800482a:	d005      	beq.n	8004838 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800482c:	e03e      	b.n	80048ac <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3308      	adds	r3, #8
 8004834:	613b      	str	r3, [r7, #16]
        break;
 8004836:	e03c      	b.n	80048b2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	330c      	adds	r3, #12
 800483e:	613b      	str	r3, [r7, #16]
        break;
 8004840:	e037      	b.n	80048b2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3310      	adds	r3, #16
 8004848:	613b      	str	r3, [r7, #16]
        break;
 800484a:	e032      	b.n	80048b2 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a3d      	ldr	r2, [pc, #244]	; (8004948 <HAL_DAC_Start_DMA+0x190>)
 8004852:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a3c      	ldr	r2, [pc, #240]	; (800494c <HAL_DAC_Start_DMA+0x194>)
 800485a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4a3b      	ldr	r2, [pc, #236]	; (8004950 <HAL_DAC_Start_DMA+0x198>)
 8004862:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004872:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	2b08      	cmp	r3, #8
 8004878:	d013      	beq.n	80048a2 <HAL_DAC_Start_DMA+0xea>
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	2b08      	cmp	r3, #8
 800487e:	d817      	bhi.n	80048b0 <HAL_DAC_Start_DMA+0xf8>
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_DAC_Start_DMA+0xd6>
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d005      	beq.n	8004898 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800488c:	e010      	b.n	80048b0 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	613b      	str	r3, [r7, #16]
        break;
 8004896:	e00c      	b.n	80048b2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3318      	adds	r3, #24
 800489e:	613b      	str	r3, [r7, #16]
        break;
 80048a0:	e007      	b.n	80048b2 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	331c      	adds	r3, #28
 80048a8:	613b      	str	r3, [r7, #16]
        break;
 80048aa:	e002      	b.n	80048b2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <HAL_DAC_Start_DMA+0xfa>
        break;
 80048b0:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d111      	bne.n	80048dc <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6898      	ldr	r0, [r3, #8]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	f000 f9e5 	bl	8004ca0 <HAL_DMA_Start_IT>
 80048d6:	4603      	mov	r3, r0
 80048d8:	75fb      	strb	r3, [r7, #23]
 80048da:	e010      	b.n	80048fe <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80048ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	68d8      	ldr	r0, [r3, #12]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	f000 f9d3 	bl	8004ca0 <HAL_DMA_Start_IT>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d10c      	bne.n	8004924 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2201      	movs	r2, #1
 8004918:	409a      	lsls	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
 8004922:	e005      	b.n	8004930 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	f043 0204 	orr.w	r2, r3, #4
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004930:	7dfb      	ldrb	r3, [r7, #23]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	08004a2f 	.word	0x08004a2f
 8004940:	08004a51 	.word	0x08004a51
 8004944:	08004a6d 	.word	0x08004a6d
 8004948:	08004ad7 	.word	0x08004ad7
 800494c:	08004af9 	.word	0x08004af9
 8004950:	08004b15 	.word	0x08004b15

08004954 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	795b      	ldrb	r3, [r3, #5]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_DAC_ConfigChannel+0x18>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e03c      	b.n	8004a22 <HAL_DAC_ConfigChannel+0x92>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2202      	movs	r2, #2
 80049b2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	43db      	mvns	r3, r3
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4013      	ands	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4313      	orrs	r3, r2
 80049dc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f003 0310 	and.w	r3, r3, #16
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6819      	ldr	r1, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	22c0      	movs	r2, #192	; 0xc0
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	400a      	ands	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	371c      	adds	r7, #28
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7ff ff89 	bl	8004954 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	711a      	strb	r2, [r3, #4]
}
 8004a48:	bf00      	nop
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff ff82 	bl	8004968 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	f043 0204 	orr.w	r2, r3, #4
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f7ff ff78 	bl	800497c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	711a      	strb	r2, [r3, #4]
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004ae4:	68f8      	ldr	r0, [r7, #12]
 8004ae6:	f7ff ffd8 	bl	8004a9a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	711a      	strb	r2, [r3, #4]
}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f7ff ffd1 	bl	8004aae <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f043 0204 	orr.w	r2, r3, #4
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7ff ffc7 	bl	8004ac2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	711a      	strb	r2, [r3, #4]
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b50:	f7ff f814 	bl	8003b7c <HAL_GetTick>
 8004b54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e099      	b.n	8004c94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b80:	e00f      	b.n	8004ba2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b82:	f7fe fffb 	bl	8003b7c <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d908      	bls.n	8004ba2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2203      	movs	r2, #3
 8004b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e078      	b.n	8004c94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e8      	bne.n	8004b82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4b38      	ldr	r3, [pc, #224]	; (8004c9c <HAL_DMA_Init+0x158>)
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d107      	bne.n	8004c0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	4313      	orrs	r3, r2
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	697a      	ldr	r2, [r7, #20]
 8004c12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f023 0307 	bic.w	r3, r3, #7
 8004c22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d117      	bne.n	8004c66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00e      	beq.n	8004c66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fb01 	bl	8005250 <DMA_CheckFifoParam>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d008      	beq.n	8004c66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2240      	movs	r2, #64	; 0x40
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c62:	2301      	movs	r3, #1
 8004c64:	e016      	b.n	8004c94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fab8 	bl	80051e4 <DMA_CalcBaseAndBitshift>
 8004c74:	4603      	mov	r3, r0
 8004c76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7c:	223f      	movs	r2, #63	; 0x3f
 8004c7e:	409a      	lsls	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	f010803f 	.word	0xf010803f

08004ca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_DMA_Start_IT+0x26>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e040      	b.n	8004d48 <HAL_DMA_Start_IT+0xa8>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d12f      	bne.n	8004d3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fa4a 	bl	8005188 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf8:	223f      	movs	r2, #63	; 0x3f
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0216 	orr.w	r2, r2, #22
 8004d0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d007      	beq.n	8004d28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0208 	orr.w	r2, r2, #8
 8004d26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
 8004d38:	e005      	b.n	8004d46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d42:	2302      	movs	r3, #2
 8004d44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3718      	adds	r7, #24
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d5e:	f7fe ff0d 	bl	8003b7c <HAL_GetTick>
 8004d62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d008      	beq.n	8004d82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2280      	movs	r2, #128	; 0x80
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e052      	b.n	8004e28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0216 	bic.w	r2, r2, #22
 8004d90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695a      	ldr	r2, [r3, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004da0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d103      	bne.n	8004db2 <HAL_DMA_Abort+0x62>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0208 	bic.w	r2, r2, #8
 8004dc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 0201 	bic.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dd2:	e013      	b.n	8004dfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dd4:	f7fe fed2 	bl	8003b7c <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d90c      	bls.n	8004dfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2220      	movs	r2, #32
 8004de6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2203      	movs	r2, #3
 8004dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e015      	b.n	8004e28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e4      	bne.n	8004dd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0e:	223f      	movs	r2, #63	; 0x3f
 8004e10:	409a      	lsls	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2280      	movs	r2, #128	; 0x80
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e00c      	b.n	8004e68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2205      	movs	r2, #5
 8004e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0201 	bic.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e80:	4b8e      	ldr	r3, [pc, #568]	; (80050bc <HAL_DMA_IRQHandler+0x248>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a8e      	ldr	r2, [pc, #568]	; (80050c0 <HAL_DMA_IRQHandler+0x24c>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	0a9b      	lsrs	r3, r3, #10
 8004e8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	409a      	lsls	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01a      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d013      	beq.n	8004ee0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0204 	bic.w	r2, r2, #4
 8004ec6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ecc:	2208      	movs	r2, #8
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed8:	f043 0201 	orr.w	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d012      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00b      	beq.n	8004f16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	2201      	movs	r2, #1
 8004f04:	409a      	lsls	r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	f043 0202 	orr.w	r2, r3, #2
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d012      	beq.n	8004f4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f38:	2204      	movs	r2, #4
 8004f3a:	409a      	lsls	r2, r3
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f44:	f043 0204 	orr.w	r2, r3, #4
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f50:	2210      	movs	r2, #16
 8004f52:	409a      	lsls	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d043      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0308 	and.w	r3, r3, #8
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d03c      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6e:	2210      	movs	r2, #16
 8004f70:	409a      	lsls	r2, r3
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d018      	beq.n	8004fb6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d108      	bne.n	8004fa4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d024      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
 8004fa2:	e01f      	b.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01b      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
 8004fb4:	e016      	b.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0208 	bic.w	r2, r2, #8
 8004fd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fe8:	2220      	movs	r2, #32
 8004fea:	409a      	lsls	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 808f 	beq.w	8005114 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 8087 	beq.w	8005114 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500a:	2220      	movs	r2, #32
 800500c:	409a      	lsls	r2, r3
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b05      	cmp	r3, #5
 800501c:	d136      	bne.n	800508c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0216 	bic.w	r2, r2, #22
 800502c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800503c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d103      	bne.n	800504e <HAL_DMA_IRQHandler+0x1da>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f022 0208 	bic.w	r2, r2, #8
 800505c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005062:	223f      	movs	r2, #63	; 0x3f
 8005064:	409a      	lsls	r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507e:	2b00      	cmp	r3, #0
 8005080:	d07e      	beq.n	8005180 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
        }
        return;
 800508a:	e079      	b.n	8005180 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d01d      	beq.n	80050d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10d      	bne.n	80050c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d031      	beq.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	4798      	blx	r3
 80050b8:	e02c      	b.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
 80050ba:	bf00      	nop
 80050bc:	20000018 	.word	0x20000018
 80050c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d023      	beq.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	4798      	blx	r3
 80050d4:	e01e      	b.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10f      	bne.n	8005104 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0210 	bic.w	r2, r2, #16
 80050f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	2b00      	cmp	r3, #0
 800511a:	d032      	beq.n	8005182 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d022      	beq.n	800516e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2205      	movs	r2, #5
 800512c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	3301      	adds	r3, #1
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	429a      	cmp	r2, r3
 800514a:	d307      	bcc.n	800515c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f2      	bne.n	8005140 <HAL_DMA_IRQHandler+0x2cc>
 800515a:	e000      	b.n	800515e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800515c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d005      	beq.n	8005182 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	4798      	blx	r3
 800517e:	e000      	b.n	8005182 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005180:	bf00      	nop
    }
  }
}
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b40      	cmp	r3, #64	; 0x40
 80051b4:	d108      	bne.n	80051c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80051c6:	e007      	b.n	80051d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	60da      	str	r2, [r3, #12]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	3b10      	subs	r3, #16
 80051f4:	4a14      	ldr	r2, [pc, #80]	; (8005248 <DMA_CalcBaseAndBitshift+0x64>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80051fe:	4a13      	ldr	r2, [pc, #76]	; (800524c <DMA_CalcBaseAndBitshift+0x68>)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4413      	add	r3, r2
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b03      	cmp	r3, #3
 8005210:	d909      	bls.n	8005226 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800521a:	f023 0303 	bic.w	r3, r3, #3
 800521e:	1d1a      	adds	r2, r3, #4
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	659a      	str	r2, [r3, #88]	; 0x58
 8005224:	e007      	b.n	8005236 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800522e:	f023 0303 	bic.w	r3, r3, #3
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	aaaaaaab 	.word	0xaaaaaaab
 800524c:	08010210 	.word	0x08010210

08005250 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d11f      	bne.n	80052aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b03      	cmp	r3, #3
 800526e:	d856      	bhi.n	800531e <DMA_CheckFifoParam+0xce>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <DMA_CheckFifoParam+0x28>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	08005289 	.word	0x08005289
 800527c:	0800529b 	.word	0x0800529b
 8005280:	08005289 	.word	0x08005289
 8005284:	0800531f 	.word	0x0800531f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d046      	beq.n	8005322 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005298:	e043      	b.n	8005322 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052a2:	d140      	bne.n	8005326 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052a8:	e03d      	b.n	8005326 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b2:	d121      	bne.n	80052f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d837      	bhi.n	800532a <DMA_CheckFifoParam+0xda>
 80052ba:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <DMA_CheckFifoParam+0x70>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052d1 	.word	0x080052d1
 80052c4:	080052d7 	.word	0x080052d7
 80052c8:	080052d1 	.word	0x080052d1
 80052cc:	080052e9 	.word	0x080052e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      break;
 80052d4:	e030      	b.n	8005338 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d025      	beq.n	800532e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052e6:	e022      	b.n	800532e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052f0:	d11f      	bne.n	8005332 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80052f6:	e01c      	b.n	8005332 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d903      	bls.n	8005306 <DMA_CheckFifoParam+0xb6>
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d003      	beq.n	800530c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005304:	e018      	b.n	8005338 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
      break;
 800530a:	e015      	b.n	8005338 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00e      	beq.n	8005336 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      break;
 800531c:	e00b      	b.n	8005336 <DMA_CheckFifoParam+0xe6>
      break;
 800531e:	bf00      	nop
 8005320:	e00a      	b.n	8005338 <DMA_CheckFifoParam+0xe8>
      break;
 8005322:	bf00      	nop
 8005324:	e008      	b.n	8005338 <DMA_CheckFifoParam+0xe8>
      break;
 8005326:	bf00      	nop
 8005328:	e006      	b.n	8005338 <DMA_CheckFifoParam+0xe8>
      break;
 800532a:	bf00      	nop
 800532c:	e004      	b.n	8005338 <DMA_CheckFifoParam+0xe8>
      break;
 800532e:	bf00      	nop
 8005330:	e002      	b.n	8005338 <DMA_CheckFifoParam+0xe8>
      break;   
 8005332:	bf00      	nop
 8005334:	e000      	b.n	8005338 <DMA_CheckFifoParam+0xe8>
      break;
 8005336:	bf00      	nop
    }
  } 
  
  return status; 
 8005338:	7bfb      	ldrb	r3, [r7, #15]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop

08005348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005348:	b480      	push	{r7}
 800534a:	b089      	sub	sp, #36	; 0x24
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800535a:	2300      	movs	r3, #0
 800535c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	e165      	b.n	8005630 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005364:	2201      	movs	r2, #1
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4013      	ands	r3, r2
 8005376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	429a      	cmp	r2, r3
 800537e:	f040 8154 	bne.w	800562a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	2b01      	cmp	r3, #1
 800538c:	d005      	beq.n	800539a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005396:	2b02      	cmp	r3, #2
 8005398:	d130      	bne.n	80053fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	2203      	movs	r2, #3
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	43db      	mvns	r3, r3
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	4013      	ands	r3, r2
 80053b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	005b      	lsls	r3, r3, #1
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80053d0:	2201      	movs	r2, #1
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	43db      	mvns	r3, r3
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	4013      	ands	r3, r2
 80053de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 0201 	and.w	r2, r3, #1
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	fa02 f303 	lsl.w	r3, r2, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	2b03      	cmp	r3, #3
 8005406:	d017      	beq.n	8005438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	2203      	movs	r2, #3
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4013      	ands	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	4313      	orrs	r3, r2
 8005430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69ba      	ldr	r2, [r7, #24]
 8005436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	2b02      	cmp	r3, #2
 8005442:	d123      	bne.n	800548c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	08da      	lsrs	r2, r3, #3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3208      	adds	r2, #8
 800544c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	220f      	movs	r2, #15
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	fa02 f303 	lsl.w	r3, r2, r3
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	08da      	lsrs	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3208      	adds	r2, #8
 8005486:	69b9      	ldr	r1, [r7, #24]
 8005488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	2203      	movs	r2, #3
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	43db      	mvns	r3, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f003 0203 	and.w	r2, r3, #3
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80ae 	beq.w	800562a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	4b5d      	ldr	r3, [pc, #372]	; (8005648 <HAL_GPIO_Init+0x300>)
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	4a5c      	ldr	r2, [pc, #368]	; (8005648 <HAL_GPIO_Init+0x300>)
 80054d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054dc:	6453      	str	r3, [r2, #68]	; 0x44
 80054de:	4b5a      	ldr	r3, [pc, #360]	; (8005648 <HAL_GPIO_Init+0x300>)
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e6:	60fb      	str	r3, [r7, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054ea:	4a58      	ldr	r2, [pc, #352]	; (800564c <HAL_GPIO_Init+0x304>)
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	089b      	lsrs	r3, r3, #2
 80054f0:	3302      	adds	r3, #2
 80054f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f003 0303 	and.w	r3, r3, #3
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	220f      	movs	r2, #15
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4013      	ands	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a4f      	ldr	r2, [pc, #316]	; (8005650 <HAL_GPIO_Init+0x308>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d025      	beq.n	8005562 <HAL_GPIO_Init+0x21a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a4e      	ldr	r2, [pc, #312]	; (8005654 <HAL_GPIO_Init+0x30c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01f      	beq.n	800555e <HAL_GPIO_Init+0x216>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a4d      	ldr	r2, [pc, #308]	; (8005658 <HAL_GPIO_Init+0x310>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d019      	beq.n	800555a <HAL_GPIO_Init+0x212>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a4c      	ldr	r2, [pc, #304]	; (800565c <HAL_GPIO_Init+0x314>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <HAL_GPIO_Init+0x20e>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a4b      	ldr	r2, [pc, #300]	; (8005660 <HAL_GPIO_Init+0x318>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00d      	beq.n	8005552 <HAL_GPIO_Init+0x20a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a4a      	ldr	r2, [pc, #296]	; (8005664 <HAL_GPIO_Init+0x31c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d007      	beq.n	800554e <HAL_GPIO_Init+0x206>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a49      	ldr	r2, [pc, #292]	; (8005668 <HAL_GPIO_Init+0x320>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d101      	bne.n	800554a <HAL_GPIO_Init+0x202>
 8005546:	2306      	movs	r3, #6
 8005548:	e00c      	b.n	8005564 <HAL_GPIO_Init+0x21c>
 800554a:	2307      	movs	r3, #7
 800554c:	e00a      	b.n	8005564 <HAL_GPIO_Init+0x21c>
 800554e:	2305      	movs	r3, #5
 8005550:	e008      	b.n	8005564 <HAL_GPIO_Init+0x21c>
 8005552:	2304      	movs	r3, #4
 8005554:	e006      	b.n	8005564 <HAL_GPIO_Init+0x21c>
 8005556:	2303      	movs	r3, #3
 8005558:	e004      	b.n	8005564 <HAL_GPIO_Init+0x21c>
 800555a:	2302      	movs	r3, #2
 800555c:	e002      	b.n	8005564 <HAL_GPIO_Init+0x21c>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <HAL_GPIO_Init+0x21c>
 8005562:	2300      	movs	r3, #0
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	f002 0203 	and.w	r2, r2, #3
 800556a:	0092      	lsls	r2, r2, #2
 800556c:	4093      	lsls	r3, r2
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	4313      	orrs	r3, r2
 8005572:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005574:	4935      	ldr	r1, [pc, #212]	; (800564c <HAL_GPIO_Init+0x304>)
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	089b      	lsrs	r3, r3, #2
 800557a:	3302      	adds	r3, #2
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005582:	4b3a      	ldr	r3, [pc, #232]	; (800566c <HAL_GPIO_Init+0x324>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	43db      	mvns	r3, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4013      	ands	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055a6:	4a31      	ldr	r2, [pc, #196]	; (800566c <HAL_GPIO_Init+0x324>)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055ac:	4b2f      	ldr	r3, [pc, #188]	; (800566c <HAL_GPIO_Init+0x324>)
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	43db      	mvns	r3, r3
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	4013      	ands	r3, r2
 80055ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055d0:	4a26      	ldr	r2, [pc, #152]	; (800566c <HAL_GPIO_Init+0x324>)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055d6:	4b25      	ldr	r3, [pc, #148]	; (800566c <HAL_GPIO_Init+0x324>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	43db      	mvns	r3, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	4013      	ands	r3, r2
 80055e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055fa:	4a1c      	ldr	r2, [pc, #112]	; (800566c <HAL_GPIO_Init+0x324>)
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005600:	4b1a      	ldr	r3, [pc, #104]	; (800566c <HAL_GPIO_Init+0x324>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	43db      	mvns	r3, r3
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	4013      	ands	r3, r2
 800560e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005624:	4a11      	ldr	r2, [pc, #68]	; (800566c <HAL_GPIO_Init+0x324>)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3301      	adds	r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	2b0f      	cmp	r3, #15
 8005634:	f67f ae96 	bls.w	8005364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005638:	bf00      	nop
 800563a:	bf00      	nop
 800563c:	3724      	adds	r7, #36	; 0x24
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40023800 	.word	0x40023800
 800564c:	40013800 	.word	0x40013800
 8005650:	40020000 	.word	0x40020000
 8005654:	40020400 	.word	0x40020400
 8005658:	40020800 	.word	0x40020800
 800565c:	40020c00 	.word	0x40020c00
 8005660:	40021000 	.word	0x40021000
 8005664:	40021400 	.word	0x40021400
 8005668:	40021800 	.word	0x40021800
 800566c:	40013c00 	.word	0x40013c00

08005670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	807b      	strh	r3, [r7, #2]
 800567c:	4613      	mov	r3, r2
 800567e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005680:	787b      	ldrb	r3, [r7, #1]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005686:	887a      	ldrh	r2, [r7, #2]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800568c:	e003      	b.n	8005696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800568e:	887b      	ldrh	r3, [r7, #2]
 8005690:	041a      	lsls	r2, r3, #16
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	619a      	str	r2, [r3, #24]
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0cc      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b8:	4b68      	ldr	r3, [pc, #416]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d90c      	bls.n	80056e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c6:	4b65      	ldr	r3, [pc, #404]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	b2d2      	uxtb	r2, r2
 80056cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ce:	4b63      	ldr	r3, [pc, #396]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e0b8      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d020      	beq.n	800572e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056f8:	4b59      	ldr	r3, [pc, #356]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4a58      	ldr	r2, [pc, #352]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80056fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0308 	and.w	r3, r3, #8
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005710:	4b53      	ldr	r3, [pc, #332]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4a52      	ldr	r2, [pc, #328]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800571a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800571c:	4b50      	ldr	r3, [pc, #320]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	494d      	ldr	r1, [pc, #308]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 800572a:	4313      	orrs	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d044      	beq.n	80057c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d107      	bne.n	8005752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005742:	4b47      	ldr	r3, [pc, #284]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d119      	bne.n	8005782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e07f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d003      	beq.n	8005762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800575e:	2b03      	cmp	r3, #3
 8005760:	d107      	bne.n	8005772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005762:	4b3f      	ldr	r3, [pc, #252]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e06f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005772:	4b3b      	ldr	r3, [pc, #236]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e067      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005782:	4b37      	ldr	r3, [pc, #220]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f023 0203 	bic.w	r2, r3, #3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	4934      	ldr	r1, [pc, #208]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	4313      	orrs	r3, r2
 8005792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005794:	f7fe f9f2 	bl	8003b7c <HAL_GetTick>
 8005798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800579a:	e00a      	b.n	80057b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800579c:	f7fe f9ee 	bl	8003b7c <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e04f      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057b2:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 020c 	and.w	r2, r3, #12
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d1eb      	bne.n	800579c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 030f 	and.w	r3, r3, #15
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d20c      	bcs.n	80057ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d2:	4b22      	ldr	r3, [pc, #136]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b20      	ldr	r3, [pc, #128]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e032      	b.n	8005852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0304 	and.w	r3, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d008      	beq.n	800580a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057f8:	4b19      	ldr	r3, [pc, #100]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4916      	ldr	r1, [pc, #88]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	4313      	orrs	r3, r2
 8005808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f003 0308 	and.w	r3, r3, #8
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005816:	4b12      	ldr	r3, [pc, #72]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	490e      	ldr	r1, [pc, #56]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	4313      	orrs	r3, r2
 8005828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800582a:	f000 f887 	bl	800593c <HAL_RCC_GetSysClockFreq>
 800582e:	4602      	mov	r2, r0
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	490a      	ldr	r1, [pc, #40]	; (8005864 <HAL_RCC_ClockConfig+0x1c0>)
 800583c:	5ccb      	ldrb	r3, [r1, r3]
 800583e:	fa22 f303 	lsr.w	r3, r2, r3
 8005842:	4a09      	ldr	r2, [pc, #36]	; (8005868 <HAL_RCC_ClockConfig+0x1c4>)
 8005844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005846:	4b09      	ldr	r3, [pc, #36]	; (800586c <HAL_RCC_ClockConfig+0x1c8>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f7fd ffe4 	bl	8003818 <HAL_InitTick>

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	40023c00 	.word	0x40023c00
 8005860:	40023800 	.word	0x40023800
 8005864:	080101f8 	.word	0x080101f8
 8005868:	20000018 	.word	0x20000018
 800586c:	2000001c 	.word	0x2000001c

08005870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005874:	4b03      	ldr	r3, [pc, #12]	; (8005884 <HAL_RCC_GetHCLKFreq+0x14>)
 8005876:	681b      	ldr	r3, [r3, #0]
}
 8005878:	4618      	mov	r0, r3
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	20000018 	.word	0x20000018

08005888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800588c:	f7ff fff0 	bl	8005870 <HAL_RCC_GetHCLKFreq>
 8005890:	4602      	mov	r2, r0
 8005892:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	0a9b      	lsrs	r3, r3, #10
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	4903      	ldr	r1, [pc, #12]	; (80058ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800589e:	5ccb      	ldrb	r3, [r1, r3]
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40023800 	.word	0x40023800
 80058ac:	08010208 	.word	0x08010208

080058b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058b4:	f7ff ffdc 	bl	8005870 <HAL_RCC_GetHCLKFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	0b5b      	lsrs	r3, r3, #13
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	4903      	ldr	r1, [pc, #12]	; (80058d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058c6:	5ccb      	ldrb	r3, [r1, r3]
 80058c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	40023800 	.word	0x40023800
 80058d4:	08010208 	.word	0x08010208

080058d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	220f      	movs	r2, #15
 80058e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80058e8:	4b12      	ldr	r3, [pc, #72]	; (8005934 <HAL_RCC_GetClockConfig+0x5c>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0203 	and.w	r2, r3, #3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80058f4:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <HAL_RCC_GetClockConfig+0x5c>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005900:	4b0c      	ldr	r3, [pc, #48]	; (8005934 <HAL_RCC_GetClockConfig+0x5c>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800590c:	4b09      	ldr	r3, [pc, #36]	; (8005934 <HAL_RCC_GetClockConfig+0x5c>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	08db      	lsrs	r3, r3, #3
 8005912:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <HAL_RCC_GetClockConfig+0x60>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	601a      	str	r2, [r3, #0]
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40023800 	.word	0x40023800
 8005938:	40023c00 	.word	0x40023c00

0800593c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800593c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005940:	b0ae      	sub	sp, #184	; 0xb8
 8005942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005962:	4bcb      	ldr	r3, [pc, #812]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b0c      	cmp	r3, #12
 800596c:	f200 8206 	bhi.w	8005d7c <HAL_RCC_GetSysClockFreq+0x440>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	080059ad 	.word	0x080059ad
 800597c:	08005d7d 	.word	0x08005d7d
 8005980:	08005d7d 	.word	0x08005d7d
 8005984:	08005d7d 	.word	0x08005d7d
 8005988:	080059b5 	.word	0x080059b5
 800598c:	08005d7d 	.word	0x08005d7d
 8005990:	08005d7d 	.word	0x08005d7d
 8005994:	08005d7d 	.word	0x08005d7d
 8005998:	080059bd 	.word	0x080059bd
 800599c:	08005d7d 	.word	0x08005d7d
 80059a0:	08005d7d 	.word	0x08005d7d
 80059a4:	08005d7d 	.word	0x08005d7d
 80059a8:	08005bad 	.word	0x08005bad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059ac:	4bb9      	ldr	r3, [pc, #740]	; (8005c94 <HAL_RCC_GetSysClockFreq+0x358>)
 80059ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80059b2:	e1e7      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059b4:	4bb8      	ldr	r3, [pc, #736]	; (8005c98 <HAL_RCC_GetSysClockFreq+0x35c>)
 80059b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059ba:	e1e3      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059bc:	4bb4      	ldr	r3, [pc, #720]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059c8:	4bb1      	ldr	r3, [pc, #708]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d071      	beq.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d4:	4bae      	ldr	r3, [pc, #696]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	099b      	lsrs	r3, r3, #6
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059e0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80059e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059f0:	2300      	movs	r3, #0
 80059f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059fa:	4622      	mov	r2, r4
 80059fc:	462b      	mov	r3, r5
 80059fe:	f04f 0000 	mov.w	r0, #0
 8005a02:	f04f 0100 	mov.w	r1, #0
 8005a06:	0159      	lsls	r1, r3, #5
 8005a08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a0c:	0150      	lsls	r0, r2, #5
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4621      	mov	r1, r4
 8005a14:	1a51      	subs	r1, r2, r1
 8005a16:	6439      	str	r1, [r7, #64]	; 0x40
 8005a18:	4629      	mov	r1, r5
 8005a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	018b      	lsls	r3, r1, #6
 8005a30:	4641      	mov	r1, r8
 8005a32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a36:	4641      	mov	r1, r8
 8005a38:	018a      	lsls	r2, r1, #6
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	1a51      	subs	r1, r2, r1
 8005a3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a40:	4649      	mov	r1, r9
 8005a42:	eb63 0301 	sbc.w	r3, r3, r1
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	f04f 0300 	mov.w	r3, #0
 8005a50:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005a54:	4649      	mov	r1, r9
 8005a56:	00cb      	lsls	r3, r1, #3
 8005a58:	4641      	mov	r1, r8
 8005a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a5e:	4641      	mov	r1, r8
 8005a60:	00ca      	lsls	r2, r1, #3
 8005a62:	4610      	mov	r0, r2
 8005a64:	4619      	mov	r1, r3
 8005a66:	4603      	mov	r3, r0
 8005a68:	4622      	mov	r2, r4
 8005a6a:	189b      	adds	r3, r3, r2
 8005a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a6e:	462b      	mov	r3, r5
 8005a70:	460a      	mov	r2, r1
 8005a72:	eb42 0303 	adc.w	r3, r2, r3
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005a84:	4629      	mov	r1, r5
 8005a86:	024b      	lsls	r3, r1, #9
 8005a88:	4621      	mov	r1, r4
 8005a8a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a8e:	4621      	mov	r1, r4
 8005a90:	024a      	lsls	r2, r1, #9
 8005a92:	4610      	mov	r0, r2
 8005a94:	4619      	mov	r1, r3
 8005a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005aa4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005aa8:	f7fb fa68 	bl	8000f7c <__aeabi_uldivmod>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ab6:	e067      	b.n	8005b88 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab8:	4b75      	ldr	r3, [pc, #468]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	099b      	lsrs	r3, r3, #6
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ac4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005acc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ad6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005ada:	4622      	mov	r2, r4
 8005adc:	462b      	mov	r3, r5
 8005ade:	f04f 0000 	mov.w	r0, #0
 8005ae2:	f04f 0100 	mov.w	r1, #0
 8005ae6:	0159      	lsls	r1, r3, #5
 8005ae8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aec:	0150      	lsls	r0, r2, #5
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4621      	mov	r1, r4
 8005af4:	1a51      	subs	r1, r2, r1
 8005af6:	62b9      	str	r1, [r7, #40]	; 0x28
 8005af8:	4629      	mov	r1, r5
 8005afa:	eb63 0301 	sbc.w	r3, r3, r1
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	f04f 0300 	mov.w	r3, #0
 8005b08:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005b0c:	4649      	mov	r1, r9
 8005b0e:	018b      	lsls	r3, r1, #6
 8005b10:	4641      	mov	r1, r8
 8005b12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b16:	4641      	mov	r1, r8
 8005b18:	018a      	lsls	r2, r1, #6
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b20:	4649      	mov	r1, r9
 8005b22:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	f04f 0300 	mov.w	r3, #0
 8005b2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b3a:	4692      	mov	sl, r2
 8005b3c:	469b      	mov	fp, r3
 8005b3e:	4623      	mov	r3, r4
 8005b40:	eb1a 0303 	adds.w	r3, sl, r3
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	462b      	mov	r3, r5
 8005b48:	eb4b 0303 	adc.w	r3, fp, r3
 8005b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	028b      	lsls	r3, r1, #10
 8005b5e:	4621      	mov	r1, r4
 8005b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b64:	4621      	mov	r1, r4
 8005b66:	028a      	lsls	r2, r1, #10
 8005b68:	4610      	mov	r0, r2
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b70:	2200      	movs	r2, #0
 8005b72:	673b      	str	r3, [r7, #112]	; 0x70
 8005b74:	677a      	str	r2, [r7, #116]	; 0x74
 8005b76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005b7a:	f7fb f9ff 	bl	8000f7c <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4613      	mov	r3, r2
 8005b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b88:	4b41      	ldr	r3, [pc, #260]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	3301      	adds	r3, #1
 8005b94:	005b      	lsls	r3, r3, #1
 8005b96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005b9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005baa:	e0eb      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bac:	4b38      	ldr	r3, [pc, #224]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bb8:	4b35      	ldr	r3, [pc, #212]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d06b      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc4:	4b32      	ldr	r3, [pc, #200]	; (8005c90 <HAL_RCC_GetSysClockFreq+0x354>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	099b      	lsrs	r3, r3, #6
 8005bca:	2200      	movs	r2, #0
 8005bcc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005bd8:	2300      	movs	r3, #0
 8005bda:	667b      	str	r3, [r7, #100]	; 0x64
 8005bdc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005be0:	4622      	mov	r2, r4
 8005be2:	462b      	mov	r3, r5
 8005be4:	f04f 0000 	mov.w	r0, #0
 8005be8:	f04f 0100 	mov.w	r1, #0
 8005bec:	0159      	lsls	r1, r3, #5
 8005bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bf2:	0150      	lsls	r0, r2, #5
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	1a51      	subs	r1, r2, r1
 8005bfc:	61b9      	str	r1, [r7, #24]
 8005bfe:	4629      	mov	r1, r5
 8005c00:	eb63 0301 	sbc.w	r3, r3, r1
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005c12:	4659      	mov	r1, fp
 8005c14:	018b      	lsls	r3, r1, #6
 8005c16:	4651      	mov	r1, sl
 8005c18:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c1c:	4651      	mov	r1, sl
 8005c1e:	018a      	lsls	r2, r1, #6
 8005c20:	4651      	mov	r1, sl
 8005c22:	ebb2 0801 	subs.w	r8, r2, r1
 8005c26:	4659      	mov	r1, fp
 8005c28:	eb63 0901 	sbc.w	r9, r3, r1
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c40:	4690      	mov	r8, r2
 8005c42:	4699      	mov	r9, r3
 8005c44:	4623      	mov	r3, r4
 8005c46:	eb18 0303 	adds.w	r3, r8, r3
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	462b      	mov	r3, r5
 8005c4e:	eb49 0303 	adc.w	r3, r9, r3
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005c60:	4629      	mov	r1, r5
 8005c62:	024b      	lsls	r3, r1, #9
 8005c64:	4621      	mov	r1, r4
 8005c66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	024a      	lsls	r2, r1, #9
 8005c6e:	4610      	mov	r0, r2
 8005c70:	4619      	mov	r1, r3
 8005c72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c76:	2200      	movs	r2, #0
 8005c78:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005c7c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c80:	f7fb f97c 	bl	8000f7c <__aeabi_uldivmod>
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	4613      	mov	r3, r2
 8005c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c8e:	e065      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x420>
 8005c90:	40023800 	.word	0x40023800
 8005c94:	00f42400 	.word	0x00f42400
 8005c98:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c9c:	4b3d      	ldr	r3, [pc, #244]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	099b      	lsrs	r3, r3, #6
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	4611      	mov	r1, r2
 8005ca8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005cac:	653b      	str	r3, [r7, #80]	; 0x50
 8005cae:	2300      	movs	r3, #0
 8005cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8005cb2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005cb6:	4642      	mov	r2, r8
 8005cb8:	464b      	mov	r3, r9
 8005cba:	f04f 0000 	mov.w	r0, #0
 8005cbe:	f04f 0100 	mov.w	r1, #0
 8005cc2:	0159      	lsls	r1, r3, #5
 8005cc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cc8:	0150      	lsls	r0, r2, #5
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4641      	mov	r1, r8
 8005cd0:	1a51      	subs	r1, r2, r1
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	eb63 0301 	sbc.w	r3, r3, r1
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	f04f 0300 	mov.w	r3, #0
 8005ce4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005ce8:	4659      	mov	r1, fp
 8005cea:	018b      	lsls	r3, r1, #6
 8005cec:	4651      	mov	r1, sl
 8005cee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cf2:	4651      	mov	r1, sl
 8005cf4:	018a      	lsls	r2, r1, #6
 8005cf6:	4651      	mov	r1, sl
 8005cf8:	1a54      	subs	r4, r2, r1
 8005cfa:	4659      	mov	r1, fp
 8005cfc:	eb63 0501 	sbc.w	r5, r3, r1
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	f04f 0300 	mov.w	r3, #0
 8005d08:	00eb      	lsls	r3, r5, #3
 8005d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d0e:	00e2      	lsls	r2, r4, #3
 8005d10:	4614      	mov	r4, r2
 8005d12:	461d      	mov	r5, r3
 8005d14:	4643      	mov	r3, r8
 8005d16:	18e3      	adds	r3, r4, r3
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	464b      	mov	r3, r9
 8005d1c:	eb45 0303 	adc.w	r3, r5, r3
 8005d20:	607b      	str	r3, [r7, #4]
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d2e:	4629      	mov	r1, r5
 8005d30:	028b      	lsls	r3, r1, #10
 8005d32:	4621      	mov	r1, r4
 8005d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d38:	4621      	mov	r1, r4
 8005d3a:	028a      	lsls	r2, r1, #10
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4619      	mov	r1, r3
 8005d40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d44:	2200      	movs	r2, #0
 8005d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005d4a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d4e:	f7fb f915 	bl	8000f7c <__aeabi_uldivmod>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4613      	mov	r3, r2
 8005d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005d5c:	4b0d      	ldr	r3, [pc, #52]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x458>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	0f1b      	lsrs	r3, r3, #28
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d7a:	e003      	b.n	8005d84 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	37b8      	adds	r7, #184	; 0xb8
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d92:	bf00      	nop
 8005d94:	40023800 	.word	0x40023800
 8005d98:	00f42400 	.word	0x00f42400

08005d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e28d      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 8083 	beq.w	8005ec2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005dbc:	4b94      	ldr	r3, [pc, #592]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 030c 	and.w	r3, r3, #12
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d019      	beq.n	8005dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005dc8:	4b91      	ldr	r3, [pc, #580]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d106      	bne.n	8005de2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005dd4:	4b8e      	ldr	r3, [pc, #568]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005de0:	d00c      	beq.n	8005dfc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005de2:	4b8b      	ldr	r3, [pc, #556]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005dea:	2b0c      	cmp	r3, #12
 8005dec:	d112      	bne.n	8005e14 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005dee:	4b88      	ldr	r3, [pc, #544]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005dfa:	d10b      	bne.n	8005e14 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfc:	4b84      	ldr	r3, [pc, #528]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d05b      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x124>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d157      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e25a      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e1c:	d106      	bne.n	8005e2c <HAL_RCC_OscConfig+0x90>
 8005e1e:	4b7c      	ldr	r3, [pc, #496]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a7b      	ldr	r2, [pc, #492]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e01d      	b.n	8005e68 <HAL_RCC_OscConfig+0xcc>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e34:	d10c      	bne.n	8005e50 <HAL_RCC_OscConfig+0xb4>
 8005e36:	4b76      	ldr	r3, [pc, #472]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a75      	ldr	r2, [pc, #468]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	4b73      	ldr	r3, [pc, #460]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a72      	ldr	r2, [pc, #456]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e4c:	6013      	str	r3, [r2, #0]
 8005e4e:	e00b      	b.n	8005e68 <HAL_RCC_OscConfig+0xcc>
 8005e50:	4b6f      	ldr	r3, [pc, #444]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a6e      	ldr	r2, [pc, #440]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5a:	6013      	str	r3, [r2, #0]
 8005e5c:	4b6c      	ldr	r3, [pc, #432]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a6b      	ldr	r2, [pc, #428]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d013      	beq.n	8005e98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e70:	f7fd fe84 	bl	8003b7c <HAL_GetTick>
 8005e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e76:	e008      	b.n	8005e8a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e78:	f7fd fe80 	bl	8003b7c <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	2b64      	cmp	r3, #100	; 0x64
 8005e84:	d901      	bls.n	8005e8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005e86:	2303      	movs	r3, #3
 8005e88:	e21f      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e8a:	4b61      	ldr	r3, [pc, #388]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d0f0      	beq.n	8005e78 <HAL_RCC_OscConfig+0xdc>
 8005e96:	e014      	b.n	8005ec2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e98:	f7fd fe70 	bl	8003b7c <HAL_GetTick>
 8005e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e9e:	e008      	b.n	8005eb2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea0:	f7fd fe6c 	bl	8003b7c <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	2b64      	cmp	r3, #100	; 0x64
 8005eac:	d901      	bls.n	8005eb2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e20b      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eb2:	4b57      	ldr	r3, [pc, #348]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1f0      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x104>
 8005ebe:	e000      	b.n	8005ec2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d06f      	beq.n	8005fae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ece:	4b50      	ldr	r3, [pc, #320]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 030c 	and.w	r3, r3, #12
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d017      	beq.n	8005f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005eda:	4b4d      	ldr	r3, [pc, #308]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d105      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00b      	beq.n	8005f0a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ef2:	4b47      	ldr	r3, [pc, #284]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005efa:	2b0c      	cmp	r3, #12
 8005efc:	d11c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005efe:	4b44      	ldr	r3, [pc, #272]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d116      	bne.n	8005f38 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f0a:	4b41      	ldr	r3, [pc, #260]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_RCC_OscConfig+0x186>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d001      	beq.n	8005f22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e1d3      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f22:	4b3b      	ldr	r3, [pc, #236]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	4937      	ldr	r1, [pc, #220]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f36:	e03a      	b.n	8005fae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d020      	beq.n	8005f82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f40:	4b34      	ldr	r3, [pc, #208]	; (8006014 <HAL_RCC_OscConfig+0x278>)
 8005f42:	2201      	movs	r2, #1
 8005f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fd fe19 	bl	8003b7c <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f4e:	f7fd fe15 	bl	8003b7c <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e1b4      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f60:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f6c:	4b28      	ldr	r3, [pc, #160]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4925      	ldr	r1, [pc, #148]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	600b      	str	r3, [r1, #0]
 8005f80:	e015      	b.n	8005fae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f82:	4b24      	ldr	r3, [pc, #144]	; (8006014 <HAL_RCC_OscConfig+0x278>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fd fdf8 	bl	8003b7c <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f90:	f7fd fdf4 	bl	8003b7c <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e193      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fa2:	4b1b      	ldr	r3, [pc, #108]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1f0      	bne.n	8005f90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0308 	and.w	r3, r3, #8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d036      	beq.n	8006028 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d016      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fc2:	4b15      	ldr	r3, [pc, #84]	; (8006018 <HAL_RCC_OscConfig+0x27c>)
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc8:	f7fd fdd8 	bl	8003b7c <HAL_GetTick>
 8005fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fce:	e008      	b.n	8005fe2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd0:	f7fd fdd4 	bl	8003b7c <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e173      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <HAL_RCC_OscConfig+0x274>)
 8005fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0f0      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x234>
 8005fee:	e01b      	b.n	8006028 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <HAL_RCC_OscConfig+0x27c>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff6:	f7fd fdc1 	bl	8003b7c <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ffc:	e00e      	b.n	800601c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ffe:	f7fd fdbd 	bl	8003b7c <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b02      	cmp	r3, #2
 800600a:	d907      	bls.n	800601c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e15c      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
 8006010:	40023800 	.word	0x40023800
 8006014:	42470000 	.word	0x42470000
 8006018:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800601c:	4b8a      	ldr	r3, [pc, #552]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800601e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006020:	f003 0302 	and.w	r3, r3, #2
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1ea      	bne.n	8005ffe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 8097 	beq.w	8006164 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800603a:	4b83      	ldr	r3, [pc, #524]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10f      	bne.n	8006066 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006046:	2300      	movs	r3, #0
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	4b7f      	ldr	r3, [pc, #508]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	4a7e      	ldr	r2, [pc, #504]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006054:	6413      	str	r3, [r2, #64]	; 0x40
 8006056:	4b7c      	ldr	r3, [pc, #496]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800605e:	60bb      	str	r3, [r7, #8]
 8006060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006062:	2301      	movs	r3, #1
 8006064:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006066:	4b79      	ldr	r3, [pc, #484]	; (800624c <HAL_RCC_OscConfig+0x4b0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d118      	bne.n	80060a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006072:	4b76      	ldr	r3, [pc, #472]	; (800624c <HAL_RCC_OscConfig+0x4b0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a75      	ldr	r2, [pc, #468]	; (800624c <HAL_RCC_OscConfig+0x4b0>)
 8006078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800607c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800607e:	f7fd fd7d 	bl	8003b7c <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006086:	f7fd fd79 	bl	8003b7c <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e118      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006098:	4b6c      	ldr	r3, [pc, #432]	; (800624c <HAL_RCC_OscConfig+0x4b0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d106      	bne.n	80060ba <HAL_RCC_OscConfig+0x31e>
 80060ac:	4b66      	ldr	r3, [pc, #408]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b0:	4a65      	ldr	r2, [pc, #404]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	6713      	str	r3, [r2, #112]	; 0x70
 80060b8:	e01c      	b.n	80060f4 <HAL_RCC_OscConfig+0x358>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d10c      	bne.n	80060dc <HAL_RCC_OscConfig+0x340>
 80060c2:	4b61      	ldr	r3, [pc, #388]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	4a60      	ldr	r2, [pc, #384]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060c8:	f043 0304 	orr.w	r3, r3, #4
 80060cc:	6713      	str	r3, [r2, #112]	; 0x70
 80060ce:	4b5e      	ldr	r3, [pc, #376]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060d2:	4a5d      	ldr	r2, [pc, #372]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	6713      	str	r3, [r2, #112]	; 0x70
 80060da:	e00b      	b.n	80060f4 <HAL_RCC_OscConfig+0x358>
 80060dc:	4b5a      	ldr	r3, [pc, #360]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e0:	4a59      	ldr	r2, [pc, #356]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060e2:	f023 0301 	bic.w	r3, r3, #1
 80060e6:	6713      	str	r3, [r2, #112]	; 0x70
 80060e8:	4b57      	ldr	r3, [pc, #348]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	4a56      	ldr	r2, [pc, #344]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80060ee:	f023 0304 	bic.w	r3, r3, #4
 80060f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d015      	beq.n	8006128 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fd fd3e 	bl	8003b7c <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006102:	e00a      	b.n	800611a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006104:	f7fd fd3a 	bl	8003b7c <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006112:	4293      	cmp	r3, r2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e0d7      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800611a:	4b4b      	ldr	r3, [pc, #300]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800611c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d0ee      	beq.n	8006104 <HAL_RCC_OscConfig+0x368>
 8006126:	e014      	b.n	8006152 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006128:	f7fd fd28 	bl	8003b7c <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800612e:	e00a      	b.n	8006146 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006130:	f7fd fd24 	bl	8003b7c <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	f241 3288 	movw	r2, #5000	; 0x1388
 800613e:	4293      	cmp	r3, r2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e0c1      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006146:	4b40      	ldr	r3, [pc, #256]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1ee      	bne.n	8006130 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006152:	7dfb      	ldrb	r3, [r7, #23]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d105      	bne.n	8006164 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006158:	4b3b      	ldr	r3, [pc, #236]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800615a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615c:	4a3a      	ldr	r2, [pc, #232]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 800615e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006162:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80ad 	beq.w	80062c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800616e:	4b36      	ldr	r3, [pc, #216]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
 8006176:	2b08      	cmp	r3, #8
 8006178:	d060      	beq.n	800623c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d145      	bne.n	800620e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006182:	4b33      	ldr	r3, [pc, #204]	; (8006250 <HAL_RCC_OscConfig+0x4b4>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fd fcf8 	bl	8003b7c <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006190:	f7fd fcf4 	bl	8003b7c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e093      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a2:	4b29      	ldr	r3, [pc, #164]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1f0      	bne.n	8006190 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	69da      	ldr	r2, [r3, #28]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	431a      	orrs	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	3b01      	subs	r3, #1
 80061c8:	041b      	lsls	r3, r3, #16
 80061ca:	431a      	orrs	r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d0:	061b      	lsls	r3, r3, #24
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	071b      	lsls	r3, r3, #28
 80061da:	491b      	ldr	r1, [pc, #108]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e0:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <HAL_RCC_OscConfig+0x4b4>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e6:	f7fd fcc9 	bl	8003b7c <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ee:	f7fd fcc5 	bl	8003b7c <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e064      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <HAL_RCC_OscConfig+0x452>
 800620c:	e05c      	b.n	80062c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620e:	4b10      	ldr	r3, [pc, #64]	; (8006250 <HAL_RCC_OscConfig+0x4b4>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006214:	f7fd fcb2 	bl	8003b7c <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621c:	f7fd fcae 	bl	8003b7c <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e04d      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <HAL_RCC_OscConfig+0x4ac>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x480>
 800623a:	e045      	b.n	80062c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d107      	bne.n	8006254 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e040      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
 8006248:	40023800 	.word	0x40023800
 800624c:	40007000 	.word	0x40007000
 8006250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006254:	4b1f      	ldr	r3, [pc, #124]	; (80062d4 <HAL_RCC_OscConfig+0x538>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d030      	beq.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800626c:	429a      	cmp	r2, r3
 800626e:	d129      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627a:	429a      	cmp	r2, r3
 800627c:	d122      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006284:	4013      	ands	r3, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800628a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800628c:	4293      	cmp	r3, r2
 800628e:	d119      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	3b01      	subs	r3, #1
 800629e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d10f      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d107      	bne.n	80062c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d001      	beq.n	80062c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	40023800 	.word	0x40023800

080062d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e07b      	b.n	80063e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d108      	bne.n	8006304 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062fa:	d009      	beq.n	8006310 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	61da      	str	r2, [r3, #28]
 8006302:	e005      	b.n	8006310 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d106      	bne.n	8006330 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f7fd f8b6 	bl	800349c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2202      	movs	r2, #2
 8006334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006346:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006362:	431a      	orrs	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006394:	ea42 0103 	orr.w	r1, r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	0c1b      	lsrs	r3, r3, #16
 80063ae:	f003 0104 	and.w	r1, r3, #4
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	f003 0210 	and.w	r2, r3, #16
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	430a      	orrs	r2, r1
 80063c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69da      	ldr	r2, [r3, #28]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b088      	sub	sp, #32
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	603b      	str	r3, [r7, #0]
 80063f6:	4613      	mov	r3, r2
 80063f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_SPI_Transmit+0x22>
 8006408:	2302      	movs	r3, #2
 800640a:	e126      	b.n	800665a <HAL_SPI_Transmit+0x270>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006414:	f7fd fbb2 	bl	8003b7c <HAL_GetTick>
 8006418:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800641a:	88fb      	ldrh	r3, [r7, #6]
 800641c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	d002      	beq.n	8006430 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800642a:	2302      	movs	r3, #2
 800642c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800642e:	e10b      	b.n	8006648 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_SPI_Transmit+0x52>
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d102      	bne.n	8006442 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006440:	e102      	b.n	8006648 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2203      	movs	r2, #3
 8006446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	88fa      	ldrh	r2, [r7, #6]
 800645a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	88fa      	ldrh	r2, [r7, #6]
 8006460:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2200      	movs	r2, #0
 8006472:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006488:	d10f      	bne.n	80064aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b4:	2b40      	cmp	r3, #64	; 0x40
 80064b6:	d007      	beq.n	80064c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d0:	d14b      	bne.n	800656a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <HAL_SPI_Transmit+0xf6>
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d13e      	bne.n	800655e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e4:	881a      	ldrh	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	1c9a      	adds	r2, r3, #2
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006504:	e02b      	b.n	800655e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	d112      	bne.n	800653a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	881a      	ldrh	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	1c9a      	adds	r2, r3, #2
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800652e:	b29b      	uxth	r3, r3
 8006530:	3b01      	subs	r3, #1
 8006532:	b29a      	uxth	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	86da      	strh	r2, [r3, #54]	; 0x36
 8006538:	e011      	b.n	800655e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800653a:	f7fd fb1f 	bl	8003b7c <HAL_GetTick>
 800653e:	4602      	mov	r2, r0
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	429a      	cmp	r2, r3
 8006548:	d803      	bhi.n	8006552 <HAL_SPI_Transmit+0x168>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d102      	bne.n	8006558 <HAL_SPI_Transmit+0x16e>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d102      	bne.n	800655e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800655c:	e074      	b.n	8006648 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1ce      	bne.n	8006506 <HAL_SPI_Transmit+0x11c>
 8006568:	e04c      	b.n	8006604 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <HAL_SPI_Transmit+0x18e>
 8006572:	8afb      	ldrh	r3, [r7, #22]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d140      	bne.n	80065fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	7812      	ldrb	r2, [r2, #0]
 8006584:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800659e:	e02c      	b.n	80065fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d113      	bne.n	80065d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	7812      	ldrb	r2, [r2, #0]
 80065ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80065d4:	e011      	b.n	80065fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d6:	f7fd fad1 	bl	8003b7c <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d803      	bhi.n	80065ee <HAL_SPI_Transmit+0x204>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d102      	bne.n	80065f4 <HAL_SPI_Transmit+0x20a>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065f8:	e026      	b.n	8006648 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065fe:	b29b      	uxth	r3, r3
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1cd      	bne.n	80065a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fa63 	bl	8006ad4 <SPI_EndRxTxTransaction>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006622:	2300      	movs	r3, #0
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	77fb      	strb	r3, [r7, #31]
 8006644:	e000      	b.n	8006648 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006646:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006658:	7ffb      	ldrb	r3, [r7, #31]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b08c      	sub	sp, #48	; 0x30
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
 800666e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006670:	2301      	movs	r3, #1
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x26>
 8006684:	2302      	movs	r3, #2
 8006686:	e18a      	b.n	800699e <HAL_SPI_TransmitReceive+0x33c>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006690:	f7fd fa74 	bl	8003b7c <HAL_GetTick>
 8006694:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800669c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80066a6:	887b      	ldrh	r3, [r7, #2]
 80066a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80066aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d00f      	beq.n	80066d2 <HAL_SPI_TransmitReceive+0x70>
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066b8:	d107      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <HAL_SPI_TransmitReceive+0x68>
 80066c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066c6:	2b04      	cmp	r3, #4
 80066c8:	d003      	beq.n	80066d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
 80066cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066d0:	e15b      	b.n	800698a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_SPI_TransmitReceive+0x82>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_SPI_TransmitReceive+0x82>
 80066de:	887b      	ldrh	r3, [r7, #2]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066ea:	e14e      	b.n	800698a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d003      	beq.n	8006700 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2205      	movs	r2, #5
 80066fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	887a      	ldrh	r2, [r7, #2]
 8006710:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	887a      	ldrh	r2, [r7, #2]
 8006716:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	887a      	ldrh	r2, [r7, #2]
 8006722:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	887a      	ldrh	r2, [r7, #2]
 8006728:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d007      	beq.n	8006754 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800675c:	d178      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_SPI_TransmitReceive+0x10a>
 8006766:	8b7b      	ldrh	r3, [r7, #26]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d166      	bne.n	800683a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	881a      	ldrh	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	1c9a      	adds	r2, r3, #2
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006790:	e053      	b.n	800683a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b02      	cmp	r3, #2
 800679e:	d11b      	bne.n	80067d8 <HAL_SPI_TransmitReceive+0x176>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d016      	beq.n	80067d8 <HAL_SPI_TransmitReceive+0x176>
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d113      	bne.n	80067d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b4:	881a      	ldrh	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	1c9a      	adds	r2, r3, #2
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	3b01      	subs	r3, #1
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 0301 	and.w	r3, r3, #1
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d119      	bne.n	800681a <HAL_SPI_TransmitReceive+0x1b8>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d014      	beq.n	800681a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	b292      	uxth	r2, r2
 80067fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006802:	1c9a      	adds	r2, r3, #2
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800680c:	b29b      	uxth	r3, r3
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006816:	2301      	movs	r3, #1
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800681a:	f7fd f9af 	bl	8003b7c <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006826:	429a      	cmp	r2, r3
 8006828:	d807      	bhi.n	800683a <HAL_SPI_TransmitReceive+0x1d8>
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d003      	beq.n	800683a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006838:	e0a7      	b.n	800698a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800683e:	b29b      	uxth	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1a6      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x130>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1a1      	bne.n	8006792 <HAL_SPI_TransmitReceive+0x130>
 800684e:	e07c      	b.n	800694a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d002      	beq.n	800685e <HAL_SPI_TransmitReceive+0x1fc>
 8006858:	8b7b      	ldrh	r3, [r7, #26]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d16b      	bne.n	8006936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	7812      	ldrb	r2, [r2, #0]
 800686a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006870:	1c5a      	adds	r2, r3, #1
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800687a:	b29b      	uxth	r3, r3
 800687c:	3b01      	subs	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006884:	e057      	b.n	8006936 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 0302 	and.w	r3, r3, #2
 8006890:	2b02      	cmp	r3, #2
 8006892:	d11c      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x26c>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d017      	beq.n	80068ce <HAL_SPI_TransmitReceive+0x26c>
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d114      	bne.n	80068ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	330c      	adds	r3, #12
 80068ae:	7812      	ldrb	r2, [r2, #0]
 80068b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	3b01      	subs	r3, #1
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d119      	bne.n	8006910 <HAL_SPI_TransmitReceive+0x2ae>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d014      	beq.n	8006910 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006902:	b29b      	uxth	r3, r3
 8006904:	3b01      	subs	r3, #1
 8006906:	b29a      	uxth	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800690c:	2301      	movs	r3, #1
 800690e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006910:	f7fd f934 	bl	8003b7c <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800691c:	429a      	cmp	r2, r3
 800691e:	d803      	bhi.n	8006928 <HAL_SPI_TransmitReceive+0x2c6>
 8006920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	d102      	bne.n	800692e <HAL_SPI_TransmitReceive+0x2cc>
 8006928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692a:	2b00      	cmp	r3, #0
 800692c:	d103      	bne.n	8006936 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006934:	e029      	b.n	800698a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1a2      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x224>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d19d      	bne.n	8006886 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800694a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800694c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f8c0 	bl	8006ad4 <SPI_EndRxTxTransaction>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d006      	beq.n	8006968 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2220      	movs	r2, #32
 8006964:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006966:	e010      	b.n	800698a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10b      	bne.n	8006988 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	e000      	b.n	800698a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006988:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800699a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3730      	adds	r7, #48	; 0x30
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069b4:	b2db      	uxtb	r3, r3
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	4613      	mov	r3, r2
 80069d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069d4:	f7fd f8d2 	bl	8003b7c <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4413      	add	r3, r2
 80069e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069e4:	f7fd f8ca 	bl	8003b7c <HAL_GetTick>
 80069e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069ea:	4b39      	ldr	r3, [pc, #228]	; (8006ad0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	015b      	lsls	r3, r3, #5
 80069f0:	0d1b      	lsrs	r3, r3, #20
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	fb02 f303 	mul.w	r3, r2, r3
 80069f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069fa:	e054      	b.n	8006aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a02:	d050      	beq.n	8006aa6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a04:	f7fd f8ba 	bl	8003b7c <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d902      	bls.n	8006a1a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d13d      	bne.n	8006a96 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a28:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a32:	d111      	bne.n	8006a58 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a3c:	d004      	beq.n	8006a48 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a46:	d107      	bne.n	8006a58 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a56:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a60:	d10f      	bne.n	8006a82 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a80:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e017      	b.n	8006ac6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4013      	ands	r3, r2
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	bf0c      	ite	eq
 8006ab6:	2301      	moveq	r3, #1
 8006ab8:	2300      	movne	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	461a      	mov	r2, r3
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d19b      	bne.n	80069fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000018 	.word	0x20000018

08006ad4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b088      	sub	sp, #32
 8006ad8:	af02      	add	r7, sp, #8
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ae0:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <SPI_EndRxTxTransaction+0x7c>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a1b      	ldr	r2, [pc, #108]	; (8006b54 <SPI_EndRxTxTransaction+0x80>)
 8006ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aea:	0d5b      	lsrs	r3, r3, #21
 8006aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006af0:	fb02 f303 	mul.w	r3, r2, r3
 8006af4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006afe:	d112      	bne.n	8006b26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	2200      	movs	r2, #0
 8006b08:	2180      	movs	r1, #128	; 0x80
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff ff5a 	bl	80069c4 <SPI_WaitFlagStateUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d016      	beq.n	8006b44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1a:	f043 0220 	orr.w	r2, r3, #32
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e00f      	b.n	8006b46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3c:	2b80      	cmp	r3, #128	; 0x80
 8006b3e:	d0f2      	beq.n	8006b26 <SPI_EndRxTxTransaction+0x52>
 8006b40:	e000      	b.n	8006b44 <SPI_EndRxTxTransaction+0x70>
        break;
 8006b42:	bf00      	nop
  }

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000018 	.word	0x20000018
 8006b54:	165e9f81 	.word	0x165e9f81

08006b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e041      	b.n	8006bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fc fce4 	bl	800354c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3304      	adds	r3, #4
 8006b94:	4619      	mov	r1, r3
 8006b96:	4610      	mov	r0, r2
 8006b98:	f000 fafe 	bl	8007198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3708      	adds	r7, #8
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
	...

08006bf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d001      	beq.n	8006c10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e046      	b.n	8006c9e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a23      	ldr	r2, [pc, #140]	; (8006cac <HAL_TIM_Base_Start+0xb4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d022      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c2a:	d01d      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <HAL_TIM_Base_Start+0xb8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d018      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a1e      	ldr	r2, [pc, #120]	; (8006cb4 <HAL_TIM_Base_Start+0xbc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d013      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1c      	ldr	r2, [pc, #112]	; (8006cb8 <HAL_TIM_Base_Start+0xc0>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d00e      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1b      	ldr	r2, [pc, #108]	; (8006cbc <HAL_TIM_Base_Start+0xc4>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d009      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a19      	ldr	r2, [pc, #100]	; (8006cc0 <HAL_TIM_Base_Start+0xc8>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d004      	beq.n	8006c68 <HAL_TIM_Base_Start+0x70>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <HAL_TIM_Base_Start+0xcc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d111      	bne.n	8006c8c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2b06      	cmp	r3, #6
 8006c78:	d010      	beq.n	8006c9c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f042 0201 	orr.w	r2, r2, #1
 8006c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c8a:	e007      	b.n	8006c9c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f042 0201 	orr.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40010000 	.word	0x40010000
 8006cb0:	40000400 	.word	0x40000400
 8006cb4:	40000800 	.word	0x40000800
 8006cb8:	40000c00 	.word	0x40000c00
 8006cbc:	40010400 	.word	0x40010400
 8006cc0:	40014000 	.word	0x40014000
 8006cc4:	40001800 	.word	0x40001800

08006cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d001      	beq.n	8006ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e04e      	b.n	8006d7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a23      	ldr	r2, [pc, #140]	; (8006d8c <HAL_TIM_Base_Start_IT+0xc4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d022      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x80>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0a:	d01d      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x80>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <HAL_TIM_Base_Start_IT+0xc8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d018      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x80>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a1e      	ldr	r2, [pc, #120]	; (8006d94 <HAL_TIM_Base_Start_IT+0xcc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d013      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x80>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a1c      	ldr	r2, [pc, #112]	; (8006d98 <HAL_TIM_Base_Start_IT+0xd0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d00e      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x80>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a1b      	ldr	r2, [pc, #108]	; (8006d9c <HAL_TIM_Base_Start_IT+0xd4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d009      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x80>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a19      	ldr	r2, [pc, #100]	; (8006da0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d004      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x80>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a18      	ldr	r2, [pc, #96]	; (8006da4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d111      	bne.n	8006d6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b06      	cmp	r3, #6
 8006d58:	d010      	beq.n	8006d7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6a:	e007      	b.n	8006d7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40000400 	.word	0x40000400
 8006d94:	40000800 	.word	0x40000800
 8006d98:	40000c00 	.word	0x40000c00
 8006d9c:	40010400 	.word	0x40010400
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40001800 	.word	0x40001800

08006da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d122      	bne.n	8006e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d11b      	bne.n	8006e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0202 	mvn.w	r2, #2
 8006dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f9b5 	bl	800715a <HAL_TIM_IC_CaptureCallback>
 8006df0:	e005      	b.n	8006dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f9a7 	bl	8007146 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f9b8 	bl	800716e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 0304 	and.w	r3, r3, #4
 8006e0e:	2b04      	cmp	r3, #4
 8006e10:	d122      	bne.n	8006e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b04      	cmp	r3, #4
 8006e1e:	d11b      	bne.n	8006e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f06f 0204 	mvn.w	r2, #4
 8006e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2202      	movs	r2, #2
 8006e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f98b 	bl	800715a <HAL_TIM_IC_CaptureCallback>
 8006e44:	e005      	b.n	8006e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f97d 	bl	8007146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f98e 	bl	800716e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0308 	and.w	r3, r3, #8
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d122      	bne.n	8006eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d11b      	bne.n	8006eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0208 	mvn.w	r2, #8
 8006e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2204      	movs	r2, #4
 8006e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d003      	beq.n	8006e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f961 	bl	800715a <HAL_TIM_IC_CaptureCallback>
 8006e98:	e005      	b.n	8006ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f953 	bl	8007146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f964 	bl	800716e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	f003 0310 	and.w	r3, r3, #16
 8006eb6:	2b10      	cmp	r3, #16
 8006eb8:	d122      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	f003 0310 	and.w	r3, r3, #16
 8006ec4:	2b10      	cmp	r3, #16
 8006ec6:	d11b      	bne.n	8006f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0210 	mvn.w	r2, #16
 8006ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2208      	movs	r2, #8
 8006ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f937 	bl	800715a <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f929 	bl	8007146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f93a 	bl	800716e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d10e      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d107      	bne.n	8006f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f06f 0201 	mvn.w	r2, #1
 8006f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fc f85a 	bl	8002fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f36:	2b80      	cmp	r3, #128	; 0x80
 8006f38:	d10e      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f44:	2b80      	cmp	r3, #128	; 0x80
 8006f46:	d107      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fae0 	bl	8007518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	d10e      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b40      	cmp	r3, #64	; 0x40
 8006f72:	d107      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 f8ff 	bl	8007182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b20      	cmp	r3, #32
 8006f90:	d10e      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b20      	cmp	r3, #32
 8006f9e:	d107      	bne.n	8006fb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0220 	mvn.w	r2, #32
 8006fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 faaa 	bl	8007504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fb0:	bf00      	nop
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <HAL_TIM_ConfigClockSource+0x1c>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e0b4      	b.n	800713e <HAL_TIM_ConfigClockSource+0x186>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700c:	d03e      	beq.n	800708c <HAL_TIM_ConfigClockSource+0xd4>
 800700e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007012:	f200 8087 	bhi.w	8007124 <HAL_TIM_ConfigClockSource+0x16c>
 8007016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701a:	f000 8086 	beq.w	800712a <HAL_TIM_ConfigClockSource+0x172>
 800701e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007022:	d87f      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x16c>
 8007024:	2b70      	cmp	r3, #112	; 0x70
 8007026:	d01a      	beq.n	800705e <HAL_TIM_ConfigClockSource+0xa6>
 8007028:	2b70      	cmp	r3, #112	; 0x70
 800702a:	d87b      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x16c>
 800702c:	2b60      	cmp	r3, #96	; 0x60
 800702e:	d050      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x11a>
 8007030:	2b60      	cmp	r3, #96	; 0x60
 8007032:	d877      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x16c>
 8007034:	2b50      	cmp	r3, #80	; 0x50
 8007036:	d03c      	beq.n	80070b2 <HAL_TIM_ConfigClockSource+0xfa>
 8007038:	2b50      	cmp	r3, #80	; 0x50
 800703a:	d873      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x16c>
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	d058      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x13a>
 8007040:	2b40      	cmp	r3, #64	; 0x40
 8007042:	d86f      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x16c>
 8007044:	2b30      	cmp	r3, #48	; 0x30
 8007046:	d064      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x15a>
 8007048:	2b30      	cmp	r3, #48	; 0x30
 800704a:	d86b      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x16c>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d060      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x15a>
 8007050:	2b20      	cmp	r3, #32
 8007052:	d867      	bhi.n	8007124 <HAL_TIM_ConfigClockSource+0x16c>
 8007054:	2b00      	cmp	r3, #0
 8007056:	d05c      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x15a>
 8007058:	2b10      	cmp	r3, #16
 800705a:	d05a      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x15a>
 800705c:	e062      	b.n	8007124 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6899      	ldr	r1, [r3, #8]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	685a      	ldr	r2, [r3, #4]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f000 f9ad 	bl	80073cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007080:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	609a      	str	r2, [r3, #8]
      break;
 800708a:	e04f      	b.n	800712c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6818      	ldr	r0, [r3, #0]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	6899      	ldr	r1, [r3, #8]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f000 f996 	bl	80073cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070ae:	609a      	str	r2, [r3, #8]
      break;
 80070b0:	e03c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6818      	ldr	r0, [r3, #0]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	6859      	ldr	r1, [r3, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	461a      	mov	r2, r3
 80070c0:	f000 f90a 	bl	80072d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2150      	movs	r1, #80	; 0x50
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f963 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 80070d0:	e02c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	461a      	mov	r2, r3
 80070e0:	f000 f929 	bl	8007336 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2160      	movs	r1, #96	; 0x60
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f953 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 80070f0:	e01c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6859      	ldr	r1, [r3, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	461a      	mov	r2, r3
 8007100:	f000 f8ea 	bl	80072d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2140      	movs	r1, #64	; 0x40
 800710a:	4618      	mov	r0, r3
 800710c:	f000 f943 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 8007110:	e00c      	b.n	800712c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4619      	mov	r1, r3
 800711c:	4610      	mov	r0, r2
 800711e:	f000 f93a 	bl	8007396 <TIM_ITRx_SetConfig>
      break;
 8007122:	e003      	b.n	800712c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e000      	b.n	800712c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800712a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800713c:	7bfb      	ldrb	r3, [r7, #15]
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
	...

08007198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a40      	ldr	r2, [pc, #256]	; (80072ac <TIM_Base_SetConfig+0x114>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d013      	beq.n	80071d8 <TIM_Base_SetConfig+0x40>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b6:	d00f      	beq.n	80071d8 <TIM_Base_SetConfig+0x40>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a3d      	ldr	r2, [pc, #244]	; (80072b0 <TIM_Base_SetConfig+0x118>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00b      	beq.n	80071d8 <TIM_Base_SetConfig+0x40>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a3c      	ldr	r2, [pc, #240]	; (80072b4 <TIM_Base_SetConfig+0x11c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d007      	beq.n	80071d8 <TIM_Base_SetConfig+0x40>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a3b      	ldr	r2, [pc, #236]	; (80072b8 <TIM_Base_SetConfig+0x120>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d003      	beq.n	80071d8 <TIM_Base_SetConfig+0x40>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a3a      	ldr	r2, [pc, #232]	; (80072bc <TIM_Base_SetConfig+0x124>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d108      	bne.n	80071ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a2f      	ldr	r2, [pc, #188]	; (80072ac <TIM_Base_SetConfig+0x114>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d02b      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071f8:	d027      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a2c      	ldr	r2, [pc, #176]	; (80072b0 <TIM_Base_SetConfig+0x118>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d023      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a2b      	ldr	r2, [pc, #172]	; (80072b4 <TIM_Base_SetConfig+0x11c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d01f      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <TIM_Base_SetConfig+0x120>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01b      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a29      	ldr	r2, [pc, #164]	; (80072bc <TIM_Base_SetConfig+0x124>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d017      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a28      	ldr	r2, [pc, #160]	; (80072c0 <TIM_Base_SetConfig+0x128>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d013      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a27      	ldr	r2, [pc, #156]	; (80072c4 <TIM_Base_SetConfig+0x12c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00f      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a26      	ldr	r2, [pc, #152]	; (80072c8 <TIM_Base_SetConfig+0x130>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d00b      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a25      	ldr	r2, [pc, #148]	; (80072cc <TIM_Base_SetConfig+0x134>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d007      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a24      	ldr	r2, [pc, #144]	; (80072d0 <TIM_Base_SetConfig+0x138>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d003      	beq.n	800724a <TIM_Base_SetConfig+0xb2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a23      	ldr	r2, [pc, #140]	; (80072d4 <TIM_Base_SetConfig+0x13c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d108      	bne.n	800725c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	695b      	ldr	r3, [r3, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	689a      	ldr	r2, [r3, #8]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a0a      	ldr	r2, [pc, #40]	; (80072ac <TIM_Base_SetConfig+0x114>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_Base_SetConfig+0xf8>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a0c      	ldr	r2, [pc, #48]	; (80072bc <TIM_Base_SetConfig+0x124>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d103      	bne.n	8007298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	691a      	ldr	r2, [r3, #16]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	615a      	str	r2, [r3, #20]
}
 800729e:	bf00      	nop
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40010000 	.word	0x40010000
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40000c00 	.word	0x40000c00
 80072bc:	40010400 	.word	0x40010400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40014400 	.word	0x40014400
 80072c8:	40014800 	.word	0x40014800
 80072cc:	40001800 	.word	0x40001800
 80072d0:	40001c00 	.word	0x40001c00
 80072d4:	40002000 	.word	0x40002000

080072d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f023 0201 	bic.w	r2, r3, #1
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	011b      	lsls	r3, r3, #4
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	4313      	orrs	r3, r2
 800730c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	f023 030a 	bic.w	r3, r3, #10
 8007314:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4313      	orrs	r3, r2
 800731c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	371c      	adds	r7, #28
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007336:	b480      	push	{r7}
 8007338:	b087      	sub	sp, #28
 800733a:	af00      	add	r7, sp, #0
 800733c:	60f8      	str	r0, [r7, #12]
 800733e:	60b9      	str	r1, [r7, #8]
 8007340:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f023 0210 	bic.w	r2, r3, #16
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a1b      	ldr	r3, [r3, #32]
 8007358:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007360:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	031b      	lsls	r3, r3, #12
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007372:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	4313      	orrs	r3, r2
 800737c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	621a      	str	r2, [r3, #32]
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f043 0307 	orr.w	r3, r3, #7
 80073b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	609a      	str	r2, [r3, #8]
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
 80073d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	021a      	lsls	r2, r3, #8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	609a      	str	r2, [r3, #8]
}
 8007400:	bf00      	nop
 8007402:	371c      	adds	r7, #28
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800741c:	2b01      	cmp	r3, #1
 800741e:	d101      	bne.n	8007424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007420:	2302      	movs	r3, #2
 8007422:	e05a      	b.n	80074da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a21      	ldr	r2, [pc, #132]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d022      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007470:	d01d      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a1d      	ldr	r2, [pc, #116]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d018      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a1b      	ldr	r2, [pc, #108]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d013      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a1a      	ldr	r2, [pc, #104]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00e      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a18      	ldr	r2, [pc, #96]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d009      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a17      	ldr	r2, [pc, #92]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d004      	beq.n	80074ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a15      	ldr	r2, [pc, #84]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d10c      	bne.n	80074c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40010000 	.word	0x40010000
 80074ec:	40000400 	.word	0x40000400
 80074f0:	40000800 	.word	0x40000800
 80074f4:	40000c00 	.word	0x40000c00
 80074f8:	40010400 	.word	0x40010400
 80074fc:	40014000 	.word	0x40014000
 8007500:	40001800 	.word	0x40001800

08007504 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e03f      	b.n	80075be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fc f83e 	bl	80035d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2224      	movs	r2, #36	; 0x24
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800756e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f001 f843 	bl	80085fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007584:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695a      	ldr	r2, [r3, #20]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007594:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b08a      	sub	sp, #40	; 0x28
 80075ca:	af02      	add	r7, sp, #8
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	603b      	str	r3, [r7, #0]
 80075d2:	4613      	mov	r3, r2
 80075d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075d6:	2300      	movs	r3, #0
 80075d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b20      	cmp	r3, #32
 80075e4:	d17c      	bne.n	80076e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <HAL_UART_Transmit+0x2c>
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e075      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_UART_Transmit+0x3e>
 8007600:	2302      	movs	r3, #2
 8007602:	e06e      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2221      	movs	r2, #33	; 0x21
 8007616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800761a:	f7fc faaf 	bl	8003b7c <HAL_GetTick>
 800761e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	88fa      	ldrh	r2, [r7, #6]
 8007624:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007634:	d108      	bne.n	8007648 <HAL_UART_Transmit+0x82>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d104      	bne.n	8007648 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800763e:	2300      	movs	r3, #0
 8007640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	e003      	b.n	8007650 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007658:	e02a      	b.n	80076b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2200      	movs	r2, #0
 8007662:	2180      	movs	r1, #128	; 0x80
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fcfa 	bl	800805e <UART_WaitOnFlagUntilTimeout>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e036      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	881b      	ldrh	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007688:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	3302      	adds	r3, #2
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	e007      	b.n	80076a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	3b01      	subs	r3, #1
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1cf      	bne.n	800765a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	2200      	movs	r2, #0
 80076c2:	2140      	movs	r1, #64	; 0x40
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f000 fcca 	bl	800805e <UART_WaitOnFlagUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d001      	beq.n	80076d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e006      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2220      	movs	r2, #32
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	e000      	b.n	80076e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076e0:	2302      	movs	r3, #2
  }
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3720      	adds	r7, #32
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08c      	sub	sp, #48	; 0x30
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	4613      	mov	r3, r2
 80076f8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b20      	cmp	r3, #32
 8007704:	d165      	bne.n	80077d2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <HAL_UART_Transmit_DMA+0x26>
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d101      	bne.n	8007716 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e05e      	b.n	80077d4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800771c:	2b01      	cmp	r3, #1
 800771e:	d101      	bne.n	8007724 <HAL_UART_Transmit_DMA+0x38>
 8007720:	2302      	movs	r3, #2
 8007722:	e057      	b.n	80077d4 <HAL_UART_Transmit_DMA+0xe8>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	88fa      	ldrh	r2, [r7, #6]
 8007736:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2221      	movs	r2, #33	; 0x21
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007750:	4a22      	ldr	r2, [pc, #136]	; (80077dc <HAL_UART_Transmit_DMA+0xf0>)
 8007752:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007758:	4a21      	ldr	r2, [pc, #132]	; (80077e0 <HAL_UART_Transmit_DMA+0xf4>)
 800775a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007760:	4a20      	ldr	r2, [pc, #128]	; (80077e4 <HAL_UART_Transmit_DMA+0xf8>)
 8007762:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007768:	2200      	movs	r2, #0
 800776a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800776c:	f107 0308 	add.w	r3, r7, #8
 8007770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	6819      	ldr	r1, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3304      	adds	r3, #4
 8007780:	461a      	mov	r2, r3
 8007782:	88fb      	ldrh	r3, [r7, #6]
 8007784:	f7fd fa8c 	bl	8004ca0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007790:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3314      	adds	r3, #20
 80077a0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	e853 3f00 	ldrex	r3, [r3]
 80077a8:	617b      	str	r3, [r7, #20]
   return(result);
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3314      	adds	r3, #20
 80077b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077ba:	627a      	str	r2, [r7, #36]	; 0x24
 80077bc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077be:	6a39      	ldr	r1, [r7, #32]
 80077c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1e5      	bne.n	800779a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	e000      	b.n	80077d4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80077d2:	2302      	movs	r3, #2
  }
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3730      	adds	r7, #48	; 0x30
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	08007db9 	.word	0x08007db9
 80077e0:	08007e53 	.word	0x08007e53
 80077e4:	08007fcb 	.word	0x08007fcb

080077e8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	4613      	mov	r3, r2
 80077f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b20      	cmp	r3, #32
 8007800:	d11d      	bne.n	800783e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <HAL_UART_Receive_DMA+0x26>
 8007808:	88fb      	ldrh	r3, [r7, #6]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d101      	bne.n	8007812 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e016      	b.n	8007840 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_UART_Receive_DMA+0x38>
 800781c:	2302      	movs	r3, #2
 800781e:	e00f      	b.n	8007840 <HAL_UART_Receive_DMA+0x58>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	461a      	mov	r2, r3
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 fc81 	bl	800813c <UART_Start_Receive_DMA>
 800783a:	4603      	mov	r3, r0
 800783c:	e000      	b.n	8007840 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800783e:	2302      	movs	r3, #2
  }
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b0ba      	sub	sp, #232	; 0xe8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800786e:	2300      	movs	r3, #0
 8007870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007874:	2300      	movs	r3, #0
 8007876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800787a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007886:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10f      	bne.n	80078ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0320 	and.w	r3, r3, #32
 8007896:	2b00      	cmp	r3, #0
 8007898:	d009      	beq.n	80078ae <HAL_UART_IRQHandler+0x66>
 800789a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800789e:	f003 0320 	and.w	r3, r3, #32
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fded 	bl	8008486 <UART_Receive_IT>
      return;
 80078ac:	e256      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 80de 	beq.w	8007a74 <HAL_UART_IRQHandler+0x22c>
 80078b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078bc:	f003 0301 	and.w	r3, r3, #1
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d106      	bne.n	80078d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 80d1 	beq.w	8007a74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d6:	f003 0301 	and.w	r3, r3, #1
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d00b      	beq.n	80078f6 <HAL_UART_IRQHandler+0xae>
 80078de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d005      	beq.n	80078f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f043 0201 	orr.w	r2, r3, #1
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00b      	beq.n	800791a <HAL_UART_IRQHandler+0xd2>
 8007902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d005      	beq.n	800791a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	f043 0202 	orr.w	r2, r3, #2
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <HAL_UART_IRQHandler+0xf6>
 8007926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	f043 0204 	orr.w	r2, r3, #4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800793e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b00      	cmp	r3, #0
 8007948:	d011      	beq.n	800796e <HAL_UART_IRQHandler+0x126>
 800794a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d105      	bne.n	8007962 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d005      	beq.n	800796e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	f043 0208 	orr.w	r2, r3, #8
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	f000 81ed 	beq.w	8007d52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d008      	beq.n	8007996 <HAL_UART_IRQHandler+0x14e>
 8007984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fd78 	bl	8008486 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b40      	cmp	r3, #64	; 0x40
 80079a2:	bf0c      	ite	eq
 80079a4:	2301      	moveq	r3, #1
 80079a6:	2300      	movne	r3, #0
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f003 0308 	and.w	r3, r3, #8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d103      	bne.n	80079c2 <HAL_UART_IRQHandler+0x17a>
 80079ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d04f      	beq.n	8007a62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fc80 	bl	80082c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d2:	2b40      	cmp	r3, #64	; 0x40
 80079d4:	d141      	bne.n	8007a5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3314      	adds	r3, #20
 80079dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3314      	adds	r3, #20
 80079fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007a02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007a0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1d9      	bne.n	80079d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d013      	beq.n	8007a52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2e:	4a7d      	ldr	r2, [pc, #500]	; (8007c24 <HAL_UART_IRQHandler+0x3dc>)
 8007a30:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fd f9fa 	bl	8004e30 <HAL_DMA_Abort_IT>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d016      	beq.n	8007a70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a4c:	4610      	mov	r0, r2
 8007a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a50:	e00e      	b.n	8007a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f99a 	bl	8007d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a58:	e00a      	b.n	8007a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f996 	bl	8007d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a60:	e006      	b.n	8007a70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f992 	bl	8007d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007a6e:	e170      	b.n	8007d52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a70:	bf00      	nop
    return;
 8007a72:	e16e      	b.n	8007d52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	f040 814a 	bne.w	8007d12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0310 	and.w	r3, r3, #16
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	f000 8143 	beq.w	8007d12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 813c 	beq.w	8007d12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60bb      	str	r3, [r7, #8]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	60bb      	str	r3, [r7, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	60bb      	str	r3, [r7, #8]
 8007aae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	695b      	ldr	r3, [r3, #20]
 8007ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aba:	2b40      	cmp	r3, #64	; 0x40
 8007abc:	f040 80b4 	bne.w	8007c28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8140 	beq.w	8007d56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ada:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	f080 8139 	bcs.w	8007d56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af6:	f000 8088 	beq.w	8007c0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	330c      	adds	r3, #12
 8007b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	330c      	adds	r3, #12
 8007b22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007b26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1d9      	bne.n	8007afa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	3314      	adds	r3, #20
 8007b4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b58:	f023 0301 	bic.w	r3, r3, #1
 8007b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	3314      	adds	r3, #20
 8007b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e1      	bne.n	8007b46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3314      	adds	r3, #20
 8007b88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3314      	adds	r3, #20
 8007ba2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ba6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ba8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007bac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e3      	bne.n	8007b82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2220      	movs	r2, #32
 8007bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	330c      	adds	r3, #12
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd2:	e853 3f00 	ldrex	r3, [r3]
 8007bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bda:	f023 0310 	bic.w	r3, r3, #16
 8007bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	330c      	adds	r3, #12
 8007be8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007bec:	65ba      	str	r2, [r7, #88]	; 0x58
 8007bee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bf2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bf4:	e841 2300 	strex	r3, r2, [r1]
 8007bf8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e3      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fd f8a3 	bl	8004d50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f8c0 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c20:	e099      	b.n	8007d56 <HAL_UART_IRQHandler+0x50e>
 8007c22:	bf00      	nop
 8007c24:	0800838f 	.word	0x0800838f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 808b 	beq.w	8007d5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8086 	beq.w	8007d5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	330c      	adds	r3, #12
 8007c54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007c72:	647a      	str	r2, [r7, #68]	; 0x44
 8007c74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e3      	bne.n	8007c4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3314      	adds	r3, #20
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	623b      	str	r3, [r7, #32]
   return(result);
 8007c96:	6a3b      	ldr	r3, [r7, #32]
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007caa:	633a      	str	r2, [r7, #48]	; 0x30
 8007cac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb2:	e841 2300 	strex	r3, r2, [r1]
 8007cb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e3      	bne.n	8007c86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	330c      	adds	r3, #12
 8007cd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	e853 3f00 	ldrex	r3, [r3]
 8007cda:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0310 	bic.w	r3, r3, #16
 8007ce2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	330c      	adds	r3, #12
 8007cec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007cf0:	61fa      	str	r2, [r7, #28]
 8007cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf4:	69b9      	ldr	r1, [r7, #24]
 8007cf6:	69fa      	ldr	r2, [r7, #28]
 8007cf8:	e841 2300 	strex	r3, r2, [r1]
 8007cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1e3      	bne.n	8007ccc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f848 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d10:	e023      	b.n	8007d5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <HAL_UART_IRQHandler+0x4ea>
 8007d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fb43 	bl	80083b6 <UART_Transmit_IT>
    return;
 8007d30:	e014      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00e      	beq.n	8007d5c <HAL_UART_IRQHandler+0x514>
 8007d3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d008      	beq.n	8007d5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 fb83 	bl	8008456 <UART_EndTransmit_IT>
    return;
 8007d50:	e004      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
    return;
 8007d52:	bf00      	nop
 8007d54:	e002      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
      return;
 8007d56:	bf00      	nop
 8007d58:	e000      	b.n	8007d5c <HAL_UART_IRQHandler+0x514>
      return;
 8007d5a:	bf00      	nop
  }
}
 8007d5c:	37e8      	adds	r7, #232	; 0xe8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop

08007d64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b090      	sub	sp, #64	; 0x40
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d137      	bne.n	8007e44 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	3314      	adds	r3, #20
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de4:	e853 3f00 	ldrex	r3, [r3]
 8007de8:	623b      	str	r3, [r7, #32]
   return(result);
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3314      	adds	r3, #20
 8007df8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dfa:	633a      	str	r2, [r7, #48]	; 0x30
 8007dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e02:	e841 2300 	strex	r3, r2, [r1]
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1e5      	bne.n	8007dda <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	330c      	adds	r3, #12
 8007e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e24:	637b      	str	r3, [r7, #52]	; 0x34
 8007e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	330c      	adds	r3, #12
 8007e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e2e:	61fa      	str	r2, [r7, #28]
 8007e30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e32:	69b9      	ldr	r1, [r7, #24]
 8007e34:	69fa      	ldr	r2, [r7, #28]
 8007e36:	e841 2300 	strex	r3, r2, [r1]
 8007e3a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1e5      	bne.n	8007e0e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e42:	e002      	b.n	8007e4a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007e44:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e46:	f7fa f94d 	bl	80020e4 <HAL_UART_TxCpltCallback>
}
 8007e4a:	bf00      	nop
 8007e4c:	3740      	adds	r7, #64	; 0x40
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff ff7f 	bl	8007d64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e66:	bf00      	nop
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b09c      	sub	sp, #112	; 0x70
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d172      	bne.n	8007f70 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	330c      	adds	r3, #12
 8007e96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e9a:	e853 3f00 	ldrex	r3, [r3]
 8007e9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	330c      	adds	r3, #12
 8007eae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007eb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8007eb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007eb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e5      	bne.n	8007e90 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3314      	adds	r3, #20
 8007eca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	e853 3f00 	ldrex	r3, [r3]
 8007ed2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed6:	f023 0301 	bic.w	r3, r3, #1
 8007eda:	667b      	str	r3, [r7, #100]	; 0x64
 8007edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3314      	adds	r3, #20
 8007ee2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ee4:	647a      	str	r2, [r7, #68]	; 0x44
 8007ee6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eec:	e841 2300 	strex	r3, r2, [r1]
 8007ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e5      	bne.n	8007ec4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	3314      	adds	r3, #20
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	e853 3f00 	ldrex	r3, [r3]
 8007f06:	623b      	str	r3, [r7, #32]
   return(result);
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f0e:	663b      	str	r3, [r7, #96]	; 0x60
 8007f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3314      	adds	r3, #20
 8007f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f18:	633a      	str	r2, [r7, #48]	; 0x30
 8007f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f20:	e841 2300 	strex	r3, r2, [r1]
 8007f24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d1e5      	bne.n	8007ef8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d119      	bne.n	8007f70 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	330c      	adds	r3, #12
 8007f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0310 	bic.w	r3, r3, #16
 8007f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f5c:	61fa      	str	r2, [r7, #28]
 8007f5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	69b9      	ldr	r1, [r7, #24]
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	617b      	str	r3, [r7, #20]
   return(result);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e5      	bne.n	8007f3c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d106      	bne.n	8007f86 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f80:	f7ff ff0e 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f84:	e002      	b.n	8007f8c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007f86:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007f88:	f7fa f8b6 	bl	80020f8 <HAL_UART_RxCpltCallback>
}
 8007f8c:	bf00      	nop
 8007f8e:	3770      	adds	r7, #112	; 0x70
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d108      	bne.n	8007fbc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007fae:	085b      	lsrs	r3, r3, #1
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7ff fef3 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fba:	e002      	b.n	8007fc2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f7ff fedb 	bl	8007d78 <HAL_UART_RxHalfCpltCallback>
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fda:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe6:	2b80      	cmp	r3, #128	; 0x80
 8007fe8:	bf0c      	ite	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	2300      	movne	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b21      	cmp	r3, #33	; 0x21
 8007ffc:	d108      	bne.n	8008010 <UART_DMAError+0x46>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2200      	movs	r2, #0
 8008008:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800800a:	68b8      	ldr	r0, [r7, #8]
 800800c:	f000 f934 	bl	8008278 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801a:	2b40      	cmp	r3, #64	; 0x40
 800801c:	bf0c      	ite	eq
 800801e:	2301      	moveq	r3, #1
 8008020:	2300      	movne	r3, #0
 8008022:	b2db      	uxtb	r3, r3
 8008024:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b22      	cmp	r3, #34	; 0x22
 8008030:	d108      	bne.n	8008044 <UART_DMAError+0x7a>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d005      	beq.n	8008044 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2200      	movs	r2, #0
 800803c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800803e:	68b8      	ldr	r0, [r7, #8]
 8008040:	f000 f942 	bl	80082c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008048:	f043 0210 	orr.w	r2, r3, #16
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008050:	68b8      	ldr	r0, [r7, #8]
 8008052:	f7ff fe9b 	bl	8007d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008056:	bf00      	nop
 8008058:	3710      	adds	r7, #16
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b090      	sub	sp, #64	; 0x40
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	603b      	str	r3, [r7, #0]
 800806a:	4613      	mov	r3, r2
 800806c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806e:	e050      	b.n	8008112 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d04c      	beq.n	8008112 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <UART_WaitOnFlagUntilTimeout+0x30>
 800807e:	f7fb fd7d 	bl	8003b7c <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800808a:	429a      	cmp	r2, r3
 800808c:	d241      	bcs.n	8008112 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	330c      	adds	r3, #12
 80080ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080ae:	637a      	str	r2, [r7, #52]	; 0x34
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e5      	bne.n	800808e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3314      	adds	r3, #20
 80080c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	613b      	str	r3, [r7, #16]
   return(result);
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f023 0301 	bic.w	r3, r3, #1
 80080d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3314      	adds	r3, #20
 80080e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080e2:	623a      	str	r2, [r7, #32]
 80080e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	69f9      	ldr	r1, [r7, #28]
 80080e8:	6a3a      	ldr	r2, [r7, #32]
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e5      	bne.n	80080c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e00f      	b.n	8008132 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4013      	ands	r3, r2
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	bf0c      	ite	eq
 8008122:	2301      	moveq	r3, #1
 8008124:	2300      	movne	r3, #0
 8008126:	b2db      	uxtb	r3, r3
 8008128:	461a      	mov	r2, r3
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	429a      	cmp	r2, r3
 800812e:	d09f      	beq.n	8008070 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3740      	adds	r7, #64	; 0x40
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b098      	sub	sp, #96	; 0x60
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	4613      	mov	r3, r2
 8008148:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800814a:	68ba      	ldr	r2, [r7, #8]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	88fa      	ldrh	r2, [r7, #6]
 8008154:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2222      	movs	r2, #34	; 0x22
 8008160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008168:	4a40      	ldr	r2, [pc, #256]	; (800826c <UART_Start_Receive_DMA+0x130>)
 800816a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	4a3f      	ldr	r2, [pc, #252]	; (8008270 <UART_Start_Receive_DMA+0x134>)
 8008172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	4a3e      	ldr	r2, [pc, #248]	; (8008274 <UART_Start_Receive_DMA+0x138>)
 800817a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	2200      	movs	r2, #0
 8008182:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008184:	f107 0308 	add.w	r3, r7, #8
 8008188:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3304      	adds	r3, #4
 8008194:	4619      	mov	r1, r3
 8008196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	f7fc fd80 	bl	8004ca0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80081a0:	2300      	movs	r3, #0
 80081a2:	613b      	str	r3, [r7, #16]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	613b      	str	r3, [r7, #16]
 80081b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d019      	beq.n	80081fa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	330c      	adds	r3, #12
 80081cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	330c      	adds	r3, #12
 80081e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80081e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80081ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80081f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e5      	bne.n	80081c6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3314      	adds	r3, #20
 8008200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	657b      	str	r3, [r7, #84]	; 0x54
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3314      	adds	r3, #20
 8008218:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800821a:	63ba      	str	r2, [r7, #56]	; 0x38
 800821c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e5      	bne.n	80081fa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3314      	adds	r3, #20
 8008234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	617b      	str	r3, [r7, #20]
   return(result);
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008244:	653b      	str	r3, [r7, #80]	; 0x50
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3314      	adds	r3, #20
 800824c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800824e:	627a      	str	r2, [r7, #36]	; 0x24
 8008250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6a39      	ldr	r1, [r7, #32]
 8008254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	61fb      	str	r3, [r7, #28]
   return(result);
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e5      	bne.n	800822e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3760      	adds	r7, #96	; 0x60
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	08007e6f 	.word	0x08007e6f
 8008270:	08007f95 	.word	0x08007f95
 8008274:	08007fcb 	.word	0x08007fcb

08008278 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008278:	b480      	push	{r7}
 800827a:	b089      	sub	sp, #36	; 0x24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	330c      	adds	r3, #12
 8008286:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	e853 3f00 	ldrex	r3, [r3]
 800828e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008296:	61fb      	str	r3, [r7, #28]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	330c      	adds	r3, #12
 800829e:	69fa      	ldr	r2, [r7, #28]
 80082a0:	61ba      	str	r2, [r7, #24]
 80082a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6979      	ldr	r1, [r7, #20]
 80082a6:	69ba      	ldr	r2, [r7, #24]
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	613b      	str	r3, [r7, #16]
   return(result);
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e5      	bne.n	8008280 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80082bc:	bf00      	nop
 80082be:	3724      	adds	r7, #36	; 0x24
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b095      	sub	sp, #84	; 0x54
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	330c      	adds	r3, #12
 80082d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330c      	adds	r3, #12
 80082ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082f0:	643a      	str	r2, [r7, #64]	; 0x40
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e5      	bne.n	80082d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3314      	adds	r3, #20
 800830a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	61fb      	str	r3, [r7, #28]
   return(result);
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	64bb      	str	r3, [r7, #72]	; 0x48
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3314      	adds	r3, #20
 8008322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008324:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800832a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e5      	bne.n	8008304 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	2b01      	cmp	r3, #1
 800833e:	d119      	bne.n	8008374 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	330c      	adds	r3, #12
 8008346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f023 0310 	bic.w	r3, r3, #16
 8008356:	647b      	str	r3, [r7, #68]	; 0x44
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008360:	61ba      	str	r2, [r7, #24]
 8008362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6979      	ldr	r1, [r7, #20]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	613b      	str	r3, [r7, #16]
   return(result);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e5      	bne.n	8008340 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008382:	bf00      	nop
 8008384:	3754      	adds	r7, #84	; 0x54
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fcef 	bl	8007d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b085      	sub	sp, #20
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b21      	cmp	r3, #33	; 0x21
 80083c8:	d13e      	bne.n	8008448 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d2:	d114      	bne.n	80083fe <UART_Transmit_IT+0x48>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d110      	bne.n	80083fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	1c9a      	adds	r2, r3, #2
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	621a      	str	r2, [r3, #32]
 80083fc:	e008      	b.n	8008410 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	1c59      	adds	r1, r3, #1
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6211      	str	r1, [r2, #32]
 8008408:	781a      	ldrb	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	b29b      	uxth	r3, r3
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	4619      	mov	r1, r3
 800841e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10f      	bne.n	8008444 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008432:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008442:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e000      	b.n	800844a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008448:	2302      	movs	r3, #2
  }
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800846c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7f9 fe34 	bl	80020e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b08c      	sub	sp, #48	; 0x30
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b22      	cmp	r3, #34	; 0x22
 8008498:	f040 80ab 	bne.w	80085f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a4:	d117      	bne.n	80084d6 <UART_Receive_IT+0x50>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d113      	bne.n	80084d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	1c9a      	adds	r2, r3, #2
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	629a      	str	r2, [r3, #40]	; 0x28
 80084d4:	e026      	b.n	8008524 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e8:	d007      	beq.n	80084fa <UART_Receive_IT+0x74>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <UART_Receive_IT+0x82>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	b2da      	uxtb	r2, r3
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	701a      	strb	r2, [r3, #0]
 8008506:	e008      	b.n	800851a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008514:	b2da      	uxtb	r2, r3
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29b      	uxth	r3, r3
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4619      	mov	r1, r3
 8008532:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008534:	2b00      	cmp	r3, #0
 8008536:	d15a      	bne.n	80085ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0220 	bic.w	r2, r2, #32
 8008546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695a      	ldr	r2, [r3, #20]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0201 	bic.w	r2, r2, #1
 8008566:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008574:	2b01      	cmp	r3, #1
 8008576:	d135      	bne.n	80085e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	330c      	adds	r3, #12
 8008584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	613b      	str	r3, [r7, #16]
   return(result);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f023 0310 	bic.w	r3, r3, #16
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	330c      	adds	r3, #12
 800859c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859e:	623a      	str	r2, [r7, #32]
 80085a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	69f9      	ldr	r1, [r7, #28]
 80085a4:	6a3a      	ldr	r2, [r7, #32]
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e5      	bne.n	800857e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b10      	cmp	r3, #16
 80085be:	d10a      	bne.n	80085d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085c0:	2300      	movs	r3, #0
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fbdf 	bl	8007da0 <HAL_UARTEx_RxEventCallback>
 80085e2:	e002      	b.n	80085ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7f9 fd87 	bl	80020f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	e002      	b.n	80085f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	e000      	b.n	80085f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80085f2:	2302      	movs	r3, #2
  }
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3730      	adds	r7, #48	; 0x30
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008600:	b0c0      	sub	sp, #256	; 0x100
 8008602:	af00      	add	r7, sp, #0
 8008604:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008618:	68d9      	ldr	r1, [r3, #12]
 800861a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	ea40 0301 	orr.w	r3, r0, r1
 8008624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	431a      	orrs	r2, r3
 8008634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	431a      	orrs	r2, r3
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	4313      	orrs	r3, r2
 8008644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008654:	f021 010c 	bic.w	r1, r1, #12
 8008658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008662:	430b      	orrs	r3, r1
 8008664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008676:	6999      	ldr	r1, [r3, #24]
 8008678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	ea40 0301 	orr.w	r3, r0, r1
 8008682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	4b8f      	ldr	r3, [pc, #572]	; (80088c8 <UART_SetConfig+0x2cc>)
 800868c:	429a      	cmp	r2, r3
 800868e:	d005      	beq.n	800869c <UART_SetConfig+0xa0>
 8008690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	4b8d      	ldr	r3, [pc, #564]	; (80088cc <UART_SetConfig+0x2d0>)
 8008698:	429a      	cmp	r2, r3
 800869a:	d104      	bne.n	80086a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800869c:	f7fd f908 	bl	80058b0 <HAL_RCC_GetPCLK2Freq>
 80086a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086a4:	e003      	b.n	80086ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086a6:	f7fd f8ef 	bl	8005888 <HAL_RCC_GetPCLK1Freq>
 80086aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086b8:	f040 810c 	bne.w	80088d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c0:	2200      	movs	r2, #0
 80086c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80086ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80086ce:	4622      	mov	r2, r4
 80086d0:	462b      	mov	r3, r5
 80086d2:	1891      	adds	r1, r2, r2
 80086d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80086d6:	415b      	adcs	r3, r3
 80086d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80086de:	4621      	mov	r1, r4
 80086e0:	eb12 0801 	adds.w	r8, r2, r1
 80086e4:	4629      	mov	r1, r5
 80086e6:	eb43 0901 	adc.w	r9, r3, r1
 80086ea:	f04f 0200 	mov.w	r2, #0
 80086ee:	f04f 0300 	mov.w	r3, #0
 80086f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086fe:	4690      	mov	r8, r2
 8008700:	4699      	mov	r9, r3
 8008702:	4623      	mov	r3, r4
 8008704:	eb18 0303 	adds.w	r3, r8, r3
 8008708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800870c:	462b      	mov	r3, r5
 800870e:	eb49 0303 	adc.w	r3, r9, r3
 8008712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008722:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800872a:	460b      	mov	r3, r1
 800872c:	18db      	adds	r3, r3, r3
 800872e:	653b      	str	r3, [r7, #80]	; 0x50
 8008730:	4613      	mov	r3, r2
 8008732:	eb42 0303 	adc.w	r3, r2, r3
 8008736:	657b      	str	r3, [r7, #84]	; 0x54
 8008738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800873c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008740:	f7f8 fc1c 	bl	8000f7c <__aeabi_uldivmod>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4b61      	ldr	r3, [pc, #388]	; (80088d0 <UART_SetConfig+0x2d4>)
 800874a:	fba3 2302 	umull	r2, r3, r3, r2
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	011c      	lsls	r4, r3, #4
 8008752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008756:	2200      	movs	r2, #0
 8008758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800875c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008764:	4642      	mov	r2, r8
 8008766:	464b      	mov	r3, r9
 8008768:	1891      	adds	r1, r2, r2
 800876a:	64b9      	str	r1, [r7, #72]	; 0x48
 800876c:	415b      	adcs	r3, r3
 800876e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008774:	4641      	mov	r1, r8
 8008776:	eb12 0a01 	adds.w	sl, r2, r1
 800877a:	4649      	mov	r1, r9
 800877c:	eb43 0b01 	adc.w	fp, r3, r1
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800878c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008794:	4692      	mov	sl, r2
 8008796:	469b      	mov	fp, r3
 8008798:	4643      	mov	r3, r8
 800879a:	eb1a 0303 	adds.w	r3, sl, r3
 800879e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087a2:	464b      	mov	r3, r9
 80087a4:	eb4b 0303 	adc.w	r3, fp, r3
 80087a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80087bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80087c0:	460b      	mov	r3, r1
 80087c2:	18db      	adds	r3, r3, r3
 80087c4:	643b      	str	r3, [r7, #64]	; 0x40
 80087c6:	4613      	mov	r3, r2
 80087c8:	eb42 0303 	adc.w	r3, r2, r3
 80087cc:	647b      	str	r3, [r7, #68]	; 0x44
 80087ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80087d6:	f7f8 fbd1 	bl	8000f7c <__aeabi_uldivmod>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	4b3b      	ldr	r3, [pc, #236]	; (80088d0 <UART_SetConfig+0x2d4>)
 80087e2:	fba3 2301 	umull	r2, r3, r3, r1
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	2264      	movs	r2, #100	; 0x64
 80087ea:	fb02 f303 	mul.w	r3, r2, r3
 80087ee:	1acb      	subs	r3, r1, r3
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80087f6:	4b36      	ldr	r3, [pc, #216]	; (80088d0 <UART_SetConfig+0x2d4>)
 80087f8:	fba3 2302 	umull	r2, r3, r3, r2
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008804:	441c      	add	r4, r3
 8008806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800880a:	2200      	movs	r2, #0
 800880c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008810:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	1891      	adds	r1, r2, r2
 800881e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008820:	415b      	adcs	r3, r3
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008828:	4641      	mov	r1, r8
 800882a:	1851      	adds	r1, r2, r1
 800882c:	6339      	str	r1, [r7, #48]	; 0x30
 800882e:	4649      	mov	r1, r9
 8008830:	414b      	adcs	r3, r1
 8008832:	637b      	str	r3, [r7, #52]	; 0x34
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008840:	4659      	mov	r1, fp
 8008842:	00cb      	lsls	r3, r1, #3
 8008844:	4651      	mov	r1, sl
 8008846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800884a:	4651      	mov	r1, sl
 800884c:	00ca      	lsls	r2, r1, #3
 800884e:	4610      	mov	r0, r2
 8008850:	4619      	mov	r1, r3
 8008852:	4603      	mov	r3, r0
 8008854:	4642      	mov	r2, r8
 8008856:	189b      	adds	r3, r3, r2
 8008858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800885c:	464b      	mov	r3, r9
 800885e:	460a      	mov	r2, r1
 8008860:	eb42 0303 	adc.w	r3, r2, r3
 8008864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008874:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800887c:	460b      	mov	r3, r1
 800887e:	18db      	adds	r3, r3, r3
 8008880:	62bb      	str	r3, [r7, #40]	; 0x28
 8008882:	4613      	mov	r3, r2
 8008884:	eb42 0303 	adc.w	r3, r2, r3
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800888a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800888e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008892:	f7f8 fb73 	bl	8000f7c <__aeabi_uldivmod>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <UART_SetConfig+0x2d4>)
 800889c:	fba3 1302 	umull	r1, r3, r3, r2
 80088a0:	095b      	lsrs	r3, r3, #5
 80088a2:	2164      	movs	r1, #100	; 0x64
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	3332      	adds	r3, #50	; 0x32
 80088ae:	4a08      	ldr	r2, [pc, #32]	; (80088d0 <UART_SetConfig+0x2d4>)
 80088b0:	fba2 2303 	umull	r2, r3, r2, r3
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	f003 0207 	and.w	r2, r3, #7
 80088ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4422      	add	r2, r4
 80088c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088c4:	e105      	b.n	8008ad2 <UART_SetConfig+0x4d6>
 80088c6:	bf00      	nop
 80088c8:	40011000 	.word	0x40011000
 80088cc:	40011400 	.word	0x40011400
 80088d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088d8:	2200      	movs	r2, #0
 80088da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80088e6:	4642      	mov	r2, r8
 80088e8:	464b      	mov	r3, r9
 80088ea:	1891      	adds	r1, r2, r2
 80088ec:	6239      	str	r1, [r7, #32]
 80088ee:	415b      	adcs	r3, r3
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
 80088f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088f6:	4641      	mov	r1, r8
 80088f8:	1854      	adds	r4, r2, r1
 80088fa:	4649      	mov	r1, r9
 80088fc:	eb43 0501 	adc.w	r5, r3, r1
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	00eb      	lsls	r3, r5, #3
 800890a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800890e:	00e2      	lsls	r2, r4, #3
 8008910:	4614      	mov	r4, r2
 8008912:	461d      	mov	r5, r3
 8008914:	4643      	mov	r3, r8
 8008916:	18e3      	adds	r3, r4, r3
 8008918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800891c:	464b      	mov	r3, r9
 800891e:	eb45 0303 	adc.w	r3, r5, r3
 8008922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008932:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008942:	4629      	mov	r1, r5
 8008944:	008b      	lsls	r3, r1, #2
 8008946:	4621      	mov	r1, r4
 8008948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800894c:	4621      	mov	r1, r4
 800894e:	008a      	lsls	r2, r1, #2
 8008950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008954:	f7f8 fb12 	bl	8000f7c <__aeabi_uldivmod>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4b60      	ldr	r3, [pc, #384]	; (8008ae0 <UART_SetConfig+0x4e4>)
 800895e:	fba3 2302 	umull	r2, r3, r3, r2
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	011c      	lsls	r4, r3, #4
 8008966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800896a:	2200      	movs	r2, #0
 800896c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	1891      	adds	r1, r2, r2
 800897e:	61b9      	str	r1, [r7, #24]
 8008980:	415b      	adcs	r3, r3
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008988:	4641      	mov	r1, r8
 800898a:	1851      	adds	r1, r2, r1
 800898c:	6139      	str	r1, [r7, #16]
 800898e:	4649      	mov	r1, r9
 8008990:	414b      	adcs	r3, r1
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089a0:	4659      	mov	r1, fp
 80089a2:	00cb      	lsls	r3, r1, #3
 80089a4:	4651      	mov	r1, sl
 80089a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089aa:	4651      	mov	r1, sl
 80089ac:	00ca      	lsls	r2, r1, #3
 80089ae:	4610      	mov	r0, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	4603      	mov	r3, r0
 80089b4:	4642      	mov	r2, r8
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089bc:	464b      	mov	r3, r9
 80089be:	460a      	mov	r2, r1
 80089c0:	eb42 0303 	adc.w	r3, r2, r3
 80089c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80089d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	f04f 0300 	mov.w	r3, #0
 80089dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80089e0:	4649      	mov	r1, r9
 80089e2:	008b      	lsls	r3, r1, #2
 80089e4:	4641      	mov	r1, r8
 80089e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089ea:	4641      	mov	r1, r8
 80089ec:	008a      	lsls	r2, r1, #2
 80089ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80089f2:	f7f8 fac3 	bl	8000f7c <__aeabi_uldivmod>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4b39      	ldr	r3, [pc, #228]	; (8008ae0 <UART_SetConfig+0x4e4>)
 80089fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008a00:	095b      	lsrs	r3, r3, #5
 8008a02:	2164      	movs	r1, #100	; 0x64
 8008a04:	fb01 f303 	mul.w	r3, r1, r3
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	011b      	lsls	r3, r3, #4
 8008a0c:	3332      	adds	r3, #50	; 0x32
 8008a0e:	4a34      	ldr	r2, [pc, #208]	; (8008ae0 <UART_SetConfig+0x4e4>)
 8008a10:	fba2 2303 	umull	r2, r3, r2, r3
 8008a14:	095b      	lsrs	r3, r3, #5
 8008a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a1a:	441c      	add	r4, r3
 8008a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a20:	2200      	movs	r2, #0
 8008a22:	673b      	str	r3, [r7, #112]	; 0x70
 8008a24:	677a      	str	r2, [r7, #116]	; 0x74
 8008a26:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a2a:	4642      	mov	r2, r8
 8008a2c:	464b      	mov	r3, r9
 8008a2e:	1891      	adds	r1, r2, r2
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	415b      	adcs	r3, r3
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a3a:	4641      	mov	r1, r8
 8008a3c:	1851      	adds	r1, r2, r1
 8008a3e:	6039      	str	r1, [r7, #0]
 8008a40:	4649      	mov	r1, r9
 8008a42:	414b      	adcs	r3, r1
 8008a44:	607b      	str	r3, [r7, #4]
 8008a46:	f04f 0200 	mov.w	r2, #0
 8008a4a:	f04f 0300 	mov.w	r3, #0
 8008a4e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a52:	4659      	mov	r1, fp
 8008a54:	00cb      	lsls	r3, r1, #3
 8008a56:	4651      	mov	r1, sl
 8008a58:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a5c:	4651      	mov	r1, sl
 8008a5e:	00ca      	lsls	r2, r1, #3
 8008a60:	4610      	mov	r0, r2
 8008a62:	4619      	mov	r1, r3
 8008a64:	4603      	mov	r3, r0
 8008a66:	4642      	mov	r2, r8
 8008a68:	189b      	adds	r3, r3, r2
 8008a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a6c:	464b      	mov	r3, r9
 8008a6e:	460a      	mov	r2, r1
 8008a70:	eb42 0303 	adc.w	r3, r2, r3
 8008a74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8008a80:	667a      	str	r2, [r7, #100]	; 0x64
 8008a82:	f04f 0200 	mov.w	r2, #0
 8008a86:	f04f 0300 	mov.w	r3, #0
 8008a8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a8e:	4649      	mov	r1, r9
 8008a90:	008b      	lsls	r3, r1, #2
 8008a92:	4641      	mov	r1, r8
 8008a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a98:	4641      	mov	r1, r8
 8008a9a:	008a      	lsls	r2, r1, #2
 8008a9c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008aa0:	f7f8 fa6c 	bl	8000f7c <__aeabi_uldivmod>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <UART_SetConfig+0x4e4>)
 8008aaa:	fba3 1302 	umull	r1, r3, r3, r2
 8008aae:	095b      	lsrs	r3, r3, #5
 8008ab0:	2164      	movs	r1, #100	; 0x64
 8008ab2:	fb01 f303 	mul.w	r3, r1, r3
 8008ab6:	1ad3      	subs	r3, r2, r3
 8008ab8:	011b      	lsls	r3, r3, #4
 8008aba:	3332      	adds	r3, #50	; 0x32
 8008abc:	4a08      	ldr	r2, [pc, #32]	; (8008ae0 <UART_SetConfig+0x4e4>)
 8008abe:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac2:	095b      	lsrs	r3, r3, #5
 8008ac4:	f003 020f 	and.w	r2, r3, #15
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4422      	add	r2, r4
 8008ad0:	609a      	str	r2, [r3, #8]
}
 8008ad2:	bf00      	nop
 8008ad4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ade:	bf00      	nop
 8008ae0:	51eb851f 	.word	0x51eb851f

08008ae4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008ae8:	4904      	ldr	r1, [pc, #16]	; (8008afc <MX_FATFS_Init+0x18>)
 8008aea:	4805      	ldr	r0, [pc, #20]	; (8008b00 <MX_FATFS_Init+0x1c>)
 8008aec:	f002 fd78 	bl	800b5e0 <FATFS_LinkDriver>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	4b03      	ldr	r3, [pc, #12]	; (8008b04 <MX_FATFS_Init+0x20>)
 8008af6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008af8:	bf00      	nop
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	2000181c 	.word	0x2000181c
 8008b00:	20000024 	.word	0x20000024
 8008b04:	20001818 	.word	0x20001818

08008b08 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008b0c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	4603      	mov	r3, r0
 8008b20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7f8 ff7d 	bl	8001a24 <SD_disk_initialize>
 8008b2a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8008b3e:	79fb      	ldrb	r3, [r7, #7]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7f9 f859 	bl	8001bf8 <SD_disk_status>
 8008b46:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8008b60:	7bf8      	ldrb	r0, [r7, #15]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	f7f9 f85c 	bl	8001c24 <SD_disk_read>
 8008b6c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
 8008b80:	603b      	str	r3, [r7, #0]
 8008b82:	4603      	mov	r3, r0
 8008b84:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008b86:	7bf8      	ldrb	r0, [r7, #15]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	68b9      	ldr	r1, [r7, #8]
 8008b8e:	f7f9 f8b3 	bl	8001cf8 <SD_disk_write>
 8008b92:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	603a      	str	r2, [r7, #0]
 8008ba6:	71fb      	strb	r3, [r7, #7]
 8008ba8:	460b      	mov	r3, r1
 8008baa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008bac:	79b9      	ldrb	r1, [r7, #6]
 8008bae:	79fb      	ldrb	r3, [r7, #7]
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7f9 f924 	bl	8001e00 <SD_disk_ioctl>
 8008bb8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	4a08      	ldr	r2, [pc, #32]	; (8008bf4 <disk_status+0x30>)
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	79fa      	ldrb	r2, [r7, #7]
 8008bdc:	4905      	ldr	r1, [pc, #20]	; (8008bf4 <disk_status+0x30>)
 8008bde:	440a      	add	r2, r1
 8008be0:	7a12      	ldrb	r2, [r2, #8]
 8008be2:	4610      	mov	r0, r2
 8008be4:	4798      	blx	r3
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3710      	adds	r7, #16
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	20001848 	.word	0x20001848

08008bf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	4603      	mov	r3, r0
 8008c00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008c02:	2300      	movs	r3, #0
 8008c04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	4a0d      	ldr	r2, [pc, #52]	; (8008c40 <disk_initialize+0x48>)
 8008c0a:	5cd3      	ldrb	r3, [r2, r3]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d111      	bne.n	8008c34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	4a0b      	ldr	r2, [pc, #44]	; (8008c40 <disk_initialize+0x48>)
 8008c14:	2101      	movs	r1, #1
 8008c16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	4a09      	ldr	r2, [pc, #36]	; (8008c40 <disk_initialize+0x48>)
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	79fa      	ldrb	r2, [r7, #7]
 8008c26:	4906      	ldr	r1, [pc, #24]	; (8008c40 <disk_initialize+0x48>)
 8008c28:	440a      	add	r2, r1
 8008c2a:	7a12      	ldrb	r2, [r2, #8]
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4798      	blx	r3
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	20001848 	.word	0x20001848

08008c44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008c44:	b590      	push	{r4, r7, lr}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60b9      	str	r1, [r7, #8]
 8008c4c:	607a      	str	r2, [r7, #4]
 8008c4e:	603b      	str	r3, [r7, #0]
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	4a0a      	ldr	r2, [pc, #40]	; (8008c80 <disk_read+0x3c>)
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	689c      	ldr	r4, [r3, #8]
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
 8008c62:	4a07      	ldr	r2, [pc, #28]	; (8008c80 <disk_read+0x3c>)
 8008c64:	4413      	add	r3, r2
 8008c66:	7a18      	ldrb	r0, [r3, #8]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	68b9      	ldr	r1, [r7, #8]
 8008c6e:	47a0      	blx	r4
 8008c70:	4603      	mov	r3, r0
 8008c72:	75fb      	strb	r3, [r7, #23]
  return res;
 8008c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	371c      	adds	r7, #28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd90      	pop	{r4, r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20001848 	.word	0x20001848

08008c84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008c84:	b590      	push	{r4, r7, lr}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	607a      	str	r2, [r7, #4]
 8008c8e:	603b      	str	r3, [r7, #0]
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	4a0a      	ldr	r2, [pc, #40]	; (8008cc0 <disk_write+0x3c>)
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	68dc      	ldr	r4, [r3, #12]
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	4a07      	ldr	r2, [pc, #28]	; (8008cc0 <disk_write+0x3c>)
 8008ca4:	4413      	add	r3, r2
 8008ca6:	7a18      	ldrb	r0, [r3, #8]
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	68b9      	ldr	r1, [r7, #8]
 8008cae:	47a0      	blx	r4
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	75fb      	strb	r3, [r7, #23]
  return res;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd90      	pop	{r4, r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20001848 	.word	0x20001848

08008cc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	4603      	mov	r3, r0
 8008ccc:	603a      	str	r2, [r7, #0]
 8008cce:	71fb      	strb	r3, [r7, #7]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008cd4:	79fb      	ldrb	r3, [r7, #7]
 8008cd6:	4a09      	ldr	r2, [pc, #36]	; (8008cfc <disk_ioctl+0x38>)
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	691b      	ldr	r3, [r3, #16]
 8008ce0:	79fa      	ldrb	r2, [r7, #7]
 8008ce2:	4906      	ldr	r1, [pc, #24]	; (8008cfc <disk_ioctl+0x38>)
 8008ce4:	440a      	add	r2, r1
 8008ce6:	7a10      	ldrb	r0, [r2, #8]
 8008ce8:	79b9      	ldrb	r1, [r7, #6]
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	4798      	blx	r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20001848 	.word	0x20001848

08008d00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008d10:	89fb      	ldrh	r3, [r7, #14]
 8008d12:	021b      	lsls	r3, r3, #8
 8008d14:	b21a      	sxth	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	b21b      	sxth	r3, r3
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	b21b      	sxth	r3, r3
 8008d20:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008d22:	89fb      	ldrh	r3, [r7, #14]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008d30:	b480      	push	{r7}
 8008d32:	b085      	sub	sp, #20
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3303      	adds	r3, #3
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	021b      	lsls	r3, r3, #8
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	3202      	adds	r2, #2
 8008d48:	7812      	ldrb	r2, [r2, #0]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	021b      	lsls	r3, r3, #8
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	3201      	adds	r2, #1
 8008d56:	7812      	ldrb	r2, [r2, #0]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	021b      	lsls	r3, r3, #8
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	7812      	ldrb	r2, [r2, #0]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	60fb      	str	r3, [r7, #12]
	return rv;
 8008d68:	68fb      	ldr	r3, [r7, #12]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3714      	adds	r7, #20
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr

08008d76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008d76:	b480      	push	{r7}
 8008d78:	b083      	sub	sp, #12
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	460b      	mov	r3, r1
 8008d80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	607a      	str	r2, [r7, #4]
 8008d88:	887a      	ldrh	r2, [r7, #2]
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	887b      	ldrh	r3, [r7, #2]
 8008d90:	0a1b      	lsrs	r3, r3, #8
 8008d92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	1c5a      	adds	r2, r3, #1
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	887a      	ldrh	r2, [r7, #2]
 8008d9c:	b2d2      	uxtb	r2, r2
 8008d9e:	701a      	strb	r2, [r3, #0]
}
 8008da0:	bf00      	nop
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	607a      	str	r2, [r7, #4]
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	701a      	strb	r2, [r3, #0]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	0a1b      	lsrs	r3, r3, #8
 8008dc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	1c5a      	adds	r2, r3, #1
 8008dcc:	607a      	str	r2, [r7, #4]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	b2d2      	uxtb	r2, r2
 8008dd2:	701a      	strb	r2, [r3, #0]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	0a1b      	lsrs	r3, r3, #8
 8008dd8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	1c5a      	adds	r2, r3, #1
 8008dde:	607a      	str	r2, [r7, #4]
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	b2d2      	uxtb	r2, r2
 8008de4:	701a      	strb	r2, [r3, #0]
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	0a1b      	lsrs	r3, r3, #8
 8008dea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	607a      	str	r2, [r7, #4]
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	b2d2      	uxtb	r2, r2
 8008df6:	701a      	strb	r2, [r3, #0]
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00d      	beq.n	8008e3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	1c53      	adds	r3, r2, #1
 8008e22:	613b      	str	r3, [r7, #16]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	1c59      	adds	r1, r3, #1
 8008e28:	6179      	str	r1, [r7, #20]
 8008e2a:	7812      	ldrb	r2, [r2, #0]
 8008e2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	607b      	str	r3, [r7, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d1f1      	bne.n	8008e1e <mem_cpy+0x1a>
	}
}
 8008e3a:	bf00      	nop
 8008e3c:	371c      	adds	r7, #28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008e46:	b480      	push	{r7}
 8008e48:	b087      	sub	sp, #28
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	617a      	str	r2, [r7, #20]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	3b01      	subs	r3, #1
 8008e66:	607b      	str	r3, [r7, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d1f3      	bne.n	8008e56 <mem_set+0x10>
}
 8008e6e:	bf00      	nop
 8008e70:	bf00      	nop
 8008e72:	371c      	adds	r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr

08008e7c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008e7c:	b480      	push	{r7}
 8008e7e:	b089      	sub	sp, #36	; 0x24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	61fb      	str	r3, [r7, #28]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	1c5a      	adds	r2, r3, #1
 8008e98:	61fa      	str	r2, [r7, #28]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	61ba      	str	r2, [r7, #24]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	1acb      	subs	r3, r1, r3
 8008ea8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	607b      	str	r3, [r7, #4]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d002      	beq.n	8008ebc <mem_cmp+0x40>
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0eb      	beq.n	8008e94 <mem_cmp+0x18>

	return r;
 8008ebc:	697b      	ldr	r3, [r7, #20]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3724      	adds	r7, #36	; 0x24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr

08008eca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008ed4:	e002      	b.n	8008edc <chk_chr+0x12>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	607b      	str	r3, [r7, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d005      	beq.n	8008ef0 <chk_chr+0x26>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d1f2      	bne.n	8008ed6 <chk_chr+0xc>
	return *str;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <lock_fs+0x22>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f002 fb9f 	bl	800b656 <ff_req_grant>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <lock_fs+0x22>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e000      	b.n	8008f24 <lock_fs+0x24>
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3708      	adds	r7, #8
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	460b      	mov	r3, r1
 8008f36:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00d      	beq.n	8008f5a <unlock_fs+0x2e>
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	2b0c      	cmp	r3, #12
 8008f42:	d00a      	beq.n	8008f5a <unlock_fs+0x2e>
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	2b0b      	cmp	r3, #11
 8008f48:	d007      	beq.n	8008f5a <unlock_fs+0x2e>
 8008f4a:	78fb      	ldrb	r3, [r7, #3]
 8008f4c:	2b0f      	cmp	r3, #15
 8008f4e:	d004      	beq.n	8008f5a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f002 fb93 	bl	800b680 <ff_rel_grant>
	}
}
 8008f5a:	bf00      	nop
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b085      	sub	sp, #20
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008f6e:	2300      	movs	r3, #0
 8008f70:	60bb      	str	r3, [r7, #8]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	e029      	b.n	8008fcc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008f78:	4a27      	ldr	r2, [pc, #156]	; (8009018 <chk_lock+0xb4>)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	4413      	add	r3, r2
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01d      	beq.n	8008fc2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008f86:	4a24      	ldr	r2, [pc, #144]	; (8009018 <chk_lock+0xb4>)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	4413      	add	r3, r2
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d116      	bne.n	8008fc6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008f98:	4a1f      	ldr	r2, [pc, #124]	; (8009018 <chk_lock+0xb4>)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	4413      	add	r3, r2
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d10c      	bne.n	8008fc6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fac:	4a1a      	ldr	r2, [pc, #104]	; (8009018 <chk_lock+0xb4>)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	4413      	add	r3, r2
 8008fb4:	3308      	adds	r3, #8
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d102      	bne.n	8008fc6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008fc0:	e007      	b.n	8008fd2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	3301      	adds	r3, #1
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d9d2      	bls.n	8008f78 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d109      	bne.n	8008fec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d102      	bne.n	8008fe4 <chk_lock+0x80>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d101      	bne.n	8008fe8 <chk_lock+0x84>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	e010      	b.n	800900a <chk_lock+0xa6>
 8008fe8:	2312      	movs	r3, #18
 8008fea:	e00e      	b.n	800900a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d108      	bne.n	8009004 <chk_lock+0xa0>
 8008ff2:	4a09      	ldr	r2, [pc, #36]	; (8009018 <chk_lock+0xb4>)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	011b      	lsls	r3, r3, #4
 8008ff8:	4413      	add	r3, r2
 8008ffa:	330c      	adds	r3, #12
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009002:	d101      	bne.n	8009008 <chk_lock+0xa4>
 8009004:	2310      	movs	r3, #16
 8009006:	e000      	b.n	800900a <chk_lock+0xa6>
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	20001828 	.word	0x20001828

0800901c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009022:	2300      	movs	r3, #0
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	e002      	b.n	800902e <enq_lock+0x12>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	3301      	adds	r3, #1
 800902c:	607b      	str	r3, [r7, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d806      	bhi.n	8009042 <enq_lock+0x26>
 8009034:	4a09      	ldr	r2, [pc, #36]	; (800905c <enq_lock+0x40>)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	4413      	add	r3, r2
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1f2      	bne.n	8009028 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2b02      	cmp	r3, #2
 8009046:	bf14      	ite	ne
 8009048:	2301      	movne	r3, #1
 800904a:	2300      	moveq	r3, #0
 800904c:	b2db      	uxtb	r3, r3
}
 800904e:	4618      	mov	r0, r3
 8009050:	370c      	adds	r7, #12
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	20001828 	.word	0x20001828

08009060 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800906a:	2300      	movs	r3, #0
 800906c:	60fb      	str	r3, [r7, #12]
 800906e:	e01f      	b.n	80090b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009070:	4a41      	ldr	r2, [pc, #260]	; (8009178 <inc_lock+0x118>)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	011b      	lsls	r3, r3, #4
 8009076:	4413      	add	r3, r2
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d113      	bne.n	80090aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009082:	4a3d      	ldr	r2, [pc, #244]	; (8009178 <inc_lock+0x118>)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	4413      	add	r3, r2
 800908a:	3304      	adds	r3, #4
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009092:	429a      	cmp	r2, r3
 8009094:	d109      	bne.n	80090aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009096:	4a38      	ldr	r2, [pc, #224]	; (8009178 <inc_lock+0x118>)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	4413      	add	r3, r2
 800909e:	3308      	adds	r3, #8
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d006      	beq.n	80090b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3301      	adds	r3, #1
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d9dc      	bls.n	8009070 <inc_lock+0x10>
 80090b6:	e000      	b.n	80090ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80090b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d132      	bne.n	8009126 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80090c0:	2300      	movs	r3, #0
 80090c2:	60fb      	str	r3, [r7, #12]
 80090c4:	e002      	b.n	80090cc <inc_lock+0x6c>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3301      	adds	r3, #1
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d806      	bhi.n	80090e0 <inc_lock+0x80>
 80090d2:	4a29      	ldr	r2, [pc, #164]	; (8009178 <inc_lock+0x118>)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	011b      	lsls	r3, r3, #4
 80090d8:	4413      	add	r3, r2
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1f2      	bne.n	80090c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d101      	bne.n	80090ea <inc_lock+0x8a>
 80090e6:	2300      	movs	r3, #0
 80090e8:	e040      	b.n	800916c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	4922      	ldr	r1, [pc, #136]	; (8009178 <inc_lock+0x118>)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	440b      	add	r3, r1
 80090f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689a      	ldr	r2, [r3, #8]
 80090fc:	491e      	ldr	r1, [pc, #120]	; (8009178 <inc_lock+0x118>)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	011b      	lsls	r3, r3, #4
 8009102:	440b      	add	r3, r1
 8009104:	3304      	adds	r3, #4
 8009106:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	695a      	ldr	r2, [r3, #20]
 800910c:	491a      	ldr	r1, [pc, #104]	; (8009178 <inc_lock+0x118>)
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	011b      	lsls	r3, r3, #4
 8009112:	440b      	add	r3, r1
 8009114:	3308      	adds	r3, #8
 8009116:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009118:	4a17      	ldr	r2, [pc, #92]	; (8009178 <inc_lock+0x118>)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	4413      	add	r3, r2
 8009120:	330c      	adds	r3, #12
 8009122:	2200      	movs	r2, #0
 8009124:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d009      	beq.n	8009140 <inc_lock+0xe0>
 800912c:	4a12      	ldr	r2, [pc, #72]	; (8009178 <inc_lock+0x118>)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	011b      	lsls	r3, r3, #4
 8009132:	4413      	add	r3, r2
 8009134:	330c      	adds	r3, #12
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <inc_lock+0xe0>
 800913c:	2300      	movs	r3, #0
 800913e:	e015      	b.n	800916c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d108      	bne.n	8009158 <inc_lock+0xf8>
 8009146:	4a0c      	ldr	r2, [pc, #48]	; (8009178 <inc_lock+0x118>)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	011b      	lsls	r3, r3, #4
 800914c:	4413      	add	r3, r2
 800914e:	330c      	adds	r3, #12
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	b29a      	uxth	r2, r3
 8009156:	e001      	b.n	800915c <inc_lock+0xfc>
 8009158:	f44f 7280 	mov.w	r2, #256	; 0x100
 800915c:	4906      	ldr	r1, [pc, #24]	; (8009178 <inc_lock+0x118>)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	011b      	lsls	r3, r3, #4
 8009162:	440b      	add	r3, r1
 8009164:	330c      	adds	r3, #12
 8009166:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
}
 800916c:	4618      	mov	r0, r3
 800916e:	3714      	adds	r7, #20
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr
 8009178:	20001828 	.word	0x20001828

0800917c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3b01      	subs	r3, #1
 8009188:	607b      	str	r3, [r7, #4]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d825      	bhi.n	80091dc <dec_lock+0x60>
		n = Files[i].ctr;
 8009190:	4a17      	ldr	r2, [pc, #92]	; (80091f0 <dec_lock+0x74>)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	011b      	lsls	r3, r3, #4
 8009196:	4413      	add	r3, r2
 8009198:	330c      	adds	r3, #12
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800919e:	89fb      	ldrh	r3, [r7, #14]
 80091a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091a4:	d101      	bne.n	80091aa <dec_lock+0x2e>
 80091a6:	2300      	movs	r3, #0
 80091a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80091aa:	89fb      	ldrh	r3, [r7, #14]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <dec_lock+0x3a>
 80091b0:	89fb      	ldrh	r3, [r7, #14]
 80091b2:	3b01      	subs	r3, #1
 80091b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80091b6:	4a0e      	ldr	r2, [pc, #56]	; (80091f0 <dec_lock+0x74>)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	011b      	lsls	r3, r3, #4
 80091bc:	4413      	add	r3, r2
 80091be:	330c      	adds	r3, #12
 80091c0:	89fa      	ldrh	r2, [r7, #14]
 80091c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80091c4:	89fb      	ldrh	r3, [r7, #14]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d105      	bne.n	80091d6 <dec_lock+0x5a>
 80091ca:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <dec_lock+0x74>)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	011b      	lsls	r3, r3, #4
 80091d0:	4413      	add	r3, r2
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80091d6:	2300      	movs	r3, #0
 80091d8:	737b      	strb	r3, [r7, #13]
 80091da:	e001      	b.n	80091e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80091dc:	2302      	movs	r3, #2
 80091de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80091e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	20001828 	.word	0x20001828

080091f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80091fc:	2300      	movs	r3, #0
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	e010      	b.n	8009224 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009202:	4a0d      	ldr	r2, [pc, #52]	; (8009238 <clear_lock+0x44>)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	011b      	lsls	r3, r3, #4
 8009208:	4413      	add	r3, r2
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	429a      	cmp	r2, r3
 8009210:	d105      	bne.n	800921e <clear_lock+0x2a>
 8009212:	4a09      	ldr	r2, [pc, #36]	; (8009238 <clear_lock+0x44>)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	4413      	add	r3, r2
 800921a:	2200      	movs	r2, #0
 800921c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3301      	adds	r3, #1
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d9eb      	bls.n	8009202 <clear_lock+0xe>
	}
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	20001828 	.word	0x20001828

0800923c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b086      	sub	sp, #24
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	78db      	ldrb	r3, [r3, #3]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d034      	beq.n	80092ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	7858      	ldrb	r0, [r3, #1]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009260:	2301      	movs	r3, #1
 8009262:	697a      	ldr	r2, [r7, #20]
 8009264:	f7ff fd0e 	bl	8008c84 <disk_write>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <sync_window+0x38>
			res = FR_DISK_ERR;
 800926e:	2301      	movs	r3, #1
 8009270:	73fb      	strb	r3, [r7, #15]
 8009272:	e022      	b.n	80092ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	1ad2      	subs	r2, r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	69db      	ldr	r3, [r3, #28]
 8009286:	429a      	cmp	r2, r3
 8009288:	d217      	bcs.n	80092ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	789b      	ldrb	r3, [r3, #2]
 800928e:	613b      	str	r3, [r7, #16]
 8009290:	e010      	b.n	80092b4 <sync_window+0x78>
					wsect += fs->fsize;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	69db      	ldr	r3, [r3, #28]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	4413      	add	r3, r2
 800929a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7858      	ldrb	r0, [r3, #1]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092a6:	2301      	movs	r3, #1
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	f7ff fceb 	bl	8008c84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d8eb      	bhi.n	8009292 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3718      	adds	r7, #24
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d01b      	beq.n	8009314 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff ffad 	bl	800923c <sync_window>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d113      	bne.n	8009314 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7858      	ldrb	r0, [r3, #1]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80092f6:	2301      	movs	r3, #1
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	f7ff fca3 	bl	8008c44 <disk_read>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d004      	beq.n	800930e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009304:	f04f 33ff 	mov.w	r3, #4294967295
 8009308:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800930a:	2301      	movs	r3, #1
 800930c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
	...

08009320 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f7ff ff87 	bl	800923c <sync_window>
 800932e:	4603      	mov	r3, r0
 8009330:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d158      	bne.n	80093ea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b03      	cmp	r3, #3
 800933e:	d148      	bne.n	80093d2 <sync_fs+0xb2>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	791b      	ldrb	r3, [r3, #4]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d144      	bne.n	80093d2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	3334      	adds	r3, #52	; 0x34
 800934c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009350:	2100      	movs	r1, #0
 8009352:	4618      	mov	r0, r3
 8009354:	f7ff fd77 	bl	8008e46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	3334      	adds	r3, #52	; 0x34
 800935c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009360:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff fd06 	bl	8008d76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3334      	adds	r3, #52	; 0x34
 800936e:	4921      	ldr	r1, [pc, #132]	; (80093f4 <sync_fs+0xd4>)
 8009370:	4618      	mov	r0, r3
 8009372:	f7ff fd1b 	bl	8008dac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3334      	adds	r3, #52	; 0x34
 800937a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800937e:	491e      	ldr	r1, [pc, #120]	; (80093f8 <sync_fs+0xd8>)
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff fd13 	bl	8008dac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	3334      	adds	r3, #52	; 0x34
 800938a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	4619      	mov	r1, r3
 8009394:	4610      	mov	r0, r2
 8009396:	f7ff fd09 	bl	8008dac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3334      	adds	r3, #52	; 0x34
 800939e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7ff fcff 	bl	8008dac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	7858      	ldrb	r0, [r3, #1]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093c6:	2301      	movs	r3, #1
 80093c8:	f7ff fc5c 	bl	8008c84 <disk_write>
			fs->fsi_flag = 0;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2200      	movs	r2, #0
 80093d8:	2100      	movs	r1, #0
 80093da:	4618      	mov	r0, r3
 80093dc:	f7ff fc72 	bl	8008cc4 <disk_ioctl>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <sync_fs+0xca>
 80093e6:	2301      	movs	r3, #1
 80093e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3710      	adds	r7, #16
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	41615252 	.word	0x41615252
 80093f8:	61417272 	.word	0x61417272

080093fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	3b02      	subs	r3, #2
 800940a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	3b02      	subs	r3, #2
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	429a      	cmp	r2, r3
 8009416:	d301      	bcc.n	800941c <clust2sect+0x20>
 8009418:	2300      	movs	r3, #0
 800941a:	e008      	b.n	800942e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	895b      	ldrh	r3, [r3, #10]
 8009420:	461a      	mov	r2, r3
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	fb03 f202 	mul.w	r2, r3, r2
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942c:	4413      	add	r3, r2
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b086      	sub	sp, #24
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d904      	bls.n	800945a <get_fat+0x20>
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	683a      	ldr	r2, [r7, #0]
 8009456:	429a      	cmp	r2, r3
 8009458:	d302      	bcc.n	8009460 <get_fat+0x26>
		val = 1;	/* Internal error */
 800945a:	2301      	movs	r3, #1
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	e08f      	b.n	8009580 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009460:	f04f 33ff 	mov.w	r3, #4294967295
 8009464:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	2b03      	cmp	r3, #3
 800946c:	d062      	beq.n	8009534 <get_fat+0xfa>
 800946e:	2b03      	cmp	r3, #3
 8009470:	dc7c      	bgt.n	800956c <get_fat+0x132>
 8009472:	2b01      	cmp	r3, #1
 8009474:	d002      	beq.n	800947c <get_fat+0x42>
 8009476:	2b02      	cmp	r3, #2
 8009478:	d042      	beq.n	8009500 <get_fat+0xc6>
 800947a:	e077      	b.n	800956c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	085b      	lsrs	r3, r3, #1
 8009484:	68fa      	ldr	r2, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	0a5b      	lsrs	r3, r3, #9
 8009492:	4413      	add	r3, r2
 8009494:	4619      	mov	r1, r3
 8009496:	6938      	ldr	r0, [r7, #16]
 8009498:	f7ff ff14 	bl	80092c4 <move_window>
 800949c:	4603      	mov	r3, r0
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d167      	bne.n	8009572 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1c5a      	adds	r2, r3, #1
 80094a6:	60fa      	str	r2, [r7, #12]
 80094a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	4413      	add	r3, r2
 80094b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	0a5b      	lsrs	r3, r3, #9
 80094be:	4413      	add	r3, r2
 80094c0:	4619      	mov	r1, r3
 80094c2:	6938      	ldr	r0, [r7, #16]
 80094c4:	f7ff fefe 	bl	80092c4 <move_window>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d153      	bne.n	8009576 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	4413      	add	r3, r2
 80094d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	461a      	mov	r2, r3
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4313      	orrs	r3, r2
 80094e4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <get_fat+0xbc>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	091b      	lsrs	r3, r3, #4
 80094f4:	e002      	b.n	80094fc <get_fat+0xc2>
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80094fc:	617b      	str	r3, [r7, #20]
			break;
 80094fe:	e03f      	b.n	8009580 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	0a1b      	lsrs	r3, r3, #8
 8009508:	4413      	add	r3, r2
 800950a:	4619      	mov	r1, r3
 800950c:	6938      	ldr	r0, [r7, #16]
 800950e:	f7ff fed9 	bl	80092c4 <move_window>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d130      	bne.n	800957a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	005b      	lsls	r3, r3, #1
 8009522:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009526:	4413      	add	r3, r2
 8009528:	4618      	mov	r0, r3
 800952a:	f7ff fbe9 	bl	8008d00 <ld_word>
 800952e:	4603      	mov	r3, r0
 8009530:	617b      	str	r3, [r7, #20]
			break;
 8009532:	e025      	b.n	8009580 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	09db      	lsrs	r3, r3, #7
 800953c:	4413      	add	r3, r2
 800953e:	4619      	mov	r1, r3
 8009540:	6938      	ldr	r0, [r7, #16]
 8009542:	f7ff febf 	bl	80092c4 <move_window>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d118      	bne.n	800957e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800955a:	4413      	add	r3, r2
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff fbe7 	bl	8008d30 <ld_dword>
 8009562:	4603      	mov	r3, r0
 8009564:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009568:	617b      	str	r3, [r7, #20]
			break;
 800956a:	e009      	b.n	8009580 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800956c:	2301      	movs	r3, #1
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	e006      	b.n	8009580 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009572:	bf00      	nop
 8009574:	e004      	b.n	8009580 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009576:	bf00      	nop
 8009578:	e002      	b.n	8009580 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800957a:	bf00      	nop
 800957c:	e000      	b.n	8009580 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800957e:	bf00      	nop
		}
	}

	return val;
 8009580:	697b      	ldr	r3, [r7, #20]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800958a:	b590      	push	{r4, r7, lr}
 800958c:	b089      	sub	sp, #36	; 0x24
 800958e:	af00      	add	r7, sp, #0
 8009590:	60f8      	str	r0, [r7, #12]
 8009592:	60b9      	str	r1, [r7, #8]
 8009594:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009596:	2302      	movs	r3, #2
 8009598:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	2b01      	cmp	r3, #1
 800959e:	f240 80d2 	bls.w	8009746 <put_fat+0x1bc>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	f080 80cc 	bcs.w	8009746 <put_fat+0x1bc>
		switch (fs->fs_type) {
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	f000 8096 	beq.w	80096e4 <put_fat+0x15a>
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	f300 80cd 	bgt.w	8009758 <put_fat+0x1ce>
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d002      	beq.n	80095c8 <put_fat+0x3e>
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d06e      	beq.n	80096a4 <put_fat+0x11a>
 80095c6:	e0c7      	b.n	8009758 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	61bb      	str	r3, [r7, #24]
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	085b      	lsrs	r3, r3, #1
 80095d0:	69ba      	ldr	r2, [r7, #24]
 80095d2:	4413      	add	r3, r2
 80095d4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	0a5b      	lsrs	r3, r3, #9
 80095de:	4413      	add	r3, r2
 80095e0:	4619      	mov	r1, r3
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f7ff fe6e 	bl	80092c4 <move_window>
 80095e8:	4603      	mov	r3, r0
 80095ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80095ec:	7ffb      	ldrb	r3, [r7, #31]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	f040 80ab 	bne.w	800974a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	1c59      	adds	r1, r3, #1
 80095fe:	61b9      	str	r1, [r7, #24]
 8009600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009604:	4413      	add	r3, r2
 8009606:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00d      	beq.n	800962e <put_fat+0xa4>
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	b25b      	sxtb	r3, r3
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	b25a      	sxtb	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	b2db      	uxtb	r3, r3
 8009622:	011b      	lsls	r3, r3, #4
 8009624:	b25b      	sxtb	r3, r3
 8009626:	4313      	orrs	r3, r2
 8009628:	b25b      	sxtb	r3, r3
 800962a:	b2db      	uxtb	r3, r3
 800962c:	e001      	b.n	8009632 <put_fat+0xa8>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	0a5b      	lsrs	r3, r3, #9
 8009644:	4413      	add	r3, r2
 8009646:	4619      	mov	r1, r3
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff fe3b 	bl	80092c4 <move_window>
 800964e:	4603      	mov	r3, r0
 8009650:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009652:	7ffb      	ldrb	r3, [r7, #31]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d17a      	bne.n	800974e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009664:	4413      	add	r3, r2
 8009666:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <put_fat+0xf0>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	091b      	lsrs	r3, r3, #4
 8009676:	b2db      	uxtb	r3, r3
 8009678:	e00e      	b.n	8009698 <put_fat+0x10e>
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	b25b      	sxtb	r3, r3
 8009680:	f023 030f 	bic.w	r3, r3, #15
 8009684:	b25a      	sxtb	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	0a1b      	lsrs	r3, r3, #8
 800968a:	b25b      	sxtb	r3, r3
 800968c:	f003 030f 	and.w	r3, r3, #15
 8009690:	b25b      	sxtb	r3, r3
 8009692:	4313      	orrs	r3, r2
 8009694:	b25b      	sxtb	r3, r3
 8009696:	b2db      	uxtb	r3, r3
 8009698:	697a      	ldr	r2, [r7, #20]
 800969a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	70da      	strb	r2, [r3, #3]
			break;
 80096a2:	e059      	b.n	8009758 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	0a1b      	lsrs	r3, r3, #8
 80096ac:	4413      	add	r3, r2
 80096ae:	4619      	mov	r1, r3
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7ff fe07 	bl	80092c4 <move_window>
 80096b6:	4603      	mov	r3, r0
 80096b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096ba:	7ffb      	ldrb	r3, [r7, #31]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d148      	bne.n	8009752 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80096ce:	4413      	add	r3, r2
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	b292      	uxth	r2, r2
 80096d4:	4611      	mov	r1, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff fb4d 	bl	8008d76 <st_word>
			fs->wflag = 1;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2201      	movs	r2, #1
 80096e0:	70da      	strb	r2, [r3, #3]
			break;
 80096e2:	e039      	b.n	8009758 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	09db      	lsrs	r3, r3, #7
 80096ec:	4413      	add	r3, r2
 80096ee:	4619      	mov	r1, r3
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f7ff fde7 	bl	80092c4 <move_window>
 80096f6:	4603      	mov	r3, r0
 80096f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80096fa:	7ffb      	ldrb	r3, [r7, #31]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d12a      	bne.n	8009756 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009714:	4413      	add	r3, r2
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff fb0a 	bl	8008d30 <ld_dword>
 800971c:	4603      	mov	r3, r0
 800971e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009722:	4323      	orrs	r3, r4
 8009724:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009734:	4413      	add	r3, r2
 8009736:	6879      	ldr	r1, [r7, #4]
 8009738:	4618      	mov	r0, r3
 800973a:	f7ff fb37 	bl	8008dac <st_dword>
			fs->wflag = 1;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2201      	movs	r2, #1
 8009742:	70da      	strb	r2, [r3, #3]
			break;
 8009744:	e008      	b.n	8009758 <put_fat+0x1ce>
		}
	}
 8009746:	bf00      	nop
 8009748:	e006      	b.n	8009758 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800974a:	bf00      	nop
 800974c:	e004      	b.n	8009758 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800974e:	bf00      	nop
 8009750:	e002      	b.n	8009758 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009752:	bf00      	nop
 8009754:	e000      	b.n	8009758 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009756:	bf00      	nop
	return res;
 8009758:	7ffb      	ldrb	r3, [r7, #31]
}
 800975a:	4618      	mov	r0, r3
 800975c:	3724      	adds	r7, #36	; 0x24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd90      	pop	{r4, r7, pc}

08009762 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b088      	sub	sp, #32
 8009766:	af00      	add	r7, sp, #0
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d904      	bls.n	8009788 <remove_chain+0x26>
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	429a      	cmp	r2, r3
 8009786:	d301      	bcc.n	800978c <remove_chain+0x2a>
 8009788:	2302      	movs	r3, #2
 800978a:	e04b      	b.n	8009824 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00c      	beq.n	80097ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009792:	f04f 32ff 	mov.w	r2, #4294967295
 8009796:	6879      	ldr	r1, [r7, #4]
 8009798:	69b8      	ldr	r0, [r7, #24]
 800979a:	f7ff fef6 	bl	800958a <put_fat>
 800979e:	4603      	mov	r3, r0
 80097a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80097a2:	7ffb      	ldrb	r3, [r7, #31]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d001      	beq.n	80097ac <remove_chain+0x4a>
 80097a8:	7ffb      	ldrb	r3, [r7, #31]
 80097aa:	e03b      	b.n	8009824 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f7ff fe43 	bl	800943a <get_fat>
 80097b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d031      	beq.n	8009820 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d101      	bne.n	80097c6 <remove_chain+0x64>
 80097c2:	2302      	movs	r3, #2
 80097c4:	e02e      	b.n	8009824 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097cc:	d101      	bne.n	80097d2 <remove_chain+0x70>
 80097ce:	2301      	movs	r3, #1
 80097d0:	e028      	b.n	8009824 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80097d2:	2200      	movs	r2, #0
 80097d4:	68b9      	ldr	r1, [r7, #8]
 80097d6:	69b8      	ldr	r0, [r7, #24]
 80097d8:	f7ff fed7 	bl	800958a <put_fat>
 80097dc:	4603      	mov	r3, r0
 80097de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80097e0:	7ffb      	ldrb	r3, [r7, #31]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <remove_chain+0x88>
 80097e6:	7ffb      	ldrb	r3, [r7, #31]
 80097e8:	e01c      	b.n	8009824 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	695a      	ldr	r2, [r3, #20]
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	3b02      	subs	r3, #2
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d20b      	bcs.n	8009810 <remove_chain+0xae>
			fs->free_clst++;
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	1c5a      	adds	r2, r3, #1
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	791b      	ldrb	r3, [r3, #4]
 8009806:	f043 0301 	orr.w	r3, r3, #1
 800980a:	b2da      	uxtb	r2, r3
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	429a      	cmp	r2, r3
 800981c:	d3c6      	bcc.n	80097ac <remove_chain+0x4a>
 800981e:	e000      	b.n	8009822 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009820:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3720      	adds	r7, #32
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10d      	bne.n	800985e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d004      	beq.n	8009858 <create_chain+0x2c>
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	69ba      	ldr	r2, [r7, #24]
 8009854:	429a      	cmp	r2, r3
 8009856:	d31b      	bcc.n	8009890 <create_chain+0x64>
 8009858:	2301      	movs	r3, #1
 800985a:	61bb      	str	r3, [r7, #24]
 800985c:	e018      	b.n	8009890 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff fdea 	bl	800943a <get_fat>
 8009866:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d801      	bhi.n	8009872 <create_chain+0x46>
 800986e:	2301      	movs	r3, #1
 8009870:	e070      	b.n	8009954 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009878:	d101      	bne.n	800987e <create_chain+0x52>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	e06a      	b.n	8009954 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	429a      	cmp	r2, r3
 8009886:	d201      	bcs.n	800988c <create_chain+0x60>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	e063      	b.n	8009954 <create_chain+0x128>
		scl = clst;
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	3301      	adds	r3, #1
 8009898:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	69fa      	ldr	r2, [r7, #28]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d307      	bcc.n	80098b4 <create_chain+0x88>
				ncl = 2;
 80098a4:	2302      	movs	r3, #2
 80098a6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80098a8:	69fa      	ldr	r2, [r7, #28]
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d901      	bls.n	80098b4 <create_chain+0x88>
 80098b0:	2300      	movs	r3, #0
 80098b2:	e04f      	b.n	8009954 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80098b4:	69f9      	ldr	r1, [r7, #28]
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff fdbf 	bl	800943a <get_fat>
 80098bc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00e      	beq.n	80098e2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d003      	beq.n	80098d2 <create_chain+0xa6>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098d0:	d101      	bne.n	80098d6 <create_chain+0xaa>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	e03e      	b.n	8009954 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d1da      	bne.n	8009894 <create_chain+0x68>
 80098de:	2300      	movs	r3, #0
 80098e0:	e038      	b.n	8009954 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80098e2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80098e4:	f04f 32ff 	mov.w	r2, #4294967295
 80098e8:	69f9      	ldr	r1, [r7, #28]
 80098ea:	6938      	ldr	r0, [r7, #16]
 80098ec:	f7ff fe4d 	bl	800958a <put_fat>
 80098f0:	4603      	mov	r3, r0
 80098f2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d109      	bne.n	800990e <create_chain+0xe2>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d006      	beq.n	800990e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009900:	69fa      	ldr	r2, [r7, #28]
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6938      	ldr	r0, [r7, #16]
 8009906:	f7ff fe40 	bl	800958a <put_fat>
 800990a:	4603      	mov	r3, r0
 800990c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d116      	bne.n	8009942 <create_chain+0x116>
		fs->last_clst = ncl;
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	69fa      	ldr	r2, [r7, #28]
 8009918:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	695a      	ldr	r2, [r3, #20]
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	699b      	ldr	r3, [r3, #24]
 8009922:	3b02      	subs	r3, #2
 8009924:	429a      	cmp	r2, r3
 8009926:	d804      	bhi.n	8009932 <create_chain+0x106>
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	1e5a      	subs	r2, r3, #1
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	791b      	ldrb	r3, [r3, #4]
 8009936:	f043 0301 	orr.w	r3, r3, #1
 800993a:	b2da      	uxtb	r2, r3
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	711a      	strb	r2, [r3, #4]
 8009940:	e007      	b.n	8009952 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	2b01      	cmp	r3, #1
 8009946:	d102      	bne.n	800994e <create_chain+0x122>
 8009948:	f04f 33ff 	mov.w	r3, #4294967295
 800994c:	e000      	b.n	8009950 <create_chain+0x124>
 800994e:	2301      	movs	r3, #1
 8009950:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009952:	69fb      	ldr	r3, [r7, #28]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3720      	adds	r7, #32
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	3304      	adds	r3, #4
 8009972:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	0a5b      	lsrs	r3, r3, #9
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	8952      	ldrh	r2, [r2, #10]
 800997c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009980:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	1d1a      	adds	r2, r3, #4
 8009986:	613a      	str	r2, [r7, #16]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d101      	bne.n	8009996 <clmt_clust+0x3a>
 8009992:	2300      	movs	r3, #0
 8009994:	e010      	b.n	80099b8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	429a      	cmp	r2, r3
 800999c:	d307      	bcc.n	80099ae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	3304      	adds	r3, #4
 80099aa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80099ac:	e7e9      	b.n	8009982 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80099ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4413      	add	r3, r2
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	371c      	adds	r7, #28
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099da:	d204      	bcs.n	80099e6 <dir_sdi+0x22>
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	f003 031f 	and.w	r3, r3, #31
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <dir_sdi+0x26>
		return FR_INT_ERR;
 80099e6:	2302      	movs	r3, #2
 80099e8:	e063      	b.n	8009ab2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d106      	bne.n	8009a0a <dir_sdi+0x46>
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d902      	bls.n	8009a0a <dir_sdi+0x46>
		clst = fs->dirbase;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a08:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10c      	bne.n	8009a2a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	095b      	lsrs	r3, r3, #5
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	8912      	ldrh	r2, [r2, #8]
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d301      	bcc.n	8009a20 <dir_sdi+0x5c>
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e048      	b.n	8009ab2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	61da      	str	r2, [r3, #28]
 8009a28:	e029      	b.n	8009a7e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	895b      	ldrh	r3, [r3, #10]
 8009a2e:	025b      	lsls	r3, r3, #9
 8009a30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a32:	e019      	b.n	8009a68 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6979      	ldr	r1, [r7, #20]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7ff fcfe 	bl	800943a <get_fat>
 8009a3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a46:	d101      	bne.n	8009a4c <dir_sdi+0x88>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e032      	b.n	8009ab2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d904      	bls.n	8009a5c <dir_sdi+0x98>
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d301      	bcc.n	8009a60 <dir_sdi+0x9c>
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	e028      	b.n	8009ab2 <dir_sdi+0xee>
			ofs -= csz;
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009a68:	683a      	ldr	r2, [r7, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d2e1      	bcs.n	8009a34 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009a70:	6979      	ldr	r1, [r7, #20]
 8009a72:	6938      	ldr	r0, [r7, #16]
 8009a74:	f7ff fcc2 	bl	80093fc <clust2sect>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	697a      	ldr	r2, [r7, #20]
 8009a82:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d101      	bne.n	8009a90 <dir_sdi+0xcc>
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	e010      	b.n	8009ab2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	69da      	ldr	r2, [r3, #28]
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	0a5b      	lsrs	r3, r3, #9
 8009a98:	441a      	add	r2, r3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aaa:	441a      	add	r2, r3
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3718      	adds	r7, #24
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b086      	sub	sp, #24
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	3320      	adds	r3, #32
 8009ad0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <dir_next+0x28>
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ae0:	d301      	bcc.n	8009ae6 <dir_next+0x2c>
 8009ae2:	2304      	movs	r3, #4
 8009ae4:	e0aa      	b.n	8009c3c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f040 8098 	bne.w	8009c22 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10b      	bne.n	8009b1c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	095b      	lsrs	r3, r3, #5
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	8912      	ldrh	r2, [r2, #8]
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	f0c0 8088 	bcc.w	8009c22 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	61da      	str	r2, [r3, #28]
 8009b18:	2304      	movs	r3, #4
 8009b1a:	e08f      	b.n	8009c3c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	0a5b      	lsrs	r3, r3, #9
 8009b20:	68fa      	ldr	r2, [r7, #12]
 8009b22:	8952      	ldrh	r2, [r2, #10]
 8009b24:	3a01      	subs	r2, #1
 8009b26:	4013      	ands	r3, r2
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d17a      	bne.n	8009c22 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	4619      	mov	r1, r3
 8009b34:	4610      	mov	r0, r2
 8009b36:	f7ff fc80 	bl	800943a <get_fat>
 8009b3a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d801      	bhi.n	8009b46 <dir_next+0x8c>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e07a      	b.n	8009c3c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4c:	d101      	bne.n	8009b52 <dir_next+0x98>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e074      	b.n	8009c3c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d358      	bcc.n	8009c0e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d104      	bne.n	8009b6c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	61da      	str	r2, [r3, #28]
 8009b68:	2304      	movs	r3, #4
 8009b6a:	e067      	b.n	8009c3c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	4619      	mov	r1, r3
 8009b74:	4610      	mov	r0, r2
 8009b76:	f7ff fe59 	bl	800982c <create_chain>
 8009b7a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <dir_next+0xcc>
 8009b82:	2307      	movs	r3, #7
 8009b84:	e05a      	b.n	8009c3c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d101      	bne.n	8009b90 <dir_next+0xd6>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e055      	b.n	8009c3c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	d101      	bne.n	8009b9c <dir_next+0xe2>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e04f      	b.n	8009c3c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff fb4d 	bl	800923c <sync_window>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <dir_next+0xf2>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e047      	b.n	8009c3c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	3334      	adds	r3, #52	; 0x34
 8009bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff f945 	bl	8008e46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	613b      	str	r3, [r7, #16]
 8009bc0:	6979      	ldr	r1, [r7, #20]
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff fc1a 	bl	80093fc <clust2sect>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	631a      	str	r2, [r3, #48]	; 0x30
 8009bce:	e012      	b.n	8009bf6 <dir_next+0x13c>
						fs->wflag = 1;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009bd6:	68f8      	ldr	r0, [r7, #12]
 8009bd8:	f7ff fb30 	bl	800923c <sync_window>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <dir_next+0x12c>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e02a      	b.n	8009c3c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	3301      	adds	r3, #1
 8009bea:	613b      	str	r3, [r7, #16]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	895b      	ldrh	r3, [r3, #10]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d3e6      	bcc.n	8009bd0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	1ad2      	subs	r2, r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	697a      	ldr	r2, [r7, #20]
 8009c12:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009c14:	6979      	ldr	r1, [r7, #20]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f7ff fbf0 	bl	80093fc <clust2sect>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68ba      	ldr	r2, [r7, #8]
 8009c26:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c34:	441a      	add	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009c54:	2100      	movs	r1, #0
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7ff feb4 	bl	80099c4 <dir_sdi>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d12b      	bne.n	8009cbe <dir_alloc+0x7a>
		n = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	69db      	ldr	r3, [r3, #28]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f7ff fb27 	bl	80092c4 <move_window>
 8009c76:	4603      	mov	r3, r0
 8009c78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c7a:	7dfb      	ldrb	r3, [r7, #23]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d11d      	bne.n	8009cbc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a1b      	ldr	r3, [r3, #32]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2be5      	cmp	r3, #229	; 0xe5
 8009c88:	d004      	beq.n	8009c94 <dir_alloc+0x50>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d107      	bne.n	8009ca4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	3301      	adds	r3, #1
 8009c98:	613b      	str	r3, [r7, #16]
 8009c9a:	693a      	ldr	r2, [r7, #16]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d102      	bne.n	8009ca8 <dir_alloc+0x64>
 8009ca2:	e00c      	b.n	8009cbe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009ca8:	2101      	movs	r1, #1
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f7ff ff05 	bl	8009aba <dir_next>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0d7      	beq.n	8009c6a <dir_alloc+0x26>
 8009cba:	e000      	b.n	8009cbe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009cbc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d101      	bne.n	8009cc8 <dir_alloc+0x84>
 8009cc4:	2307      	movs	r3, #7
 8009cc6:	75fb      	strb	r3, [r7, #23]
	return res;
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3718      	adds	r7, #24
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	331a      	adds	r3, #26
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff f80d 	bl	8008d00 <ld_word>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d109      	bne.n	8009d06 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	3314      	adds	r3, #20
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7ff f802 	bl	8008d00 <ld_word>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	041b      	lsls	r3, r3, #16
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009d06:	68fb      	ldr	r3, [r7, #12]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	60f8      	str	r0, [r7, #12]
 8009d18:	60b9      	str	r1, [r7, #8]
 8009d1a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	331a      	adds	r3, #26
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	b292      	uxth	r2, r2
 8009d24:	4611      	mov	r1, r2
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff f825 	bl	8008d76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	2b03      	cmp	r3, #3
 8009d32:	d109      	bne.n	8009d48 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	f103 0214 	add.w	r2, r3, #20
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	0c1b      	lsrs	r3, r3, #16
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	4619      	mov	r1, r3
 8009d42:	4610      	mov	r0, r2
 8009d44:	f7ff f817 	bl	8008d76 <st_word>
	}
}
 8009d48:	bf00      	nop
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009d5a:	2304      	movs	r3, #4
 8009d5c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009d64:	e03c      	b.n	8009de0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	6938      	ldr	r0, [r7, #16]
 8009d6e:	f7ff faa9 	bl	80092c4 <move_window>
 8009d72:	4603      	mov	r3, r0
 8009d74:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009d76:	7dfb      	ldrb	r3, [r7, #23]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d136      	bne.n	8009dea <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d102      	bne.n	8009d90 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009d8a:	2304      	movs	r3, #4
 8009d8c:	75fb      	strb	r3, [r7, #23]
 8009d8e:	e031      	b.n	8009df4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	330b      	adds	r3, #11
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d9c:	73bb      	strb	r3, [r7, #14]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7bba      	ldrb	r2, [r7, #14]
 8009da2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
 8009da6:	2be5      	cmp	r3, #229	; 0xe5
 8009da8:	d011      	beq.n	8009dce <dir_read+0x7e>
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	2b2e      	cmp	r3, #46	; 0x2e
 8009dae:	d00e      	beq.n	8009dce <dir_read+0x7e>
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	2b0f      	cmp	r3, #15
 8009db4:	d00b      	beq.n	8009dce <dir_read+0x7e>
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	f023 0320 	bic.w	r3, r3, #32
 8009dbc:	2b08      	cmp	r3, #8
 8009dbe:	bf0c      	ite	eq
 8009dc0:	2301      	moveq	r3, #1
 8009dc2:	2300      	movne	r3, #0
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d00f      	beq.n	8009dee <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009dce:	2100      	movs	r1, #0
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff fe72 	bl	8009aba <dir_next>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d108      	bne.n	8009df2 <dir_read+0xa2>
	while (dp->sect) {
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	69db      	ldr	r3, [r3, #28]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1be      	bne.n	8009d66 <dir_read+0x16>
 8009de8:	e004      	b.n	8009df4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009dea:	bf00      	nop
 8009dec:	e002      	b.n	8009df4 <dir_read+0xa4>
				break;
 8009dee:	bf00      	nop
 8009df0:	e000      	b.n	8009df4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009df2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d002      	beq.n	8009e00 <dir_read+0xb0>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	61da      	str	r2, [r3, #28]
	return res;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b086      	sub	sp, #24
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009e18:	2100      	movs	r1, #0
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7ff fdd2 	bl	80099c4 <dir_sdi>
 8009e20:	4603      	mov	r3, r0
 8009e22:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d001      	beq.n	8009e2e <dir_find+0x24>
 8009e2a:	7dfb      	ldrb	r3, [r7, #23]
 8009e2c:	e03e      	b.n	8009eac <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6938      	ldr	r0, [r7, #16]
 8009e36:	f7ff fa45 	bl	80092c4 <move_window>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009e3e:	7dfb      	ldrb	r3, [r7, #23]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d12f      	bne.n	8009ea4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a1b      	ldr	r3, [r3, #32]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <dir_find+0x4e>
 8009e52:	2304      	movs	r3, #4
 8009e54:	75fb      	strb	r3, [r7, #23]
 8009e56:	e028      	b.n	8009eaa <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	330b      	adds	r3, #11
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	330b      	adds	r3, #11
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	f003 0308 	and.w	r3, r3, #8
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10a      	bne.n	8009e90 <dir_find+0x86>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6a18      	ldr	r0, [r3, #32]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	3324      	adds	r3, #36	; 0x24
 8009e82:	220b      	movs	r2, #11
 8009e84:	4619      	mov	r1, r3
 8009e86:	f7fe fff9 	bl	8008e7c <mem_cmp>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00b      	beq.n	8009ea8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009e90:	2100      	movs	r1, #0
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f7ff fe11 	bl	8009aba <dir_next>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d0c5      	beq.n	8009e2e <dir_find+0x24>
 8009ea2:	e002      	b.n	8009eaa <dir_find+0xa0>
		if (res != FR_OK) break;
 8009ea4:	bf00      	nop
 8009ea6:	e000      	b.n	8009eaa <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ea8:	bf00      	nop

	return res;
 8009eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3718      	adds	r7, #24
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009ec2:	2101      	movs	r1, #1
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f7ff febd 	bl	8009c44 <dir_alloc>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009ece:	7bfb      	ldrb	r3, [r7, #15]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d11c      	bne.n	8009f0e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	69db      	ldr	r3, [r3, #28]
 8009ed8:	4619      	mov	r1, r3
 8009eda:	68b8      	ldr	r0, [r7, #8]
 8009edc:	f7ff f9f2 	bl	80092c4 <move_window>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d111      	bne.n	8009f0e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	2220      	movs	r2, #32
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe ffa7 	bl	8008e46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a18      	ldr	r0, [r3, #32]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3324      	adds	r3, #36	; 0x24
 8009f00:	220b      	movs	r2, #11
 8009f02:	4619      	mov	r1, r3
 8009f04:	f7fe ff7e 	bl	8008e04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7ff f9c9 	bl	80092c4 <move_window>
 8009f32:	4603      	mov	r3, r0
 8009f34:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8009f36:	7afb      	ldrb	r3, [r7, #11]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d106      	bne.n	8009f4a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	22e5      	movs	r2, #229	; 0xe5
 8009f42:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2201      	movs	r2, #1
 8009f48:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8009f4a:	7afb      	ldrb	r3, [r7, #11]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2200      	movs	r2, #0
 8009f62:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d04e      	beq.n	800a00a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	613b      	str	r3, [r7, #16]
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009f74:	e021      	b.n	8009fba <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a1a      	ldr	r2, [r3, #32]
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	1c59      	adds	r1, r3, #1
 8009f7e:	6179      	str	r1, [r7, #20]
 8009f80:	4413      	add	r3, r2
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009f86:	7bfb      	ldrb	r3, [r7, #15]
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d100      	bne.n	8009f8e <get_fileinfo+0x3a>
 8009f8c:	e015      	b.n	8009fba <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
 8009f90:	2b05      	cmp	r3, #5
 8009f92:	d101      	bne.n	8009f98 <get_fileinfo+0x44>
 8009f94:	23e5      	movs	r3, #229	; 0xe5
 8009f96:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2b09      	cmp	r3, #9
 8009f9c:	d106      	bne.n	8009fac <get_fileinfo+0x58>
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	1c5a      	adds	r2, r3, #1
 8009fa2:	613a      	str	r2, [r7, #16]
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	222e      	movs	r2, #46	; 0x2e
 8009faa:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	613a      	str	r2, [r7, #16]
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	7bfa      	ldrb	r2, [r7, #15]
 8009fb8:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2b0a      	cmp	r3, #10
 8009fbe:	d9da      	bls.n	8009f76 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	3309      	adds	r3, #9
 8009fc8:	2200      	movs	r2, #0
 8009fca:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6a1b      	ldr	r3, [r3, #32]
 8009fd0:	7ada      	ldrb	r2, [r3, #11]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6a1b      	ldr	r3, [r3, #32]
 8009fda:	331c      	adds	r3, #28
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fe fea7 	bl	8008d30 <ld_dword>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a1b      	ldr	r3, [r3, #32]
 8009fec:	3316      	adds	r3, #22
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe fe9e 	bl	8008d30 <ld_dword>
 8009ff4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	80da      	strh	r2, [r3, #6]
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	0c1b      	lsrs	r3, r3, #16
 800a002:	b29a      	uxth	r2, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	809a      	strh	r2, [r3, #4]
 800a008:	e000      	b.n	800a00c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a00a:	bf00      	nop
}
 800a00c:	3718      	adds	r7, #24
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b088      	sub	sp, #32
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3324      	adds	r3, #36	; 0x24
 800a028:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a02a:	220b      	movs	r2, #11
 800a02c:	2120      	movs	r1, #32
 800a02e:	68b8      	ldr	r0, [r7, #8]
 800a030:	f7fe ff09 	bl	8008e46 <mem_set>
	si = i = 0; ni = 8;
 800a034:	2300      	movs	r3, #0
 800a036:	613b      	str	r3, [r7, #16]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	61fb      	str	r3, [r7, #28]
 800a03c:	2308      	movs	r3, #8
 800a03e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	1c5a      	adds	r2, r3, #1
 800a044:	61fa      	str	r2, [r7, #28]
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4413      	add	r3, r2
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a04e:	7efb      	ldrb	r3, [r7, #27]
 800a050:	2b20      	cmp	r3, #32
 800a052:	d94e      	bls.n	800a0f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a054:	7efb      	ldrb	r3, [r7, #27]
 800a056:	2b2f      	cmp	r3, #47	; 0x2f
 800a058:	d006      	beq.n	800a068 <create_name+0x54>
 800a05a:	7efb      	ldrb	r3, [r7, #27]
 800a05c:	2b5c      	cmp	r3, #92	; 0x5c
 800a05e:	d110      	bne.n	800a082 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a060:	e002      	b.n	800a068 <create_name+0x54>
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	3301      	adds	r3, #1
 800a066:	61fb      	str	r3, [r7, #28]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	4413      	add	r3, r2
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b2f      	cmp	r3, #47	; 0x2f
 800a072:	d0f6      	beq.n	800a062 <create_name+0x4e>
 800a074:	68fa      	ldr	r2, [r7, #12]
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	4413      	add	r3, r2
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	2b5c      	cmp	r3, #92	; 0x5c
 800a07e:	d0f0      	beq.n	800a062 <create_name+0x4e>
			break;
 800a080:	e038      	b.n	800a0f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a082:	7efb      	ldrb	r3, [r7, #27]
 800a084:	2b2e      	cmp	r3, #46	; 0x2e
 800a086:	d003      	beq.n	800a090 <create_name+0x7c>
 800a088:	693a      	ldr	r2, [r7, #16]
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d30c      	bcc.n	800a0aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b0b      	cmp	r3, #11
 800a094:	d002      	beq.n	800a09c <create_name+0x88>
 800a096:	7efb      	ldrb	r3, [r7, #27]
 800a098:	2b2e      	cmp	r3, #46	; 0x2e
 800a09a:	d001      	beq.n	800a0a0 <create_name+0x8c>
 800a09c:	2306      	movs	r3, #6
 800a09e:	e044      	b.n	800a12a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a0a0:	2308      	movs	r3, #8
 800a0a2:	613b      	str	r3, [r7, #16]
 800a0a4:	230b      	movs	r3, #11
 800a0a6:	617b      	str	r3, [r7, #20]
			continue;
 800a0a8:	e022      	b.n	800a0f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a0aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	da04      	bge.n	800a0bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a0b2:	7efb      	ldrb	r3, [r7, #27]
 800a0b4:	3b80      	subs	r3, #128	; 0x80
 800a0b6:	4a1f      	ldr	r2, [pc, #124]	; (800a134 <create_name+0x120>)
 800a0b8:	5cd3      	ldrb	r3, [r2, r3]
 800a0ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a0bc:	7efb      	ldrb	r3, [r7, #27]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	481d      	ldr	r0, [pc, #116]	; (800a138 <create_name+0x124>)
 800a0c2:	f7fe ff02 	bl	8008eca <chk_chr>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d001      	beq.n	800a0d0 <create_name+0xbc>
 800a0cc:	2306      	movs	r3, #6
 800a0ce:	e02c      	b.n	800a12a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a0d0:	7efb      	ldrb	r3, [r7, #27]
 800a0d2:	2b60      	cmp	r3, #96	; 0x60
 800a0d4:	d905      	bls.n	800a0e2 <create_name+0xce>
 800a0d6:	7efb      	ldrb	r3, [r7, #27]
 800a0d8:	2b7a      	cmp	r3, #122	; 0x7a
 800a0da:	d802      	bhi.n	800a0e2 <create_name+0xce>
 800a0dc:	7efb      	ldrb	r3, [r7, #27]
 800a0de:	3b20      	subs	r3, #32
 800a0e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	613a      	str	r2, [r7, #16]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	7efa      	ldrb	r2, [r7, #27]
 800a0ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a0f0:	e7a6      	b.n	800a040 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a0f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	441a      	add	r2, r3
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <create_name+0xf4>
 800a104:	2306      	movs	r3, #6
 800a106:	e010      	b.n	800a12a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	2be5      	cmp	r3, #229	; 0xe5
 800a10e:	d102      	bne.n	800a116 <create_name+0x102>
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	2205      	movs	r2, #5
 800a114:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a116:	7efb      	ldrb	r3, [r7, #27]
 800a118:	2b20      	cmp	r3, #32
 800a11a:	d801      	bhi.n	800a120 <create_name+0x10c>
 800a11c:	2204      	movs	r2, #4
 800a11e:	e000      	b.n	800a122 <create_name+0x10e>
 800a120:	2200      	movs	r2, #0
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	330b      	adds	r3, #11
 800a126:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a128:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3720      	adds	r7, #32
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	08010218 	.word	0x08010218
 800a138:	080101ac 	.word	0x080101ac

0800a13c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a150:	e002      	b.n	800a158 <follow_path+0x1c>
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	3301      	adds	r3, #1
 800a156:	603b      	str	r3, [r7, #0]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b2f      	cmp	r3, #47	; 0x2f
 800a15e:	d0f8      	beq.n	800a152 <follow_path+0x16>
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b5c      	cmp	r3, #92	; 0x5c
 800a166:	d0f4      	beq.n	800a152 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	2200      	movs	r2, #0
 800a16c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	2b1f      	cmp	r3, #31
 800a174:	d80a      	bhi.n	800a18c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2280      	movs	r2, #128	; 0x80
 800a17a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a17e:	2100      	movs	r1, #0
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff fc1f 	bl	80099c4 <dir_sdi>
 800a186:	4603      	mov	r3, r0
 800a188:	75fb      	strb	r3, [r7, #23]
 800a18a:	e043      	b.n	800a214 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a18c:	463b      	mov	r3, r7
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff ff3f 	bl	800a014 <create_name>
 800a196:	4603      	mov	r3, r0
 800a198:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d134      	bne.n	800a20a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7ff fe32 	bl	8009e0a <dir_find>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a1b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a1b8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	d127      	bne.n	800a20e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a1be:	7afb      	ldrb	r3, [r7, #11]
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d122      	bne.n	800a20e <follow_path+0xd2>
 800a1c8:	2305      	movs	r3, #5
 800a1ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a1cc:	e01f      	b.n	800a20e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a1ce:	7afb      	ldrb	r3, [r7, #11]
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d11c      	bne.n	800a212 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	799b      	ldrb	r3, [r3, #6]
 800a1dc:	f003 0310 	and.w	r3, r3, #16
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d102      	bne.n	800a1ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a1e4:	2305      	movs	r3, #5
 800a1e6:	75fb      	strb	r3, [r7, #23]
 800a1e8:	e014      	b.n	800a214 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1f8:	4413      	add	r3, r2
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7ff fd68 	bl	8009cd2 <ld_clust>
 800a202:	4602      	mov	r2, r0
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a208:	e7c0      	b.n	800a18c <follow_path+0x50>
			if (res != FR_OK) break;
 800a20a:	bf00      	nop
 800a20c:	e002      	b.n	800a214 <follow_path+0xd8>
				break;
 800a20e:	bf00      	nop
 800a210:	e000      	b.n	800a214 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a212:	bf00      	nop
			}
		}
	}

	return res;
 800a214:	7dfb      	ldrb	r3, [r7, #23]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a21e:	b480      	push	{r7}
 800a220:	b087      	sub	sp, #28
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a226:	f04f 33ff 	mov.w	r3, #4294967295
 800a22a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d031      	beq.n	800a298 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	617b      	str	r3, [r7, #20]
 800a23a:	e002      	b.n	800a242 <get_ldnumber+0x24>
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	3301      	adds	r3, #1
 800a240:	617b      	str	r3, [r7, #20]
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	2b20      	cmp	r3, #32
 800a248:	d903      	bls.n	800a252 <get_ldnumber+0x34>
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	2b3a      	cmp	r3, #58	; 0x3a
 800a250:	d1f4      	bne.n	800a23c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	2b3a      	cmp	r3, #58	; 0x3a
 800a258:	d11c      	bne.n	800a294 <get_ldnumber+0x76>
			tp = *path;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	1c5a      	adds	r2, r3, #1
 800a264:	60fa      	str	r2, [r7, #12]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	3b30      	subs	r3, #48	; 0x30
 800a26a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	2b09      	cmp	r3, #9
 800a270:	d80e      	bhi.n	800a290 <get_ldnumber+0x72>
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	429a      	cmp	r2, r3
 800a278:	d10a      	bne.n	800a290 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d107      	bne.n	800a290 <get_ldnumber+0x72>
					vol = (int)i;
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	3301      	adds	r3, #1
 800a288:	617b      	str	r3, [r7, #20]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	e002      	b.n	800a29a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a294:	2300      	movs	r3, #0
 800a296:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a298:	693b      	ldr	r3, [r7, #16]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
	...

0800a2a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	70da      	strb	r2, [r3, #3]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a2be:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a2c0:	6839      	ldr	r1, [r7, #0]
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f7fe fffe 	bl	80092c4 <move_window>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <check_fs+0x2a>
 800a2ce:	2304      	movs	r3, #4
 800a2d0:	e038      	b.n	800a344 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3334      	adds	r3, #52	; 0x34
 800a2d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe fd10 	bl	8008d00 <ld_word>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d001      	beq.n	800a2f0 <check_fs+0x48>
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e029      	b.n	800a344 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2f6:	2be9      	cmp	r3, #233	; 0xe9
 800a2f8:	d009      	beq.n	800a30e <check_fs+0x66>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a300:	2beb      	cmp	r3, #235	; 0xeb
 800a302:	d11e      	bne.n	800a342 <check_fs+0x9a>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a30a:	2b90      	cmp	r3, #144	; 0x90
 800a30c:	d119      	bne.n	800a342 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3334      	adds	r3, #52	; 0x34
 800a312:	3336      	adds	r3, #54	; 0x36
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe fd0b 	bl	8008d30 <ld_dword>
 800a31a:	4603      	mov	r3, r0
 800a31c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a320:	4a0a      	ldr	r2, [pc, #40]	; (800a34c <check_fs+0xa4>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d101      	bne.n	800a32a <check_fs+0x82>
 800a326:	2300      	movs	r3, #0
 800a328:	e00c      	b.n	800a344 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3334      	adds	r3, #52	; 0x34
 800a32e:	3352      	adds	r3, #82	; 0x52
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe fcfd 	bl	8008d30 <ld_dword>
 800a336:	4603      	mov	r3, r0
 800a338:	4a05      	ldr	r2, [pc, #20]	; (800a350 <check_fs+0xa8>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d101      	bne.n	800a342 <check_fs+0x9a>
 800a33e:	2300      	movs	r3, #0
 800a340:	e000      	b.n	800a344 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a342:	2302      	movs	r3, #2
}
 800a344:	4618      	mov	r0, r3
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	00544146 	.word	0x00544146
 800a350:	33544146 	.word	0x33544146

0800a354 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b096      	sub	sp, #88	; 0x58
 800a358:	af00      	add	r7, sp, #0
 800a35a:	60f8      	str	r0, [r7, #12]
 800a35c:	60b9      	str	r1, [r7, #8]
 800a35e:	4613      	mov	r3, r2
 800a360:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	2200      	movs	r2, #0
 800a366:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff ff58 	bl	800a21e <get_ldnumber>
 800a36e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a372:	2b00      	cmp	r3, #0
 800a374:	da01      	bge.n	800a37a <find_volume+0x26>
 800a376:	230b      	movs	r3, #11
 800a378:	e235      	b.n	800a7e6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a37a:	4aa5      	ldr	r2, [pc, #660]	; (800a610 <find_volume+0x2bc>)
 800a37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a37e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a382:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	2b00      	cmp	r3, #0
 800a388:	d101      	bne.n	800a38e <find_volume+0x3a>
 800a38a:	230c      	movs	r3, #12
 800a38c:	e22b      	b.n	800a7e6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800a38e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a390:	f7fe fdb6 	bl	8008f00 <lock_fs>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <find_volume+0x4a>
 800a39a:	230f      	movs	r3, #15
 800a39c:	e223      	b.n	800a7e6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3a2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a3a4:	79fb      	ldrb	r3, [r7, #7]
 800a3a6:	f023 0301 	bic.w	r3, r3, #1
 800a3aa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d01a      	beq.n	800a3ea <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b6:	785b      	ldrb	r3, [r3, #1]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fe fc03 	bl	8008bc4 <disk_status>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a3c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3c8:	f003 0301 	and.w	r3, r3, #1
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10c      	bne.n	800a3ea <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d007      	beq.n	800a3e6 <find_volume+0x92>
 800a3d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a3da:	f003 0304 	and.w	r3, r3, #4
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a3e2:	230a      	movs	r3, #10
 800a3e4:	e1ff      	b.n	800a7e6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	e1fd      	b.n	800a7e6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f2:	b2da      	uxtb	r2, r3
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3fa:	785b      	ldrb	r3, [r3, #1]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7fe fbfb 	bl	8008bf8 <disk_initialize>
 800a402:	4603      	mov	r3, r0
 800a404:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a408:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a40c:	f003 0301 	and.w	r3, r3, #1
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a414:	2303      	movs	r3, #3
 800a416:	e1e6      	b.n	800a7e6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a418:	79fb      	ldrb	r3, [r7, #7]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d007      	beq.n	800a42e <find_volume+0xda>
 800a41e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a422:	f003 0304 	and.w	r3, r3, #4
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a42a:	230a      	movs	r3, #10
 800a42c:	e1db      	b.n	800a7e6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a432:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a434:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a436:	f7ff ff37 	bl	800a2a8 <check_fs>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a444:	2b02      	cmp	r3, #2
 800a446:	d149      	bne.n	800a4dc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a448:	2300      	movs	r3, #0
 800a44a:	643b      	str	r3, [r7, #64]	; 0x40
 800a44c:	e01e      	b.n	800a48c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a456:	011b      	lsls	r3, r3, #4
 800a458:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a45c:	4413      	add	r3, r2
 800a45e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a462:	3304      	adds	r3, #4
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d006      	beq.n	800a478 <find_volume+0x124>
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	3308      	adds	r3, #8
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe fc5e 	bl	8008d30 <ld_dword>
 800a474:	4602      	mov	r2, r0
 800a476:	e000      	b.n	800a47a <find_volume+0x126>
 800a478:	2200      	movs	r2, #0
 800a47a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	3358      	adds	r3, #88	; 0x58
 800a480:	443b      	add	r3, r7
 800a482:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a488:	3301      	adds	r3, #1
 800a48a:	643b      	str	r3, [r7, #64]	; 0x40
 800a48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d9dd      	bls.n	800a44e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a492:	2300      	movs	r3, #0
 800a494:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <find_volume+0x14e>
 800a49c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	3358      	adds	r3, #88	; 0x58
 800a4a8:	443b      	add	r3, r7
 800a4aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a4ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a4b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d005      	beq.n	800a4c2 <find_volume+0x16e>
 800a4b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4ba:	f7ff fef5 	bl	800a2a8 <check_fs>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	e000      	b.n	800a4c4 <find_volume+0x170>
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a4c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d905      	bls.n	800a4dc <find_volume+0x188>
 800a4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	643b      	str	r3, [r7, #64]	; 0x40
 800a4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d9e2      	bls.n	800a4a2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a4dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d101      	bne.n	800a4e8 <find_volume+0x194>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e17e      	b.n	800a7e6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a4e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d901      	bls.n	800a4f4 <find_volume+0x1a0>
 800a4f0:	230d      	movs	r3, #13
 800a4f2:	e178      	b.n	800a7e6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f6:	3334      	adds	r3, #52	; 0x34
 800a4f8:	330b      	adds	r3, #11
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7fe fc00 	bl	8008d00 <ld_word>
 800a500:	4603      	mov	r3, r0
 800a502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a506:	d001      	beq.n	800a50c <find_volume+0x1b8>
 800a508:	230d      	movs	r3, #13
 800a50a:	e16c      	b.n	800a7e6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	3334      	adds	r3, #52	; 0x34
 800a510:	3316      	adds	r3, #22
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe fbf4 	bl	8008d00 <ld_word>
 800a518:	4603      	mov	r3, r0
 800a51a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d106      	bne.n	800a530 <find_volume+0x1dc>
 800a522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a524:	3334      	adds	r3, #52	; 0x34
 800a526:	3324      	adds	r3, #36	; 0x24
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe fc01 	bl	8008d30 <ld_dword>
 800a52e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a534:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a538:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a542:	789b      	ldrb	r3, [r3, #2]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d005      	beq.n	800a554 <find_volume+0x200>
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	789b      	ldrb	r3, [r3, #2]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d001      	beq.n	800a554 <find_volume+0x200>
 800a550:	230d      	movs	r3, #13
 800a552:	e148      	b.n	800a7e6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	789b      	ldrb	r3, [r3, #2]
 800a558:	461a      	mov	r2, r3
 800a55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a55c:	fb02 f303 	mul.w	r3, r2, r3
 800a560:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a568:	b29a      	uxth	r2, r3
 800a56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a570:	895b      	ldrh	r3, [r3, #10]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d008      	beq.n	800a588 <find_volume+0x234>
 800a576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a578:	895b      	ldrh	r3, [r3, #10]
 800a57a:	461a      	mov	r2, r3
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	895b      	ldrh	r3, [r3, #10]
 800a580:	3b01      	subs	r3, #1
 800a582:	4013      	ands	r3, r2
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <find_volume+0x238>
 800a588:	230d      	movs	r3, #13
 800a58a:	e12c      	b.n	800a7e6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	3334      	adds	r3, #52	; 0x34
 800a590:	3311      	adds	r3, #17
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fbb4 	bl	8008d00 <ld_word>
 800a598:	4603      	mov	r3, r0
 800a59a:	461a      	mov	r2, r3
 800a59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	891b      	ldrh	r3, [r3, #8]
 800a5a4:	f003 030f 	and.w	r3, r3, #15
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <find_volume+0x25e>
 800a5ae:	230d      	movs	r3, #13
 800a5b0:	e119      	b.n	800a7e6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b4:	3334      	adds	r3, #52	; 0x34
 800a5b6:	3313      	adds	r3, #19
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f7fe fba1 	bl	8008d00 <ld_word>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a5c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d106      	bne.n	800a5d6 <find_volume+0x282>
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	3334      	adds	r3, #52	; 0x34
 800a5cc:	3320      	adds	r3, #32
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7fe fbae 	bl	8008d30 <ld_dword>
 800a5d4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d8:	3334      	adds	r3, #52	; 0x34
 800a5da:	330e      	adds	r3, #14
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7fe fb8f 	bl	8008d00 <ld_word>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a5e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <find_volume+0x29c>
 800a5ec:	230d      	movs	r3, #13
 800a5ee:	e0fa      	b.n	800a7e6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a5f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a5f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f4:	4413      	add	r3, r2
 800a5f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5f8:	8912      	ldrh	r2, [r2, #8]
 800a5fa:	0912      	lsrs	r2, r2, #4
 800a5fc:	b292      	uxth	r2, r2
 800a5fe:	4413      	add	r3, r2
 800a600:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	429a      	cmp	r2, r3
 800a608:	d204      	bcs.n	800a614 <find_volume+0x2c0>
 800a60a:	230d      	movs	r3, #13
 800a60c:	e0eb      	b.n	800a7e6 <find_volume+0x492>
 800a60e:	bf00      	nop
 800a610:	20001820 	.word	0x20001820
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a614:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	1ad3      	subs	r3, r2, r3
 800a61a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a61c:	8952      	ldrh	r2, [r2, #10]
 800a61e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <find_volume+0x2da>
 800a62a:	230d      	movs	r3, #13
 800a62c:	e0db      	b.n	800a7e6 <find_volume+0x492>
		fmt = FS_FAT32;
 800a62e:	2303      	movs	r3, #3
 800a630:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d802      	bhi.n	800a644 <find_volume+0x2f0>
 800a63e:	2302      	movs	r3, #2
 800a640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a646:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d802      	bhi.n	800a654 <find_volume+0x300>
 800a64e:	2301      	movs	r3, #1
 800a650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a656:	1c9a      	adds	r2, r3, #2
 800a658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a660:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a662:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a666:	441a      	add	r2, r3
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a66c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	441a      	add	r2, r3
 800a672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a674:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a676:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a67a:	2b03      	cmp	r3, #3
 800a67c:	d11e      	bne.n	800a6bc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a680:	3334      	adds	r3, #52	; 0x34
 800a682:	332a      	adds	r3, #42	; 0x2a
 800a684:	4618      	mov	r0, r3
 800a686:	f7fe fb3b 	bl	8008d00 <ld_word>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <find_volume+0x340>
 800a690:	230d      	movs	r3, #13
 800a692:	e0a8      	b.n	800a7e6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a696:	891b      	ldrh	r3, [r3, #8]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d001      	beq.n	800a6a0 <find_volume+0x34c>
 800a69c:	230d      	movs	r3, #13
 800a69e:	e0a2      	b.n	800a7e6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	3334      	adds	r3, #52	; 0x34
 800a6a4:	332c      	adds	r3, #44	; 0x2c
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7fe fb42 	bl	8008d30 <ld_dword>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	699b      	ldr	r3, [r3, #24]
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ba:	e01f      	b.n	800a6fc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6be:	891b      	ldrh	r3, [r3, #8]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <find_volume+0x374>
 800a6c4:	230d      	movs	r3, #13
 800a6c6:	e08e      	b.n	800a7e6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ce:	441a      	add	r2, r3
 800a6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a6d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d103      	bne.n	800a6e4 <find_volume+0x390>
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	005b      	lsls	r3, r3, #1
 800a6e2:	e00a      	b.n	800a6fa <find_volume+0x3a6>
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	699a      	ldr	r2, [r3, #24]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	005b      	lsls	r3, r3, #1
 800a6ec:	4413      	add	r3, r2
 800a6ee:	085a      	lsrs	r2, r3, #1
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a6fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	69da      	ldr	r2, [r3, #28]
 800a700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a702:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a706:	0a5b      	lsrs	r3, r3, #9
 800a708:	429a      	cmp	r2, r3
 800a70a:	d201      	bcs.n	800a710 <find_volume+0x3bc>
 800a70c:	230d      	movs	r3, #13
 800a70e:	e06a      	b.n	800a7e6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a712:	f04f 32ff 	mov.w	r2, #4294967295
 800a716:	615a      	str	r2, [r3, #20]
 800a718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71a:	695a      	ldr	r2, [r3, #20]
 800a71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a71e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a722:	2280      	movs	r2, #128	; 0x80
 800a724:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a726:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a72a:	2b03      	cmp	r3, #3
 800a72c:	d149      	bne.n	800a7c2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a730:	3334      	adds	r3, #52	; 0x34
 800a732:	3330      	adds	r3, #48	; 0x30
 800a734:	4618      	mov	r0, r3
 800a736:	f7fe fae3 	bl	8008d00 <ld_word>
 800a73a:	4603      	mov	r3, r0
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d140      	bne.n	800a7c2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a742:	3301      	adds	r3, #1
 800a744:	4619      	mov	r1, r3
 800a746:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a748:	f7fe fdbc 	bl	80092c4 <move_window>
 800a74c:	4603      	mov	r3, r0
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d137      	bne.n	800a7c2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	2200      	movs	r2, #0
 800a756:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75a:	3334      	adds	r3, #52	; 0x34
 800a75c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a760:	4618      	mov	r0, r3
 800a762:	f7fe facd 	bl	8008d00 <ld_word>
 800a766:	4603      	mov	r3, r0
 800a768:	461a      	mov	r2, r3
 800a76a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a76e:	429a      	cmp	r2, r3
 800a770:	d127      	bne.n	800a7c2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	3334      	adds	r3, #52	; 0x34
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fada 	bl	8008d30 <ld_dword>
 800a77c:	4603      	mov	r3, r0
 800a77e:	4a1c      	ldr	r2, [pc, #112]	; (800a7f0 <find_volume+0x49c>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d11e      	bne.n	800a7c2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a786:	3334      	adds	r3, #52	; 0x34
 800a788:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7fe facf 	bl	8008d30 <ld_dword>
 800a792:	4603      	mov	r3, r0
 800a794:	4a17      	ldr	r2, [pc, #92]	; (800a7f4 <find_volume+0x4a0>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d113      	bne.n	800a7c2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79c:	3334      	adds	r3, #52	; 0x34
 800a79e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe fac4 	bl	8008d30 <ld_dword>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ac:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b0:	3334      	adds	r3, #52	; 0x34
 800a7b2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7fe faba 	bl	8008d30 <ld_dword>
 800a7bc:	4602      	mov	r2, r0
 800a7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a7c8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a7ca:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <find_volume+0x4a4>)
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	4b09      	ldr	r3, [pc, #36]	; (800a7f8 <find_volume+0x4a4>)
 800a7d4:	801a      	strh	r2, [r3, #0]
 800a7d6:	4b08      	ldr	r3, [pc, #32]	; (800a7f8 <find_volume+0x4a4>)
 800a7d8:	881a      	ldrh	r2, [r3, #0]
 800a7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7dc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a7de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7e0:	f7fe fd08 	bl	80091f4 <clear_lock>
#endif
	return FR_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3758      	adds	r7, #88	; 0x58
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	41615252 	.word	0x41615252
 800a7f4:	61417272 	.word	0x61417272
 800a7f8:	20001824 	.word	0x20001824

0800a7fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a806:	2309      	movs	r3, #9
 800a808:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d02e      	beq.n	800a86e <validate+0x72>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d02a      	beq.n	800a86e <validate+0x72>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d025      	beq.n	800a86e <validate+0x72>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	889a      	ldrh	r2, [r3, #4]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	88db      	ldrh	r3, [r3, #6]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d11e      	bne.n	800a86e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4618      	mov	r0, r3
 800a836:	f7fe fb63 	bl	8008f00 <lock_fs>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d014      	beq.n	800a86a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	785b      	ldrb	r3, [r3, #1]
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe f9bc 	bl	8008bc4 <disk_status>
 800a84c:	4603      	mov	r3, r0
 800a84e:	f003 0301 	and.w	r3, r3, #1
 800a852:	2b00      	cmp	r3, #0
 800a854:	d102      	bne.n	800a85c <validate+0x60>
				res = FR_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	73fb      	strb	r3, [r7, #15]
 800a85a:	e008      	b.n	800a86e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2100      	movs	r1, #0
 800a862:	4618      	mov	r0, r3
 800a864:	f7fe fb62 	bl	8008f2c <unlock_fs>
 800a868:	e001      	b.n	800a86e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800a86a:	230f      	movs	r3, #15
 800a86c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a86e:	7bfb      	ldrb	r3, [r7, #15]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d102      	bne.n	800a87a <validate+0x7e>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	e000      	b.n	800a87c <validate+0x80>
 800a87a:	2300      	movs	r3, #0
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	6013      	str	r3, [r2, #0]
	return res;
 800a880:	7bfb      	ldrb	r3, [r7, #15]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
	...

0800a88c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	4613      	mov	r3, r2
 800a898:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a89e:	f107 0310 	add.w	r3, r7, #16
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7ff fcbb 	bl	800a21e <get_ldnumber>
 800a8a8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	da01      	bge.n	800a8b4 <f_mount+0x28>
 800a8b0:	230b      	movs	r3, #11
 800a8b2:	e048      	b.n	800a946 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a8b4:	4a26      	ldr	r2, [pc, #152]	; (800a950 <f_mount+0xc4>)
 800a8b6:	69fb      	ldr	r3, [r7, #28]
 800a8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8bc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00f      	beq.n	800a8e4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a8c4:	69b8      	ldr	r0, [r7, #24]
 800a8c6:	f7fe fc95 	bl	80091f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 feb5 	bl	800b63e <ff_del_syncobj>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <f_mount+0x52>
 800a8da:	2302      	movs	r3, #2
 800a8dc:	e033      	b.n	800a946 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00f      	beq.n	800a90a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	330c      	adds	r3, #12
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	f000 fe7f 	bl	800b5fe <ff_cre_syncobj>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <f_mount+0x7e>
 800a906:	2302      	movs	r3, #2
 800a908:	e01d      	b.n	800a946 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a90a:	68fa      	ldr	r2, [r7, #12]
 800a90c:	4910      	ldr	r1, [pc, #64]	; (800a950 <f_mount+0xc4>)
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d002      	beq.n	800a920 <f_mount+0x94>
 800a91a:	79fb      	ldrb	r3, [r7, #7]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d001      	beq.n	800a924 <f_mount+0x98>
 800a920:	2300      	movs	r3, #0
 800a922:	e010      	b.n	800a946 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a924:	f107 010c 	add.w	r1, r7, #12
 800a928:	f107 0308 	add.w	r3, r7, #8
 800a92c:	2200      	movs	r2, #0
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff fd10 	bl	800a354 <find_volume>
 800a934:	4603      	mov	r3, r0
 800a936:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	7dfa      	ldrb	r2, [r7, #23]
 800a93c:	4611      	mov	r1, r2
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe faf4 	bl	8008f2c <unlock_fs>
 800a944:	7dfb      	ldrb	r3, [r7, #23]
}
 800a946:	4618      	mov	r0, r3
 800a948:	3720      	adds	r7, #32
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	20001820 	.word	0x20001820

0800a954 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b098      	sub	sp, #96	; 0x60
 800a958:	af00      	add	r7, sp, #0
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	60b9      	str	r1, [r7, #8]
 800a95e:	4613      	mov	r3, r2
 800a960:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <f_open+0x18>
 800a968:	2309      	movs	r3, #9
 800a96a:	e1b4      	b.n	800acd6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a972:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a974:	79fa      	ldrb	r2, [r7, #7]
 800a976:	f107 0110 	add.w	r1, r7, #16
 800a97a:	f107 0308 	add.w	r3, r7, #8
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff fce8 	bl	800a354 <find_volume>
 800a984:	4603      	mov	r3, r0
 800a986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a98a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f040 8191 	bne.w	800acb6 <f_open+0x362>
		dj.obj.fs = fs;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	f107 0314 	add.w	r3, r7, #20
 800a99e:	4611      	mov	r1, r2
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff fbcb 	bl	800a13c <follow_path>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a9ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d11a      	bne.n	800a9ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a9b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9b8:	b25b      	sxtb	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	da03      	bge.n	800a9c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a9be:	2306      	movs	r3, #6
 800a9c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a9c4:	e011      	b.n	800a9ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a9c6:	79fb      	ldrb	r3, [r7, #7]
 800a9c8:	f023 0301 	bic.w	r3, r3, #1
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	bf14      	ite	ne
 800a9d0:	2301      	movne	r3, #1
 800a9d2:	2300      	moveq	r3, #0
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f107 0314 	add.w	r3, r7, #20
 800a9dc:	4611      	mov	r1, r2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fe fac0 	bl	8008f64 <chk_lock>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	f003 031c 	and.w	r3, r3, #28
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d07f      	beq.n	800aaf4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a9f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d017      	beq.n	800aa2c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a9fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa00:	2b04      	cmp	r3, #4
 800aa02:	d10e      	bne.n	800aa22 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aa04:	f7fe fb0a 	bl	800901c <enq_lock>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d006      	beq.n	800aa1c <f_open+0xc8>
 800aa0e:	f107 0314 	add.w	r3, r7, #20
 800aa12:	4618      	mov	r0, r3
 800aa14:	f7ff fa4e 	bl	8009eb4 <dir_register>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	e000      	b.n	800aa1e <f_open+0xca>
 800aa1c:	2312      	movs	r3, #18
 800aa1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aa22:	79fb      	ldrb	r3, [r7, #7]
 800aa24:	f043 0308 	orr.w	r3, r3, #8
 800aa28:	71fb      	strb	r3, [r7, #7]
 800aa2a:	e010      	b.n	800aa4e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aa2c:	7ebb      	ldrb	r3, [r7, #26]
 800aa2e:	f003 0311 	and.w	r3, r3, #17
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d003      	beq.n	800aa3e <f_open+0xea>
					res = FR_DENIED;
 800aa36:	2307      	movs	r3, #7
 800aa38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa3c:	e007      	b.n	800aa4e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aa3e:	79fb      	ldrb	r3, [r7, #7]
 800aa40:	f003 0304 	and.w	r3, r3, #4
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <f_open+0xfa>
 800aa48:	2308      	movs	r3, #8
 800aa4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aa4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d168      	bne.n	800ab28 <f_open+0x1d4>
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	f003 0308 	and.w	r3, r3, #8
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d063      	beq.n	800ab28 <f_open+0x1d4>
				dw = GET_FATTIME();
 800aa60:	f7fe f852 	bl	8008b08 <get_fattime>
 800aa64:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aa66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa68:	330e      	adds	r3, #14
 800aa6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fe f99d 	bl	8008dac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aa72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa74:	3316      	adds	r3, #22
 800aa76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fe f997 	bl	8008dac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aa7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa80:	330b      	adds	r3, #11
 800aa82:	2220      	movs	r2, #32
 800aa84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa8a:	4611      	mov	r1, r2
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff f920 	bl	8009cd2 <ld_clust>
 800aa92:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aa98:	2200      	movs	r2, #0
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff f938 	bl	8009d10 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aaa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaa2:	331c      	adds	r3, #28
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe f980 	bl	8008dac <st_dword>
					fs->wflag = 1;
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2201      	movs	r2, #1
 800aab0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d037      	beq.n	800ab28 <f_open+0x1d4>
						dw = fs->winsect;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aabc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800aabe:	f107 0314 	add.w	r3, r7, #20
 800aac2:	2200      	movs	r2, #0
 800aac4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe fe4b 	bl	8009762 <remove_chain>
 800aacc:	4603      	mov	r3, r0
 800aace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800aad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d126      	bne.n	800ab28 <f_open+0x1d4>
							res = move_window(fs, dw);
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fe fbf0 	bl	80092c4 <move_window>
 800aae4:	4603      	mov	r3, r0
 800aae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800aaea:	693b      	ldr	r3, [r7, #16]
 800aaec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aaee:	3a01      	subs	r2, #1
 800aaf0:	611a      	str	r2, [r3, #16]
 800aaf2:	e019      	b.n	800ab28 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800aaf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d115      	bne.n	800ab28 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800aafc:	7ebb      	ldrb	r3, [r7, #26]
 800aafe:	f003 0310 	and.w	r3, r3, #16
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d003      	beq.n	800ab0e <f_open+0x1ba>
					res = FR_NO_FILE;
 800ab06:	2304      	movs	r3, #4
 800ab08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab0c:	e00c      	b.n	800ab28 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ab0e:	79fb      	ldrb	r3, [r7, #7]
 800ab10:	f003 0302 	and.w	r3, r3, #2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d007      	beq.n	800ab28 <f_open+0x1d4>
 800ab18:	7ebb      	ldrb	r3, [r7, #26]
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <f_open+0x1d4>
						res = FR_DENIED;
 800ab22:	2307      	movs	r3, #7
 800ab24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ab28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d128      	bne.n	800ab82 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	f003 0308 	and.w	r3, r3, #8
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ab3a:	79fb      	ldrb	r3, [r7, #7]
 800ab3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab40:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ab4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab50:	79fb      	ldrb	r3, [r7, #7]
 800ab52:	f023 0301 	bic.w	r3, r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	bf14      	ite	ne
 800ab5a:	2301      	movne	r3, #1
 800ab5c:	2300      	moveq	r3, #0
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	461a      	mov	r2, r3
 800ab62:	f107 0314 	add.w	r3, r7, #20
 800ab66:	4611      	mov	r1, r2
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7fe fa79 	bl	8009060 <inc_lock>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	691b      	ldr	r3, [r3, #16]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d102      	bne.n	800ab82 <f_open+0x22e>
 800ab7c:	2302      	movs	r3, #2
 800ab7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ab82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f040 8095 	bne.w	800acb6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab90:	4611      	mov	r1, r2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7ff f89d 	bl	8009cd2 <ld_clust>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ab9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aba0:	331c      	adds	r3, #28
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe f8c4 	bl	8008d30 <ld_dword>
 800aba8:	4602      	mov	r2, r0
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800abb4:	693a      	ldr	r2, [r7, #16]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	88da      	ldrh	r2, [r3, #6]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	79fa      	ldrb	r2, [r7, #7]
 800abc6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	3330      	adds	r3, #48	; 0x30
 800abde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800abe2:	2100      	movs	r1, #0
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7fe f92e 	bl	8008e46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	f003 0320 	and.w	r3, r3, #32
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d060      	beq.n	800acb6 <f_open+0x362>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d05c      	beq.n	800acb6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	68da      	ldr	r2, [r3, #12]
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	895b      	ldrh	r3, [r3, #10]
 800ac08:	025b      	lsls	r3, r3, #9
 800ac0a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	657b      	str	r3, [r7, #84]	; 0x54
 800ac18:	e016      	b.n	800ac48 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fe fc0b 	bl	800943a <get_fat>
 800ac24:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ac26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d802      	bhi.n	800ac32 <f_open+0x2de>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac38:	d102      	bne.n	800ac40 <f_open+0x2ec>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac44:	1ad3      	subs	r3, r2, r3
 800ac46:	657b      	str	r3, [r7, #84]	; 0x54
 800ac48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d103      	bne.n	800ac58 <f_open+0x304>
 800ac50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d8e0      	bhi.n	800ac1a <f_open+0x2c6>
				}
				fp->clust = clst;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac5c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ac5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d127      	bne.n	800acb6 <f_open+0x362>
 800ac66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d022      	beq.n	800acb6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7fe fbc1 	bl	80093fc <clust2sect>
 800ac7a:	6478      	str	r0, [r7, #68]	; 0x44
 800ac7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d103      	bne.n	800ac8a <f_open+0x336>
						res = FR_INT_ERR;
 800ac82:	2302      	movs	r3, #2
 800ac84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac88:	e015      	b.n	800acb6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ac8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac8c:	0a5a      	lsrs	r2, r3, #9
 800ac8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac90:	441a      	add	r2, r3
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	7858      	ldrb	r0, [r3, #1]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6a1a      	ldr	r2, [r3, #32]
 800aca4:	2301      	movs	r3, #1
 800aca6:	f7fd ffcd 	bl	8008c44 <disk_read>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d002      	beq.n	800acb6 <f_open+0x362>
 800acb0:	2301      	movs	r3, #1
 800acb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800acb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d002      	beq.n	800acc4 <f_open+0x370>
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800acca:	4611      	mov	r1, r2
 800accc:	4618      	mov	r0, r3
 800acce:	f7fe f92d 	bl	8008f2c <unlock_fs>
 800acd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3760      	adds	r7, #96	; 0x60
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}

0800acde <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800acde:	b580      	push	{r7, lr}
 800ace0:	b08c      	sub	sp, #48	; 0x30
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	607a      	str	r2, [r7, #4]
 800acea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f107 0210 	add.w	r2, r7, #16
 800acfc:	4611      	mov	r1, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7ff fd7c 	bl	800a7fc <validate>
 800ad04:	4603      	mov	r3, r0
 800ad06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ad0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d107      	bne.n	800ad22 <f_write+0x44>
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	7d5b      	ldrb	r3, [r3, #21]
 800ad16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ad1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d009      	beq.n	800ad36 <f_write+0x58>
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ad28:	4611      	mov	r1, r2
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fe f8fe 	bl	8008f2c <unlock_fs>
 800ad30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad34:	e173      	b.n	800b01e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	7d1b      	ldrb	r3, [r3, #20]
 800ad3a:	f003 0302 	and.w	r3, r3, #2
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d106      	bne.n	800ad50 <f_write+0x72>
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2107      	movs	r1, #7
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7fe f8f0 	bl	8008f2c <unlock_fs>
 800ad4c:	2307      	movs	r3, #7
 800ad4e:	e166      	b.n	800b01e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	699a      	ldr	r2, [r3, #24]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	441a      	add	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	699b      	ldr	r3, [r3, #24]
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	f080 814b 	bcs.w	800aff8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	43db      	mvns	r3, r3
 800ad68:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ad6a:	e145      	b.n	800aff8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f040 8101 	bne.w	800af7c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	0a5b      	lsrs	r3, r3, #9
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	8952      	ldrh	r2, [r2, #10]
 800ad84:	3a01      	subs	r2, #1
 800ad86:	4013      	ands	r3, r2
 800ad88:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d14d      	bne.n	800ae2c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10c      	bne.n	800adb2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ad9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d11a      	bne.n	800adda <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2100      	movs	r1, #0
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7fe fd3f 	bl	800982c <create_chain>
 800adae:	62b8      	str	r0, [r7, #40]	; 0x28
 800adb0:	e013      	b.n	800adda <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d007      	beq.n	800adca <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	4619      	mov	r1, r3
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f7fe fdcb 	bl	800995c <clmt_clust>
 800adc6:	62b8      	str	r0, [r7, #40]	; 0x28
 800adc8:	e007      	b.n	800adda <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	4619      	mov	r1, r3
 800add2:	4610      	mov	r0, r2
 800add4:	f7fe fd2a 	bl	800982c <create_chain>
 800add8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8110 	beq.w	800b002 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ade2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d109      	bne.n	800adfc <f_write+0x11e>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	2202      	movs	r2, #2
 800adec:	755a      	strb	r2, [r3, #21]
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2102      	movs	r1, #2
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7fe f89a 	bl	8008f2c <unlock_fs>
 800adf8:	2302      	movs	r3, #2
 800adfa:	e110      	b.n	800b01e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800adfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae02:	d109      	bne.n	800ae18 <f_write+0x13a>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2201      	movs	r2, #1
 800ae08:	755a      	strb	r2, [r3, #21]
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe f88c 	bl	8008f2c <unlock_fs>
 800ae14:	2301      	movs	r3, #1
 800ae16:	e102      	b.n	800b01e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae1c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	689b      	ldr	r3, [r3, #8]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d102      	bne.n	800ae2c <f_write+0x14e>
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae2a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	7d1b      	ldrb	r3, [r3, #20]
 800ae30:	b25b      	sxtb	r3, r3
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	da1d      	bge.n	800ae72 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	7858      	ldrb	r0, [r3, #1]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6a1a      	ldr	r2, [r3, #32]
 800ae44:	2301      	movs	r3, #1
 800ae46:	f7fd ff1d 	bl	8008c84 <disk_write>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d009      	beq.n	800ae64 <f_write+0x186>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2201      	movs	r2, #1
 800ae54:	755a      	strb	r2, [r3, #21]
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	2101      	movs	r1, #1
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7fe f866 	bl	8008f2c <unlock_fs>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e0dc      	b.n	800b01e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	7d1b      	ldrb	r3, [r3, #20]
 800ae68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	f7fe fabe 	bl	80093fc <clust2sect>
 800ae80:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d109      	bne.n	800ae9c <f_write+0x1be>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	755a      	strb	r2, [r3, #21]
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	2102      	movs	r1, #2
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7fe f84a 	bl	8008f2c <unlock_fs>
 800ae98:	2302      	movs	r3, #2
 800ae9a:	e0c0      	b.n	800b01e <f_write+0x340>
			sect += csect;
 800ae9c:	697a      	ldr	r2, [r7, #20]
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	4413      	add	r3, r2
 800aea2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	0a5b      	lsrs	r3, r3, #9
 800aea8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d041      	beq.n	800af34 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	8952      	ldrh	r2, [r2, #10]
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d905      	bls.n	800aeca <f_write+0x1ec>
					cc = fs->csize - csect;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	895b      	ldrh	r3, [r3, #10]
 800aec2:	461a      	mov	r2, r3
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	1ad3      	subs	r3, r2, r3
 800aec8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	7858      	ldrb	r0, [r3, #1]
 800aece:	6a3b      	ldr	r3, [r7, #32]
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	69f9      	ldr	r1, [r7, #28]
 800aed4:	f7fd fed6 	bl	8008c84 <disk_write>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d009      	beq.n	800aef2 <f_write+0x214>
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2201      	movs	r2, #1
 800aee2:	755a      	strb	r2, [r3, #21]
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	2101      	movs	r1, #1
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7fe f81f 	bl	8008f2c <unlock_fs>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e095      	b.n	800b01e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6a1a      	ldr	r2, [r3, #32]
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	6a3a      	ldr	r2, [r7, #32]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d915      	bls.n	800af2c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	6a1a      	ldr	r2, [r3, #32]
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	025b      	lsls	r3, r3, #9
 800af10:	69fa      	ldr	r2, [r7, #28]
 800af12:	4413      	add	r3, r2
 800af14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af18:	4619      	mov	r1, r3
 800af1a:	f7fd ff73 	bl	8008e04 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	7d1b      	ldrb	r3, [r3, #20]
 800af22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af26:	b2da      	uxtb	r2, r3
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	025b      	lsls	r3, r3, #9
 800af30:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800af32:	e044      	b.n	800afbe <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6a1b      	ldr	r3, [r3, #32]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d01b      	beq.n	800af76 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	699a      	ldr	r2, [r3, #24]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800af46:	429a      	cmp	r2, r3
 800af48:	d215      	bcs.n	800af76 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	7858      	ldrb	r0, [r3, #1]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af54:	2301      	movs	r3, #1
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	f7fd fe74 	bl	8008c44 <disk_read>
 800af5c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d009      	beq.n	800af76 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2201      	movs	r2, #1
 800af66:	755a      	strb	r2, [r3, #21]
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	2101      	movs	r1, #1
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7fd ffdd 	bl	8008f2c <unlock_fs>
 800af72:	2301      	movs	r3, #1
 800af74:	e053      	b.n	800b01e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	697a      	ldr	r2, [r7, #20]
 800af7a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af84:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800af88:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800af8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d901      	bls.n	800af96 <f_write+0x2b8>
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa4:	4413      	add	r3, r2
 800afa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afa8:	69f9      	ldr	r1, [r7, #28]
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fd ff2a 	bl	8008e04 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	7d1b      	ldrb	r3, [r3, #20]
 800afb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800afbe:	69fa      	ldr	r2, [r7, #28]
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	4413      	add	r3, r2
 800afc4:	61fb      	str	r3, [r7, #28]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	699a      	ldr	r2, [r3, #24]
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	441a      	add	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	619a      	str	r2, [r3, #24]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	68da      	ldr	r2, [r3, #12]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	429a      	cmp	r2, r3
 800afdc:	bf38      	it	cc
 800afde:	461a      	movcc	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	60da      	str	r2, [r3, #12]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	441a      	add	r2, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	f47f aeb6 	bne.w	800ad6c <f_write+0x8e>
 800b000:	e000      	b.n	800b004 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b002:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	7d1b      	ldrb	r3, [r3, #20]
 800b008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	2100      	movs	r1, #0
 800b016:	4618      	mov	r0, r3
 800b018:	f7fd ff88 	bl	8008f2c <unlock_fs>
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3730      	adds	r7, #48	; 0x30
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b026:	b580      	push	{r7, lr}
 800b028:	b086      	sub	sp, #24
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f107 0208 	add.w	r2, r7, #8
 800b034:	4611      	mov	r1, r2
 800b036:	4618      	mov	r0, r3
 800b038:	f7ff fbe0 	bl	800a7fc <validate>
 800b03c:	4603      	mov	r3, r0
 800b03e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b040:	7dfb      	ldrb	r3, [r7, #23]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d16d      	bne.n	800b122 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	7d1b      	ldrb	r3, [r3, #20]
 800b04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d067      	beq.n	800b122 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	7d1b      	ldrb	r3, [r3, #20]
 800b056:	b25b      	sxtb	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	da1a      	bge.n	800b092 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	7858      	ldrb	r0, [r3, #1]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a1a      	ldr	r2, [r3, #32]
 800b06a:	2301      	movs	r3, #1
 800b06c:	f7fd fe0a 	bl	8008c84 <disk_write>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d006      	beq.n	800b084 <f_sync+0x5e>
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	2101      	movs	r1, #1
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7fd ff56 	bl	8008f2c <unlock_fs>
 800b080:	2301      	movs	r3, #1
 800b082:	e055      	b.n	800b130 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	7d1b      	ldrb	r3, [r3, #20]
 800b088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b092:	f7fd fd39 	bl	8008b08 <get_fattime>
 800b096:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09e:	4619      	mov	r1, r3
 800b0a0:	4610      	mov	r0, r2
 800b0a2:	f7fe f90f 	bl	80092c4 <move_window>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b0aa:	7dfb      	ldrb	r3, [r7, #23]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d138      	bne.n	800b122 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0b4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	330b      	adds	r3, #11
 800b0ba:	781a      	ldrb	r2, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	330b      	adds	r3, #11
 800b0c0:	f042 0220 	orr.w	r2, r2, #32
 800b0c4:	b2d2      	uxtb	r2, r2
 800b0c6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6818      	ldr	r0, [r3, #0]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	68f9      	ldr	r1, [r7, #12]
 800b0d4:	f7fe fe1c 	bl	8009d10 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f103 021c 	add.w	r2, r3, #28
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	f7fd fe61 	bl	8008dac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3316      	adds	r3, #22
 800b0ee:	6939      	ldr	r1, [r7, #16]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fd fe5b 	bl	8008dac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3312      	adds	r3, #18
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fd fe3a 	bl	8008d76 <st_word>
					fs->wflag = 1;
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2201      	movs	r2, #1
 800b106:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7fe f908 	bl	8009320 <sync_fs>
 800b110:	4603      	mov	r3, r0
 800b112:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	7d1b      	ldrb	r3, [r3, #20]
 800b118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	7dfa      	ldrb	r2, [r7, #23]
 800b126:	4611      	mov	r1, r2
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fd feff 	bl	8008f2c <unlock_fs>
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f7ff ff70 	bl	800b026 <f_sync>
 800b146:	4603      	mov	r3, r0
 800b148:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d11d      	bne.n	800b18c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f107 0208 	add.w	r2, r7, #8
 800b156:	4611      	mov	r1, r2
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff fb4f 	bl	800a7fc <validate>
 800b15e:	4603      	mov	r3, r0
 800b160:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b162:	7bfb      	ldrb	r3, [r7, #15]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d111      	bne.n	800b18c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fe f805 	bl	800917c <dec_lock>
 800b172:	4603      	mov	r3, r0
 800b174:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b176:	7bfb      	ldrb	r3, [r7, #15]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	2100      	movs	r1, #0
 800b186:	4618      	mov	r0, r3
 800b188:	f7fd fed0 	bl	8008f2c <unlock_fs>
#endif
		}
	}
	return res;
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b086      	sub	sp, #24
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d101      	bne.n	800b1aa <f_opendir+0x14>
 800b1a6:	2309      	movs	r3, #9
 800b1a8:	e06a      	b.n	800b280 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b1ae:	f107 010c 	add.w	r1, r7, #12
 800b1b2:	463b      	mov	r3, r7
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7ff f8cc 	bl	800a354 <find_volume>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b1c0:	7dfb      	ldrb	r3, [r7, #23]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d14f      	bne.n	800b266 <f_opendir+0xd0>
		obj->fs = fs;
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f7fe ffb3 	bl	800a13c <follow_path>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d13d      	bne.n	800b25c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b1e6:	b25b      	sxtb	r3, r3
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	db12      	blt.n	800b212 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	799b      	ldrb	r3, [r3, #6]
 800b1f0:	f003 0310 	and.w	r3, r3, #16
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00a      	beq.n	800b20e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	4619      	mov	r1, r3
 800b200:	4610      	mov	r0, r2
 800b202:	f7fe fd66 	bl	8009cd2 <ld_clust>
 800b206:	4602      	mov	r2, r0
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	609a      	str	r2, [r3, #8]
 800b20c:	e001      	b.n	800b212 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b20e:	2305      	movs	r3, #5
 800b210:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d121      	bne.n	800b25c <f_opendir+0xc6>
				obj->id = fs->id;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	88da      	ldrh	r2, [r3, #6]
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b220:	2100      	movs	r1, #0
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7fe fbce 	bl	80099c4 <dir_sdi>
 800b228:	4603      	mov	r3, r0
 800b22a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d114      	bne.n	800b25c <f_opendir+0xc6>
					if (obj->sclust) {
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00d      	beq.n	800b256 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b23a:	2100      	movs	r1, #0
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7fd ff0f 	bl	8009060 <inc_lock>
 800b242:	4602      	mov	r2, r0
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	691b      	ldr	r3, [r3, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d105      	bne.n	800b25c <f_opendir+0xc6>
 800b250:	2312      	movs	r3, #18
 800b252:	75fb      	strb	r3, [r7, #23]
 800b254:	e002      	b.n	800b25c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	2200      	movs	r2, #0
 800b25a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b25c:	7dfb      	ldrb	r3, [r7, #23]
 800b25e:	2b04      	cmp	r3, #4
 800b260:	d101      	bne.n	800b266 <f_opendir+0xd0>
 800b262:	2305      	movs	r3, #5
 800b264:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b266:	7dfb      	ldrb	r3, [r7, #23]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <f_opendir+0xdc>
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	2200      	movs	r2, #0
 800b270:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	7dfa      	ldrb	r2, [r7, #23]
 800b276:	4611      	mov	r1, r2
 800b278:	4618      	mov	r0, r3
 800b27a:	f7fd fe57 	bl	8008f2c <unlock_fs>
 800b27e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3718      	adds	r7, #24
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f107 0208 	add.w	r2, r7, #8
 800b296:	4611      	mov	r1, r2
 800b298:	4618      	mov	r0, r3
 800b29a:	f7ff faaf 	bl	800a7fc <validate>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d115      	bne.n	800b2d4 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d006      	beq.n	800b2be <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f7fd ff61 	bl	800917c <dec_lock>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b2be:	7bfb      	ldrb	r3, [r7, #15]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d102      	bne.n	800b2ca <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7fd fe2c 	bl	8008f2c <unlock_fs>
#endif
	}
	return res;
 800b2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b2de:	b580      	push	{r7, lr}
 800b2e0:	b084      	sub	sp, #16
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f107 0208 	add.w	r2, r7, #8
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff fa83 	bl	800a7fc <validate>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d126      	bne.n	800b34e <f_readdir+0x70>
		if (!fno) {
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d106      	bne.n	800b314 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b306:	2100      	movs	r1, #0
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7fe fb5b 	bl	80099c4 <dir_sdi>
 800b30e:	4603      	mov	r3, r0
 800b310:	73fb      	strb	r3, [r7, #15]
 800b312:	e01c      	b.n	800b34e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b314:	2100      	movs	r1, #0
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7fe fd1a 	bl	8009d50 <dir_read>
 800b31c:	4603      	mov	r3, r0
 800b31e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b320:	7bfb      	ldrb	r3, [r7, #15]
 800b322:	2b04      	cmp	r3, #4
 800b324:	d101      	bne.n	800b32a <f_readdir+0x4c>
 800b326:	2300      	movs	r3, #0
 800b328:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10e      	bne.n	800b34e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b330:	6839      	ldr	r1, [r7, #0]
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7fe fe0e 	bl	8009f54 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b338:	2100      	movs	r1, #0
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7fe fbbd 	bl	8009aba <dir_next>
 800b340:	4603      	mov	r3, r0
 800b342:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	2b04      	cmp	r3, #4
 800b348:	d101      	bne.n	800b34e <f_readdir+0x70>
 800b34a:	2300      	movs	r3, #0
 800b34c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	7bfa      	ldrb	r2, [r7, #15]
 800b352:	4611      	mov	r1, r2
 800b354:	4618      	mov	r0, r3
 800b356:	f7fd fde9 	bl	8008f2c <unlock_fs>
 800b35a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b090      	sub	sp, #64	; 0x40
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b36e:	f107 010c 	add.w	r1, r7, #12
 800b372:	1d3b      	adds	r3, r7, #4
 800b374:	2200      	movs	r2, #0
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe ffec 	bl	800a354 <find_volume>
 800b37c:	4603      	mov	r3, r0
 800b37e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b382:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b386:	2b00      	cmp	r3, #0
 800b388:	d11f      	bne.n	800b3ca <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	f107 030c 	add.w	r3, r7, #12
 800b390:	4611      	mov	r1, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fed2 	bl	800a13c <follow_path>
 800b398:	4603      	mov	r3, r0
 800b39a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b39e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d111      	bne.n	800b3ca <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b3a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3aa:	b25b      	sxtb	r3, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	da03      	bge.n	800b3b8 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b3b0:	2306      	movs	r3, #6
 800b3b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b3b6:	e008      	b.n	800b3ca <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <f_stat+0x66>
 800b3be:	f107 030c 	add.w	r3, r7, #12
 800b3c2:	6839      	ldr	r1, [r7, #0]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fe fdc5 	bl	8009f54 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b3d0:	4611      	mov	r1, r2
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fd fdaa 	bl	8008f2c <unlock_fs>
 800b3d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3740      	adds	r7, #64	; 0x40
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b09e      	sub	sp, #120	; 0x78
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b3f0:	f107 010c 	add.w	r1, r7, #12
 800b3f4:	1d3b      	adds	r3, r7, #4
 800b3f6:	2202      	movs	r2, #2
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7fe ffab 	bl	800a354 <find_volume>
 800b3fe:	4603      	mov	r3, r0
 800b400:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b408:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f040 808e 	bne.w	800b52e <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b418:	4611      	mov	r1, r2
 800b41a:	4618      	mov	r0, r3
 800b41c:	f7fe fe8e 	bl	800a13c <follow_path>
 800b420:	4603      	mov	r3, r0
 800b422:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b426:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d108      	bne.n	800b440 <f_unlink+0x5c>
 800b42e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b432:	2102      	movs	r1, #2
 800b434:	4618      	mov	r0, r3
 800b436:	f7fd fd95 	bl	8008f64 <chk_lock>
 800b43a:	4603      	mov	r3, r0
 800b43c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b440:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b444:	2b00      	cmp	r3, #0
 800b446:	d172      	bne.n	800b52e <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b448:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b44c:	b25b      	sxtb	r3, r3
 800b44e:	2b00      	cmp	r3, #0
 800b450:	da03      	bge.n	800b45a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b452:	2306      	movs	r3, #6
 800b454:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b458:	e008      	b.n	800b46c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b45a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d002      	beq.n	800b46c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b466:	2307      	movs	r3, #7
 800b468:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b46c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b470:	2b00      	cmp	r3, #0
 800b472:	d134      	bne.n	800b4de <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b478:	4611      	mov	r1, r2
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fe fc29 	bl	8009cd2 <ld_clust>
 800b480:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b482:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b486:	f003 0310 	and.w	r3, r3, #16
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d027      	beq.n	800b4de <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b494:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b496:	f107 0310 	add.w	r3, r7, #16
 800b49a:	2100      	movs	r1, #0
 800b49c:	4618      	mov	r0, r3
 800b49e:	f7fe fa91 	bl	80099c4 <dir_sdi>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b4a8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d116      	bne.n	800b4de <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b4b0:	f107 0310 	add.w	r3, r7, #16
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe fc4a 	bl	8009d50 <dir_read>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b4c2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <f_unlink+0xec>
 800b4ca:	2307      	movs	r3, #7
 800b4cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b4d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b4d4:	2b04      	cmp	r3, #4
 800b4d6:	d102      	bne.n	800b4de <f_unlink+0xfa>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b4de:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d123      	bne.n	800b52e <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b4e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fe fd14 	bl	8009f18 <dir_remove>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b4f6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10c      	bne.n	800b518 <f_unlink+0x134>
 800b4fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b500:	2b00      	cmp	r3, #0
 800b502:	d009      	beq.n	800b518 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b504:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b508:	2200      	movs	r2, #0
 800b50a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fe f928 	bl	8009762 <remove_chain>
 800b512:	4603      	mov	r3, r0
 800b514:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b518:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d106      	bne.n	800b52e <f_unlink+0x14a>
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4618      	mov	r0, r3
 800b524:	f7fd fefc 	bl	8009320 <sync_fs>
 800b528:	4603      	mov	r3, r0
 800b52a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b534:	4611      	mov	r1, r2
 800b536:	4618      	mov	r0, r3
 800b538:	f7fd fcf8 	bl	8008f2c <unlock_fs>
 800b53c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b540:	4618      	mov	r0, r3
 800b542:	3778      	adds	r7, #120	; 0x78
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b548:	b480      	push	{r7}
 800b54a:	b087      	sub	sp, #28
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	4613      	mov	r3, r2
 800b554:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b556:	2301      	movs	r3, #1
 800b558:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b55e:	4b1f      	ldr	r3, [pc, #124]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b560:	7a5b      	ldrb	r3, [r3, #9]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b00      	cmp	r3, #0
 800b566:	d131      	bne.n	800b5cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b568:	4b1c      	ldr	r3, [pc, #112]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b56a:	7a5b      	ldrb	r3, [r3, #9]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	461a      	mov	r2, r3
 800b570:	4b1a      	ldr	r3, [pc, #104]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b572:	2100      	movs	r1, #0
 800b574:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b576:	4b19      	ldr	r3, [pc, #100]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b578:	7a5b      	ldrb	r3, [r3, #9]
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	4a17      	ldr	r2, [pc, #92]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4413      	add	r3, r2
 800b582:	68fa      	ldr	r2, [r7, #12]
 800b584:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b586:	4b15      	ldr	r3, [pc, #84]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b588:	7a5b      	ldrb	r3, [r3, #9]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	461a      	mov	r2, r3
 800b58e:	4b13      	ldr	r3, [pc, #76]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b590:	4413      	add	r3, r2
 800b592:	79fa      	ldrb	r2, [r7, #7]
 800b594:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b596:	4b11      	ldr	r3, [pc, #68]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b598:	7a5b      	ldrb	r3, [r3, #9]
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	1c5a      	adds	r2, r3, #1
 800b59e:	b2d1      	uxtb	r1, r2
 800b5a0:	4a0e      	ldr	r2, [pc, #56]	; (800b5dc <FATFS_LinkDriverEx+0x94>)
 800b5a2:	7251      	strb	r1, [r2, #9]
 800b5a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b5a6:	7dbb      	ldrb	r3, [r7, #22]
 800b5a8:	3330      	adds	r3, #48	; 0x30
 800b5aa:	b2da      	uxtb	r2, r3
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	3301      	adds	r3, #1
 800b5b4:	223a      	movs	r2, #58	; 0x3a
 800b5b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	3302      	adds	r3, #2
 800b5bc:	222f      	movs	r2, #47	; 0x2f
 800b5be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	3303      	adds	r3, #3
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	371c      	adds	r7, #28
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	20001848 	.word	0x20001848

0800b5e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7ff ffaa 	bl	800b548 <FATFS_LinkDriverEx>
 800b5f4:	4603      	mov	r3, r0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3708      	adds	r7, #8
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b086      	sub	sp, #24
 800b602:	af00      	add	r7, sp, #0
 800b604:	4603      	mov	r3, r0
 800b606:	6039      	str	r1, [r7, #0]
 800b608:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
 800b60e:	2300      	movs	r3, #0
 800b610:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b612:	f107 030c 	add.w	r3, r7, #12
 800b616:	2101      	movs	r1, #1
 800b618:	4618      	mov	r0, r3
 800b61a:	f000 f84e 	bl	800b6ba <osSemaphoreCreate>
 800b61e:	4602      	mov	r2, r0
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	bf14      	ite	ne
 800b62c:	2301      	movne	r3, #1
 800b62e:	2300      	moveq	r3, #0
 800b630:	b2db      	uxtb	r3, r3
 800b632:	617b      	str	r3, [r7, #20]

    return ret;
 800b634:	697b      	ldr	r3, [r7, #20]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3718      	adds	r7, #24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f8ee 	bl	800b828 <osSemaphoreDelete>
#endif
    return 1;
 800b64c:	2301      	movs	r3, #1
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b65e:	2300      	movs	r3, #0
 800b660:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800b662:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f85a 	bl	800b720 <osSemaphoreWait>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800b672:	2301      	movs	r3, #1
 800b674:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b676:	68fb      	ldr	r3, [r7, #12]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f897 	bl	800b7bc <osSemaphoreRelease>
#endif
}
 800b68e:	bf00      	nop
 800b690:	3708      	adds	r7, #8
 800b692:	46bd      	mov	sp, r7
 800b694:	bd80      	pop	{r7, pc}

0800b696 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b696:	b480      	push	{r7}
 800b698:	b083      	sub	sp, #12
 800b69a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b69c:	f3ef 8305 	mrs	r3, IPSR
 800b6a0:	607b      	str	r3, [r7, #4]
  return(result);
 800b6a2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	bf14      	ite	ne
 800b6a8:	2301      	movne	r3, #1
 800b6aa:	2300      	moveq	r3, #0
 800b6ac:	b2db      	uxtb	r3, r3
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	370c      	adds	r7, #12
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b086      	sub	sp, #24
 800b6be:	af02      	add	r7, sp, #8
 800b6c0:	6078      	str	r0, [r7, #4]
 800b6c2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00f      	beq.n	800b6ec <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d10a      	bne.n	800b6e8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	685b      	ldr	r3, [r3, #4]
 800b6d6:	2203      	movs	r2, #3
 800b6d8:	9200      	str	r2, [sp, #0]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2100      	movs	r1, #0
 800b6de:	2001      	movs	r0, #1
 800b6e0:	f000 f9d2 	bl	800ba88 <xQueueGenericCreateStatic>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	e016      	b.n	800b716 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	e014      	b.n	800b716 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d110      	bne.n	800b714 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b6f2:	2203      	movs	r2, #3
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	f000 fa3e 	bl	800bb78 <xQueueGenericCreate>
 800b6fc:	60f8      	str	r0, [r7, #12]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d005      	beq.n	800b710 <osSemaphoreCreate+0x56>
 800b704:	2300      	movs	r3, #0
 800b706:	2200      	movs	r2, #0
 800b708:	2100      	movs	r1, #0
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f000 fac0 	bl	800bc90 <xQueueGenericSend>
      return sema;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	e000      	b.n	800b716 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b714:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
	...

0800b720 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b72a:	2300      	movs	r3, #0
 800b72c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b734:	2380      	movs	r3, #128	; 0x80
 800b736:	e03a      	b.n	800b7ae <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b738:	2300      	movs	r3, #0
 800b73a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b742:	d103      	bne.n	800b74c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b744:	f04f 33ff 	mov.w	r3, #4294967295
 800b748:	60fb      	str	r3, [r7, #12]
 800b74a:	e009      	b.n	800b760 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d006      	beq.n	800b760 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <osSemaphoreWait+0x40>
      ticks = 1;
 800b75c:	2301      	movs	r3, #1
 800b75e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b760:	f7ff ff99 	bl	800b696 <inHandlerMode>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d017      	beq.n	800b79a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b76a:	f107 0308 	add.w	r3, r7, #8
 800b76e:	461a      	mov	r2, r3
 800b770:	2100      	movs	r1, #0
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 fd24 	bl	800c1c0 <xQueueReceiveFromISR>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b01      	cmp	r3, #1
 800b77c:	d001      	beq.n	800b782 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b77e:	23ff      	movs	r3, #255	; 0xff
 800b780:	e015      	b.n	800b7ae <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d011      	beq.n	800b7ac <osSemaphoreWait+0x8c>
 800b788:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <osSemaphoreWait+0x98>)
 800b78a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b78e:	601a      	str	r2, [r3, #0]
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	e008      	b.n	800b7ac <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b79a:	68f9      	ldr	r1, [r7, #12]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 fc03 	bl	800bfa8 <xQueueSemaphoreTake>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b01      	cmp	r3, #1
 800b7a6:	d001      	beq.n	800b7ac <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b7a8:	23ff      	movs	r3, #255	; 0xff
 800b7aa:	e000      	b.n	800b7ae <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b7cc:	f7ff ff63 	bl	800b696 <inHandlerMode>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d016      	beq.n	800b804 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b7d6:	f107 0308 	add.w	r3, r7, #8
 800b7da:	4619      	mov	r1, r3
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fb55 	bl	800be8c <xQueueGiveFromISR>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d001      	beq.n	800b7ec <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b7e8:	23ff      	movs	r3, #255	; 0xff
 800b7ea:	e017      	b.n	800b81c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d013      	beq.n	800b81a <osSemaphoreRelease+0x5e>
 800b7f2:	4b0c      	ldr	r3, [pc, #48]	; (800b824 <osSemaphoreRelease+0x68>)
 800b7f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	e00a      	b.n	800b81a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b804:	2300      	movs	r3, #0
 800b806:	2200      	movs	r2, #0
 800b808:	2100      	movs	r1, #0
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fa40 	bl	800bc90 <xQueueGenericSend>
 800b810:	4603      	mov	r3, r0
 800b812:	2b01      	cmp	r3, #1
 800b814:	d001      	beq.n	800b81a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b816:	23ff      	movs	r3, #255	; 0xff
 800b818:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b81a:	68fb      	ldr	r3, [r7, #12]
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3710      	adds	r7, #16
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	e000ed04 	.word	0xe000ed04

0800b828 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b830:	f7ff ff31 	bl	800b696 <inHandlerMode>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d001      	beq.n	800b83e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b83a:	2382      	movs	r3, #130	; 0x82
 800b83c:	e003      	b.n	800b846 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fd3e 	bl	800c2c0 <vQueueDelete>

  return osOK; 
 800b844:	2300      	movs	r3, #0
}
 800b846:	4618      	mov	r0, r3
 800b848:	3708      	adds	r7, #8
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}

0800b84e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f103 0208 	add.w	r2, r3, #8
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f04f 32ff 	mov.w	r2, #4294967295
 800b866:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f103 0208 	add.w	r2, r3, #8
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f103 0208 	add.w	r2, r3, #8
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b882:	bf00      	nop
 800b884:	370c      	adds	r7, #12
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr

0800b88e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b88e:	b480      	push	{r7}
 800b890:	b083      	sub	sp, #12
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2200      	movs	r2, #0
 800b89a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b89c:	bf00      	nop
 800b89e:	370c      	adds	r7, #12
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr

0800b8a8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	689a      	ldr	r2, [r3, #8]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	683a      	ldr	r2, [r7, #0]
 800b8d2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	1c5a      	adds	r2, r3, #1
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	601a      	str	r2, [r3, #0]
}
 800b8e4:	bf00      	nop
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b085      	sub	sp, #20
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b906:	d103      	bne.n	800b910 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	691b      	ldr	r3, [r3, #16]
 800b90c:	60fb      	str	r3, [r7, #12]
 800b90e:	e00c      	b.n	800b92a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	3308      	adds	r3, #8
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	e002      	b.n	800b91e <vListInsert+0x2e>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	429a      	cmp	r2, r3
 800b928:	d2f6      	bcs.n	800b918 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	683a      	ldr	r2, [r7, #0]
 800b944:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	1c5a      	adds	r2, r3, #1
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	601a      	str	r2, [r3, #0]
}
 800b956:	bf00      	nop
 800b958:	3714      	adds	r7, #20
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b962:	b480      	push	{r7}
 800b964:	b085      	sub	sp, #20
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	6892      	ldr	r2, [r2, #8]
 800b978:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	6852      	ldr	r2, [r2, #4]
 800b982:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	687a      	ldr	r2, [r7, #4]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d103      	bne.n	800b996 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	689a      	ldr	r2, [r3, #8]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	1e5a      	subs	r2, r3, #1
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3714      	adds	r7, #20
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr
	...

0800b9b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10a      	bne.n	800b9e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b9e2:	f001 fef7 	bl	800d7d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ee:	68f9      	ldr	r1, [r7, #12]
 800b9f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b9f2:	fb01 f303 	mul.w	r3, r1, r3
 800b9f6:	441a      	add	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba12:	3b01      	subs	r3, #1
 800ba14:	68f9      	ldr	r1, [r7, #12]
 800ba16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba18:	fb01 f303 	mul.w	r3, r1, r3
 800ba1c:	441a      	add	r2, r3
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	22ff      	movs	r2, #255	; 0xff
 800ba26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	22ff      	movs	r2, #255	; 0xff
 800ba2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d114      	bne.n	800ba62 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d01a      	beq.n	800ba76 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	3310      	adds	r3, #16
 800ba44:	4618      	mov	r0, r3
 800ba46:	f001 f9bb 	bl	800cdc0 <xTaskRemoveFromEventList>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d012      	beq.n	800ba76 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba50:	4b0c      	ldr	r3, [pc, #48]	; (800ba84 <xQueueGenericReset+0xcc>)
 800ba52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba56:	601a      	str	r2, [r3, #0]
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	f3bf 8f6f 	isb	sy
 800ba60:	e009      	b.n	800ba76 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3310      	adds	r3, #16
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fef1 	bl	800b84e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3324      	adds	r3, #36	; 0x24
 800ba70:	4618      	mov	r0, r3
 800ba72:	f7ff feec 	bl	800b84e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ba76:	f001 fedd 	bl	800d834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ba7a:	2301      	movs	r3, #1
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3710      	adds	r7, #16
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	e000ed04 	.word	0xe000ed04

0800ba88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b08e      	sub	sp, #56	; 0x38
 800ba8c:	af02      	add	r7, sp, #8
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
 800ba94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d10a      	bne.n	800bab2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800baae:	bf00      	nop
 800bab0:	e7fe      	b.n	800bab0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d10a      	bne.n	800bace <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800babc:	f383 8811 	msr	BASEPRI, r3
 800bac0:	f3bf 8f6f 	isb	sy
 800bac4:	f3bf 8f4f 	dsb	sy
 800bac8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800baca:	bf00      	nop
 800bacc:	e7fe      	b.n	800bacc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <xQueueGenericCreateStatic+0x52>
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <xQueueGenericCreateStatic+0x56>
 800bada:	2301      	movs	r3, #1
 800badc:	e000      	b.n	800bae0 <xQueueGenericCreateStatic+0x58>
 800bade:	2300      	movs	r3, #0
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10a      	bne.n	800bafa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	623b      	str	r3, [r7, #32]
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d102      	bne.n	800bb06 <xQueueGenericCreateStatic+0x7e>
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d101      	bne.n	800bb0a <xQueueGenericCreateStatic+0x82>
 800bb06:	2301      	movs	r3, #1
 800bb08:	e000      	b.n	800bb0c <xQueueGenericCreateStatic+0x84>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d10a      	bne.n	800bb26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	61fb      	str	r3, [r7, #28]
}
 800bb22:	bf00      	nop
 800bb24:	e7fe      	b.n	800bb24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb26:	2348      	movs	r3, #72	; 0x48
 800bb28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2b48      	cmp	r3, #72	; 0x48
 800bb2e:	d00a      	beq.n	800bb46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	61bb      	str	r3, [r7, #24]
}
 800bb42:	bf00      	nop
 800bb44:	e7fe      	b.n	800bb44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00d      	beq.n	800bb6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb54:	2201      	movs	r2, #1
 800bb56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb60:	9300      	str	r3, [sp, #0]
 800bb62:	4613      	mov	r3, r2
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	68b9      	ldr	r1, [r7, #8]
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f000 f83f 	bl	800bbec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3730      	adds	r7, #48	; 0x30
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b08a      	sub	sp, #40	; 0x28
 800bb7c:	af02      	add	r7, sp, #8
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	4613      	mov	r3, r2
 800bb84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	613b      	str	r3, [r7, #16]
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	68ba      	ldr	r2, [r7, #8]
 800bba6:	fb02 f303 	mul.w	r3, r2, r3
 800bbaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	3348      	adds	r3, #72	; 0x48
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f001 ff31 	bl	800da18 <pvPortMalloc>
 800bbb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d011      	beq.n	800bbe2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bbbe:	69bb      	ldr	r3, [r7, #24]
 800bbc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	3348      	adds	r3, #72	; 0x48
 800bbc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbd0:	79fa      	ldrb	r2, [r7, #7]
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	697a      	ldr	r2, [r7, #20]
 800bbda:	68b9      	ldr	r1, [r7, #8]
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 f805 	bl	800bbec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bbe2:	69bb      	ldr	r3, [r7, #24]
	}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3720      	adds	r7, #32
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
 800bbf8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d103      	bne.n	800bc08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	69ba      	ldr	r2, [r7, #24]
 800bc04:	601a      	str	r2, [r3, #0]
 800bc06:	e002      	b.n	800bc0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc08:	69bb      	ldr	r3, [r7, #24]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	69b8      	ldr	r0, [r7, #24]
 800bc1e:	f7ff fecb 	bl	800b9b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc22:	bf00      	nop
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00e      	beq.n	800bc56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2100      	movs	r1, #0
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 f81d 	bl	800bc90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bc56:	bf00      	nop
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b086      	sub	sp, #24
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	4603      	mov	r3, r0
 800bc66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	617b      	str	r3, [r7, #20]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bc70:	79fb      	ldrb	r3, [r7, #7]
 800bc72:	461a      	mov	r2, r3
 800bc74:	6939      	ldr	r1, [r7, #16]
 800bc76:	6978      	ldr	r0, [r7, #20]
 800bc78:	f7ff ff7e 	bl	800bb78 <xQueueGenericCreate>
 800bc7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f7ff ffd3 	bl	800bc2a <prvInitialiseMutex>

		return xNewQueue;
 800bc84:	68fb      	ldr	r3, [r7, #12]
	}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3718      	adds	r7, #24
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
	...

0800bc90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b08e      	sub	sp, #56	; 0x38
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
 800bc9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d10a      	bne.n	800bcc2 <xQueueGenericSend+0x32>
	__asm volatile
 800bcac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb0:	f383 8811 	msr	BASEPRI, r3
 800bcb4:	f3bf 8f6f 	isb	sy
 800bcb8:	f3bf 8f4f 	dsb	sy
 800bcbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d103      	bne.n	800bcd0 <xQueueGenericSend+0x40>
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d101      	bne.n	800bcd4 <xQueueGenericSend+0x44>
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e000      	b.n	800bcd6 <xQueueGenericSend+0x46>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d10a      	bne.n	800bcf0 <xQueueGenericSend+0x60>
	__asm volatile
 800bcda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcde:	f383 8811 	msr	BASEPRI, r3
 800bce2:	f3bf 8f6f 	isb	sy
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcec:	bf00      	nop
 800bcee:	e7fe      	b.n	800bcee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	2b02      	cmp	r3, #2
 800bcf4:	d103      	bne.n	800bcfe <xQueueGenericSend+0x6e>
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d101      	bne.n	800bd02 <xQueueGenericSend+0x72>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e000      	b.n	800bd04 <xQueueGenericSend+0x74>
 800bd02:	2300      	movs	r3, #0
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d10a      	bne.n	800bd1e <xQueueGenericSend+0x8e>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	623b      	str	r3, [r7, #32]
}
 800bd1a:	bf00      	nop
 800bd1c:	e7fe      	b.n	800bd1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd1e:	f001 fa0b 	bl	800d138 <xTaskGetSchedulerState>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d102      	bne.n	800bd2e <xQueueGenericSend+0x9e>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <xQueueGenericSend+0xa2>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e000      	b.n	800bd34 <xQueueGenericSend+0xa4>
 800bd32:	2300      	movs	r3, #0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10a      	bne.n	800bd4e <xQueueGenericSend+0xbe>
	__asm volatile
 800bd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3c:	f383 8811 	msr	BASEPRI, r3
 800bd40:	f3bf 8f6f 	isb	sy
 800bd44:	f3bf 8f4f 	dsb	sy
 800bd48:	61fb      	str	r3, [r7, #28]
}
 800bd4a:	bf00      	nop
 800bd4c:	e7fe      	b.n	800bd4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd4e:	f001 fd41 	bl	800d7d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d302      	bcc.n	800bd64 <xQueueGenericSend+0xd4>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d129      	bne.n	800bdb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	68b9      	ldr	r1, [r7, #8]
 800bd68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd6a:	f000 fae4 	bl	800c336 <prvCopyDataToQueue>
 800bd6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d010      	beq.n	800bd9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd7a:	3324      	adds	r3, #36	; 0x24
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f001 f81f 	bl	800cdc0 <xTaskRemoveFromEventList>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d013      	beq.n	800bdb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd88:	4b3f      	ldr	r3, [pc, #252]	; (800be88 <xQueueGenericSend+0x1f8>)
 800bd8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd8e:	601a      	str	r2, [r3, #0]
 800bd90:	f3bf 8f4f 	dsb	sy
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	e00a      	b.n	800bdb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d007      	beq.n	800bdb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bda0:	4b39      	ldr	r3, [pc, #228]	; (800be88 <xQueueGenericSend+0x1f8>)
 800bda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bda6:	601a      	str	r2, [r3, #0]
 800bda8:	f3bf 8f4f 	dsb	sy
 800bdac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bdb0:	f001 fd40 	bl	800d834 <vPortExitCritical>
				return pdPASS;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	e063      	b.n	800be80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d103      	bne.n	800bdc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bdbe:	f001 fd39 	bl	800d834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	e05c      	b.n	800be80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d106      	bne.n	800bdda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdcc:	f107 0314 	add.w	r3, r7, #20
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f001 f857 	bl	800ce84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdda:	f001 fd2b 	bl	800d834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdde:	f000 fe0d 	bl	800c9fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bde2:	f001 fcf7 	bl	800d7d4 <vPortEnterCritical>
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdec:	b25b      	sxtb	r3, r3
 800bdee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdf2:	d103      	bne.n	800bdfc <xQueueGenericSend+0x16c>
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be02:	b25b      	sxtb	r3, r3
 800be04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be08:	d103      	bne.n	800be12 <xQueueGenericSend+0x182>
 800be0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0c:	2200      	movs	r2, #0
 800be0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be12:	f001 fd0f 	bl	800d834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be16:	1d3a      	adds	r2, r7, #4
 800be18:	f107 0314 	add.w	r3, r7, #20
 800be1c:	4611      	mov	r1, r2
 800be1e:	4618      	mov	r0, r3
 800be20:	f001 f846 	bl	800ceb0 <xTaskCheckForTimeOut>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d124      	bne.n	800be74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800be2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be2c:	f000 fb7b 	bl	800c526 <prvIsQueueFull>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d018      	beq.n	800be68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	3310      	adds	r3, #16
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	4611      	mov	r1, r2
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 ff9a 	bl	800cd78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be46:	f000 fb06 	bl	800c456 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be4a:	f000 fde5 	bl	800ca18 <xTaskResumeAll>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	f47f af7c 	bne.w	800bd4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be56:	4b0c      	ldr	r3, [pc, #48]	; (800be88 <xQueueGenericSend+0x1f8>)
 800be58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	f3bf 8f6f 	isb	sy
 800be66:	e772      	b.n	800bd4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be6a:	f000 faf4 	bl	800c456 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be6e:	f000 fdd3 	bl	800ca18 <xTaskResumeAll>
 800be72:	e76c      	b.n	800bd4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be76:	f000 faee 	bl	800c456 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be7a:	f000 fdcd 	bl	800ca18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be80:	4618      	mov	r0, r3
 800be82:	3738      	adds	r7, #56	; 0x38
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	e000ed04 	.word	0xe000ed04

0800be8c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08e      	sub	sp, #56	; 0x38
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10a      	bne.n	800beb6 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	623b      	str	r3, [r7, #32]
}
 800beb2:	bf00      	nop
 800beb4:	e7fe      	b.n	800beb4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00a      	beq.n	800bed4 <xQueueGiveFromISR+0x48>
	__asm volatile
 800bebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec2:	f383 8811 	msr	BASEPRI, r3
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	61fb      	str	r3, [r7, #28]
}
 800bed0:	bf00      	nop
 800bed2:	e7fe      	b.n	800bed2 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d103      	bne.n	800bee4 <xQueueGiveFromISR+0x58>
 800bedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d101      	bne.n	800bee8 <xQueueGiveFromISR+0x5c>
 800bee4:	2301      	movs	r3, #1
 800bee6:	e000      	b.n	800beea <xQueueGiveFromISR+0x5e>
 800bee8:	2300      	movs	r3, #0
 800beea:	2b00      	cmp	r3, #0
 800beec:	d10a      	bne.n	800bf04 <xQueueGiveFromISR+0x78>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	f383 8811 	msr	BASEPRI, r3
 800bef6:	f3bf 8f6f 	isb	sy
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	61bb      	str	r3, [r7, #24]
}
 800bf00:	bf00      	nop
 800bf02:	e7fe      	b.n	800bf02 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bf04:	f001 fd48 	bl	800d998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bf08:	f3ef 8211 	mrs	r2, BASEPRI
 800bf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf10:	f383 8811 	msr	BASEPRI, r3
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	f3bf 8f4f 	dsb	sy
 800bf1c:	617a      	str	r2, [r7, #20]
 800bf1e:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bf20:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf22:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf28:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d22b      	bcs.n	800bf8c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	1c5a      	adds	r2, r3, #1
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4e:	d112      	bne.n	800bf76 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d016      	beq.n	800bf86 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	3324      	adds	r3, #36	; 0x24
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f000 ff2f 	bl	800cdc0 <xTaskRemoveFromEventList>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00e      	beq.n	800bf86 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00b      	beq.n	800bf86 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2201      	movs	r2, #1
 800bf72:	601a      	str	r2, [r3, #0]
 800bf74:	e007      	b.n	800bf86 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	b25a      	sxtb	r2, r3
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf86:	2301      	movs	r3, #1
 800bf88:	637b      	str	r3, [r7, #52]	; 0x34
 800bf8a:	e001      	b.n	800bf90 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3738      	adds	r7, #56	; 0x38
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
	...

0800bfa8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08e      	sub	sp, #56	; 0x38
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10a      	bne.n	800bfda <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	623b      	str	r3, [r7, #32]
}
 800bfd6:	bf00      	nop
 800bfd8:	e7fe      	b.n	800bfd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d00a      	beq.n	800bff8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	61fb      	str	r3, [r7, #28]
}
 800bff4:	bf00      	nop
 800bff6:	e7fe      	b.n	800bff6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bff8:	f001 f89e 	bl	800d138 <xTaskGetSchedulerState>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d102      	bne.n	800c008 <xQueueSemaphoreTake+0x60>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <xQueueSemaphoreTake+0x64>
 800c008:	2301      	movs	r3, #1
 800c00a:	e000      	b.n	800c00e <xQueueSemaphoreTake+0x66>
 800c00c:	2300      	movs	r3, #0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10a      	bne.n	800c028 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	f383 8811 	msr	BASEPRI, r3
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	61bb      	str	r3, [r7, #24]
}
 800c024:	bf00      	nop
 800c026:	e7fe      	b.n	800c026 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c028:	f001 fbd4 	bl	800d7d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c030:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c034:	2b00      	cmp	r3, #0
 800c036:	d024      	beq.n	800c082 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	1e5a      	subs	r2, r3, #1
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d104      	bne.n	800c052 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c048:	f001 fa1e 	bl	800d488 <pvTaskIncrementMutexHeldCount>
 800c04c:	4602      	mov	r2, r0
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00f      	beq.n	800c07a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	3310      	adds	r3, #16
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 feae 	bl	800cdc0 <xTaskRemoveFromEventList>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d007      	beq.n	800c07a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c06a:	4b54      	ldr	r3, [pc, #336]	; (800c1bc <xQueueSemaphoreTake+0x214>)
 800c06c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c070:	601a      	str	r2, [r3, #0]
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c07a:	f001 fbdb 	bl	800d834 <vPortExitCritical>
				return pdPASS;
 800c07e:	2301      	movs	r3, #1
 800c080:	e097      	b.n	800c1b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d111      	bne.n	800c0ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00a      	beq.n	800c0a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	617b      	str	r3, [r7, #20]
}
 800c0a0:	bf00      	nop
 800c0a2:	e7fe      	b.n	800c0a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c0a4:	f001 fbc6 	bl	800d834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	e082      	b.n	800c1b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0b2:	f107 030c 	add.w	r3, r7, #12
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f000 fee4 	bl	800ce84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0c0:	f001 fbb8 	bl	800d834 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0c4:	f000 fc9a 	bl	800c9fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0c8:	f001 fb84 	bl	800d7d4 <vPortEnterCritical>
 800c0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0d2:	b25b      	sxtb	r3, r3
 800c0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d8:	d103      	bne.n	800c0e2 <xQueueSemaphoreTake+0x13a>
 800c0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0e8:	b25b      	sxtb	r3, r3
 800c0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ee:	d103      	bne.n	800c0f8 <xQueueSemaphoreTake+0x150>
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0f8:	f001 fb9c 	bl	800d834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0fc:	463a      	mov	r2, r7
 800c0fe:	f107 030c 	add.w	r3, r7, #12
 800c102:	4611      	mov	r1, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f000 fed3 	bl	800ceb0 <xTaskCheckForTimeOut>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d132      	bne.n	800c176 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c110:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c112:	f000 f9f2 	bl	800c4fa <prvIsQueueEmpty>
 800c116:	4603      	mov	r3, r0
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d026      	beq.n	800c16a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d109      	bne.n	800c138 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c124:	f001 fb56 	bl	800d7d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12a:	689b      	ldr	r3, [r3, #8]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f001 f821 	bl	800d174 <xTaskPriorityInherit>
 800c132:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c134:	f001 fb7e 	bl	800d834 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	3324      	adds	r3, #36	; 0x24
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f000 fe19 	bl	800cd78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c148:	f000 f985 	bl	800c456 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c14c:	f000 fc64 	bl	800ca18 <xTaskResumeAll>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	f47f af68 	bne.w	800c028 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c158:	4b18      	ldr	r3, [pc, #96]	; (800c1bc <xQueueSemaphoreTake+0x214>)
 800c15a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c15e:	601a      	str	r2, [r3, #0]
 800c160:	f3bf 8f4f 	dsb	sy
 800c164:	f3bf 8f6f 	isb	sy
 800c168:	e75e      	b.n	800c028 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c16a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c16c:	f000 f973 	bl	800c456 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c170:	f000 fc52 	bl	800ca18 <xTaskResumeAll>
 800c174:	e758      	b.n	800c028 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c176:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c178:	f000 f96d 	bl	800c456 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c17c:	f000 fc4c 	bl	800ca18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c180:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c182:	f000 f9ba 	bl	800c4fa <prvIsQueueEmpty>
 800c186:	4603      	mov	r3, r0
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f43f af4d 	beq.w	800c028 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00d      	beq.n	800c1b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c194:	f001 fb1e 	bl	800d7d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c19a:	f000 f8b4 	bl	800c306 <prvGetDisinheritPriorityAfterTimeout>
 800c19e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f001 f8e0 	bl	800d36c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c1ac:	f001 fb42 	bl	800d834 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3738      	adds	r7, #56	; 0x38
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	e000ed04 	.word	0xe000ed04

0800c1c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b08e      	sub	sp, #56	; 0x38
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d10a      	bne.n	800c1ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c1d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1da:	f383 8811 	msr	BASEPRI, r3
 800c1de:	f3bf 8f6f 	isb	sy
 800c1e2:	f3bf 8f4f 	dsb	sy
 800c1e6:	623b      	str	r3, [r7, #32]
}
 800c1e8:	bf00      	nop
 800c1ea:	e7fe      	b.n	800c1ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d103      	bne.n	800c1fa <xQueueReceiveFromISR+0x3a>
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <xQueueReceiveFromISR+0x3e>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e000      	b.n	800c200 <xQueueReceiveFromISR+0x40>
 800c1fe:	2300      	movs	r3, #0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d10a      	bne.n	800c21a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c208:	f383 8811 	msr	BASEPRI, r3
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f3bf 8f4f 	dsb	sy
 800c214:	61fb      	str	r3, [r7, #28]
}
 800c216:	bf00      	nop
 800c218:	e7fe      	b.n	800c218 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c21a:	f001 fbbd 	bl	800d998 <vPortValidateInterruptPriority>
	__asm volatile
 800c21e:	f3ef 8211 	mrs	r2, BASEPRI
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	61ba      	str	r2, [r7, #24]
 800c234:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c236:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c238:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	2b00      	cmp	r3, #0
 800c244:	d02f      	beq.n	800c2a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c24c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c250:	68b9      	ldr	r1, [r7, #8]
 800c252:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c254:	f000 f8d9 	bl	800c40a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25a:	1e5a      	subs	r2, r3, #1
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c260:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c268:	d112      	bne.n	800c290 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d016      	beq.n	800c2a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	3310      	adds	r3, #16
 800c276:	4618      	mov	r0, r3
 800c278:	f000 fda2 	bl	800cdc0 <xTaskRemoveFromEventList>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00e      	beq.n	800c2a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00b      	beq.n	800c2a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	601a      	str	r2, [r3, #0]
 800c28e:	e007      	b.n	800c2a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c294:	3301      	adds	r3, #1
 800c296:	b2db      	uxtb	r3, r3
 800c298:	b25a      	sxtb	r2, r3
 800c29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c2a4:	e001      	b.n	800c2aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	637b      	str	r3, [r7, #52]	; 0x34
 800c2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	f383 8811 	msr	BASEPRI, r3
}
 800c2b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c2b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3738      	adds	r7, #56	; 0x38
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10a      	bne.n	800c2e8 <vQueueDelete+0x28>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	60bb      	str	r3, [r7, #8]
}
 800c2e4:	bf00      	nop
 800c2e6:	e7fe      	b.n	800c2e6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f000 f935 	bl	800c558 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d102      	bne.n	800c2fe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	f001 fc59 	bl	800dbb0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c2fe:	bf00      	nop
 800c300:	3710      	adds	r7, #16
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c306:	b480      	push	{r7}
 800c308:	b085      	sub	sp, #20
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c312:	2b00      	cmp	r3, #0
 800c314:	d006      	beq.n	800c324 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f1c3 0307 	rsb	r3, r3, #7
 800c320:	60fb      	str	r3, [r7, #12]
 800c322:	e001      	b.n	800c328 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c324:	2300      	movs	r3, #0
 800c326:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c328:	68fb      	ldr	r3, [r7, #12]
	}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr

0800c336 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b086      	sub	sp, #24
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	60b9      	str	r1, [r7, #8]
 800c340:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c342:	2300      	movs	r3, #0
 800c344:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10d      	bne.n	800c370 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d14d      	bne.n	800c3f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	4618      	mov	r0, r3
 800c362:	f000 ff7d 	bl	800d260 <xTaskPriorityDisinherit>
 800c366:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	609a      	str	r2, [r3, #8]
 800c36e:	e043      	b.n	800c3f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d119      	bne.n	800c3aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6858      	ldr	r0, [r3, #4]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37e:	461a      	mov	r2, r3
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	f001 fd5d 	bl	800de40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	441a      	add	r2, r3
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	685a      	ldr	r2, [r3, #4]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d32b      	bcc.n	800c3f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	605a      	str	r2, [r3, #4]
 800c3a8:	e026      	b.n	800c3f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	68d8      	ldr	r0, [r3, #12]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	68b9      	ldr	r1, [r7, #8]
 800c3b6:	f001 fd43 	bl	800de40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	68da      	ldr	r2, [r3, #12]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c2:	425b      	negs	r3, r3
 800c3c4:	441a      	add	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	68da      	ldr	r2, [r3, #12]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d207      	bcs.n	800c3e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	689a      	ldr	r2, [r3, #8]
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3de:	425b      	negs	r3, r3
 800c3e0:	441a      	add	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d105      	bne.n	800c3f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d002      	beq.n	800c3f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c400:	697b      	ldr	r3, [r7, #20]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3718      	adds	r7, #24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b082      	sub	sp, #8
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d018      	beq.n	800c44e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68da      	ldr	r2, [r3, #12]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c424:	441a      	add	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68da      	ldr	r2, [r3, #12]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	689b      	ldr	r3, [r3, #8]
 800c432:	429a      	cmp	r2, r3
 800c434:	d303      	bcc.n	800c43e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68d9      	ldr	r1, [r3, #12]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c446:	461a      	mov	r2, r3
 800c448:	6838      	ldr	r0, [r7, #0]
 800c44a:	f001 fcf9 	bl	800de40 <memcpy>
	}
}
 800c44e:	bf00      	nop
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c456:	b580      	push	{r7, lr}
 800c458:	b084      	sub	sp, #16
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c45e:	f001 f9b9 	bl	800d7d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c468:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c46a:	e011      	b.n	800c490 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c470:	2b00      	cmp	r3, #0
 800c472:	d012      	beq.n	800c49a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3324      	adds	r3, #36	; 0x24
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 fca1 	bl	800cdc0 <xTaskRemoveFromEventList>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c484:	f000 fd76 	bl	800cf74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c488:	7bfb      	ldrb	r3, [r7, #15]
 800c48a:	3b01      	subs	r3, #1
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c494:	2b00      	cmp	r3, #0
 800c496:	dce9      	bgt.n	800c46c <prvUnlockQueue+0x16>
 800c498:	e000      	b.n	800c49c <prvUnlockQueue+0x46>
					break;
 800c49a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	22ff      	movs	r2, #255	; 0xff
 800c4a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c4a4:	f001 f9c6 	bl	800d834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c4a8:	f001 f994 	bl	800d7d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4b4:	e011      	b.n	800c4da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	691b      	ldr	r3, [r3, #16]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d012      	beq.n	800c4e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	3310      	adds	r3, #16
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f000 fc7c 	bl	800cdc0 <xTaskRemoveFromEventList>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d001      	beq.n	800c4d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c4ce:	f000 fd51 	bl	800cf74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c4d2:	7bbb      	ldrb	r3, [r7, #14]
 800c4d4:	3b01      	subs	r3, #1
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	dce9      	bgt.n	800c4b6 <prvUnlockQueue+0x60>
 800c4e2:	e000      	b.n	800c4e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c4e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	22ff      	movs	r2, #255	; 0xff
 800c4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c4ee:	f001 f9a1 	bl	800d834 <vPortExitCritical>
}
 800c4f2:	bf00      	nop
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b084      	sub	sp, #16
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c502:	f001 f967 	bl	800d7d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d102      	bne.n	800c514 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c50e:	2301      	movs	r3, #1
 800c510:	60fb      	str	r3, [r7, #12]
 800c512:	e001      	b.n	800c518 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c514:	2300      	movs	r3, #0
 800c516:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c518:	f001 f98c 	bl	800d834 <vPortExitCritical>

	return xReturn;
 800c51c:	68fb      	ldr	r3, [r7, #12]
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c52e:	f001 f951 	bl	800d7d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d102      	bne.n	800c544 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c53e:	2301      	movs	r3, #1
 800c540:	60fb      	str	r3, [r7, #12]
 800c542:	e001      	b.n	800c548 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c544:	2300      	movs	r3, #0
 800c546:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c548:	f001 f974 	bl	800d834 <vPortExitCritical>

	return xReturn;
 800c54c:	68fb      	ldr	r3, [r7, #12]
}
 800c54e:	4618      	mov	r0, r3
 800c550:	3710      	adds	r7, #16
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
	...

0800c558 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c560:	2300      	movs	r3, #0
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	e016      	b.n	800c594 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c566:	4a10      	ldr	r2, [pc, #64]	; (800c5a8 <vQueueUnregisterQueue+0x50>)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	00db      	lsls	r3, r3, #3
 800c56c:	4413      	add	r3, r2
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	429a      	cmp	r2, r3
 800c574:	d10b      	bne.n	800c58e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c576:	4a0c      	ldr	r2, [pc, #48]	; (800c5a8 <vQueueUnregisterQueue+0x50>)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2100      	movs	r1, #0
 800c57c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c580:	4a09      	ldr	r2, [pc, #36]	; (800c5a8 <vQueueUnregisterQueue+0x50>)
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	00db      	lsls	r3, r3, #3
 800c586:	4413      	add	r3, r2
 800c588:	2200      	movs	r2, #0
 800c58a:	605a      	str	r2, [r3, #4]
				break;
 800c58c:	e006      	b.n	800c59c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	3301      	adds	r3, #1
 800c592:	60fb      	str	r3, [r7, #12]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	2b07      	cmp	r3, #7
 800c598:	d9e5      	bls.n	800c566 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c59a:	bf00      	nop
 800c59c:	bf00      	nop
 800c59e:	3714      	adds	r7, #20
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	20001854 	.word	0x20001854

0800c5ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08e      	sub	sp, #56	; 0x38
 800c5b0:	af04      	add	r7, sp, #16
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10a      	bne.n	800c5d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	623b      	str	r3, [r7, #32]
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10a      	bne.n	800c5f2 <xTaskCreateStatic+0x46>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	61fb      	str	r3, [r7, #28]
}
 800c5ee:	bf00      	nop
 800c5f0:	e7fe      	b.n	800c5f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5f2:	2354      	movs	r3, #84	; 0x54
 800c5f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	2b54      	cmp	r3, #84	; 0x54
 800c5fa:	d00a      	beq.n	800c612 <xTaskCreateStatic+0x66>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	f383 8811 	msr	BASEPRI, r3
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	61bb      	str	r3, [r7, #24]
}
 800c60e:	bf00      	nop
 800c610:	e7fe      	b.n	800c610 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c612:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	2b00      	cmp	r3, #0
 800c618:	d01e      	beq.n	800c658 <xTaskCreateStatic+0xac>
 800c61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01b      	beq.n	800c658 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c628:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62c:	2202      	movs	r2, #2
 800c62e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c632:	2300      	movs	r3, #0
 800c634:	9303      	str	r3, [sp, #12]
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	9302      	str	r3, [sp, #8]
 800c63a:	f107 0314 	add.w	r3, r7, #20
 800c63e:	9301      	str	r3, [sp, #4]
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	9300      	str	r3, [sp, #0]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	68b9      	ldr	r1, [r7, #8]
 800c64a:	68f8      	ldr	r0, [r7, #12]
 800c64c:	f000 f850 	bl	800c6f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c652:	f000 f8d5 	bl	800c800 <prvAddNewTaskToReadyList>
 800c656:	e001      	b.n	800c65c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c658:	2300      	movs	r3, #0
 800c65a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c65c:	697b      	ldr	r3, [r7, #20]
	}
 800c65e:	4618      	mov	r0, r3
 800c660:	3728      	adds	r7, #40	; 0x28
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c666:	b580      	push	{r7, lr}
 800c668:	b08c      	sub	sp, #48	; 0x30
 800c66a:	af04      	add	r7, sp, #16
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	60b9      	str	r1, [r7, #8]
 800c670:	603b      	str	r3, [r7, #0]
 800c672:	4613      	mov	r3, r2
 800c674:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c676:	88fb      	ldrh	r3, [r7, #6]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4618      	mov	r0, r3
 800c67c:	f001 f9cc 	bl	800da18 <pvPortMalloc>
 800c680:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00e      	beq.n	800c6a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c688:	2054      	movs	r0, #84	; 0x54
 800c68a:	f001 f9c5 	bl	800da18 <pvPortMalloc>
 800c68e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	697a      	ldr	r2, [r7, #20]
 800c69a:	631a      	str	r2, [r3, #48]	; 0x30
 800c69c:	e005      	b.n	800c6aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c69e:	6978      	ldr	r0, [r7, #20]
 800c6a0:	f001 fa86 	bl	800dbb0 <vPortFree>
 800c6a4:	e001      	b.n	800c6aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c6aa:	69fb      	ldr	r3, [r7, #28]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d017      	beq.n	800c6e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6b0:	69fb      	ldr	r3, [r7, #28]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6b8:	88fa      	ldrh	r2, [r7, #6]
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	9303      	str	r3, [sp, #12]
 800c6be:	69fb      	ldr	r3, [r7, #28]
 800c6c0:	9302      	str	r3, [sp, #8]
 800c6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	9300      	str	r3, [sp, #0]
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	68b9      	ldr	r1, [r7, #8]
 800c6ce:	68f8      	ldr	r0, [r7, #12]
 800c6d0:	f000 f80e 	bl	800c6f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6d4:	69f8      	ldr	r0, [r7, #28]
 800c6d6:	f000 f893 	bl	800c800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	61bb      	str	r3, [r7, #24]
 800c6de:	e002      	b.n	800c6e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6e6:	69bb      	ldr	r3, [r7, #24]
	}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3720      	adds	r7, #32
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b088      	sub	sp, #32
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	60b9      	str	r1, [r7, #8]
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c708:	3b01      	subs	r3, #1
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	f023 0307 	bic.w	r3, r3, #7
 800c716:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	f003 0307 	and.w	r3, r3, #7
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00a      	beq.n	800c738 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	617b      	str	r3, [r7, #20]
}
 800c734:	bf00      	nop
 800c736:	e7fe      	b.n	800c736 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d01f      	beq.n	800c77e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c73e:	2300      	movs	r3, #0
 800c740:	61fb      	str	r3, [r7, #28]
 800c742:	e012      	b.n	800c76a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c744:	68ba      	ldr	r2, [r7, #8]
 800c746:	69fb      	ldr	r3, [r7, #28]
 800c748:	4413      	add	r3, r2
 800c74a:	7819      	ldrb	r1, [r3, #0]
 800c74c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	4413      	add	r3, r2
 800c752:	3334      	adds	r3, #52	; 0x34
 800c754:	460a      	mov	r2, r1
 800c756:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	4413      	add	r3, r2
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d006      	beq.n	800c772 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	3301      	adds	r3, #1
 800c768:	61fb      	str	r3, [r7, #28]
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	2b0f      	cmp	r3, #15
 800c76e:	d9e9      	bls.n	800c744 <prvInitialiseNewTask+0x54>
 800c770:	e000      	b.n	800c774 <prvInitialiseNewTask+0x84>
			{
				break;
 800c772:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	2200      	movs	r2, #0
 800c778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c77c:	e003      	b.n	800c786 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	2200      	movs	r2, #0
 800c782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c788:	2b06      	cmp	r3, #6
 800c78a:	d901      	bls.n	800c790 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c78c:	2306      	movs	r3, #6
 800c78e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c794:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c79a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	2200      	movs	r2, #0
 800c7a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	3304      	adds	r3, #4
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff f871 	bl	800b88e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ae:	3318      	adds	r3, #24
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f7ff f86c 	bl	800b88e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	f1c3 0207 	rsb	r2, r3, #7
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7da:	683a      	ldr	r2, [r7, #0]
 800c7dc:	68f9      	ldr	r1, [r7, #12]
 800c7de:	69b8      	ldr	r0, [r7, #24]
 800c7e0:	f000 fecc 	bl	800d57c <pxPortInitialiseStack>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7f6:	bf00      	nop
 800c7f8:	3720      	adds	r7, #32
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}
	...

0800c800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c808:	f000 ffe4 	bl	800d7d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c80c:	4b2a      	ldr	r3, [pc, #168]	; (800c8b8 <prvAddNewTaskToReadyList+0xb8>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3301      	adds	r3, #1
 800c812:	4a29      	ldr	r2, [pc, #164]	; (800c8b8 <prvAddNewTaskToReadyList+0xb8>)
 800c814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c816:	4b29      	ldr	r3, [pc, #164]	; (800c8bc <prvAddNewTaskToReadyList+0xbc>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d109      	bne.n	800c832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c81e:	4a27      	ldr	r2, [pc, #156]	; (800c8bc <prvAddNewTaskToReadyList+0xbc>)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c824:	4b24      	ldr	r3, [pc, #144]	; (800c8b8 <prvAddNewTaskToReadyList+0xb8>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d110      	bne.n	800c84e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c82c:	f000 fbc6 	bl	800cfbc <prvInitialiseTaskLists>
 800c830:	e00d      	b.n	800c84e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c832:	4b23      	ldr	r3, [pc, #140]	; (800c8c0 <prvAddNewTaskToReadyList+0xc0>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d109      	bne.n	800c84e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c83a:	4b20      	ldr	r3, [pc, #128]	; (800c8bc <prvAddNewTaskToReadyList+0xbc>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	429a      	cmp	r2, r3
 800c846:	d802      	bhi.n	800c84e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c848:	4a1c      	ldr	r2, [pc, #112]	; (800c8bc <prvAddNewTaskToReadyList+0xbc>)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c84e:	4b1d      	ldr	r3, [pc, #116]	; (800c8c4 <prvAddNewTaskToReadyList+0xc4>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	3301      	adds	r3, #1
 800c854:	4a1b      	ldr	r2, [pc, #108]	; (800c8c4 <prvAddNewTaskToReadyList+0xc4>)
 800c856:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85c:	2201      	movs	r2, #1
 800c85e:	409a      	lsls	r2, r3
 800c860:	4b19      	ldr	r3, [pc, #100]	; (800c8c8 <prvAddNewTaskToReadyList+0xc8>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4313      	orrs	r3, r2
 800c866:	4a18      	ldr	r2, [pc, #96]	; (800c8c8 <prvAddNewTaskToReadyList+0xc8>)
 800c868:	6013      	str	r3, [r2, #0]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86e:	4613      	mov	r3, r2
 800c870:	009b      	lsls	r3, r3, #2
 800c872:	4413      	add	r3, r2
 800c874:	009b      	lsls	r3, r3, #2
 800c876:	4a15      	ldr	r2, [pc, #84]	; (800c8cc <prvAddNewTaskToReadyList+0xcc>)
 800c878:	441a      	add	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	3304      	adds	r3, #4
 800c87e:	4619      	mov	r1, r3
 800c880:	4610      	mov	r0, r2
 800c882:	f7ff f811 	bl	800b8a8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c886:	f000 ffd5 	bl	800d834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c88a:	4b0d      	ldr	r3, [pc, #52]	; (800c8c0 <prvAddNewTaskToReadyList+0xc0>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00e      	beq.n	800c8b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c892:	4b0a      	ldr	r3, [pc, #40]	; (800c8bc <prvAddNewTaskToReadyList+0xbc>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d207      	bcs.n	800c8b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	; (800c8d0 <prvAddNewTaskToReadyList+0xd0>)
 800c8a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a6:	601a      	str	r2, [r3, #0]
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8b0:	bf00      	nop
 800c8b2:	3708      	adds	r7, #8
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}
 800c8b8:	20001994 	.word	0x20001994
 800c8bc:	20001894 	.word	0x20001894
 800c8c0:	200019a0 	.word	0x200019a0
 800c8c4:	200019b0 	.word	0x200019b0
 800c8c8:	2000199c 	.word	0x2000199c
 800c8cc:	20001898 	.word	0x20001898
 800c8d0:	e000ed04 	.word	0xe000ed04

0800c8d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b084      	sub	sp, #16
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d017      	beq.n	800c916 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8e6:	4b13      	ldr	r3, [pc, #76]	; (800c934 <vTaskDelay+0x60>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00a      	beq.n	800c904 <vTaskDelay+0x30>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	60bb      	str	r3, [r7, #8]
}
 800c900:	bf00      	nop
 800c902:	e7fe      	b.n	800c902 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c904:	f000 f87a 	bl	800c9fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c908:	2100      	movs	r1, #0
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f000 fdd0 	bl	800d4b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c910:	f000 f882 	bl	800ca18 <xTaskResumeAll>
 800c914:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d107      	bne.n	800c92c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c91c:	4b06      	ldr	r3, [pc, #24]	; (800c938 <vTaskDelay+0x64>)
 800c91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	f3bf 8f4f 	dsb	sy
 800c928:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c92c:	bf00      	nop
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}
 800c934:	200019bc 	.word	0x200019bc
 800c938:	e000ed04 	.word	0xe000ed04

0800c93c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b08a      	sub	sp, #40	; 0x28
 800c940:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c942:	2300      	movs	r3, #0
 800c944:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c946:	2300      	movs	r3, #0
 800c948:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c94a:	463a      	mov	r2, r7
 800c94c:	1d39      	adds	r1, r7, #4
 800c94e:	f107 0308 	add.w	r3, r7, #8
 800c952:	4618      	mov	r0, r3
 800c954:	f7f5 fb86 	bl	8002064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c958:	6839      	ldr	r1, [r7, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	9202      	str	r2, [sp, #8]
 800c960:	9301      	str	r3, [sp, #4]
 800c962:	2300      	movs	r3, #0
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	2300      	movs	r3, #0
 800c968:	460a      	mov	r2, r1
 800c96a:	491e      	ldr	r1, [pc, #120]	; (800c9e4 <vTaskStartScheduler+0xa8>)
 800c96c:	481e      	ldr	r0, [pc, #120]	; (800c9e8 <vTaskStartScheduler+0xac>)
 800c96e:	f7ff fe1d 	bl	800c5ac <xTaskCreateStatic>
 800c972:	4603      	mov	r3, r0
 800c974:	4a1d      	ldr	r2, [pc, #116]	; (800c9ec <vTaskStartScheduler+0xb0>)
 800c976:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c978:	4b1c      	ldr	r3, [pc, #112]	; (800c9ec <vTaskStartScheduler+0xb0>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d002      	beq.n	800c986 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c980:	2301      	movs	r3, #1
 800c982:	617b      	str	r3, [r7, #20]
 800c984:	e001      	b.n	800c98a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d116      	bne.n	800c9be <vTaskStartScheduler+0x82>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	613b      	str	r3, [r7, #16]
}
 800c9a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9a4:	4b12      	ldr	r3, [pc, #72]	; (800c9f0 <vTaskStartScheduler+0xb4>)
 800c9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9ac:	4b11      	ldr	r3, [pc, #68]	; (800c9f4 <vTaskStartScheduler+0xb8>)
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9b2:	4b11      	ldr	r3, [pc, #68]	; (800c9f8 <vTaskStartScheduler+0xbc>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9b8:	f000 fe6a 	bl	800d690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9bc:	e00e      	b.n	800c9dc <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c4:	d10a      	bne.n	800c9dc <vTaskStartScheduler+0xa0>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	60fb      	str	r3, [r7, #12]
}
 800c9d8:	bf00      	nop
 800c9da:	e7fe      	b.n	800c9da <vTaskStartScheduler+0x9e>
}
 800c9dc:	bf00      	nop
 800c9de:	3718      	adds	r7, #24
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}
 800c9e4:	080101f0 	.word	0x080101f0
 800c9e8:	0800cf8d 	.word	0x0800cf8d
 800c9ec:	200019b8 	.word	0x200019b8
 800c9f0:	200019b4 	.word	0x200019b4
 800c9f4:	200019a0 	.word	0x200019a0
 800c9f8:	20001998 	.word	0x20001998

0800c9fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca00:	4b04      	ldr	r3, [pc, #16]	; (800ca14 <vTaskSuspendAll+0x18>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	3301      	adds	r3, #1
 800ca06:	4a03      	ldr	r2, [pc, #12]	; (800ca14 <vTaskSuspendAll+0x18>)
 800ca08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca0a:	bf00      	nop
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	200019bc 	.word	0x200019bc

0800ca18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca22:	2300      	movs	r3, #0
 800ca24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca26:	4b41      	ldr	r3, [pc, #260]	; (800cb2c <xTaskResumeAll+0x114>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d10a      	bne.n	800ca44 <xTaskResumeAll+0x2c>
	__asm volatile
 800ca2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	603b      	str	r3, [r7, #0]
}
 800ca40:	bf00      	nop
 800ca42:	e7fe      	b.n	800ca42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca44:	f000 fec6 	bl	800d7d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca48:	4b38      	ldr	r3, [pc, #224]	; (800cb2c <xTaskResumeAll+0x114>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	4a37      	ldr	r2, [pc, #220]	; (800cb2c <xTaskResumeAll+0x114>)
 800ca50:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca52:	4b36      	ldr	r3, [pc, #216]	; (800cb2c <xTaskResumeAll+0x114>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d161      	bne.n	800cb1e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca5a:	4b35      	ldr	r3, [pc, #212]	; (800cb30 <xTaskResumeAll+0x118>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d05d      	beq.n	800cb1e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca62:	e02e      	b.n	800cac2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca64:	4b33      	ldr	r3, [pc, #204]	; (800cb34 <xTaskResumeAll+0x11c>)
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	68db      	ldr	r3, [r3, #12]
 800ca6a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	3318      	adds	r3, #24
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fe ff76 	bl	800b962 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe ff71 	bl	800b962 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca84:	2201      	movs	r2, #1
 800ca86:	409a      	lsls	r2, r3
 800ca88:	4b2b      	ldr	r3, [pc, #172]	; (800cb38 <xTaskResumeAll+0x120>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	4a2a      	ldr	r2, [pc, #168]	; (800cb38 <xTaskResumeAll+0x120>)
 800ca90:	6013      	str	r3, [r2, #0]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca96:	4613      	mov	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4a27      	ldr	r2, [pc, #156]	; (800cb3c <xTaskResumeAll+0x124>)
 800caa0:	441a      	add	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	3304      	adds	r3, #4
 800caa6:	4619      	mov	r1, r3
 800caa8:	4610      	mov	r0, r2
 800caaa:	f7fe fefd 	bl	800b8a8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cab2:	4b23      	ldr	r3, [pc, #140]	; (800cb40 <xTaskResumeAll+0x128>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cab8:	429a      	cmp	r2, r3
 800caba:	d302      	bcc.n	800cac2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cabc:	4b21      	ldr	r3, [pc, #132]	; (800cb44 <xTaskResumeAll+0x12c>)
 800cabe:	2201      	movs	r2, #1
 800cac0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cac2:	4b1c      	ldr	r3, [pc, #112]	; (800cb34 <xTaskResumeAll+0x11c>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1cc      	bne.n	800ca64 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cad0:	f000 fb12 	bl	800d0f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cad4:	4b1c      	ldr	r3, [pc, #112]	; (800cb48 <xTaskResumeAll+0x130>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d010      	beq.n	800cb02 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cae0:	f000 f836 	bl	800cb50 <xTaskIncrementTick>
 800cae4:	4603      	mov	r3, r0
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d002      	beq.n	800caf0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800caea:	4b16      	ldr	r3, [pc, #88]	; (800cb44 <xTaskResumeAll+0x12c>)
 800caec:	2201      	movs	r2, #1
 800caee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d1f1      	bne.n	800cae0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cafc:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <xTaskResumeAll+0x130>)
 800cafe:	2200      	movs	r2, #0
 800cb00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb02:	4b10      	ldr	r3, [pc, #64]	; (800cb44 <xTaskResumeAll+0x12c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d009      	beq.n	800cb1e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb0e:	4b0f      	ldr	r3, [pc, #60]	; (800cb4c <xTaskResumeAll+0x134>)
 800cb10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb14:	601a      	str	r2, [r3, #0]
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb1e:	f000 fe89 	bl	800d834 <vPortExitCritical>

	return xAlreadyYielded;
 800cb22:	68bb      	ldr	r3, [r7, #8]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3710      	adds	r7, #16
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	200019bc 	.word	0x200019bc
 800cb30:	20001994 	.word	0x20001994
 800cb34:	20001954 	.word	0x20001954
 800cb38:	2000199c 	.word	0x2000199c
 800cb3c:	20001898 	.word	0x20001898
 800cb40:	20001894 	.word	0x20001894
 800cb44:	200019a8 	.word	0x200019a8
 800cb48:	200019a4 	.word	0x200019a4
 800cb4c:	e000ed04 	.word	0xe000ed04

0800cb50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b086      	sub	sp, #24
 800cb54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb56:	2300      	movs	r3, #0
 800cb58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb5a:	4b4e      	ldr	r3, [pc, #312]	; (800cc94 <xTaskIncrementTick+0x144>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f040 808e 	bne.w	800cc80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb64:	4b4c      	ldr	r3, [pc, #304]	; (800cc98 <xTaskIncrementTick+0x148>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	3301      	adds	r3, #1
 800cb6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb6c:	4a4a      	ldr	r2, [pc, #296]	; (800cc98 <xTaskIncrementTick+0x148>)
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d120      	bne.n	800cbba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb78:	4b48      	ldr	r3, [pc, #288]	; (800cc9c <xTaskIncrementTick+0x14c>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00a      	beq.n	800cb98 <xTaskIncrementTick+0x48>
	__asm volatile
 800cb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb86:	f383 8811 	msr	BASEPRI, r3
 800cb8a:	f3bf 8f6f 	isb	sy
 800cb8e:	f3bf 8f4f 	dsb	sy
 800cb92:	603b      	str	r3, [r7, #0]
}
 800cb94:	bf00      	nop
 800cb96:	e7fe      	b.n	800cb96 <xTaskIncrementTick+0x46>
 800cb98:	4b40      	ldr	r3, [pc, #256]	; (800cc9c <xTaskIncrementTick+0x14c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	60fb      	str	r3, [r7, #12]
 800cb9e:	4b40      	ldr	r3, [pc, #256]	; (800cca0 <xTaskIncrementTick+0x150>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a3e      	ldr	r2, [pc, #248]	; (800cc9c <xTaskIncrementTick+0x14c>)
 800cba4:	6013      	str	r3, [r2, #0]
 800cba6:	4a3e      	ldr	r2, [pc, #248]	; (800cca0 <xTaskIncrementTick+0x150>)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6013      	str	r3, [r2, #0]
 800cbac:	4b3d      	ldr	r3, [pc, #244]	; (800cca4 <xTaskIncrementTick+0x154>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	4a3c      	ldr	r2, [pc, #240]	; (800cca4 <xTaskIncrementTick+0x154>)
 800cbb4:	6013      	str	r3, [r2, #0]
 800cbb6:	f000 fa9f 	bl	800d0f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbba:	4b3b      	ldr	r3, [pc, #236]	; (800cca8 <xTaskIncrementTick+0x158>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	693a      	ldr	r2, [r7, #16]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d348      	bcc.n	800cc56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbc4:	4b35      	ldr	r3, [pc, #212]	; (800cc9c <xTaskIncrementTick+0x14c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d104      	bne.n	800cbd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbce:	4b36      	ldr	r3, [pc, #216]	; (800cca8 <xTaskIncrementTick+0x158>)
 800cbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd4:	601a      	str	r2, [r3, #0]
					break;
 800cbd6:	e03e      	b.n	800cc56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbd8:	4b30      	ldr	r3, [pc, #192]	; (800cc9c <xTaskIncrementTick+0x14c>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbe8:	693a      	ldr	r2, [r7, #16]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d203      	bcs.n	800cbf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbf0:	4a2d      	ldr	r2, [pc, #180]	; (800cca8 <xTaskIncrementTick+0x158>)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cbf6:	e02e      	b.n	800cc56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7fe feb0 	bl	800b962 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d004      	beq.n	800cc14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	3318      	adds	r3, #24
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fe fea7 	bl	800b962 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc18:	2201      	movs	r2, #1
 800cc1a:	409a      	lsls	r2, r3
 800cc1c:	4b23      	ldr	r3, [pc, #140]	; (800ccac <xTaskIncrementTick+0x15c>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	4a22      	ldr	r2, [pc, #136]	; (800ccac <xTaskIncrementTick+0x15c>)
 800cc24:	6013      	str	r3, [r2, #0]
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	4a1f      	ldr	r2, [pc, #124]	; (800ccb0 <xTaskIncrementTick+0x160>)
 800cc34:	441a      	add	r2, r3
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	3304      	adds	r3, #4
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	4610      	mov	r0, r2
 800cc3e:	f7fe fe33 	bl	800b8a8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc46:	4b1b      	ldr	r3, [pc, #108]	; (800ccb4 <xTaskIncrementTick+0x164>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d3b9      	bcc.n	800cbc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc50:	2301      	movs	r3, #1
 800cc52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc54:	e7b6      	b.n	800cbc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc56:	4b17      	ldr	r3, [pc, #92]	; (800ccb4 <xTaskIncrementTick+0x164>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5c:	4914      	ldr	r1, [pc, #80]	; (800ccb0 <xTaskIncrementTick+0x160>)
 800cc5e:	4613      	mov	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	440b      	add	r3, r1
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d901      	bls.n	800cc72 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc72:	4b11      	ldr	r3, [pc, #68]	; (800ccb8 <xTaskIncrementTick+0x168>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d007      	beq.n	800cc8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	617b      	str	r3, [r7, #20]
 800cc7e:	e004      	b.n	800cc8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc80:	4b0e      	ldr	r3, [pc, #56]	; (800ccbc <xTaskIncrementTick+0x16c>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	3301      	adds	r3, #1
 800cc86:	4a0d      	ldr	r2, [pc, #52]	; (800ccbc <xTaskIncrementTick+0x16c>)
 800cc88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc8a:	697b      	ldr	r3, [r7, #20]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3718      	adds	r7, #24
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	200019bc 	.word	0x200019bc
 800cc98:	20001998 	.word	0x20001998
 800cc9c:	2000194c 	.word	0x2000194c
 800cca0:	20001950 	.word	0x20001950
 800cca4:	200019ac 	.word	0x200019ac
 800cca8:	200019b4 	.word	0x200019b4
 800ccac:	2000199c 	.word	0x2000199c
 800ccb0:	20001898 	.word	0x20001898
 800ccb4:	20001894 	.word	0x20001894
 800ccb8:	200019a8 	.word	0x200019a8
 800ccbc:	200019a4 	.word	0x200019a4

0800ccc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccc6:	4b27      	ldr	r3, [pc, #156]	; (800cd64 <vTaskSwitchContext+0xa4>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d003      	beq.n	800ccd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccce:	4b26      	ldr	r3, [pc, #152]	; (800cd68 <vTaskSwitchContext+0xa8>)
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ccd4:	e03f      	b.n	800cd56 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800ccd6:	4b24      	ldr	r3, [pc, #144]	; (800cd68 <vTaskSwitchContext+0xa8>)
 800ccd8:	2200      	movs	r2, #0
 800ccda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccdc:	4b23      	ldr	r3, [pc, #140]	; (800cd6c <vTaskSwitchContext+0xac>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	fab3 f383 	clz	r3, r3
 800cce8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ccea:	7afb      	ldrb	r3, [r7, #11]
 800ccec:	f1c3 031f 	rsb	r3, r3, #31
 800ccf0:	617b      	str	r3, [r7, #20]
 800ccf2:	491f      	ldr	r1, [pc, #124]	; (800cd70 <vTaskSwitchContext+0xb0>)
 800ccf4:	697a      	ldr	r2, [r7, #20]
 800ccf6:	4613      	mov	r3, r2
 800ccf8:	009b      	lsls	r3, r3, #2
 800ccfa:	4413      	add	r3, r2
 800ccfc:	009b      	lsls	r3, r3, #2
 800ccfe:	440b      	add	r3, r1
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10a      	bne.n	800cd1c <vTaskSwitchContext+0x5c>
	__asm volatile
 800cd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0a:	f383 8811 	msr	BASEPRI, r3
 800cd0e:	f3bf 8f6f 	isb	sy
 800cd12:	f3bf 8f4f 	dsb	sy
 800cd16:	607b      	str	r3, [r7, #4]
}
 800cd18:	bf00      	nop
 800cd1a:	e7fe      	b.n	800cd1a <vTaskSwitchContext+0x5a>
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4a12      	ldr	r2, [pc, #72]	; (800cd70 <vTaskSwitchContext+0xb0>)
 800cd28:	4413      	add	r3, r2
 800cd2a:	613b      	str	r3, [r7, #16]
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	685a      	ldr	r2, [r3, #4]
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	605a      	str	r2, [r3, #4]
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	685a      	ldr	r2, [r3, #4]
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d104      	bne.n	800cd4c <vTaskSwitchContext+0x8c>
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	685a      	ldr	r2, [r3, #4]
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	605a      	str	r2, [r3, #4]
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	4a08      	ldr	r2, [pc, #32]	; (800cd74 <vTaskSwitchContext+0xb4>)
 800cd54:	6013      	str	r3, [r2, #0]
}
 800cd56:	bf00      	nop
 800cd58:	371c      	adds	r7, #28
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop
 800cd64:	200019bc 	.word	0x200019bc
 800cd68:	200019a8 	.word	0x200019a8
 800cd6c:	2000199c 	.word	0x2000199c
 800cd70:	20001898 	.word	0x20001898
 800cd74:	20001894 	.word	0x20001894

0800cd78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	60fb      	str	r3, [r7, #12]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd9e:	4b07      	ldr	r3, [pc, #28]	; (800cdbc <vTaskPlaceOnEventList+0x44>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3318      	adds	r3, #24
 800cda4:	4619      	mov	r1, r3
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7fe fda2 	bl	800b8f0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdac:	2101      	movs	r1, #1
 800cdae:	6838      	ldr	r0, [r7, #0]
 800cdb0:	f000 fb7e 	bl	800d4b0 <prvAddCurrentTaskToDelayedList>
}
 800cdb4:	bf00      	nop
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	20001894 	.word	0x20001894

0800cdc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d10a      	bne.n	800cdec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdda:	f383 8811 	msr	BASEPRI, r3
 800cdde:	f3bf 8f6f 	isb	sy
 800cde2:	f3bf 8f4f 	dsb	sy
 800cde6:	60fb      	str	r3, [r7, #12]
}
 800cde8:	bf00      	nop
 800cdea:	e7fe      	b.n	800cdea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	3318      	adds	r3, #24
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fe fdb6 	bl	800b962 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdf6:	4b1d      	ldr	r3, [pc, #116]	; (800ce6c <xTaskRemoveFromEventList+0xac>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d11c      	bne.n	800ce38 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	3304      	adds	r3, #4
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7fe fdad 	bl	800b962 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0c:	2201      	movs	r2, #1
 800ce0e:	409a      	lsls	r2, r3
 800ce10:	4b17      	ldr	r3, [pc, #92]	; (800ce70 <xTaskRemoveFromEventList+0xb0>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	4a16      	ldr	r2, [pc, #88]	; (800ce70 <xTaskRemoveFromEventList+0xb0>)
 800ce18:	6013      	str	r3, [r2, #0]
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce1e:	4613      	mov	r3, r2
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4413      	add	r3, r2
 800ce24:	009b      	lsls	r3, r3, #2
 800ce26:	4a13      	ldr	r2, [pc, #76]	; (800ce74 <xTaskRemoveFromEventList+0xb4>)
 800ce28:	441a      	add	r2, r3
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	4619      	mov	r1, r3
 800ce30:	4610      	mov	r0, r2
 800ce32:	f7fe fd39 	bl	800b8a8 <vListInsertEnd>
 800ce36:	e005      	b.n	800ce44 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	3318      	adds	r3, #24
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	480e      	ldr	r0, [pc, #56]	; (800ce78 <xTaskRemoveFromEventList+0xb8>)
 800ce40:	f7fe fd32 	bl	800b8a8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce48:	4b0c      	ldr	r3, [pc, #48]	; (800ce7c <xTaskRemoveFromEventList+0xbc>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d905      	bls.n	800ce5e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce52:	2301      	movs	r3, #1
 800ce54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce56:	4b0a      	ldr	r3, [pc, #40]	; (800ce80 <xTaskRemoveFromEventList+0xc0>)
 800ce58:	2201      	movs	r2, #1
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	e001      	b.n	800ce62 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce62:	697b      	ldr	r3, [r7, #20]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	200019bc 	.word	0x200019bc
 800ce70:	2000199c 	.word	0x2000199c
 800ce74:	20001898 	.word	0x20001898
 800ce78:	20001954 	.word	0x20001954
 800ce7c:	20001894 	.word	0x20001894
 800ce80:	200019a8 	.word	0x200019a8

0800ce84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ce8c:	4b06      	ldr	r3, [pc, #24]	; (800cea8 <vTaskInternalSetTimeOutState+0x24>)
 800ce8e:	681a      	ldr	r2, [r3, #0]
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ce94:	4b05      	ldr	r3, [pc, #20]	; (800ceac <vTaskInternalSetTimeOutState+0x28>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	605a      	str	r2, [r3, #4]
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr
 800cea8:	200019ac 	.word	0x200019ac
 800ceac:	20001998 	.word	0x20001998

0800ceb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b088      	sub	sp, #32
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d10a      	bne.n	800ced6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800cec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cec4:	f383 8811 	msr	BASEPRI, r3
 800cec8:	f3bf 8f6f 	isb	sy
 800cecc:	f3bf 8f4f 	dsb	sy
 800ced0:	613b      	str	r3, [r7, #16]
}
 800ced2:	bf00      	nop
 800ced4:	e7fe      	b.n	800ced4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10a      	bne.n	800cef2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cee0:	f383 8811 	msr	BASEPRI, r3
 800cee4:	f3bf 8f6f 	isb	sy
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	60fb      	str	r3, [r7, #12]
}
 800ceee:	bf00      	nop
 800cef0:	e7fe      	b.n	800cef0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cef2:	f000 fc6f 	bl	800d7d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cef6:	4b1d      	ldr	r3, [pc, #116]	; (800cf6c <xTaskCheckForTimeOut+0xbc>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	69ba      	ldr	r2, [r7, #24]
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf0e:	d102      	bne.n	800cf16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf10:	2300      	movs	r3, #0
 800cf12:	61fb      	str	r3, [r7, #28]
 800cf14:	e023      	b.n	800cf5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	4b15      	ldr	r3, [pc, #84]	; (800cf70 <xTaskCheckForTimeOut+0xc0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d007      	beq.n	800cf32 <xTaskCheckForTimeOut+0x82>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	69ba      	ldr	r2, [r7, #24]
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	d302      	bcc.n	800cf32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	61fb      	str	r3, [r7, #28]
 800cf30:	e015      	b.n	800cf5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	697a      	ldr	r2, [r7, #20]
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d20b      	bcs.n	800cf54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	681a      	ldr	r2, [r3, #0]
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	1ad2      	subs	r2, r2, r3
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7ff ff9b 	bl	800ce84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	61fb      	str	r3, [r7, #28]
 800cf52:	e004      	b.n	800cf5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	2200      	movs	r2, #0
 800cf58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf5e:	f000 fc69 	bl	800d834 <vPortExitCritical>

	return xReturn;
 800cf62:	69fb      	ldr	r3, [r7, #28]
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3720      	adds	r7, #32
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	20001998 	.word	0x20001998
 800cf70:	200019ac 	.word	0x200019ac

0800cf74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf74:	b480      	push	{r7}
 800cf76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf78:	4b03      	ldr	r3, [pc, #12]	; (800cf88 <vTaskMissedYield+0x14>)
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	601a      	str	r2, [r3, #0]
}
 800cf7e:	bf00      	nop
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	200019a8 	.word	0x200019a8

0800cf8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cf94:	f000 f852 	bl	800d03c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cf98:	4b06      	ldr	r3, [pc, #24]	; (800cfb4 <prvIdleTask+0x28>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d9f9      	bls.n	800cf94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cfa0:	4b05      	ldr	r3, [pc, #20]	; (800cfb8 <prvIdleTask+0x2c>)
 800cfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfa6:	601a      	str	r2, [r3, #0]
 800cfa8:	f3bf 8f4f 	dsb	sy
 800cfac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cfb0:	e7f0      	b.n	800cf94 <prvIdleTask+0x8>
 800cfb2:	bf00      	nop
 800cfb4:	20001898 	.word	0x20001898
 800cfb8:	e000ed04 	.word	0xe000ed04

0800cfbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	607b      	str	r3, [r7, #4]
 800cfc6:	e00c      	b.n	800cfe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	4613      	mov	r3, r2
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	4413      	add	r3, r2
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	4a12      	ldr	r2, [pc, #72]	; (800d01c <prvInitialiseTaskLists+0x60>)
 800cfd4:	4413      	add	r3, r2
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fe fc39 	bl	800b84e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	607b      	str	r3, [r7, #4]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b06      	cmp	r3, #6
 800cfe6:	d9ef      	bls.n	800cfc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cfe8:	480d      	ldr	r0, [pc, #52]	; (800d020 <prvInitialiseTaskLists+0x64>)
 800cfea:	f7fe fc30 	bl	800b84e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cfee:	480d      	ldr	r0, [pc, #52]	; (800d024 <prvInitialiseTaskLists+0x68>)
 800cff0:	f7fe fc2d 	bl	800b84e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cff4:	480c      	ldr	r0, [pc, #48]	; (800d028 <prvInitialiseTaskLists+0x6c>)
 800cff6:	f7fe fc2a 	bl	800b84e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cffa:	480c      	ldr	r0, [pc, #48]	; (800d02c <prvInitialiseTaskLists+0x70>)
 800cffc:	f7fe fc27 	bl	800b84e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d000:	480b      	ldr	r0, [pc, #44]	; (800d030 <prvInitialiseTaskLists+0x74>)
 800d002:	f7fe fc24 	bl	800b84e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d006:	4b0b      	ldr	r3, [pc, #44]	; (800d034 <prvInitialiseTaskLists+0x78>)
 800d008:	4a05      	ldr	r2, [pc, #20]	; (800d020 <prvInitialiseTaskLists+0x64>)
 800d00a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d00c:	4b0a      	ldr	r3, [pc, #40]	; (800d038 <prvInitialiseTaskLists+0x7c>)
 800d00e:	4a05      	ldr	r2, [pc, #20]	; (800d024 <prvInitialiseTaskLists+0x68>)
 800d010:	601a      	str	r2, [r3, #0]
}
 800d012:	bf00      	nop
 800d014:	3708      	adds	r7, #8
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	20001898 	.word	0x20001898
 800d020:	20001924 	.word	0x20001924
 800d024:	20001938 	.word	0x20001938
 800d028:	20001954 	.word	0x20001954
 800d02c:	20001968 	.word	0x20001968
 800d030:	20001980 	.word	0x20001980
 800d034:	2000194c 	.word	0x2000194c
 800d038:	20001950 	.word	0x20001950

0800d03c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d042:	e019      	b.n	800d078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d044:	f000 fbc6 	bl	800d7d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d048:	4b10      	ldr	r3, [pc, #64]	; (800d08c <prvCheckTasksWaitingTermination+0x50>)
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	3304      	adds	r3, #4
 800d054:	4618      	mov	r0, r3
 800d056:	f7fe fc84 	bl	800b962 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d05a:	4b0d      	ldr	r3, [pc, #52]	; (800d090 <prvCheckTasksWaitingTermination+0x54>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	3b01      	subs	r3, #1
 800d060:	4a0b      	ldr	r2, [pc, #44]	; (800d090 <prvCheckTasksWaitingTermination+0x54>)
 800d062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d064:	4b0b      	ldr	r3, [pc, #44]	; (800d094 <prvCheckTasksWaitingTermination+0x58>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3b01      	subs	r3, #1
 800d06a:	4a0a      	ldr	r2, [pc, #40]	; (800d094 <prvCheckTasksWaitingTermination+0x58>)
 800d06c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d06e:	f000 fbe1 	bl	800d834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f810 	bl	800d098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d078:	4b06      	ldr	r3, [pc, #24]	; (800d094 <prvCheckTasksWaitingTermination+0x58>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d1e1      	bne.n	800d044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d080:	bf00      	nop
 800d082:	bf00      	nop
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20001968 	.word	0x20001968
 800d090:	20001994 	.word	0x20001994
 800d094:	2000197c 	.word	0x2000197c

0800d098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d108      	bne.n	800d0bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f000 fd7e 	bl	800dbb0 <vPortFree>
				vPortFree( pxTCB );
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fd7b 	bl	800dbb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0ba:	e018      	b.n	800d0ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0c2:	2b01      	cmp	r3, #1
 800d0c4:	d103      	bne.n	800d0ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 fd72 	bl	800dbb0 <vPortFree>
	}
 800d0cc:	e00f      	b.n	800d0ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0d4:	2b02      	cmp	r3, #2
 800d0d6:	d00a      	beq.n	800d0ee <prvDeleteTCB+0x56>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	f383 8811 	msr	BASEPRI, r3
 800d0e0:	f3bf 8f6f 	isb	sy
 800d0e4:	f3bf 8f4f 	dsb	sy
 800d0e8:	60fb      	str	r3, [r7, #12]
}
 800d0ea:	bf00      	nop
 800d0ec:	e7fe      	b.n	800d0ec <prvDeleteTCB+0x54>
	}
 800d0ee:	bf00      	nop
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
	...

0800d0f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d0fe:	4b0c      	ldr	r3, [pc, #48]	; (800d130 <prvResetNextTaskUnblockTime+0x38>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d104      	bne.n	800d112 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d108:	4b0a      	ldr	r3, [pc, #40]	; (800d134 <prvResetNextTaskUnblockTime+0x3c>)
 800d10a:	f04f 32ff 	mov.w	r2, #4294967295
 800d10e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d110:	e008      	b.n	800d124 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d112:	4b07      	ldr	r3, [pc, #28]	; (800d130 <prvResetNextTaskUnblockTime+0x38>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	4a04      	ldr	r2, [pc, #16]	; (800d134 <prvResetNextTaskUnblockTime+0x3c>)
 800d122:	6013      	str	r3, [r2, #0]
}
 800d124:	bf00      	nop
 800d126:	370c      	adds	r7, #12
 800d128:	46bd      	mov	sp, r7
 800d12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12e:	4770      	bx	lr
 800d130:	2000194c 	.word	0x2000194c
 800d134:	200019b4 	.word	0x200019b4

0800d138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d13e:	4b0b      	ldr	r3, [pc, #44]	; (800d16c <xTaskGetSchedulerState+0x34>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d102      	bne.n	800d14c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d146:	2301      	movs	r3, #1
 800d148:	607b      	str	r3, [r7, #4]
 800d14a:	e008      	b.n	800d15e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d14c:	4b08      	ldr	r3, [pc, #32]	; (800d170 <xTaskGetSchedulerState+0x38>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d102      	bne.n	800d15a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d154:	2302      	movs	r3, #2
 800d156:	607b      	str	r3, [r7, #4]
 800d158:	e001      	b.n	800d15e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d15a:	2300      	movs	r3, #0
 800d15c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d15e:	687b      	ldr	r3, [r7, #4]
	}
 800d160:	4618      	mov	r0, r3
 800d162:	370c      	adds	r7, #12
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	200019a0 	.word	0x200019a0
 800d170:	200019bc 	.word	0x200019bc

0800d174 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d180:	2300      	movs	r3, #0
 800d182:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d05e      	beq.n	800d248 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d18e:	4b31      	ldr	r3, [pc, #196]	; (800d254 <xTaskPriorityInherit+0xe0>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d194:	429a      	cmp	r2, r3
 800d196:	d24e      	bcs.n	800d236 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	699b      	ldr	r3, [r3, #24]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	db06      	blt.n	800d1ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1a0:	4b2c      	ldr	r3, [pc, #176]	; (800d254 <xTaskPriorityInherit+0xe0>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1a6:	f1c3 0207 	rsb	r2, r3, #7
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	6959      	ldr	r1, [r3, #20]
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	009b      	lsls	r3, r3, #2
 800d1be:	4a26      	ldr	r2, [pc, #152]	; (800d258 <xTaskPriorityInherit+0xe4>)
 800d1c0:	4413      	add	r3, r2
 800d1c2:	4299      	cmp	r1, r3
 800d1c4:	d12f      	bne.n	800d226 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fbc9 	bl	800b962 <uxListRemove>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d10a      	bne.n	800d1ec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d1d6:	68bb      	ldr	r3, [r7, #8]
 800d1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1da:	2201      	movs	r2, #1
 800d1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e0:	43da      	mvns	r2, r3
 800d1e2:	4b1e      	ldr	r3, [pc, #120]	; (800d25c <xTaskPriorityInherit+0xe8>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	4a1c      	ldr	r2, [pc, #112]	; (800d25c <xTaskPriorityInherit+0xe8>)
 800d1ea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d1ec:	4b19      	ldr	r3, [pc, #100]	; (800d254 <xTaskPriorityInherit+0xe0>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	409a      	lsls	r2, r3
 800d1fe:	4b17      	ldr	r3, [pc, #92]	; (800d25c <xTaskPriorityInherit+0xe8>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4313      	orrs	r3, r2
 800d204:	4a15      	ldr	r2, [pc, #84]	; (800d25c <xTaskPriorityInherit+0xe8>)
 800d206:	6013      	str	r3, [r2, #0]
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d20c:	4613      	mov	r3, r2
 800d20e:	009b      	lsls	r3, r3, #2
 800d210:	4413      	add	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4a10      	ldr	r2, [pc, #64]	; (800d258 <xTaskPriorityInherit+0xe4>)
 800d216:	441a      	add	r2, r3
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	3304      	adds	r3, #4
 800d21c:	4619      	mov	r1, r3
 800d21e:	4610      	mov	r0, r2
 800d220:	f7fe fb42 	bl	800b8a8 <vListInsertEnd>
 800d224:	e004      	b.n	800d230 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d226:	4b0b      	ldr	r3, [pc, #44]	; (800d254 <xTaskPriorityInherit+0xe0>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d230:	2301      	movs	r3, #1
 800d232:	60fb      	str	r3, [r7, #12]
 800d234:	e008      	b.n	800d248 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d23a:	4b06      	ldr	r3, [pc, #24]	; (800d254 <xTaskPriorityInherit+0xe0>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d240:	429a      	cmp	r2, r3
 800d242:	d201      	bcs.n	800d248 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d244:	2301      	movs	r3, #1
 800d246:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d248:	68fb      	ldr	r3, [r7, #12]
	}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3710      	adds	r7, #16
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}
 800d252:	bf00      	nop
 800d254:	20001894 	.word	0x20001894
 800d258:	20001898 	.word	0x20001898
 800d25c:	2000199c 	.word	0x2000199c

0800d260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d260:	b580      	push	{r7, lr}
 800d262:	b086      	sub	sp, #24
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d26c:	2300      	movs	r3, #0
 800d26e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d06e      	beq.n	800d354 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d276:	4b3a      	ldr	r3, [pc, #232]	; (800d360 <xTaskPriorityDisinherit+0x100>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	693a      	ldr	r2, [r7, #16]
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d00a      	beq.n	800d296 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	60fb      	str	r3, [r7, #12]
}
 800d292:	bf00      	nop
 800d294:	e7fe      	b.n	800d294 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d10a      	bne.n	800d2b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a2:	f383 8811 	msr	BASEPRI, r3
 800d2a6:	f3bf 8f6f 	isb	sy
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	60bb      	str	r3, [r7, #8]
}
 800d2b0:	bf00      	nop
 800d2b2:	e7fe      	b.n	800d2b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2b8:	1e5a      	subs	r2, r3, #1
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d044      	beq.n	800d354 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d140      	bne.n	800d354 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fe fb43 	bl	800b962 <uxListRemove>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d115      	bne.n	800d30e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e6:	491f      	ldr	r1, [pc, #124]	; (800d364 <xTaskPriorityDisinherit+0x104>)
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	4413      	add	r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	440b      	add	r3, r1
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10a      	bne.n	800d30e <xTaskPriorityDisinherit+0xae>
 800d2f8:	693b      	ldr	r3, [r7, #16]
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d302:	43da      	mvns	r2, r3
 800d304:	4b18      	ldr	r3, [pc, #96]	; (800d368 <xTaskPriorityDisinherit+0x108>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4013      	ands	r3, r2
 800d30a:	4a17      	ldr	r2, [pc, #92]	; (800d368 <xTaskPriorityDisinherit+0x108>)
 800d30c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31a:	f1c3 0207 	rsb	r2, r3, #7
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d326:	2201      	movs	r2, #1
 800d328:	409a      	lsls	r2, r3
 800d32a:	4b0f      	ldr	r3, [pc, #60]	; (800d368 <xTaskPriorityDisinherit+0x108>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4313      	orrs	r3, r2
 800d330:	4a0d      	ldr	r2, [pc, #52]	; (800d368 <xTaskPriorityDisinherit+0x108>)
 800d332:	6013      	str	r3, [r2, #0]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4a08      	ldr	r2, [pc, #32]	; (800d364 <xTaskPriorityDisinherit+0x104>)
 800d342:	441a      	add	r2, r3
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	3304      	adds	r3, #4
 800d348:	4619      	mov	r1, r3
 800d34a:	4610      	mov	r0, r2
 800d34c:	f7fe faac 	bl	800b8a8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d350:	2301      	movs	r3, #1
 800d352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d354:	697b      	ldr	r3, [r7, #20]
	}
 800d356:	4618      	mov	r0, r3
 800d358:	3718      	adds	r7, #24
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	20001894 	.word	0x20001894
 800d364:	20001898 	.word	0x20001898
 800d368:	2000199c 	.word	0x2000199c

0800d36c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b088      	sub	sp, #32
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d37a:	2301      	movs	r3, #1
 800d37c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d077      	beq.n	800d474 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d10a      	bne.n	800d3a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	60fb      	str	r3, [r7, #12]
}
 800d39e:	bf00      	nop
 800d3a0:	e7fe      	b.n	800d3a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d902      	bls.n	800d3b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	e002      	b.n	800d3b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d3b8:	69bb      	ldr	r3, [r7, #24]
 800d3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3bc:	69fa      	ldr	r2, [r7, #28]
 800d3be:	429a      	cmp	r2, r3
 800d3c0:	d058      	beq.n	800d474 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d153      	bne.n	800d474 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d3cc:	4b2b      	ldr	r3, [pc, #172]	; (800d47c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	69ba      	ldr	r2, [r7, #24]
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d10a      	bne.n	800d3ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	60bb      	str	r3, [r7, #8]
}
 800d3e8:	bf00      	nop
 800d3ea:	e7fe      	b.n	800d3ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d3ec:	69bb      	ldr	r3, [r7, #24]
 800d3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d3f2:	69bb      	ldr	r3, [r7, #24]
 800d3f4:	69fa      	ldr	r2, [r7, #28]
 800d3f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	699b      	ldr	r3, [r3, #24]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	db04      	blt.n	800d40a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	f1c3 0207 	rsb	r2, r3, #7
 800d406:	69bb      	ldr	r3, [r7, #24]
 800d408:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	6959      	ldr	r1, [r3, #20]
 800d40e:	693a      	ldr	r2, [r7, #16]
 800d410:	4613      	mov	r3, r2
 800d412:	009b      	lsls	r3, r3, #2
 800d414:	4413      	add	r3, r2
 800d416:	009b      	lsls	r3, r3, #2
 800d418:	4a19      	ldr	r2, [pc, #100]	; (800d480 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d41a:	4413      	add	r3, r2
 800d41c:	4299      	cmp	r1, r3
 800d41e:	d129      	bne.n	800d474 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	3304      	adds	r3, #4
 800d424:	4618      	mov	r0, r3
 800d426:	f7fe fa9c 	bl	800b962 <uxListRemove>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10a      	bne.n	800d446 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d434:	2201      	movs	r2, #1
 800d436:	fa02 f303 	lsl.w	r3, r2, r3
 800d43a:	43da      	mvns	r2, r3
 800d43c:	4b11      	ldr	r3, [pc, #68]	; (800d484 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4013      	ands	r3, r2
 800d442:	4a10      	ldr	r2, [pc, #64]	; (800d484 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d444:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44a:	2201      	movs	r2, #1
 800d44c:	409a      	lsls	r2, r3
 800d44e:	4b0d      	ldr	r3, [pc, #52]	; (800d484 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	4313      	orrs	r3, r2
 800d454:	4a0b      	ldr	r2, [pc, #44]	; (800d484 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d456:	6013      	str	r3, [r2, #0]
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d45c:	4613      	mov	r3, r2
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4413      	add	r3, r2
 800d462:	009b      	lsls	r3, r3, #2
 800d464:	4a06      	ldr	r2, [pc, #24]	; (800d480 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d466:	441a      	add	r2, r3
 800d468:	69bb      	ldr	r3, [r7, #24]
 800d46a:	3304      	adds	r3, #4
 800d46c:	4619      	mov	r1, r3
 800d46e:	4610      	mov	r0, r2
 800d470:	f7fe fa1a 	bl	800b8a8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d474:	bf00      	nop
 800d476:	3720      	adds	r7, #32
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	20001894 	.word	0x20001894
 800d480:	20001898 	.word	0x20001898
 800d484:	2000199c 	.word	0x2000199c

0800d488 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d488:	b480      	push	{r7}
 800d48a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d48c:	4b07      	ldr	r3, [pc, #28]	; (800d4ac <pvTaskIncrementMutexHeldCount+0x24>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d004      	beq.n	800d49e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d494:	4b05      	ldr	r3, [pc, #20]	; (800d4ac <pvTaskIncrementMutexHeldCount+0x24>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d49a:	3201      	adds	r2, #1
 800d49c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d49e:	4b03      	ldr	r3, [pc, #12]	; (800d4ac <pvTaskIncrementMutexHeldCount+0x24>)
 800d4a0:	681b      	ldr	r3, [r3, #0]
	}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	20001894 	.word	0x20001894

0800d4b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b084      	sub	sp, #16
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d4ba:	4b29      	ldr	r3, [pc, #164]	; (800d560 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4c0:	4b28      	ldr	r3, [pc, #160]	; (800d564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	3304      	adds	r3, #4
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f7fe fa4b 	bl	800b962 <uxListRemove>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10b      	bne.n	800d4ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d4d2:	4b24      	ldr	r3, [pc, #144]	; (800d564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d8:	2201      	movs	r2, #1
 800d4da:	fa02 f303 	lsl.w	r3, r2, r3
 800d4de:	43da      	mvns	r2, r3
 800d4e0:	4b21      	ldr	r3, [pc, #132]	; (800d568 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4013      	ands	r3, r2
 800d4e6:	4a20      	ldr	r2, [pc, #128]	; (800d568 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f0:	d10a      	bne.n	800d508 <prvAddCurrentTaskToDelayedList+0x58>
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d007      	beq.n	800d508 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d4f8:	4b1a      	ldr	r3, [pc, #104]	; (800d564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	3304      	adds	r3, #4
 800d4fe:	4619      	mov	r1, r3
 800d500:	481a      	ldr	r0, [pc, #104]	; (800d56c <prvAddCurrentTaskToDelayedList+0xbc>)
 800d502:	f7fe f9d1 	bl	800b8a8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d506:	e026      	b.n	800d556 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4413      	add	r3, r2
 800d50e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d510:	4b14      	ldr	r3, [pc, #80]	; (800d564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68ba      	ldr	r2, [r7, #8]
 800d516:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d518:	68ba      	ldr	r2, [r7, #8]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d209      	bcs.n	800d534 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d520:	4b13      	ldr	r3, [pc, #76]	; (800d570 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	4b0f      	ldr	r3, [pc, #60]	; (800d564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	3304      	adds	r3, #4
 800d52a:	4619      	mov	r1, r3
 800d52c:	4610      	mov	r0, r2
 800d52e:	f7fe f9df 	bl	800b8f0 <vListInsert>
}
 800d532:	e010      	b.n	800d556 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d534:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d536:	681a      	ldr	r2, [r3, #0]
 800d538:	4b0a      	ldr	r3, [pc, #40]	; (800d564 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	3304      	adds	r3, #4
 800d53e:	4619      	mov	r1, r3
 800d540:	4610      	mov	r0, r2
 800d542:	f7fe f9d5 	bl	800b8f0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d546:	4b0c      	ldr	r3, [pc, #48]	; (800d578 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68ba      	ldr	r2, [r7, #8]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d202      	bcs.n	800d556 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d550:	4a09      	ldr	r2, [pc, #36]	; (800d578 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	6013      	str	r3, [r2, #0]
}
 800d556:	bf00      	nop
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	20001998 	.word	0x20001998
 800d564:	20001894 	.word	0x20001894
 800d568:	2000199c 	.word	0x2000199c
 800d56c:	20001980 	.word	0x20001980
 800d570:	20001950 	.word	0x20001950
 800d574:	2000194c 	.word	0x2000194c
 800d578:	200019b4 	.word	0x200019b4

0800d57c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d57c:	b480      	push	{r7}
 800d57e:	b085      	sub	sp, #20
 800d580:	af00      	add	r7, sp, #0
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	60b9      	str	r1, [r7, #8]
 800d586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3b04      	subs	r3, #4
 800d58c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	3b04      	subs	r3, #4
 800d59a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	f023 0201 	bic.w	r2, r3, #1
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	3b04      	subs	r3, #4
 800d5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5ac:	4a0c      	ldr	r2, [pc, #48]	; (800d5e0 <pxPortInitialiseStack+0x64>)
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	3b14      	subs	r3, #20
 800d5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3b04      	subs	r3, #4
 800d5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f06f 0202 	mvn.w	r2, #2
 800d5ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	3b20      	subs	r3, #32
 800d5d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	3714      	adds	r7, #20
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr
 800d5e0:	0800d5e5 	.word	0x0800d5e5

0800d5e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b085      	sub	sp, #20
 800d5e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d5ee:	4b12      	ldr	r3, [pc, #72]	; (800d638 <prvTaskExitError+0x54>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f6:	d00a      	beq.n	800d60e <prvTaskExitError+0x2a>
	__asm volatile
 800d5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fc:	f383 8811 	msr	BASEPRI, r3
 800d600:	f3bf 8f6f 	isb	sy
 800d604:	f3bf 8f4f 	dsb	sy
 800d608:	60fb      	str	r3, [r7, #12]
}
 800d60a:	bf00      	nop
 800d60c:	e7fe      	b.n	800d60c <prvTaskExitError+0x28>
	__asm volatile
 800d60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d612:	f383 8811 	msr	BASEPRI, r3
 800d616:	f3bf 8f6f 	isb	sy
 800d61a:	f3bf 8f4f 	dsb	sy
 800d61e:	60bb      	str	r3, [r7, #8]
}
 800d620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d622:	bf00      	nop
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d0fc      	beq.n	800d624 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d62a:	bf00      	nop
 800d62c:	bf00      	nop
 800d62e:	3714      	adds	r7, #20
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	20000038 	.word	0x20000038
 800d63c:	00000000 	.word	0x00000000

0800d640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d640:	4b07      	ldr	r3, [pc, #28]	; (800d660 <pxCurrentTCBConst2>)
 800d642:	6819      	ldr	r1, [r3, #0]
 800d644:	6808      	ldr	r0, [r1, #0]
 800d646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d64a:	f380 8809 	msr	PSP, r0
 800d64e:	f3bf 8f6f 	isb	sy
 800d652:	f04f 0000 	mov.w	r0, #0
 800d656:	f380 8811 	msr	BASEPRI, r0
 800d65a:	4770      	bx	lr
 800d65c:	f3af 8000 	nop.w

0800d660 <pxCurrentTCBConst2>:
 800d660:	20001894 	.word	0x20001894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d664:	bf00      	nop
 800d666:	bf00      	nop

0800d668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d668:	4808      	ldr	r0, [pc, #32]	; (800d68c <prvPortStartFirstTask+0x24>)
 800d66a:	6800      	ldr	r0, [r0, #0]
 800d66c:	6800      	ldr	r0, [r0, #0]
 800d66e:	f380 8808 	msr	MSP, r0
 800d672:	f04f 0000 	mov.w	r0, #0
 800d676:	f380 8814 	msr	CONTROL, r0
 800d67a:	b662      	cpsie	i
 800d67c:	b661      	cpsie	f
 800d67e:	f3bf 8f4f 	dsb	sy
 800d682:	f3bf 8f6f 	isb	sy
 800d686:	df00      	svc	0
 800d688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d68a:	bf00      	nop
 800d68c:	e000ed08 	.word	0xe000ed08

0800d690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d696:	4b46      	ldr	r3, [pc, #280]	; (800d7b0 <xPortStartScheduler+0x120>)
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4a46      	ldr	r2, [pc, #280]	; (800d7b4 <xPortStartScheduler+0x124>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d10a      	bne.n	800d6b6 <xPortStartScheduler+0x26>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	f383 8811 	msr	BASEPRI, r3
 800d6a8:	f3bf 8f6f 	isb	sy
 800d6ac:	f3bf 8f4f 	dsb	sy
 800d6b0:	613b      	str	r3, [r7, #16]
}
 800d6b2:	bf00      	nop
 800d6b4:	e7fe      	b.n	800d6b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d6b6:	4b3e      	ldr	r3, [pc, #248]	; (800d7b0 <xPortStartScheduler+0x120>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a3f      	ldr	r2, [pc, #252]	; (800d7b8 <xPortStartScheduler+0x128>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d10a      	bne.n	800d6d6 <xPortStartScheduler+0x46>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	60fb      	str	r3, [r7, #12]
}
 800d6d2:	bf00      	nop
 800d6d4:	e7fe      	b.n	800d6d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d6d6:	4b39      	ldr	r3, [pc, #228]	; (800d7bc <xPortStartScheduler+0x12c>)
 800d6d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	b2db      	uxtb	r3, r3
 800d6e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	22ff      	movs	r2, #255	; 0xff
 800d6e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	781b      	ldrb	r3, [r3, #0]
 800d6ec:	b2db      	uxtb	r3, r3
 800d6ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d6f0:	78fb      	ldrb	r3, [r7, #3]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d6f8:	b2da      	uxtb	r2, r3
 800d6fa:	4b31      	ldr	r3, [pc, #196]	; (800d7c0 <xPortStartScheduler+0x130>)
 800d6fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d6fe:	4b31      	ldr	r3, [pc, #196]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d700:	2207      	movs	r2, #7
 800d702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d704:	e009      	b.n	800d71a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d706:	4b2f      	ldr	r3, [pc, #188]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	3b01      	subs	r3, #1
 800d70c:	4a2d      	ldr	r2, [pc, #180]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d70e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	005b      	lsls	r3, r3, #1
 800d716:	b2db      	uxtb	r3, r3
 800d718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d71a:	78fb      	ldrb	r3, [r7, #3]
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d722:	2b80      	cmp	r3, #128	; 0x80
 800d724:	d0ef      	beq.n	800d706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d726:	4b27      	ldr	r3, [pc, #156]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f1c3 0307 	rsb	r3, r3, #7
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d00a      	beq.n	800d748 <xPortStartScheduler+0xb8>
	__asm volatile
 800d732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d736:	f383 8811 	msr	BASEPRI, r3
 800d73a:	f3bf 8f6f 	isb	sy
 800d73e:	f3bf 8f4f 	dsb	sy
 800d742:	60bb      	str	r3, [r7, #8]
}
 800d744:	bf00      	nop
 800d746:	e7fe      	b.n	800d746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d748:	4b1e      	ldr	r3, [pc, #120]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	021b      	lsls	r3, r3, #8
 800d74e:	4a1d      	ldr	r2, [pc, #116]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d752:	4b1c      	ldr	r3, [pc, #112]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d75a:	4a1a      	ldr	r2, [pc, #104]	; (800d7c4 <xPortStartScheduler+0x134>)
 800d75c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	b2da      	uxtb	r2, r3
 800d762:	697b      	ldr	r3, [r7, #20]
 800d764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d766:	4b18      	ldr	r3, [pc, #96]	; (800d7c8 <xPortStartScheduler+0x138>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	4a17      	ldr	r2, [pc, #92]	; (800d7c8 <xPortStartScheduler+0x138>)
 800d76c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d772:	4b15      	ldr	r3, [pc, #84]	; (800d7c8 <xPortStartScheduler+0x138>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a14      	ldr	r2, [pc, #80]	; (800d7c8 <xPortStartScheduler+0x138>)
 800d778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d77c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d77e:	f000 f8dd 	bl	800d93c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d782:	4b12      	ldr	r3, [pc, #72]	; (800d7cc <xPortStartScheduler+0x13c>)
 800d784:	2200      	movs	r2, #0
 800d786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d788:	f000 f8fc 	bl	800d984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d78c:	4b10      	ldr	r3, [pc, #64]	; (800d7d0 <xPortStartScheduler+0x140>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a0f      	ldr	r2, [pc, #60]	; (800d7d0 <xPortStartScheduler+0x140>)
 800d792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d798:	f7ff ff66 	bl	800d668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d79c:	f7ff fa90 	bl	800ccc0 <vTaskSwitchContext>
	prvTaskExitError();
 800d7a0:	f7ff ff20 	bl	800d5e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3718      	adds	r7, #24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	e000ed00 	.word	0xe000ed00
 800d7b4:	410fc271 	.word	0x410fc271
 800d7b8:	410fc270 	.word	0x410fc270
 800d7bc:	e000e400 	.word	0xe000e400
 800d7c0:	200019c0 	.word	0x200019c0
 800d7c4:	200019c4 	.word	0x200019c4
 800d7c8:	e000ed20 	.word	0xe000ed20
 800d7cc:	20000038 	.word	0x20000038
 800d7d0:	e000ef34 	.word	0xe000ef34

0800d7d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
	__asm volatile
 800d7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7de:	f383 8811 	msr	BASEPRI, r3
 800d7e2:	f3bf 8f6f 	isb	sy
 800d7e6:	f3bf 8f4f 	dsb	sy
 800d7ea:	607b      	str	r3, [r7, #4]
}
 800d7ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d7ee:	4b0f      	ldr	r3, [pc, #60]	; (800d82c <vPortEnterCritical+0x58>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	3301      	adds	r3, #1
 800d7f4:	4a0d      	ldr	r2, [pc, #52]	; (800d82c <vPortEnterCritical+0x58>)
 800d7f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d7f8:	4b0c      	ldr	r3, [pc, #48]	; (800d82c <vPortEnterCritical+0x58>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d10f      	bne.n	800d820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d800:	4b0b      	ldr	r3, [pc, #44]	; (800d830 <vPortEnterCritical+0x5c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <vPortEnterCritical+0x4c>
	__asm volatile
 800d80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	603b      	str	r3, [r7, #0]
}
 800d81c:	bf00      	nop
 800d81e:	e7fe      	b.n	800d81e <vPortEnterCritical+0x4a>
	}
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	20000038 	.word	0x20000038
 800d830:	e000ed04 	.word	0xe000ed04

0800d834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d83a:	4b12      	ldr	r3, [pc, #72]	; (800d884 <vPortExitCritical+0x50>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10a      	bne.n	800d858 <vPortExitCritical+0x24>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	607b      	str	r3, [r7, #4]
}
 800d854:	bf00      	nop
 800d856:	e7fe      	b.n	800d856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d858:	4b0a      	ldr	r3, [pc, #40]	; (800d884 <vPortExitCritical+0x50>)
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	3b01      	subs	r3, #1
 800d85e:	4a09      	ldr	r2, [pc, #36]	; (800d884 <vPortExitCritical+0x50>)
 800d860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d862:	4b08      	ldr	r3, [pc, #32]	; (800d884 <vPortExitCritical+0x50>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d105      	bne.n	800d876 <vPortExitCritical+0x42>
 800d86a:	2300      	movs	r3, #0
 800d86c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	f383 8811 	msr	BASEPRI, r3
}
 800d874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d876:	bf00      	nop
 800d878:	370c      	adds	r7, #12
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	20000038 	.word	0x20000038
	...

0800d890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d890:	f3ef 8009 	mrs	r0, PSP
 800d894:	f3bf 8f6f 	isb	sy
 800d898:	4b15      	ldr	r3, [pc, #84]	; (800d8f0 <pxCurrentTCBConst>)
 800d89a:	681a      	ldr	r2, [r3, #0]
 800d89c:	f01e 0f10 	tst.w	lr, #16
 800d8a0:	bf08      	it	eq
 800d8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8aa:	6010      	str	r0, [r2, #0]
 800d8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d8b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d8b4:	f380 8811 	msr	BASEPRI, r0
 800d8b8:	f3bf 8f4f 	dsb	sy
 800d8bc:	f3bf 8f6f 	isb	sy
 800d8c0:	f7ff f9fe 	bl	800ccc0 <vTaskSwitchContext>
 800d8c4:	f04f 0000 	mov.w	r0, #0
 800d8c8:	f380 8811 	msr	BASEPRI, r0
 800d8cc:	bc09      	pop	{r0, r3}
 800d8ce:	6819      	ldr	r1, [r3, #0]
 800d8d0:	6808      	ldr	r0, [r1, #0]
 800d8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d6:	f01e 0f10 	tst.w	lr, #16
 800d8da:	bf08      	it	eq
 800d8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d8e0:	f380 8809 	msr	PSP, r0
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	f3af 8000 	nop.w

0800d8f0 <pxCurrentTCBConst>:
 800d8f0:	20001894 	.word	0x20001894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d8f4:	bf00      	nop
 800d8f6:	bf00      	nop

0800d8f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800d8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d902:	f383 8811 	msr	BASEPRI, r3
 800d906:	f3bf 8f6f 	isb	sy
 800d90a:	f3bf 8f4f 	dsb	sy
 800d90e:	607b      	str	r3, [r7, #4]
}
 800d910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d912:	f7ff f91d 	bl	800cb50 <xTaskIncrementTick>
 800d916:	4603      	mov	r3, r0
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d003      	beq.n	800d924 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d91c:	4b06      	ldr	r3, [pc, #24]	; (800d938 <SysTick_Handler+0x40>)
 800d91e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d922:	601a      	str	r2, [r3, #0]
 800d924:	2300      	movs	r3, #0
 800d926:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	f383 8811 	msr	BASEPRI, r3
}
 800d92e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	e000ed04 	.word	0xe000ed04

0800d93c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d93c:	b480      	push	{r7}
 800d93e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d940:	4b0b      	ldr	r3, [pc, #44]	; (800d970 <vPortSetupTimerInterrupt+0x34>)
 800d942:	2200      	movs	r2, #0
 800d944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d946:	4b0b      	ldr	r3, [pc, #44]	; (800d974 <vPortSetupTimerInterrupt+0x38>)
 800d948:	2200      	movs	r2, #0
 800d94a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d94c:	4b0a      	ldr	r3, [pc, #40]	; (800d978 <vPortSetupTimerInterrupt+0x3c>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a0a      	ldr	r2, [pc, #40]	; (800d97c <vPortSetupTimerInterrupt+0x40>)
 800d952:	fba2 2303 	umull	r2, r3, r2, r3
 800d956:	099b      	lsrs	r3, r3, #6
 800d958:	4a09      	ldr	r2, [pc, #36]	; (800d980 <vPortSetupTimerInterrupt+0x44>)
 800d95a:	3b01      	subs	r3, #1
 800d95c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d95e:	4b04      	ldr	r3, [pc, #16]	; (800d970 <vPortSetupTimerInterrupt+0x34>)
 800d960:	2207      	movs	r2, #7
 800d962:	601a      	str	r2, [r3, #0]
}
 800d964:	bf00      	nop
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	e000e010 	.word	0xe000e010
 800d974:	e000e018 	.word	0xe000e018
 800d978:	20000018 	.word	0x20000018
 800d97c:	10624dd3 	.word	0x10624dd3
 800d980:	e000e014 	.word	0xe000e014

0800d984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d994 <vPortEnableVFP+0x10>
 800d988:	6801      	ldr	r1, [r0, #0]
 800d98a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d98e:	6001      	str	r1, [r0, #0]
 800d990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d992:	bf00      	nop
 800d994:	e000ed88 	.word	0xe000ed88

0800d998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d998:	b480      	push	{r7}
 800d99a:	b085      	sub	sp, #20
 800d99c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d99e:	f3ef 8305 	mrs	r3, IPSR
 800d9a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2b0f      	cmp	r3, #15
 800d9a8:	d914      	bls.n	800d9d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d9aa:	4a17      	ldr	r2, [pc, #92]	; (800da08 <vPortValidateInterruptPriority+0x70>)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	4413      	add	r3, r2
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d9b4:	4b15      	ldr	r3, [pc, #84]	; (800da0c <vPortValidateInterruptPriority+0x74>)
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	7afa      	ldrb	r2, [r7, #11]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d20a      	bcs.n	800d9d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9c2:	f383 8811 	msr	BASEPRI, r3
 800d9c6:	f3bf 8f6f 	isb	sy
 800d9ca:	f3bf 8f4f 	dsb	sy
 800d9ce:	607b      	str	r3, [r7, #4]
}
 800d9d0:	bf00      	nop
 800d9d2:	e7fe      	b.n	800d9d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d9d4:	4b0e      	ldr	r3, [pc, #56]	; (800da10 <vPortValidateInterruptPriority+0x78>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d9dc:	4b0d      	ldr	r3, [pc, #52]	; (800da14 <vPortValidateInterruptPriority+0x7c>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d90a      	bls.n	800d9fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e8:	f383 8811 	msr	BASEPRI, r3
 800d9ec:	f3bf 8f6f 	isb	sy
 800d9f0:	f3bf 8f4f 	dsb	sy
 800d9f4:	603b      	str	r3, [r7, #0]
}
 800d9f6:	bf00      	nop
 800d9f8:	e7fe      	b.n	800d9f8 <vPortValidateInterruptPriority+0x60>
	}
 800d9fa:	bf00      	nop
 800d9fc:	3714      	adds	r7, #20
 800d9fe:	46bd      	mov	sp, r7
 800da00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da04:	4770      	bx	lr
 800da06:	bf00      	nop
 800da08:	e000e3f0 	.word	0xe000e3f0
 800da0c:	200019c0 	.word	0x200019c0
 800da10:	e000ed0c 	.word	0xe000ed0c
 800da14:	200019c4 	.word	0x200019c4

0800da18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b08a      	sub	sp, #40	; 0x28
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da20:	2300      	movs	r3, #0
 800da22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da24:	f7fe ffea 	bl	800c9fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da28:	4b5b      	ldr	r3, [pc, #364]	; (800db98 <pvPortMalloc+0x180>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d101      	bne.n	800da34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da30:	f000 f920 	bl	800dc74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da34:	4b59      	ldr	r3, [pc, #356]	; (800db9c <pvPortMalloc+0x184>)
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	4013      	ands	r3, r2
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f040 8093 	bne.w	800db68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d01d      	beq.n	800da84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800da48:	2208      	movs	r2, #8
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	4413      	add	r3, r2
 800da4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f003 0307 	and.w	r3, r3, #7
 800da56:	2b00      	cmp	r3, #0
 800da58:	d014      	beq.n	800da84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f023 0307 	bic.w	r3, r3, #7
 800da60:	3308      	adds	r3, #8
 800da62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f003 0307 	and.w	r3, r3, #7
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00a      	beq.n	800da84 <pvPortMalloc+0x6c>
	__asm volatile
 800da6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	617b      	str	r3, [r7, #20]
}
 800da80:	bf00      	nop
 800da82:	e7fe      	b.n	800da82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d06e      	beq.n	800db68 <pvPortMalloc+0x150>
 800da8a:	4b45      	ldr	r3, [pc, #276]	; (800dba0 <pvPortMalloc+0x188>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	429a      	cmp	r2, r3
 800da92:	d869      	bhi.n	800db68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da94:	4b43      	ldr	r3, [pc, #268]	; (800dba4 <pvPortMalloc+0x18c>)
 800da96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da98:	4b42      	ldr	r3, [pc, #264]	; (800dba4 <pvPortMalloc+0x18c>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da9e:	e004      	b.n	800daaa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800daa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800daaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d903      	bls.n	800dabc <pvPortMalloc+0xa4>
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d1f1      	bne.n	800daa0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dabc:	4b36      	ldr	r3, [pc, #216]	; (800db98 <pvPortMalloc+0x180>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d050      	beq.n	800db68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dac6:	6a3b      	ldr	r3, [r7, #32]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	2208      	movs	r2, #8
 800dacc:	4413      	add	r3, r2
 800dace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	6a3b      	ldr	r3, [r7, #32]
 800dad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	685a      	ldr	r2, [r3, #4]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	1ad2      	subs	r2, r2, r3
 800dae0:	2308      	movs	r3, #8
 800dae2:	005b      	lsls	r3, r3, #1
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d91f      	bls.n	800db28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	4413      	add	r3, r2
 800daee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	f003 0307 	and.w	r3, r3, #7
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d00a      	beq.n	800db10 <pvPortMalloc+0xf8>
	__asm volatile
 800dafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	613b      	str	r3, [r7, #16]
}
 800db0c:	bf00      	nop
 800db0e:	e7fe      	b.n	800db0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	685a      	ldr	r2, [r3, #4]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	1ad2      	subs	r2, r2, r3
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db22:	69b8      	ldr	r0, [r7, #24]
 800db24:	f000 f908 	bl	800dd38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db28:	4b1d      	ldr	r3, [pc, #116]	; (800dba0 <pvPortMalloc+0x188>)
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	1ad3      	subs	r3, r2, r3
 800db32:	4a1b      	ldr	r2, [pc, #108]	; (800dba0 <pvPortMalloc+0x188>)
 800db34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db36:	4b1a      	ldr	r3, [pc, #104]	; (800dba0 <pvPortMalloc+0x188>)
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	4b1b      	ldr	r3, [pc, #108]	; (800dba8 <pvPortMalloc+0x190>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	429a      	cmp	r2, r3
 800db40:	d203      	bcs.n	800db4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db42:	4b17      	ldr	r3, [pc, #92]	; (800dba0 <pvPortMalloc+0x188>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a18      	ldr	r2, [pc, #96]	; (800dba8 <pvPortMalloc+0x190>)
 800db48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4c:	685a      	ldr	r2, [r3, #4]
 800db4e:	4b13      	ldr	r3, [pc, #76]	; (800db9c <pvPortMalloc+0x184>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	431a      	orrs	r2, r3
 800db54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5a:	2200      	movs	r2, #0
 800db5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800db5e:	4b13      	ldr	r3, [pc, #76]	; (800dbac <pvPortMalloc+0x194>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	3301      	adds	r3, #1
 800db64:	4a11      	ldr	r2, [pc, #68]	; (800dbac <pvPortMalloc+0x194>)
 800db66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800db68:	f7fe ff56 	bl	800ca18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db6c:	69fb      	ldr	r3, [r7, #28]
 800db6e:	f003 0307 	and.w	r3, r3, #7
 800db72:	2b00      	cmp	r3, #0
 800db74:	d00a      	beq.n	800db8c <pvPortMalloc+0x174>
	__asm volatile
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	f383 8811 	msr	BASEPRI, r3
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	f3bf 8f4f 	dsb	sy
 800db86:	60fb      	str	r3, [r7, #12]
}
 800db88:	bf00      	nop
 800db8a:	e7fe      	b.n	800db8a <pvPortMalloc+0x172>
	return pvReturn;
 800db8c:	69fb      	ldr	r3, [r7, #28]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3728      	adds	r7, #40	; 0x28
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	200055d0 	.word	0x200055d0
 800db9c:	200055e4 	.word	0x200055e4
 800dba0:	200055d4 	.word	0x200055d4
 800dba4:	200055c8 	.word	0x200055c8
 800dba8:	200055d8 	.word	0x200055d8
 800dbac:	200055dc 	.word	0x200055dc

0800dbb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b086      	sub	sp, #24
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d04d      	beq.n	800dc5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dbc2:	2308      	movs	r3, #8
 800dbc4:	425b      	negs	r3, r3
 800dbc6:	697a      	ldr	r2, [r7, #20]
 800dbc8:	4413      	add	r3, r2
 800dbca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	685a      	ldr	r2, [r3, #4]
 800dbd4:	4b24      	ldr	r3, [pc, #144]	; (800dc68 <vPortFree+0xb8>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4013      	ands	r3, r2
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d10a      	bne.n	800dbf4 <vPortFree+0x44>
	__asm volatile
 800dbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe2:	f383 8811 	msr	BASEPRI, r3
 800dbe6:	f3bf 8f6f 	isb	sy
 800dbea:	f3bf 8f4f 	dsb	sy
 800dbee:	60fb      	str	r3, [r7, #12]
}
 800dbf0:	bf00      	nop
 800dbf2:	e7fe      	b.n	800dbf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00a      	beq.n	800dc12 <vPortFree+0x62>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	60bb      	str	r3, [r7, #8]
}
 800dc0e:	bf00      	nop
 800dc10:	e7fe      	b.n	800dc10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	685a      	ldr	r2, [r3, #4]
 800dc16:	4b14      	ldr	r3, [pc, #80]	; (800dc68 <vPortFree+0xb8>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d01e      	beq.n	800dc5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d11a      	bne.n	800dc5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	685a      	ldr	r2, [r3, #4]
 800dc2c:	4b0e      	ldr	r3, [pc, #56]	; (800dc68 <vPortFree+0xb8>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	43db      	mvns	r3, r3
 800dc32:	401a      	ands	r2, r3
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc38:	f7fe fee0 	bl	800c9fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	685a      	ldr	r2, [r3, #4]
 800dc40:	4b0a      	ldr	r3, [pc, #40]	; (800dc6c <vPortFree+0xbc>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	4413      	add	r3, r2
 800dc46:	4a09      	ldr	r2, [pc, #36]	; (800dc6c <vPortFree+0xbc>)
 800dc48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc4a:	6938      	ldr	r0, [r7, #16]
 800dc4c:	f000 f874 	bl	800dd38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dc50:	4b07      	ldr	r3, [pc, #28]	; (800dc70 <vPortFree+0xc0>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3301      	adds	r3, #1
 800dc56:	4a06      	ldr	r2, [pc, #24]	; (800dc70 <vPortFree+0xc0>)
 800dc58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dc5a:	f7fe fedd 	bl	800ca18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc5e:	bf00      	nop
 800dc60:	3718      	adds	r7, #24
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	200055e4 	.word	0x200055e4
 800dc6c:	200055d4 	.word	0x200055d4
 800dc70:	200055e0 	.word	0x200055e0

0800dc74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc74:	b480      	push	{r7}
 800dc76:	b085      	sub	sp, #20
 800dc78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dc7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc80:	4b27      	ldr	r3, [pc, #156]	; (800dd20 <prvHeapInit+0xac>)
 800dc82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	f003 0307 	and.w	r3, r3, #7
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00c      	beq.n	800dca8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	3307      	adds	r3, #7
 800dc92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f023 0307 	bic.w	r3, r3, #7
 800dc9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	4a1f      	ldr	r2, [pc, #124]	; (800dd20 <prvHeapInit+0xac>)
 800dca4:	4413      	add	r3, r2
 800dca6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcac:	4a1d      	ldr	r2, [pc, #116]	; (800dd24 <prvHeapInit+0xb0>)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcb2:	4b1c      	ldr	r3, [pc, #112]	; (800dd24 <prvHeapInit+0xb0>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	68ba      	ldr	r2, [r7, #8]
 800dcbc:	4413      	add	r3, r2
 800dcbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dcc0:	2208      	movs	r2, #8
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	1a9b      	subs	r3, r3, r2
 800dcc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f023 0307 	bic.w	r3, r3, #7
 800dcce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	4a15      	ldr	r2, [pc, #84]	; (800dd28 <prvHeapInit+0xb4>)
 800dcd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dcd6:	4b14      	ldr	r3, [pc, #80]	; (800dd28 <prvHeapInit+0xb4>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dcde:	4b12      	ldr	r3, [pc, #72]	; (800dd28 <prvHeapInit+0xb4>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	68fa      	ldr	r2, [r7, #12]
 800dcee:	1ad2      	subs	r2, r2, r3
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dcf4:	4b0c      	ldr	r3, [pc, #48]	; (800dd28 <prvHeapInit+0xb4>)
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	4a0a      	ldr	r2, [pc, #40]	; (800dd2c <prvHeapInit+0xb8>)
 800dd02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	4a09      	ldr	r2, [pc, #36]	; (800dd30 <prvHeapInit+0xbc>)
 800dd0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd0c:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <prvHeapInit+0xc0>)
 800dd0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd12:	601a      	str	r2, [r3, #0]
}
 800dd14:	bf00      	nop
 800dd16:	3714      	adds	r7, #20
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd1e:	4770      	bx	lr
 800dd20:	200019c8 	.word	0x200019c8
 800dd24:	200055c8 	.word	0x200055c8
 800dd28:	200055d0 	.word	0x200055d0
 800dd2c:	200055d8 	.word	0x200055d8
 800dd30:	200055d4 	.word	0x200055d4
 800dd34:	200055e4 	.word	0x200055e4

0800dd38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd40:	4b28      	ldr	r3, [pc, #160]	; (800dde4 <prvInsertBlockIntoFreeList+0xac>)
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	e002      	b.n	800dd4c <prvInsertBlockIntoFreeList+0x14>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d8f7      	bhi.n	800dd46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	4413      	add	r3, r2
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d108      	bne.n	800dd7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	685a      	ldr	r2, [r3, #4]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	441a      	add	r2, r3
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	441a      	add	r2, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d118      	bne.n	800ddc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	4b15      	ldr	r3, [pc, #84]	; (800dde8 <prvInsertBlockIntoFreeList+0xb0>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d00d      	beq.n	800ddb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	685a      	ldr	r2, [r3, #4]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	441a      	add	r2, r3
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	e008      	b.n	800ddc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddb6:	4b0c      	ldr	r3, [pc, #48]	; (800dde8 <prvInsertBlockIntoFreeList+0xb0>)
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	e003      	b.n	800ddc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681a      	ldr	r2, [r3, #0]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ddc8:	68fa      	ldr	r2, [r7, #12]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d002      	beq.n	800ddd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddd6:	bf00      	nop
 800ddd8:	3714      	adds	r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	200055c8 	.word	0x200055c8
 800dde8:	200055d0 	.word	0x200055d0

0800ddec <__errno>:
 800ddec:	4b01      	ldr	r3, [pc, #4]	; (800ddf4 <__errno+0x8>)
 800ddee:	6818      	ldr	r0, [r3, #0]
 800ddf0:	4770      	bx	lr
 800ddf2:	bf00      	nop
 800ddf4:	2000003c 	.word	0x2000003c

0800ddf8 <__libc_init_array>:
 800ddf8:	b570      	push	{r4, r5, r6, lr}
 800ddfa:	4d0d      	ldr	r5, [pc, #52]	; (800de30 <__libc_init_array+0x38>)
 800ddfc:	4c0d      	ldr	r4, [pc, #52]	; (800de34 <__libc_init_array+0x3c>)
 800ddfe:	1b64      	subs	r4, r4, r5
 800de00:	10a4      	asrs	r4, r4, #2
 800de02:	2600      	movs	r6, #0
 800de04:	42a6      	cmp	r6, r4
 800de06:	d109      	bne.n	800de1c <__libc_init_array+0x24>
 800de08:	4d0b      	ldr	r5, [pc, #44]	; (800de38 <__libc_init_array+0x40>)
 800de0a:	4c0c      	ldr	r4, [pc, #48]	; (800de3c <__libc_init_array+0x44>)
 800de0c:	f001 ff6e 	bl	800fcec <_init>
 800de10:	1b64      	subs	r4, r4, r5
 800de12:	10a4      	asrs	r4, r4, #2
 800de14:	2600      	movs	r6, #0
 800de16:	42a6      	cmp	r6, r4
 800de18:	d105      	bne.n	800de26 <__libc_init_array+0x2e>
 800de1a:	bd70      	pop	{r4, r5, r6, pc}
 800de1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de20:	4798      	blx	r3
 800de22:	3601      	adds	r6, #1
 800de24:	e7ee      	b.n	800de04 <__libc_init_array+0xc>
 800de26:	f855 3b04 	ldr.w	r3, [r5], #4
 800de2a:	4798      	blx	r3
 800de2c:	3601      	adds	r6, #1
 800de2e:	e7f2      	b.n	800de16 <__libc_init_array+0x1e>
 800de30:	08010520 	.word	0x08010520
 800de34:	08010520 	.word	0x08010520
 800de38:	08010520 	.word	0x08010520
 800de3c:	08010524 	.word	0x08010524

0800de40 <memcpy>:
 800de40:	440a      	add	r2, r1
 800de42:	4291      	cmp	r1, r2
 800de44:	f100 33ff 	add.w	r3, r0, #4294967295
 800de48:	d100      	bne.n	800de4c <memcpy+0xc>
 800de4a:	4770      	bx	lr
 800de4c:	b510      	push	{r4, lr}
 800de4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de56:	4291      	cmp	r1, r2
 800de58:	d1f9      	bne.n	800de4e <memcpy+0xe>
 800de5a:	bd10      	pop	{r4, pc}

0800de5c <memset>:
 800de5c:	4402      	add	r2, r0
 800de5e:	4603      	mov	r3, r0
 800de60:	4293      	cmp	r3, r2
 800de62:	d100      	bne.n	800de66 <memset+0xa>
 800de64:	4770      	bx	lr
 800de66:	f803 1b01 	strb.w	r1, [r3], #1
 800de6a:	e7f9      	b.n	800de60 <memset+0x4>

0800de6c <siprintf>:
 800de6c:	b40e      	push	{r1, r2, r3}
 800de6e:	b500      	push	{lr}
 800de70:	b09c      	sub	sp, #112	; 0x70
 800de72:	ab1d      	add	r3, sp, #116	; 0x74
 800de74:	9002      	str	r0, [sp, #8]
 800de76:	9006      	str	r0, [sp, #24]
 800de78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de7c:	4809      	ldr	r0, [pc, #36]	; (800dea4 <siprintf+0x38>)
 800de7e:	9107      	str	r1, [sp, #28]
 800de80:	9104      	str	r1, [sp, #16]
 800de82:	4909      	ldr	r1, [pc, #36]	; (800dea8 <siprintf+0x3c>)
 800de84:	f853 2b04 	ldr.w	r2, [r3], #4
 800de88:	9105      	str	r1, [sp, #20]
 800de8a:	6800      	ldr	r0, [r0, #0]
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	a902      	add	r1, sp, #8
 800de90:	f000 f868 	bl	800df64 <_svfiprintf_r>
 800de94:	9b02      	ldr	r3, [sp, #8]
 800de96:	2200      	movs	r2, #0
 800de98:	701a      	strb	r2, [r3, #0]
 800de9a:	b01c      	add	sp, #112	; 0x70
 800de9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dea0:	b003      	add	sp, #12
 800dea2:	4770      	bx	lr
 800dea4:	2000003c 	.word	0x2000003c
 800dea8:	ffff0208 	.word	0xffff0208

0800deac <__ssputs_r>:
 800deac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deb0:	688e      	ldr	r6, [r1, #8]
 800deb2:	429e      	cmp	r6, r3
 800deb4:	4682      	mov	sl, r0
 800deb6:	460c      	mov	r4, r1
 800deb8:	4690      	mov	r8, r2
 800deba:	461f      	mov	r7, r3
 800debc:	d838      	bhi.n	800df30 <__ssputs_r+0x84>
 800debe:	898a      	ldrh	r2, [r1, #12]
 800dec0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dec4:	d032      	beq.n	800df2c <__ssputs_r+0x80>
 800dec6:	6825      	ldr	r5, [r4, #0]
 800dec8:	6909      	ldr	r1, [r1, #16]
 800deca:	eba5 0901 	sub.w	r9, r5, r1
 800dece:	6965      	ldr	r5, [r4, #20]
 800ded0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ded4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ded8:	3301      	adds	r3, #1
 800deda:	444b      	add	r3, r9
 800dedc:	106d      	asrs	r5, r5, #1
 800dede:	429d      	cmp	r5, r3
 800dee0:	bf38      	it	cc
 800dee2:	461d      	movcc	r5, r3
 800dee4:	0553      	lsls	r3, r2, #21
 800dee6:	d531      	bpl.n	800df4c <__ssputs_r+0xa0>
 800dee8:	4629      	mov	r1, r5
 800deea:	f000 fb55 	bl	800e598 <_malloc_r>
 800deee:	4606      	mov	r6, r0
 800def0:	b950      	cbnz	r0, 800df08 <__ssputs_r+0x5c>
 800def2:	230c      	movs	r3, #12
 800def4:	f8ca 3000 	str.w	r3, [sl]
 800def8:	89a3      	ldrh	r3, [r4, #12]
 800defa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800defe:	81a3      	strh	r3, [r4, #12]
 800df00:	f04f 30ff 	mov.w	r0, #4294967295
 800df04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df08:	6921      	ldr	r1, [r4, #16]
 800df0a:	464a      	mov	r2, r9
 800df0c:	f7ff ff98 	bl	800de40 <memcpy>
 800df10:	89a3      	ldrh	r3, [r4, #12]
 800df12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df1a:	81a3      	strh	r3, [r4, #12]
 800df1c:	6126      	str	r6, [r4, #16]
 800df1e:	6165      	str	r5, [r4, #20]
 800df20:	444e      	add	r6, r9
 800df22:	eba5 0509 	sub.w	r5, r5, r9
 800df26:	6026      	str	r6, [r4, #0]
 800df28:	60a5      	str	r5, [r4, #8]
 800df2a:	463e      	mov	r6, r7
 800df2c:	42be      	cmp	r6, r7
 800df2e:	d900      	bls.n	800df32 <__ssputs_r+0x86>
 800df30:	463e      	mov	r6, r7
 800df32:	6820      	ldr	r0, [r4, #0]
 800df34:	4632      	mov	r2, r6
 800df36:	4641      	mov	r1, r8
 800df38:	f000 faa8 	bl	800e48c <memmove>
 800df3c:	68a3      	ldr	r3, [r4, #8]
 800df3e:	1b9b      	subs	r3, r3, r6
 800df40:	60a3      	str	r3, [r4, #8]
 800df42:	6823      	ldr	r3, [r4, #0]
 800df44:	4433      	add	r3, r6
 800df46:	6023      	str	r3, [r4, #0]
 800df48:	2000      	movs	r0, #0
 800df4a:	e7db      	b.n	800df04 <__ssputs_r+0x58>
 800df4c:	462a      	mov	r2, r5
 800df4e:	f000 fb97 	bl	800e680 <_realloc_r>
 800df52:	4606      	mov	r6, r0
 800df54:	2800      	cmp	r0, #0
 800df56:	d1e1      	bne.n	800df1c <__ssputs_r+0x70>
 800df58:	6921      	ldr	r1, [r4, #16]
 800df5a:	4650      	mov	r0, sl
 800df5c:	f000 fab0 	bl	800e4c0 <_free_r>
 800df60:	e7c7      	b.n	800def2 <__ssputs_r+0x46>
	...

0800df64 <_svfiprintf_r>:
 800df64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df68:	4698      	mov	r8, r3
 800df6a:	898b      	ldrh	r3, [r1, #12]
 800df6c:	061b      	lsls	r3, r3, #24
 800df6e:	b09d      	sub	sp, #116	; 0x74
 800df70:	4607      	mov	r7, r0
 800df72:	460d      	mov	r5, r1
 800df74:	4614      	mov	r4, r2
 800df76:	d50e      	bpl.n	800df96 <_svfiprintf_r+0x32>
 800df78:	690b      	ldr	r3, [r1, #16]
 800df7a:	b963      	cbnz	r3, 800df96 <_svfiprintf_r+0x32>
 800df7c:	2140      	movs	r1, #64	; 0x40
 800df7e:	f000 fb0b 	bl	800e598 <_malloc_r>
 800df82:	6028      	str	r0, [r5, #0]
 800df84:	6128      	str	r0, [r5, #16]
 800df86:	b920      	cbnz	r0, 800df92 <_svfiprintf_r+0x2e>
 800df88:	230c      	movs	r3, #12
 800df8a:	603b      	str	r3, [r7, #0]
 800df8c:	f04f 30ff 	mov.w	r0, #4294967295
 800df90:	e0d1      	b.n	800e136 <_svfiprintf_r+0x1d2>
 800df92:	2340      	movs	r3, #64	; 0x40
 800df94:	616b      	str	r3, [r5, #20]
 800df96:	2300      	movs	r3, #0
 800df98:	9309      	str	r3, [sp, #36]	; 0x24
 800df9a:	2320      	movs	r3, #32
 800df9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfa0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfa4:	2330      	movs	r3, #48	; 0x30
 800dfa6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e150 <_svfiprintf_r+0x1ec>
 800dfaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfae:	f04f 0901 	mov.w	r9, #1
 800dfb2:	4623      	mov	r3, r4
 800dfb4:	469a      	mov	sl, r3
 800dfb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfba:	b10a      	cbz	r2, 800dfc0 <_svfiprintf_r+0x5c>
 800dfbc:	2a25      	cmp	r2, #37	; 0x25
 800dfbe:	d1f9      	bne.n	800dfb4 <_svfiprintf_r+0x50>
 800dfc0:	ebba 0b04 	subs.w	fp, sl, r4
 800dfc4:	d00b      	beq.n	800dfde <_svfiprintf_r+0x7a>
 800dfc6:	465b      	mov	r3, fp
 800dfc8:	4622      	mov	r2, r4
 800dfca:	4629      	mov	r1, r5
 800dfcc:	4638      	mov	r0, r7
 800dfce:	f7ff ff6d 	bl	800deac <__ssputs_r>
 800dfd2:	3001      	adds	r0, #1
 800dfd4:	f000 80aa 	beq.w	800e12c <_svfiprintf_r+0x1c8>
 800dfd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfda:	445a      	add	r2, fp
 800dfdc:	9209      	str	r2, [sp, #36]	; 0x24
 800dfde:	f89a 3000 	ldrb.w	r3, [sl]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	f000 80a2 	beq.w	800e12c <_svfiprintf_r+0x1c8>
 800dfe8:	2300      	movs	r3, #0
 800dfea:	f04f 32ff 	mov.w	r2, #4294967295
 800dfee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dff2:	f10a 0a01 	add.w	sl, sl, #1
 800dff6:	9304      	str	r3, [sp, #16]
 800dff8:	9307      	str	r3, [sp, #28]
 800dffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dffe:	931a      	str	r3, [sp, #104]	; 0x68
 800e000:	4654      	mov	r4, sl
 800e002:	2205      	movs	r2, #5
 800e004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e008:	4851      	ldr	r0, [pc, #324]	; (800e150 <_svfiprintf_r+0x1ec>)
 800e00a:	f7f2 fa79 	bl	8000500 <memchr>
 800e00e:	9a04      	ldr	r2, [sp, #16]
 800e010:	b9d8      	cbnz	r0, 800e04a <_svfiprintf_r+0xe6>
 800e012:	06d0      	lsls	r0, r2, #27
 800e014:	bf44      	itt	mi
 800e016:	2320      	movmi	r3, #32
 800e018:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e01c:	0711      	lsls	r1, r2, #28
 800e01e:	bf44      	itt	mi
 800e020:	232b      	movmi	r3, #43	; 0x2b
 800e022:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e026:	f89a 3000 	ldrb.w	r3, [sl]
 800e02a:	2b2a      	cmp	r3, #42	; 0x2a
 800e02c:	d015      	beq.n	800e05a <_svfiprintf_r+0xf6>
 800e02e:	9a07      	ldr	r2, [sp, #28]
 800e030:	4654      	mov	r4, sl
 800e032:	2000      	movs	r0, #0
 800e034:	f04f 0c0a 	mov.w	ip, #10
 800e038:	4621      	mov	r1, r4
 800e03a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e03e:	3b30      	subs	r3, #48	; 0x30
 800e040:	2b09      	cmp	r3, #9
 800e042:	d94e      	bls.n	800e0e2 <_svfiprintf_r+0x17e>
 800e044:	b1b0      	cbz	r0, 800e074 <_svfiprintf_r+0x110>
 800e046:	9207      	str	r2, [sp, #28]
 800e048:	e014      	b.n	800e074 <_svfiprintf_r+0x110>
 800e04a:	eba0 0308 	sub.w	r3, r0, r8
 800e04e:	fa09 f303 	lsl.w	r3, r9, r3
 800e052:	4313      	orrs	r3, r2
 800e054:	9304      	str	r3, [sp, #16]
 800e056:	46a2      	mov	sl, r4
 800e058:	e7d2      	b.n	800e000 <_svfiprintf_r+0x9c>
 800e05a:	9b03      	ldr	r3, [sp, #12]
 800e05c:	1d19      	adds	r1, r3, #4
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	9103      	str	r1, [sp, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	bfbb      	ittet	lt
 800e066:	425b      	neglt	r3, r3
 800e068:	f042 0202 	orrlt.w	r2, r2, #2
 800e06c:	9307      	strge	r3, [sp, #28]
 800e06e:	9307      	strlt	r3, [sp, #28]
 800e070:	bfb8      	it	lt
 800e072:	9204      	strlt	r2, [sp, #16]
 800e074:	7823      	ldrb	r3, [r4, #0]
 800e076:	2b2e      	cmp	r3, #46	; 0x2e
 800e078:	d10c      	bne.n	800e094 <_svfiprintf_r+0x130>
 800e07a:	7863      	ldrb	r3, [r4, #1]
 800e07c:	2b2a      	cmp	r3, #42	; 0x2a
 800e07e:	d135      	bne.n	800e0ec <_svfiprintf_r+0x188>
 800e080:	9b03      	ldr	r3, [sp, #12]
 800e082:	1d1a      	adds	r2, r3, #4
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	9203      	str	r2, [sp, #12]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	bfb8      	it	lt
 800e08c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e090:	3402      	adds	r4, #2
 800e092:	9305      	str	r3, [sp, #20]
 800e094:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e160 <_svfiprintf_r+0x1fc>
 800e098:	7821      	ldrb	r1, [r4, #0]
 800e09a:	2203      	movs	r2, #3
 800e09c:	4650      	mov	r0, sl
 800e09e:	f7f2 fa2f 	bl	8000500 <memchr>
 800e0a2:	b140      	cbz	r0, 800e0b6 <_svfiprintf_r+0x152>
 800e0a4:	2340      	movs	r3, #64	; 0x40
 800e0a6:	eba0 000a 	sub.w	r0, r0, sl
 800e0aa:	fa03 f000 	lsl.w	r0, r3, r0
 800e0ae:	9b04      	ldr	r3, [sp, #16]
 800e0b0:	4303      	orrs	r3, r0
 800e0b2:	3401      	adds	r4, #1
 800e0b4:	9304      	str	r3, [sp, #16]
 800e0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ba:	4826      	ldr	r0, [pc, #152]	; (800e154 <_svfiprintf_r+0x1f0>)
 800e0bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0c0:	2206      	movs	r2, #6
 800e0c2:	f7f2 fa1d 	bl	8000500 <memchr>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d038      	beq.n	800e13c <_svfiprintf_r+0x1d8>
 800e0ca:	4b23      	ldr	r3, [pc, #140]	; (800e158 <_svfiprintf_r+0x1f4>)
 800e0cc:	bb1b      	cbnz	r3, 800e116 <_svfiprintf_r+0x1b2>
 800e0ce:	9b03      	ldr	r3, [sp, #12]
 800e0d0:	3307      	adds	r3, #7
 800e0d2:	f023 0307 	bic.w	r3, r3, #7
 800e0d6:	3308      	adds	r3, #8
 800e0d8:	9303      	str	r3, [sp, #12]
 800e0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0dc:	4433      	add	r3, r6
 800e0de:	9309      	str	r3, [sp, #36]	; 0x24
 800e0e0:	e767      	b.n	800dfb2 <_svfiprintf_r+0x4e>
 800e0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	2001      	movs	r0, #1
 800e0ea:	e7a5      	b.n	800e038 <_svfiprintf_r+0xd4>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	3401      	adds	r4, #1
 800e0f0:	9305      	str	r3, [sp, #20]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	f04f 0c0a 	mov.w	ip, #10
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0fe:	3a30      	subs	r2, #48	; 0x30
 800e100:	2a09      	cmp	r2, #9
 800e102:	d903      	bls.n	800e10c <_svfiprintf_r+0x1a8>
 800e104:	2b00      	cmp	r3, #0
 800e106:	d0c5      	beq.n	800e094 <_svfiprintf_r+0x130>
 800e108:	9105      	str	r1, [sp, #20]
 800e10a:	e7c3      	b.n	800e094 <_svfiprintf_r+0x130>
 800e10c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e110:	4604      	mov	r4, r0
 800e112:	2301      	movs	r3, #1
 800e114:	e7f0      	b.n	800e0f8 <_svfiprintf_r+0x194>
 800e116:	ab03      	add	r3, sp, #12
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	462a      	mov	r2, r5
 800e11c:	4b0f      	ldr	r3, [pc, #60]	; (800e15c <_svfiprintf_r+0x1f8>)
 800e11e:	a904      	add	r1, sp, #16
 800e120:	4638      	mov	r0, r7
 800e122:	f3af 8000 	nop.w
 800e126:	1c42      	adds	r2, r0, #1
 800e128:	4606      	mov	r6, r0
 800e12a:	d1d6      	bne.n	800e0da <_svfiprintf_r+0x176>
 800e12c:	89ab      	ldrh	r3, [r5, #12]
 800e12e:	065b      	lsls	r3, r3, #25
 800e130:	f53f af2c 	bmi.w	800df8c <_svfiprintf_r+0x28>
 800e134:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e136:	b01d      	add	sp, #116	; 0x74
 800e138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e13c:	ab03      	add	r3, sp, #12
 800e13e:	9300      	str	r3, [sp, #0]
 800e140:	462a      	mov	r2, r5
 800e142:	4b06      	ldr	r3, [pc, #24]	; (800e15c <_svfiprintf_r+0x1f8>)
 800e144:	a904      	add	r1, sp, #16
 800e146:	4638      	mov	r0, r7
 800e148:	f000 f87a 	bl	800e240 <_printf_i>
 800e14c:	e7eb      	b.n	800e126 <_svfiprintf_r+0x1c2>
 800e14e:	bf00      	nop
 800e150:	08010298 	.word	0x08010298
 800e154:	080102a2 	.word	0x080102a2
 800e158:	00000000 	.word	0x00000000
 800e15c:	0800dead 	.word	0x0800dead
 800e160:	0801029e 	.word	0x0801029e

0800e164 <_printf_common>:
 800e164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e168:	4616      	mov	r6, r2
 800e16a:	4699      	mov	r9, r3
 800e16c:	688a      	ldr	r2, [r1, #8]
 800e16e:	690b      	ldr	r3, [r1, #16]
 800e170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e174:	4293      	cmp	r3, r2
 800e176:	bfb8      	it	lt
 800e178:	4613      	movlt	r3, r2
 800e17a:	6033      	str	r3, [r6, #0]
 800e17c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e180:	4607      	mov	r7, r0
 800e182:	460c      	mov	r4, r1
 800e184:	b10a      	cbz	r2, 800e18a <_printf_common+0x26>
 800e186:	3301      	adds	r3, #1
 800e188:	6033      	str	r3, [r6, #0]
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	0699      	lsls	r1, r3, #26
 800e18e:	bf42      	ittt	mi
 800e190:	6833      	ldrmi	r3, [r6, #0]
 800e192:	3302      	addmi	r3, #2
 800e194:	6033      	strmi	r3, [r6, #0]
 800e196:	6825      	ldr	r5, [r4, #0]
 800e198:	f015 0506 	ands.w	r5, r5, #6
 800e19c:	d106      	bne.n	800e1ac <_printf_common+0x48>
 800e19e:	f104 0a19 	add.w	sl, r4, #25
 800e1a2:	68e3      	ldr	r3, [r4, #12]
 800e1a4:	6832      	ldr	r2, [r6, #0]
 800e1a6:	1a9b      	subs	r3, r3, r2
 800e1a8:	42ab      	cmp	r3, r5
 800e1aa:	dc26      	bgt.n	800e1fa <_printf_common+0x96>
 800e1ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1b0:	1e13      	subs	r3, r2, #0
 800e1b2:	6822      	ldr	r2, [r4, #0]
 800e1b4:	bf18      	it	ne
 800e1b6:	2301      	movne	r3, #1
 800e1b8:	0692      	lsls	r2, r2, #26
 800e1ba:	d42b      	bmi.n	800e214 <_printf_common+0xb0>
 800e1bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1c0:	4649      	mov	r1, r9
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	47c0      	blx	r8
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	d01e      	beq.n	800e208 <_printf_common+0xa4>
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	68e5      	ldr	r5, [r4, #12]
 800e1ce:	6832      	ldr	r2, [r6, #0]
 800e1d0:	f003 0306 	and.w	r3, r3, #6
 800e1d4:	2b04      	cmp	r3, #4
 800e1d6:	bf08      	it	eq
 800e1d8:	1aad      	subeq	r5, r5, r2
 800e1da:	68a3      	ldr	r3, [r4, #8]
 800e1dc:	6922      	ldr	r2, [r4, #16]
 800e1de:	bf0c      	ite	eq
 800e1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1e4:	2500      	movne	r5, #0
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	bfc4      	itt	gt
 800e1ea:	1a9b      	subgt	r3, r3, r2
 800e1ec:	18ed      	addgt	r5, r5, r3
 800e1ee:	2600      	movs	r6, #0
 800e1f0:	341a      	adds	r4, #26
 800e1f2:	42b5      	cmp	r5, r6
 800e1f4:	d11a      	bne.n	800e22c <_printf_common+0xc8>
 800e1f6:	2000      	movs	r0, #0
 800e1f8:	e008      	b.n	800e20c <_printf_common+0xa8>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	4652      	mov	r2, sl
 800e1fe:	4649      	mov	r1, r9
 800e200:	4638      	mov	r0, r7
 800e202:	47c0      	blx	r8
 800e204:	3001      	adds	r0, #1
 800e206:	d103      	bne.n	800e210 <_printf_common+0xac>
 800e208:	f04f 30ff 	mov.w	r0, #4294967295
 800e20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e210:	3501      	adds	r5, #1
 800e212:	e7c6      	b.n	800e1a2 <_printf_common+0x3e>
 800e214:	18e1      	adds	r1, r4, r3
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	2030      	movs	r0, #48	; 0x30
 800e21a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e21e:	4422      	add	r2, r4
 800e220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e228:	3302      	adds	r3, #2
 800e22a:	e7c7      	b.n	800e1bc <_printf_common+0x58>
 800e22c:	2301      	movs	r3, #1
 800e22e:	4622      	mov	r2, r4
 800e230:	4649      	mov	r1, r9
 800e232:	4638      	mov	r0, r7
 800e234:	47c0      	blx	r8
 800e236:	3001      	adds	r0, #1
 800e238:	d0e6      	beq.n	800e208 <_printf_common+0xa4>
 800e23a:	3601      	adds	r6, #1
 800e23c:	e7d9      	b.n	800e1f2 <_printf_common+0x8e>
	...

0800e240 <_printf_i>:
 800e240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e244:	7e0f      	ldrb	r7, [r1, #24]
 800e246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e248:	2f78      	cmp	r7, #120	; 0x78
 800e24a:	4691      	mov	r9, r2
 800e24c:	4680      	mov	r8, r0
 800e24e:	460c      	mov	r4, r1
 800e250:	469a      	mov	sl, r3
 800e252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e256:	d807      	bhi.n	800e268 <_printf_i+0x28>
 800e258:	2f62      	cmp	r7, #98	; 0x62
 800e25a:	d80a      	bhi.n	800e272 <_printf_i+0x32>
 800e25c:	2f00      	cmp	r7, #0
 800e25e:	f000 80d8 	beq.w	800e412 <_printf_i+0x1d2>
 800e262:	2f58      	cmp	r7, #88	; 0x58
 800e264:	f000 80a3 	beq.w	800e3ae <_printf_i+0x16e>
 800e268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e26c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e270:	e03a      	b.n	800e2e8 <_printf_i+0xa8>
 800e272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e276:	2b15      	cmp	r3, #21
 800e278:	d8f6      	bhi.n	800e268 <_printf_i+0x28>
 800e27a:	a101      	add	r1, pc, #4	; (adr r1, 800e280 <_printf_i+0x40>)
 800e27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e280:	0800e2d9 	.word	0x0800e2d9
 800e284:	0800e2ed 	.word	0x0800e2ed
 800e288:	0800e269 	.word	0x0800e269
 800e28c:	0800e269 	.word	0x0800e269
 800e290:	0800e269 	.word	0x0800e269
 800e294:	0800e269 	.word	0x0800e269
 800e298:	0800e2ed 	.word	0x0800e2ed
 800e29c:	0800e269 	.word	0x0800e269
 800e2a0:	0800e269 	.word	0x0800e269
 800e2a4:	0800e269 	.word	0x0800e269
 800e2a8:	0800e269 	.word	0x0800e269
 800e2ac:	0800e3f9 	.word	0x0800e3f9
 800e2b0:	0800e31d 	.word	0x0800e31d
 800e2b4:	0800e3db 	.word	0x0800e3db
 800e2b8:	0800e269 	.word	0x0800e269
 800e2bc:	0800e269 	.word	0x0800e269
 800e2c0:	0800e41b 	.word	0x0800e41b
 800e2c4:	0800e269 	.word	0x0800e269
 800e2c8:	0800e31d 	.word	0x0800e31d
 800e2cc:	0800e269 	.word	0x0800e269
 800e2d0:	0800e269 	.word	0x0800e269
 800e2d4:	0800e3e3 	.word	0x0800e3e3
 800e2d8:	682b      	ldr	r3, [r5, #0]
 800e2da:	1d1a      	adds	r2, r3, #4
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	602a      	str	r2, [r5, #0]
 800e2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e0a3      	b.n	800e434 <_printf_i+0x1f4>
 800e2ec:	6820      	ldr	r0, [r4, #0]
 800e2ee:	6829      	ldr	r1, [r5, #0]
 800e2f0:	0606      	lsls	r6, r0, #24
 800e2f2:	f101 0304 	add.w	r3, r1, #4
 800e2f6:	d50a      	bpl.n	800e30e <_printf_i+0xce>
 800e2f8:	680e      	ldr	r6, [r1, #0]
 800e2fa:	602b      	str	r3, [r5, #0]
 800e2fc:	2e00      	cmp	r6, #0
 800e2fe:	da03      	bge.n	800e308 <_printf_i+0xc8>
 800e300:	232d      	movs	r3, #45	; 0x2d
 800e302:	4276      	negs	r6, r6
 800e304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e308:	485e      	ldr	r0, [pc, #376]	; (800e484 <_printf_i+0x244>)
 800e30a:	230a      	movs	r3, #10
 800e30c:	e019      	b.n	800e342 <_printf_i+0x102>
 800e30e:	680e      	ldr	r6, [r1, #0]
 800e310:	602b      	str	r3, [r5, #0]
 800e312:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e316:	bf18      	it	ne
 800e318:	b236      	sxthne	r6, r6
 800e31a:	e7ef      	b.n	800e2fc <_printf_i+0xbc>
 800e31c:	682b      	ldr	r3, [r5, #0]
 800e31e:	6820      	ldr	r0, [r4, #0]
 800e320:	1d19      	adds	r1, r3, #4
 800e322:	6029      	str	r1, [r5, #0]
 800e324:	0601      	lsls	r1, r0, #24
 800e326:	d501      	bpl.n	800e32c <_printf_i+0xec>
 800e328:	681e      	ldr	r6, [r3, #0]
 800e32a:	e002      	b.n	800e332 <_printf_i+0xf2>
 800e32c:	0646      	lsls	r6, r0, #25
 800e32e:	d5fb      	bpl.n	800e328 <_printf_i+0xe8>
 800e330:	881e      	ldrh	r6, [r3, #0]
 800e332:	4854      	ldr	r0, [pc, #336]	; (800e484 <_printf_i+0x244>)
 800e334:	2f6f      	cmp	r7, #111	; 0x6f
 800e336:	bf0c      	ite	eq
 800e338:	2308      	moveq	r3, #8
 800e33a:	230a      	movne	r3, #10
 800e33c:	2100      	movs	r1, #0
 800e33e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e342:	6865      	ldr	r5, [r4, #4]
 800e344:	60a5      	str	r5, [r4, #8]
 800e346:	2d00      	cmp	r5, #0
 800e348:	bfa2      	ittt	ge
 800e34a:	6821      	ldrge	r1, [r4, #0]
 800e34c:	f021 0104 	bicge.w	r1, r1, #4
 800e350:	6021      	strge	r1, [r4, #0]
 800e352:	b90e      	cbnz	r6, 800e358 <_printf_i+0x118>
 800e354:	2d00      	cmp	r5, #0
 800e356:	d04d      	beq.n	800e3f4 <_printf_i+0x1b4>
 800e358:	4615      	mov	r5, r2
 800e35a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e35e:	fb03 6711 	mls	r7, r3, r1, r6
 800e362:	5dc7      	ldrb	r7, [r0, r7]
 800e364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e368:	4637      	mov	r7, r6
 800e36a:	42bb      	cmp	r3, r7
 800e36c:	460e      	mov	r6, r1
 800e36e:	d9f4      	bls.n	800e35a <_printf_i+0x11a>
 800e370:	2b08      	cmp	r3, #8
 800e372:	d10b      	bne.n	800e38c <_printf_i+0x14c>
 800e374:	6823      	ldr	r3, [r4, #0]
 800e376:	07de      	lsls	r6, r3, #31
 800e378:	d508      	bpl.n	800e38c <_printf_i+0x14c>
 800e37a:	6923      	ldr	r3, [r4, #16]
 800e37c:	6861      	ldr	r1, [r4, #4]
 800e37e:	4299      	cmp	r1, r3
 800e380:	bfde      	ittt	le
 800e382:	2330      	movle	r3, #48	; 0x30
 800e384:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e388:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e38c:	1b52      	subs	r2, r2, r5
 800e38e:	6122      	str	r2, [r4, #16]
 800e390:	f8cd a000 	str.w	sl, [sp]
 800e394:	464b      	mov	r3, r9
 800e396:	aa03      	add	r2, sp, #12
 800e398:	4621      	mov	r1, r4
 800e39a:	4640      	mov	r0, r8
 800e39c:	f7ff fee2 	bl	800e164 <_printf_common>
 800e3a0:	3001      	adds	r0, #1
 800e3a2:	d14c      	bne.n	800e43e <_printf_i+0x1fe>
 800e3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3a8:	b004      	add	sp, #16
 800e3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ae:	4835      	ldr	r0, [pc, #212]	; (800e484 <_printf_i+0x244>)
 800e3b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e3b4:	6829      	ldr	r1, [r5, #0]
 800e3b6:	6823      	ldr	r3, [r4, #0]
 800e3b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e3bc:	6029      	str	r1, [r5, #0]
 800e3be:	061d      	lsls	r5, r3, #24
 800e3c0:	d514      	bpl.n	800e3ec <_printf_i+0x1ac>
 800e3c2:	07df      	lsls	r7, r3, #31
 800e3c4:	bf44      	itt	mi
 800e3c6:	f043 0320 	orrmi.w	r3, r3, #32
 800e3ca:	6023      	strmi	r3, [r4, #0]
 800e3cc:	b91e      	cbnz	r6, 800e3d6 <_printf_i+0x196>
 800e3ce:	6823      	ldr	r3, [r4, #0]
 800e3d0:	f023 0320 	bic.w	r3, r3, #32
 800e3d4:	6023      	str	r3, [r4, #0]
 800e3d6:	2310      	movs	r3, #16
 800e3d8:	e7b0      	b.n	800e33c <_printf_i+0xfc>
 800e3da:	6823      	ldr	r3, [r4, #0]
 800e3dc:	f043 0320 	orr.w	r3, r3, #32
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	2378      	movs	r3, #120	; 0x78
 800e3e4:	4828      	ldr	r0, [pc, #160]	; (800e488 <_printf_i+0x248>)
 800e3e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e3ea:	e7e3      	b.n	800e3b4 <_printf_i+0x174>
 800e3ec:	0659      	lsls	r1, r3, #25
 800e3ee:	bf48      	it	mi
 800e3f0:	b2b6      	uxthmi	r6, r6
 800e3f2:	e7e6      	b.n	800e3c2 <_printf_i+0x182>
 800e3f4:	4615      	mov	r5, r2
 800e3f6:	e7bb      	b.n	800e370 <_printf_i+0x130>
 800e3f8:	682b      	ldr	r3, [r5, #0]
 800e3fa:	6826      	ldr	r6, [r4, #0]
 800e3fc:	6961      	ldr	r1, [r4, #20]
 800e3fe:	1d18      	adds	r0, r3, #4
 800e400:	6028      	str	r0, [r5, #0]
 800e402:	0635      	lsls	r5, r6, #24
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	d501      	bpl.n	800e40c <_printf_i+0x1cc>
 800e408:	6019      	str	r1, [r3, #0]
 800e40a:	e002      	b.n	800e412 <_printf_i+0x1d2>
 800e40c:	0670      	lsls	r0, r6, #25
 800e40e:	d5fb      	bpl.n	800e408 <_printf_i+0x1c8>
 800e410:	8019      	strh	r1, [r3, #0]
 800e412:	2300      	movs	r3, #0
 800e414:	6123      	str	r3, [r4, #16]
 800e416:	4615      	mov	r5, r2
 800e418:	e7ba      	b.n	800e390 <_printf_i+0x150>
 800e41a:	682b      	ldr	r3, [r5, #0]
 800e41c:	1d1a      	adds	r2, r3, #4
 800e41e:	602a      	str	r2, [r5, #0]
 800e420:	681d      	ldr	r5, [r3, #0]
 800e422:	6862      	ldr	r2, [r4, #4]
 800e424:	2100      	movs	r1, #0
 800e426:	4628      	mov	r0, r5
 800e428:	f7f2 f86a 	bl	8000500 <memchr>
 800e42c:	b108      	cbz	r0, 800e432 <_printf_i+0x1f2>
 800e42e:	1b40      	subs	r0, r0, r5
 800e430:	6060      	str	r0, [r4, #4]
 800e432:	6863      	ldr	r3, [r4, #4]
 800e434:	6123      	str	r3, [r4, #16]
 800e436:	2300      	movs	r3, #0
 800e438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e43c:	e7a8      	b.n	800e390 <_printf_i+0x150>
 800e43e:	6923      	ldr	r3, [r4, #16]
 800e440:	462a      	mov	r2, r5
 800e442:	4649      	mov	r1, r9
 800e444:	4640      	mov	r0, r8
 800e446:	47d0      	blx	sl
 800e448:	3001      	adds	r0, #1
 800e44a:	d0ab      	beq.n	800e3a4 <_printf_i+0x164>
 800e44c:	6823      	ldr	r3, [r4, #0]
 800e44e:	079b      	lsls	r3, r3, #30
 800e450:	d413      	bmi.n	800e47a <_printf_i+0x23a>
 800e452:	68e0      	ldr	r0, [r4, #12]
 800e454:	9b03      	ldr	r3, [sp, #12]
 800e456:	4298      	cmp	r0, r3
 800e458:	bfb8      	it	lt
 800e45a:	4618      	movlt	r0, r3
 800e45c:	e7a4      	b.n	800e3a8 <_printf_i+0x168>
 800e45e:	2301      	movs	r3, #1
 800e460:	4632      	mov	r2, r6
 800e462:	4649      	mov	r1, r9
 800e464:	4640      	mov	r0, r8
 800e466:	47d0      	blx	sl
 800e468:	3001      	adds	r0, #1
 800e46a:	d09b      	beq.n	800e3a4 <_printf_i+0x164>
 800e46c:	3501      	adds	r5, #1
 800e46e:	68e3      	ldr	r3, [r4, #12]
 800e470:	9903      	ldr	r1, [sp, #12]
 800e472:	1a5b      	subs	r3, r3, r1
 800e474:	42ab      	cmp	r3, r5
 800e476:	dcf2      	bgt.n	800e45e <_printf_i+0x21e>
 800e478:	e7eb      	b.n	800e452 <_printf_i+0x212>
 800e47a:	2500      	movs	r5, #0
 800e47c:	f104 0619 	add.w	r6, r4, #25
 800e480:	e7f5      	b.n	800e46e <_printf_i+0x22e>
 800e482:	bf00      	nop
 800e484:	080102a9 	.word	0x080102a9
 800e488:	080102ba 	.word	0x080102ba

0800e48c <memmove>:
 800e48c:	4288      	cmp	r0, r1
 800e48e:	b510      	push	{r4, lr}
 800e490:	eb01 0402 	add.w	r4, r1, r2
 800e494:	d902      	bls.n	800e49c <memmove+0x10>
 800e496:	4284      	cmp	r4, r0
 800e498:	4623      	mov	r3, r4
 800e49a:	d807      	bhi.n	800e4ac <memmove+0x20>
 800e49c:	1e43      	subs	r3, r0, #1
 800e49e:	42a1      	cmp	r1, r4
 800e4a0:	d008      	beq.n	800e4b4 <memmove+0x28>
 800e4a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4aa:	e7f8      	b.n	800e49e <memmove+0x12>
 800e4ac:	4402      	add	r2, r0
 800e4ae:	4601      	mov	r1, r0
 800e4b0:	428a      	cmp	r2, r1
 800e4b2:	d100      	bne.n	800e4b6 <memmove+0x2a>
 800e4b4:	bd10      	pop	{r4, pc}
 800e4b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4be:	e7f7      	b.n	800e4b0 <memmove+0x24>

0800e4c0 <_free_r>:
 800e4c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4c2:	2900      	cmp	r1, #0
 800e4c4:	d044      	beq.n	800e550 <_free_r+0x90>
 800e4c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4ca:	9001      	str	r0, [sp, #4]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	f1a1 0404 	sub.w	r4, r1, #4
 800e4d2:	bfb8      	it	lt
 800e4d4:	18e4      	addlt	r4, r4, r3
 800e4d6:	f000 f913 	bl	800e700 <__malloc_lock>
 800e4da:	4a1e      	ldr	r2, [pc, #120]	; (800e554 <_free_r+0x94>)
 800e4dc:	9801      	ldr	r0, [sp, #4]
 800e4de:	6813      	ldr	r3, [r2, #0]
 800e4e0:	b933      	cbnz	r3, 800e4f0 <_free_r+0x30>
 800e4e2:	6063      	str	r3, [r4, #4]
 800e4e4:	6014      	str	r4, [r2, #0]
 800e4e6:	b003      	add	sp, #12
 800e4e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4ec:	f000 b90e 	b.w	800e70c <__malloc_unlock>
 800e4f0:	42a3      	cmp	r3, r4
 800e4f2:	d908      	bls.n	800e506 <_free_r+0x46>
 800e4f4:	6825      	ldr	r5, [r4, #0]
 800e4f6:	1961      	adds	r1, r4, r5
 800e4f8:	428b      	cmp	r3, r1
 800e4fa:	bf01      	itttt	eq
 800e4fc:	6819      	ldreq	r1, [r3, #0]
 800e4fe:	685b      	ldreq	r3, [r3, #4]
 800e500:	1949      	addeq	r1, r1, r5
 800e502:	6021      	streq	r1, [r4, #0]
 800e504:	e7ed      	b.n	800e4e2 <_free_r+0x22>
 800e506:	461a      	mov	r2, r3
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	b10b      	cbz	r3, 800e510 <_free_r+0x50>
 800e50c:	42a3      	cmp	r3, r4
 800e50e:	d9fa      	bls.n	800e506 <_free_r+0x46>
 800e510:	6811      	ldr	r1, [r2, #0]
 800e512:	1855      	adds	r5, r2, r1
 800e514:	42a5      	cmp	r5, r4
 800e516:	d10b      	bne.n	800e530 <_free_r+0x70>
 800e518:	6824      	ldr	r4, [r4, #0]
 800e51a:	4421      	add	r1, r4
 800e51c:	1854      	adds	r4, r2, r1
 800e51e:	42a3      	cmp	r3, r4
 800e520:	6011      	str	r1, [r2, #0]
 800e522:	d1e0      	bne.n	800e4e6 <_free_r+0x26>
 800e524:	681c      	ldr	r4, [r3, #0]
 800e526:	685b      	ldr	r3, [r3, #4]
 800e528:	6053      	str	r3, [r2, #4]
 800e52a:	4421      	add	r1, r4
 800e52c:	6011      	str	r1, [r2, #0]
 800e52e:	e7da      	b.n	800e4e6 <_free_r+0x26>
 800e530:	d902      	bls.n	800e538 <_free_r+0x78>
 800e532:	230c      	movs	r3, #12
 800e534:	6003      	str	r3, [r0, #0]
 800e536:	e7d6      	b.n	800e4e6 <_free_r+0x26>
 800e538:	6825      	ldr	r5, [r4, #0]
 800e53a:	1961      	adds	r1, r4, r5
 800e53c:	428b      	cmp	r3, r1
 800e53e:	bf04      	itt	eq
 800e540:	6819      	ldreq	r1, [r3, #0]
 800e542:	685b      	ldreq	r3, [r3, #4]
 800e544:	6063      	str	r3, [r4, #4]
 800e546:	bf04      	itt	eq
 800e548:	1949      	addeq	r1, r1, r5
 800e54a:	6021      	streq	r1, [r4, #0]
 800e54c:	6054      	str	r4, [r2, #4]
 800e54e:	e7ca      	b.n	800e4e6 <_free_r+0x26>
 800e550:	b003      	add	sp, #12
 800e552:	bd30      	pop	{r4, r5, pc}
 800e554:	200055e8 	.word	0x200055e8

0800e558 <sbrk_aligned>:
 800e558:	b570      	push	{r4, r5, r6, lr}
 800e55a:	4e0e      	ldr	r6, [pc, #56]	; (800e594 <sbrk_aligned+0x3c>)
 800e55c:	460c      	mov	r4, r1
 800e55e:	6831      	ldr	r1, [r6, #0]
 800e560:	4605      	mov	r5, r0
 800e562:	b911      	cbnz	r1, 800e56a <sbrk_aligned+0x12>
 800e564:	f000 f8bc 	bl	800e6e0 <_sbrk_r>
 800e568:	6030      	str	r0, [r6, #0]
 800e56a:	4621      	mov	r1, r4
 800e56c:	4628      	mov	r0, r5
 800e56e:	f000 f8b7 	bl	800e6e0 <_sbrk_r>
 800e572:	1c43      	adds	r3, r0, #1
 800e574:	d00a      	beq.n	800e58c <sbrk_aligned+0x34>
 800e576:	1cc4      	adds	r4, r0, #3
 800e578:	f024 0403 	bic.w	r4, r4, #3
 800e57c:	42a0      	cmp	r0, r4
 800e57e:	d007      	beq.n	800e590 <sbrk_aligned+0x38>
 800e580:	1a21      	subs	r1, r4, r0
 800e582:	4628      	mov	r0, r5
 800e584:	f000 f8ac 	bl	800e6e0 <_sbrk_r>
 800e588:	3001      	adds	r0, #1
 800e58a:	d101      	bne.n	800e590 <sbrk_aligned+0x38>
 800e58c:	f04f 34ff 	mov.w	r4, #4294967295
 800e590:	4620      	mov	r0, r4
 800e592:	bd70      	pop	{r4, r5, r6, pc}
 800e594:	200055ec 	.word	0x200055ec

0800e598 <_malloc_r>:
 800e598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e59c:	1ccd      	adds	r5, r1, #3
 800e59e:	f025 0503 	bic.w	r5, r5, #3
 800e5a2:	3508      	adds	r5, #8
 800e5a4:	2d0c      	cmp	r5, #12
 800e5a6:	bf38      	it	cc
 800e5a8:	250c      	movcc	r5, #12
 800e5aa:	2d00      	cmp	r5, #0
 800e5ac:	4607      	mov	r7, r0
 800e5ae:	db01      	blt.n	800e5b4 <_malloc_r+0x1c>
 800e5b0:	42a9      	cmp	r1, r5
 800e5b2:	d905      	bls.n	800e5c0 <_malloc_r+0x28>
 800e5b4:	230c      	movs	r3, #12
 800e5b6:	603b      	str	r3, [r7, #0]
 800e5b8:	2600      	movs	r6, #0
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c0:	4e2e      	ldr	r6, [pc, #184]	; (800e67c <_malloc_r+0xe4>)
 800e5c2:	f000 f89d 	bl	800e700 <__malloc_lock>
 800e5c6:	6833      	ldr	r3, [r6, #0]
 800e5c8:	461c      	mov	r4, r3
 800e5ca:	bb34      	cbnz	r4, 800e61a <_malloc_r+0x82>
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	4638      	mov	r0, r7
 800e5d0:	f7ff ffc2 	bl	800e558 <sbrk_aligned>
 800e5d4:	1c43      	adds	r3, r0, #1
 800e5d6:	4604      	mov	r4, r0
 800e5d8:	d14d      	bne.n	800e676 <_malloc_r+0xde>
 800e5da:	6834      	ldr	r4, [r6, #0]
 800e5dc:	4626      	mov	r6, r4
 800e5de:	2e00      	cmp	r6, #0
 800e5e0:	d140      	bne.n	800e664 <_malloc_r+0xcc>
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	4631      	mov	r1, r6
 800e5e6:	4638      	mov	r0, r7
 800e5e8:	eb04 0803 	add.w	r8, r4, r3
 800e5ec:	f000 f878 	bl	800e6e0 <_sbrk_r>
 800e5f0:	4580      	cmp	r8, r0
 800e5f2:	d13a      	bne.n	800e66a <_malloc_r+0xd2>
 800e5f4:	6821      	ldr	r1, [r4, #0]
 800e5f6:	3503      	adds	r5, #3
 800e5f8:	1a6d      	subs	r5, r5, r1
 800e5fa:	f025 0503 	bic.w	r5, r5, #3
 800e5fe:	3508      	adds	r5, #8
 800e600:	2d0c      	cmp	r5, #12
 800e602:	bf38      	it	cc
 800e604:	250c      	movcc	r5, #12
 800e606:	4629      	mov	r1, r5
 800e608:	4638      	mov	r0, r7
 800e60a:	f7ff ffa5 	bl	800e558 <sbrk_aligned>
 800e60e:	3001      	adds	r0, #1
 800e610:	d02b      	beq.n	800e66a <_malloc_r+0xd2>
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	442b      	add	r3, r5
 800e616:	6023      	str	r3, [r4, #0]
 800e618:	e00e      	b.n	800e638 <_malloc_r+0xa0>
 800e61a:	6822      	ldr	r2, [r4, #0]
 800e61c:	1b52      	subs	r2, r2, r5
 800e61e:	d41e      	bmi.n	800e65e <_malloc_r+0xc6>
 800e620:	2a0b      	cmp	r2, #11
 800e622:	d916      	bls.n	800e652 <_malloc_r+0xba>
 800e624:	1961      	adds	r1, r4, r5
 800e626:	42a3      	cmp	r3, r4
 800e628:	6025      	str	r5, [r4, #0]
 800e62a:	bf18      	it	ne
 800e62c:	6059      	strne	r1, [r3, #4]
 800e62e:	6863      	ldr	r3, [r4, #4]
 800e630:	bf08      	it	eq
 800e632:	6031      	streq	r1, [r6, #0]
 800e634:	5162      	str	r2, [r4, r5]
 800e636:	604b      	str	r3, [r1, #4]
 800e638:	4638      	mov	r0, r7
 800e63a:	f104 060b 	add.w	r6, r4, #11
 800e63e:	f000 f865 	bl	800e70c <__malloc_unlock>
 800e642:	f026 0607 	bic.w	r6, r6, #7
 800e646:	1d23      	adds	r3, r4, #4
 800e648:	1af2      	subs	r2, r6, r3
 800e64a:	d0b6      	beq.n	800e5ba <_malloc_r+0x22>
 800e64c:	1b9b      	subs	r3, r3, r6
 800e64e:	50a3      	str	r3, [r4, r2]
 800e650:	e7b3      	b.n	800e5ba <_malloc_r+0x22>
 800e652:	6862      	ldr	r2, [r4, #4]
 800e654:	42a3      	cmp	r3, r4
 800e656:	bf0c      	ite	eq
 800e658:	6032      	streq	r2, [r6, #0]
 800e65a:	605a      	strne	r2, [r3, #4]
 800e65c:	e7ec      	b.n	800e638 <_malloc_r+0xa0>
 800e65e:	4623      	mov	r3, r4
 800e660:	6864      	ldr	r4, [r4, #4]
 800e662:	e7b2      	b.n	800e5ca <_malloc_r+0x32>
 800e664:	4634      	mov	r4, r6
 800e666:	6876      	ldr	r6, [r6, #4]
 800e668:	e7b9      	b.n	800e5de <_malloc_r+0x46>
 800e66a:	230c      	movs	r3, #12
 800e66c:	603b      	str	r3, [r7, #0]
 800e66e:	4638      	mov	r0, r7
 800e670:	f000 f84c 	bl	800e70c <__malloc_unlock>
 800e674:	e7a1      	b.n	800e5ba <_malloc_r+0x22>
 800e676:	6025      	str	r5, [r4, #0]
 800e678:	e7de      	b.n	800e638 <_malloc_r+0xa0>
 800e67a:	bf00      	nop
 800e67c:	200055e8 	.word	0x200055e8

0800e680 <_realloc_r>:
 800e680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e684:	4680      	mov	r8, r0
 800e686:	4614      	mov	r4, r2
 800e688:	460e      	mov	r6, r1
 800e68a:	b921      	cbnz	r1, 800e696 <_realloc_r+0x16>
 800e68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e690:	4611      	mov	r1, r2
 800e692:	f7ff bf81 	b.w	800e598 <_malloc_r>
 800e696:	b92a      	cbnz	r2, 800e6a4 <_realloc_r+0x24>
 800e698:	f7ff ff12 	bl	800e4c0 <_free_r>
 800e69c:	4625      	mov	r5, r4
 800e69e:	4628      	mov	r0, r5
 800e6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a4:	f000 f838 	bl	800e718 <_malloc_usable_size_r>
 800e6a8:	4284      	cmp	r4, r0
 800e6aa:	4607      	mov	r7, r0
 800e6ac:	d802      	bhi.n	800e6b4 <_realloc_r+0x34>
 800e6ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e6b2:	d812      	bhi.n	800e6da <_realloc_r+0x5a>
 800e6b4:	4621      	mov	r1, r4
 800e6b6:	4640      	mov	r0, r8
 800e6b8:	f7ff ff6e 	bl	800e598 <_malloc_r>
 800e6bc:	4605      	mov	r5, r0
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d0ed      	beq.n	800e69e <_realloc_r+0x1e>
 800e6c2:	42bc      	cmp	r4, r7
 800e6c4:	4622      	mov	r2, r4
 800e6c6:	4631      	mov	r1, r6
 800e6c8:	bf28      	it	cs
 800e6ca:	463a      	movcs	r2, r7
 800e6cc:	f7ff fbb8 	bl	800de40 <memcpy>
 800e6d0:	4631      	mov	r1, r6
 800e6d2:	4640      	mov	r0, r8
 800e6d4:	f7ff fef4 	bl	800e4c0 <_free_r>
 800e6d8:	e7e1      	b.n	800e69e <_realloc_r+0x1e>
 800e6da:	4635      	mov	r5, r6
 800e6dc:	e7df      	b.n	800e69e <_realloc_r+0x1e>
	...

0800e6e0 <_sbrk_r>:
 800e6e0:	b538      	push	{r3, r4, r5, lr}
 800e6e2:	4d06      	ldr	r5, [pc, #24]	; (800e6fc <_sbrk_r+0x1c>)
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	4604      	mov	r4, r0
 800e6e8:	4608      	mov	r0, r1
 800e6ea:	602b      	str	r3, [r5, #0]
 800e6ec:	f7f5 f99e 	bl	8003a2c <_sbrk>
 800e6f0:	1c43      	adds	r3, r0, #1
 800e6f2:	d102      	bne.n	800e6fa <_sbrk_r+0x1a>
 800e6f4:	682b      	ldr	r3, [r5, #0]
 800e6f6:	b103      	cbz	r3, 800e6fa <_sbrk_r+0x1a>
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	bd38      	pop	{r3, r4, r5, pc}
 800e6fc:	200055f0 	.word	0x200055f0

0800e700 <__malloc_lock>:
 800e700:	4801      	ldr	r0, [pc, #4]	; (800e708 <__malloc_lock+0x8>)
 800e702:	f000 b811 	b.w	800e728 <__retarget_lock_acquire_recursive>
 800e706:	bf00      	nop
 800e708:	200055f4 	.word	0x200055f4

0800e70c <__malloc_unlock>:
 800e70c:	4801      	ldr	r0, [pc, #4]	; (800e714 <__malloc_unlock+0x8>)
 800e70e:	f000 b80c 	b.w	800e72a <__retarget_lock_release_recursive>
 800e712:	bf00      	nop
 800e714:	200055f4 	.word	0x200055f4

0800e718 <_malloc_usable_size_r>:
 800e718:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e71c:	1f18      	subs	r0, r3, #4
 800e71e:	2b00      	cmp	r3, #0
 800e720:	bfbc      	itt	lt
 800e722:	580b      	ldrlt	r3, [r1, r0]
 800e724:	18c0      	addlt	r0, r0, r3
 800e726:	4770      	bx	lr

0800e728 <__retarget_lock_acquire_recursive>:
 800e728:	4770      	bx	lr

0800e72a <__retarget_lock_release_recursive>:
 800e72a:	4770      	bx	lr
 800e72c:	0000      	movs	r0, r0
	...

0800e730 <sin>:
 800e730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e732:	ec53 2b10 	vmov	r2, r3, d0
 800e736:	4828      	ldr	r0, [pc, #160]	; (800e7d8 <sin+0xa8>)
 800e738:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e73c:	4281      	cmp	r1, r0
 800e73e:	dc07      	bgt.n	800e750 <sin+0x20>
 800e740:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e7d0 <sin+0xa0>
 800e744:	2000      	movs	r0, #0
 800e746:	b005      	add	sp, #20
 800e748:	f85d eb04 	ldr.w	lr, [sp], #4
 800e74c:	f000 bf5c 	b.w	800f608 <__kernel_sin>
 800e750:	4822      	ldr	r0, [pc, #136]	; (800e7dc <sin+0xac>)
 800e752:	4281      	cmp	r1, r0
 800e754:	dd09      	ble.n	800e76a <sin+0x3a>
 800e756:	ee10 0a10 	vmov	r0, s0
 800e75a:	4619      	mov	r1, r3
 800e75c:	f7f1 ff24 	bl	80005a8 <__aeabi_dsub>
 800e760:	ec41 0b10 	vmov	d0, r0, r1
 800e764:	b005      	add	sp, #20
 800e766:	f85d fb04 	ldr.w	pc, [sp], #4
 800e76a:	4668      	mov	r0, sp
 800e76c:	f000 f924 	bl	800e9b8 <__ieee754_rem_pio2>
 800e770:	f000 0003 	and.w	r0, r0, #3
 800e774:	2801      	cmp	r0, #1
 800e776:	d00c      	beq.n	800e792 <sin+0x62>
 800e778:	2802      	cmp	r0, #2
 800e77a:	d011      	beq.n	800e7a0 <sin+0x70>
 800e77c:	b9f0      	cbnz	r0, 800e7bc <sin+0x8c>
 800e77e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e782:	ed9d 0b00 	vldr	d0, [sp]
 800e786:	2001      	movs	r0, #1
 800e788:	f000 ff3e 	bl	800f608 <__kernel_sin>
 800e78c:	ec51 0b10 	vmov	r0, r1, d0
 800e790:	e7e6      	b.n	800e760 <sin+0x30>
 800e792:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e796:	ed9d 0b00 	vldr	d0, [sp]
 800e79a:	f000 fb1d 	bl	800edd8 <__kernel_cos>
 800e79e:	e7f5      	b.n	800e78c <sin+0x5c>
 800e7a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e7a4:	ed9d 0b00 	vldr	d0, [sp]
 800e7a8:	2001      	movs	r0, #1
 800e7aa:	f000 ff2d 	bl	800f608 <__kernel_sin>
 800e7ae:	ec53 2b10 	vmov	r2, r3, d0
 800e7b2:	ee10 0a10 	vmov	r0, s0
 800e7b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e7ba:	e7d1      	b.n	800e760 <sin+0x30>
 800e7bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e7c0:	ed9d 0b00 	vldr	d0, [sp]
 800e7c4:	f000 fb08 	bl	800edd8 <__kernel_cos>
 800e7c8:	e7f1      	b.n	800e7ae <sin+0x7e>
 800e7ca:	bf00      	nop
 800e7cc:	f3af 8000 	nop.w
	...
 800e7d8:	3fe921fb 	.word	0x3fe921fb
 800e7dc:	7fefffff 	.word	0x7fefffff

0800e7e0 <atan2>:
 800e7e0:	f000 b81e 	b.w	800e820 <__ieee754_atan2>

0800e7e4 <sqrtf>:
 800e7e4:	b508      	push	{r3, lr}
 800e7e6:	ed2d 8b02 	vpush	{d8}
 800e7ea:	eeb0 8a40 	vmov.f32	s16, s0
 800e7ee:	f000 faef 	bl	800edd0 <__ieee754_sqrtf>
 800e7f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800e7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fa:	d60c      	bvs.n	800e816 <sqrtf+0x32>
 800e7fc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e81c <sqrtf+0x38>
 800e800:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e808:	d505      	bpl.n	800e816 <sqrtf+0x32>
 800e80a:	f7ff faef 	bl	800ddec <__errno>
 800e80e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e812:	2321      	movs	r3, #33	; 0x21
 800e814:	6003      	str	r3, [r0, #0]
 800e816:	ecbd 8b02 	vpop	{d8}
 800e81a:	bd08      	pop	{r3, pc}
 800e81c:	00000000 	.word	0x00000000

0800e820 <__ieee754_atan2>:
 800e820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e824:	ec57 6b11 	vmov	r6, r7, d1
 800e828:	4273      	negs	r3, r6
 800e82a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e9b0 <__ieee754_atan2+0x190>
 800e82e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e832:	4333      	orrs	r3, r6
 800e834:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e838:	4573      	cmp	r3, lr
 800e83a:	ec51 0b10 	vmov	r0, r1, d0
 800e83e:	ee11 8a10 	vmov	r8, s2
 800e842:	d80a      	bhi.n	800e85a <__ieee754_atan2+0x3a>
 800e844:	4244      	negs	r4, r0
 800e846:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e84a:	4304      	orrs	r4, r0
 800e84c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e850:	4574      	cmp	r4, lr
 800e852:	ee10 9a10 	vmov	r9, s0
 800e856:	468c      	mov	ip, r1
 800e858:	d907      	bls.n	800e86a <__ieee754_atan2+0x4a>
 800e85a:	4632      	mov	r2, r6
 800e85c:	463b      	mov	r3, r7
 800e85e:	f7f1 fea5 	bl	80005ac <__adddf3>
 800e862:	ec41 0b10 	vmov	d0, r0, r1
 800e866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e86a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e86e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e872:	4334      	orrs	r4, r6
 800e874:	d103      	bne.n	800e87e <__ieee754_atan2+0x5e>
 800e876:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e87a:	f000 bf85 	b.w	800f788 <atan>
 800e87e:	17bc      	asrs	r4, r7, #30
 800e880:	f004 0402 	and.w	r4, r4, #2
 800e884:	ea53 0909 	orrs.w	r9, r3, r9
 800e888:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e88c:	d107      	bne.n	800e89e <__ieee754_atan2+0x7e>
 800e88e:	2c02      	cmp	r4, #2
 800e890:	d060      	beq.n	800e954 <__ieee754_atan2+0x134>
 800e892:	2c03      	cmp	r4, #3
 800e894:	d1e5      	bne.n	800e862 <__ieee754_atan2+0x42>
 800e896:	a142      	add	r1, pc, #264	; (adr r1, 800e9a0 <__ieee754_atan2+0x180>)
 800e898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e89c:	e7e1      	b.n	800e862 <__ieee754_atan2+0x42>
 800e89e:	ea52 0808 	orrs.w	r8, r2, r8
 800e8a2:	d106      	bne.n	800e8b2 <__ieee754_atan2+0x92>
 800e8a4:	f1bc 0f00 	cmp.w	ip, #0
 800e8a8:	da5f      	bge.n	800e96a <__ieee754_atan2+0x14a>
 800e8aa:	a13f      	add	r1, pc, #252	; (adr r1, 800e9a8 <__ieee754_atan2+0x188>)
 800e8ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8b0:	e7d7      	b.n	800e862 <__ieee754_atan2+0x42>
 800e8b2:	4572      	cmp	r2, lr
 800e8b4:	d10f      	bne.n	800e8d6 <__ieee754_atan2+0xb6>
 800e8b6:	4293      	cmp	r3, r2
 800e8b8:	f104 34ff 	add.w	r4, r4, #4294967295
 800e8bc:	d107      	bne.n	800e8ce <__ieee754_atan2+0xae>
 800e8be:	2c02      	cmp	r4, #2
 800e8c0:	d84c      	bhi.n	800e95c <__ieee754_atan2+0x13c>
 800e8c2:	4b35      	ldr	r3, [pc, #212]	; (800e998 <__ieee754_atan2+0x178>)
 800e8c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e8c8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e8cc:	e7c9      	b.n	800e862 <__ieee754_atan2+0x42>
 800e8ce:	2c02      	cmp	r4, #2
 800e8d0:	d848      	bhi.n	800e964 <__ieee754_atan2+0x144>
 800e8d2:	4b32      	ldr	r3, [pc, #200]	; (800e99c <__ieee754_atan2+0x17c>)
 800e8d4:	e7f6      	b.n	800e8c4 <__ieee754_atan2+0xa4>
 800e8d6:	4573      	cmp	r3, lr
 800e8d8:	d0e4      	beq.n	800e8a4 <__ieee754_atan2+0x84>
 800e8da:	1a9b      	subs	r3, r3, r2
 800e8dc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e8e0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e8e4:	da1e      	bge.n	800e924 <__ieee754_atan2+0x104>
 800e8e6:	2f00      	cmp	r7, #0
 800e8e8:	da01      	bge.n	800e8ee <__ieee754_atan2+0xce>
 800e8ea:	323c      	adds	r2, #60	; 0x3c
 800e8ec:	db1e      	blt.n	800e92c <__ieee754_atan2+0x10c>
 800e8ee:	4632      	mov	r2, r6
 800e8f0:	463b      	mov	r3, r7
 800e8f2:	f7f2 f93b 	bl	8000b6c <__aeabi_ddiv>
 800e8f6:	ec41 0b10 	vmov	d0, r0, r1
 800e8fa:	f001 f8e5 	bl	800fac8 <fabs>
 800e8fe:	f000 ff43 	bl	800f788 <atan>
 800e902:	ec51 0b10 	vmov	r0, r1, d0
 800e906:	2c01      	cmp	r4, #1
 800e908:	d013      	beq.n	800e932 <__ieee754_atan2+0x112>
 800e90a:	2c02      	cmp	r4, #2
 800e90c:	d015      	beq.n	800e93a <__ieee754_atan2+0x11a>
 800e90e:	2c00      	cmp	r4, #0
 800e910:	d0a7      	beq.n	800e862 <__ieee754_atan2+0x42>
 800e912:	a319      	add	r3, pc, #100	; (adr r3, 800e978 <__ieee754_atan2+0x158>)
 800e914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e918:	f7f1 fe46 	bl	80005a8 <__aeabi_dsub>
 800e91c:	a318      	add	r3, pc, #96	; (adr r3, 800e980 <__ieee754_atan2+0x160>)
 800e91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e922:	e014      	b.n	800e94e <__ieee754_atan2+0x12e>
 800e924:	a118      	add	r1, pc, #96	; (adr r1, 800e988 <__ieee754_atan2+0x168>)
 800e926:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e92a:	e7ec      	b.n	800e906 <__ieee754_atan2+0xe6>
 800e92c:	2000      	movs	r0, #0
 800e92e:	2100      	movs	r1, #0
 800e930:	e7e9      	b.n	800e906 <__ieee754_atan2+0xe6>
 800e932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e936:	4619      	mov	r1, r3
 800e938:	e793      	b.n	800e862 <__ieee754_atan2+0x42>
 800e93a:	a30f      	add	r3, pc, #60	; (adr r3, 800e978 <__ieee754_atan2+0x158>)
 800e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e940:	f7f1 fe32 	bl	80005a8 <__aeabi_dsub>
 800e944:	4602      	mov	r2, r0
 800e946:	460b      	mov	r3, r1
 800e948:	a10d      	add	r1, pc, #52	; (adr r1, 800e980 <__ieee754_atan2+0x160>)
 800e94a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e94e:	f7f1 fe2b 	bl	80005a8 <__aeabi_dsub>
 800e952:	e786      	b.n	800e862 <__ieee754_atan2+0x42>
 800e954:	a10a      	add	r1, pc, #40	; (adr r1, 800e980 <__ieee754_atan2+0x160>)
 800e956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e95a:	e782      	b.n	800e862 <__ieee754_atan2+0x42>
 800e95c:	a10c      	add	r1, pc, #48	; (adr r1, 800e990 <__ieee754_atan2+0x170>)
 800e95e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e962:	e77e      	b.n	800e862 <__ieee754_atan2+0x42>
 800e964:	2000      	movs	r0, #0
 800e966:	2100      	movs	r1, #0
 800e968:	e77b      	b.n	800e862 <__ieee754_atan2+0x42>
 800e96a:	a107      	add	r1, pc, #28	; (adr r1, 800e988 <__ieee754_atan2+0x168>)
 800e96c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e970:	e777      	b.n	800e862 <__ieee754_atan2+0x42>
 800e972:	bf00      	nop
 800e974:	f3af 8000 	nop.w
 800e978:	33145c07 	.word	0x33145c07
 800e97c:	3ca1a626 	.word	0x3ca1a626
 800e980:	54442d18 	.word	0x54442d18
 800e984:	400921fb 	.word	0x400921fb
 800e988:	54442d18 	.word	0x54442d18
 800e98c:	3ff921fb 	.word	0x3ff921fb
 800e990:	54442d18 	.word	0x54442d18
 800e994:	3fe921fb 	.word	0x3fe921fb
 800e998:	080102d0 	.word	0x080102d0
 800e99c:	080102e8 	.word	0x080102e8
 800e9a0:	54442d18 	.word	0x54442d18
 800e9a4:	c00921fb 	.word	0xc00921fb
 800e9a8:	54442d18 	.word	0x54442d18
 800e9ac:	bff921fb 	.word	0xbff921fb
 800e9b0:	7ff00000 	.word	0x7ff00000
 800e9b4:	00000000 	.word	0x00000000

0800e9b8 <__ieee754_rem_pio2>:
 800e9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9bc:	ed2d 8b02 	vpush	{d8}
 800e9c0:	ec55 4b10 	vmov	r4, r5, d0
 800e9c4:	4bca      	ldr	r3, [pc, #808]	; (800ecf0 <__ieee754_rem_pio2+0x338>)
 800e9c6:	b08b      	sub	sp, #44	; 0x2c
 800e9c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e9cc:	4598      	cmp	r8, r3
 800e9ce:	4682      	mov	sl, r0
 800e9d0:	9502      	str	r5, [sp, #8]
 800e9d2:	dc08      	bgt.n	800e9e6 <__ieee754_rem_pio2+0x2e>
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	ed80 0b00 	vstr	d0, [r0]
 800e9dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e9e0:	f04f 0b00 	mov.w	fp, #0
 800e9e4:	e028      	b.n	800ea38 <__ieee754_rem_pio2+0x80>
 800e9e6:	4bc3      	ldr	r3, [pc, #780]	; (800ecf4 <__ieee754_rem_pio2+0x33c>)
 800e9e8:	4598      	cmp	r8, r3
 800e9ea:	dc78      	bgt.n	800eade <__ieee754_rem_pio2+0x126>
 800e9ec:	9b02      	ldr	r3, [sp, #8]
 800e9ee:	4ec2      	ldr	r6, [pc, #776]	; (800ecf8 <__ieee754_rem_pio2+0x340>)
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	ee10 0a10 	vmov	r0, s0
 800e9f6:	a3b0      	add	r3, pc, #704	; (adr r3, 800ecb8 <__ieee754_rem_pio2+0x300>)
 800e9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	dd39      	ble.n	800ea74 <__ieee754_rem_pio2+0xbc>
 800ea00:	f7f1 fdd2 	bl	80005a8 <__aeabi_dsub>
 800ea04:	45b0      	cmp	r8, r6
 800ea06:	4604      	mov	r4, r0
 800ea08:	460d      	mov	r5, r1
 800ea0a:	d01b      	beq.n	800ea44 <__ieee754_rem_pio2+0x8c>
 800ea0c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ecc0 <__ieee754_rem_pio2+0x308>)
 800ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea12:	f7f1 fdc9 	bl	80005a8 <__aeabi_dsub>
 800ea16:	4602      	mov	r2, r0
 800ea18:	460b      	mov	r3, r1
 800ea1a:	e9ca 2300 	strd	r2, r3, [sl]
 800ea1e:	4620      	mov	r0, r4
 800ea20:	4629      	mov	r1, r5
 800ea22:	f7f1 fdc1 	bl	80005a8 <__aeabi_dsub>
 800ea26:	a3a6      	add	r3, pc, #664	; (adr r3, 800ecc0 <__ieee754_rem_pio2+0x308>)
 800ea28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea2c:	f7f1 fdbc 	bl	80005a8 <__aeabi_dsub>
 800ea30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea34:	f04f 0b01 	mov.w	fp, #1
 800ea38:	4658      	mov	r0, fp
 800ea3a:	b00b      	add	sp, #44	; 0x2c
 800ea3c:	ecbd 8b02 	vpop	{d8}
 800ea40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea44:	a3a0      	add	r3, pc, #640	; (adr r3, 800ecc8 <__ieee754_rem_pio2+0x310>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	f7f1 fdad 	bl	80005a8 <__aeabi_dsub>
 800ea4e:	a3a0      	add	r3, pc, #640	; (adr r3, 800ecd0 <__ieee754_rem_pio2+0x318>)
 800ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea54:	4604      	mov	r4, r0
 800ea56:	460d      	mov	r5, r1
 800ea58:	f7f1 fda6 	bl	80005a8 <__aeabi_dsub>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	460b      	mov	r3, r1
 800ea60:	e9ca 2300 	strd	r2, r3, [sl]
 800ea64:	4620      	mov	r0, r4
 800ea66:	4629      	mov	r1, r5
 800ea68:	f7f1 fd9e 	bl	80005a8 <__aeabi_dsub>
 800ea6c:	a398      	add	r3, pc, #608	; (adr r3, 800ecd0 <__ieee754_rem_pio2+0x318>)
 800ea6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea72:	e7db      	b.n	800ea2c <__ieee754_rem_pio2+0x74>
 800ea74:	f7f1 fd9a 	bl	80005ac <__adddf3>
 800ea78:	45b0      	cmp	r8, r6
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	460d      	mov	r5, r1
 800ea7e:	d016      	beq.n	800eaae <__ieee754_rem_pio2+0xf6>
 800ea80:	a38f      	add	r3, pc, #572	; (adr r3, 800ecc0 <__ieee754_rem_pio2+0x308>)
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f7f1 fd91 	bl	80005ac <__adddf3>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	460b      	mov	r3, r1
 800ea8e:	e9ca 2300 	strd	r2, r3, [sl]
 800ea92:	4620      	mov	r0, r4
 800ea94:	4629      	mov	r1, r5
 800ea96:	f7f1 fd87 	bl	80005a8 <__aeabi_dsub>
 800ea9a:	a389      	add	r3, pc, #548	; (adr r3, 800ecc0 <__ieee754_rem_pio2+0x308>)
 800ea9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa0:	f7f1 fd84 	bl	80005ac <__adddf3>
 800eaa4:	f04f 3bff 	mov.w	fp, #4294967295
 800eaa8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eaac:	e7c4      	b.n	800ea38 <__ieee754_rem_pio2+0x80>
 800eaae:	a386      	add	r3, pc, #536	; (adr r3, 800ecc8 <__ieee754_rem_pio2+0x310>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	f7f1 fd7a 	bl	80005ac <__adddf3>
 800eab8:	a385      	add	r3, pc, #532	; (adr r3, 800ecd0 <__ieee754_rem_pio2+0x318>)
 800eaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eabe:	4604      	mov	r4, r0
 800eac0:	460d      	mov	r5, r1
 800eac2:	f7f1 fd73 	bl	80005ac <__adddf3>
 800eac6:	4602      	mov	r2, r0
 800eac8:	460b      	mov	r3, r1
 800eaca:	e9ca 2300 	strd	r2, r3, [sl]
 800eace:	4620      	mov	r0, r4
 800ead0:	4629      	mov	r1, r5
 800ead2:	f7f1 fd69 	bl	80005a8 <__aeabi_dsub>
 800ead6:	a37e      	add	r3, pc, #504	; (adr r3, 800ecd0 <__ieee754_rem_pio2+0x318>)
 800ead8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eadc:	e7e0      	b.n	800eaa0 <__ieee754_rem_pio2+0xe8>
 800eade:	4b87      	ldr	r3, [pc, #540]	; (800ecfc <__ieee754_rem_pio2+0x344>)
 800eae0:	4598      	cmp	r8, r3
 800eae2:	f300 80d9 	bgt.w	800ec98 <__ieee754_rem_pio2+0x2e0>
 800eae6:	f000 ffef 	bl	800fac8 <fabs>
 800eaea:	ec55 4b10 	vmov	r4, r5, d0
 800eaee:	ee10 0a10 	vmov	r0, s0
 800eaf2:	a379      	add	r3, pc, #484	; (adr r3, 800ecd8 <__ieee754_rem_pio2+0x320>)
 800eaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaf8:	4629      	mov	r1, r5
 800eafa:	f7f1 ff0d 	bl	8000918 <__aeabi_dmul>
 800eafe:	4b80      	ldr	r3, [pc, #512]	; (800ed00 <__ieee754_rem_pio2+0x348>)
 800eb00:	2200      	movs	r2, #0
 800eb02:	f7f1 fd53 	bl	80005ac <__adddf3>
 800eb06:	f7f2 f9a1 	bl	8000e4c <__aeabi_d2iz>
 800eb0a:	4683      	mov	fp, r0
 800eb0c:	f7f1 fe9a 	bl	8000844 <__aeabi_i2d>
 800eb10:	4602      	mov	r2, r0
 800eb12:	460b      	mov	r3, r1
 800eb14:	ec43 2b18 	vmov	d8, r2, r3
 800eb18:	a367      	add	r3, pc, #412	; (adr r3, 800ecb8 <__ieee754_rem_pio2+0x300>)
 800eb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1e:	f7f1 fefb 	bl	8000918 <__aeabi_dmul>
 800eb22:	4602      	mov	r2, r0
 800eb24:	460b      	mov	r3, r1
 800eb26:	4620      	mov	r0, r4
 800eb28:	4629      	mov	r1, r5
 800eb2a:	f7f1 fd3d 	bl	80005a8 <__aeabi_dsub>
 800eb2e:	a364      	add	r3, pc, #400	; (adr r3, 800ecc0 <__ieee754_rem_pio2+0x308>)
 800eb30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb34:	4606      	mov	r6, r0
 800eb36:	460f      	mov	r7, r1
 800eb38:	ec51 0b18 	vmov	r0, r1, d8
 800eb3c:	f7f1 feec 	bl	8000918 <__aeabi_dmul>
 800eb40:	f1bb 0f1f 	cmp.w	fp, #31
 800eb44:	4604      	mov	r4, r0
 800eb46:	460d      	mov	r5, r1
 800eb48:	dc0d      	bgt.n	800eb66 <__ieee754_rem_pio2+0x1ae>
 800eb4a:	4b6e      	ldr	r3, [pc, #440]	; (800ed04 <__ieee754_rem_pio2+0x34c>)
 800eb4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800eb50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb54:	4543      	cmp	r3, r8
 800eb56:	d006      	beq.n	800eb66 <__ieee754_rem_pio2+0x1ae>
 800eb58:	4622      	mov	r2, r4
 800eb5a:	462b      	mov	r3, r5
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	4639      	mov	r1, r7
 800eb60:	f7f1 fd22 	bl	80005a8 <__aeabi_dsub>
 800eb64:	e00f      	b.n	800eb86 <__ieee754_rem_pio2+0x1ce>
 800eb66:	462b      	mov	r3, r5
 800eb68:	4622      	mov	r2, r4
 800eb6a:	4630      	mov	r0, r6
 800eb6c:	4639      	mov	r1, r7
 800eb6e:	f7f1 fd1b 	bl	80005a8 <__aeabi_dsub>
 800eb72:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eb76:	9303      	str	r3, [sp, #12]
 800eb78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800eb80:	f1b8 0f10 	cmp.w	r8, #16
 800eb84:	dc02      	bgt.n	800eb8c <__ieee754_rem_pio2+0x1d4>
 800eb86:	e9ca 0100 	strd	r0, r1, [sl]
 800eb8a:	e039      	b.n	800ec00 <__ieee754_rem_pio2+0x248>
 800eb8c:	a34e      	add	r3, pc, #312	; (adr r3, 800ecc8 <__ieee754_rem_pio2+0x310>)
 800eb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb92:	ec51 0b18 	vmov	r0, r1, d8
 800eb96:	f7f1 febf 	bl	8000918 <__aeabi_dmul>
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	460d      	mov	r5, r1
 800eb9e:	4602      	mov	r2, r0
 800eba0:	460b      	mov	r3, r1
 800eba2:	4630      	mov	r0, r6
 800eba4:	4639      	mov	r1, r7
 800eba6:	f7f1 fcff 	bl	80005a8 <__aeabi_dsub>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	460b      	mov	r3, r1
 800ebae:	4680      	mov	r8, r0
 800ebb0:	4689      	mov	r9, r1
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	4639      	mov	r1, r7
 800ebb6:	f7f1 fcf7 	bl	80005a8 <__aeabi_dsub>
 800ebba:	4622      	mov	r2, r4
 800ebbc:	462b      	mov	r3, r5
 800ebbe:	f7f1 fcf3 	bl	80005a8 <__aeabi_dsub>
 800ebc2:	a343      	add	r3, pc, #268	; (adr r3, 800ecd0 <__ieee754_rem_pio2+0x318>)
 800ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc8:	4604      	mov	r4, r0
 800ebca:	460d      	mov	r5, r1
 800ebcc:	ec51 0b18 	vmov	r0, r1, d8
 800ebd0:	f7f1 fea2 	bl	8000918 <__aeabi_dmul>
 800ebd4:	4622      	mov	r2, r4
 800ebd6:	462b      	mov	r3, r5
 800ebd8:	f7f1 fce6 	bl	80005a8 <__aeabi_dsub>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	460b      	mov	r3, r1
 800ebe0:	4604      	mov	r4, r0
 800ebe2:	460d      	mov	r5, r1
 800ebe4:	4640      	mov	r0, r8
 800ebe6:	4649      	mov	r1, r9
 800ebe8:	f7f1 fcde 	bl	80005a8 <__aeabi_dsub>
 800ebec:	9a03      	ldr	r2, [sp, #12]
 800ebee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	2b31      	cmp	r3, #49	; 0x31
 800ebf6:	dc24      	bgt.n	800ec42 <__ieee754_rem_pio2+0x28a>
 800ebf8:	e9ca 0100 	strd	r0, r1, [sl]
 800ebfc:	4646      	mov	r6, r8
 800ebfe:	464f      	mov	r7, r9
 800ec00:	e9da 8900 	ldrd	r8, r9, [sl]
 800ec04:	4630      	mov	r0, r6
 800ec06:	4642      	mov	r2, r8
 800ec08:	464b      	mov	r3, r9
 800ec0a:	4639      	mov	r1, r7
 800ec0c:	f7f1 fccc 	bl	80005a8 <__aeabi_dsub>
 800ec10:	462b      	mov	r3, r5
 800ec12:	4622      	mov	r2, r4
 800ec14:	f7f1 fcc8 	bl	80005a8 <__aeabi_dsub>
 800ec18:	9b02      	ldr	r3, [sp, #8]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ec20:	f6bf af0a 	bge.w	800ea38 <__ieee754_rem_pio2+0x80>
 800ec24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ec28:	f8ca 3004 	str.w	r3, [sl, #4]
 800ec2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec30:	f8ca 8000 	str.w	r8, [sl]
 800ec34:	f8ca 0008 	str.w	r0, [sl, #8]
 800ec38:	f8ca 300c 	str.w	r3, [sl, #12]
 800ec3c:	f1cb 0b00 	rsb	fp, fp, #0
 800ec40:	e6fa      	b.n	800ea38 <__ieee754_rem_pio2+0x80>
 800ec42:	a327      	add	r3, pc, #156	; (adr r3, 800ece0 <__ieee754_rem_pio2+0x328>)
 800ec44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec48:	ec51 0b18 	vmov	r0, r1, d8
 800ec4c:	f7f1 fe64 	bl	8000918 <__aeabi_dmul>
 800ec50:	4604      	mov	r4, r0
 800ec52:	460d      	mov	r5, r1
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	4640      	mov	r0, r8
 800ec5a:	4649      	mov	r1, r9
 800ec5c:	f7f1 fca4 	bl	80005a8 <__aeabi_dsub>
 800ec60:	4602      	mov	r2, r0
 800ec62:	460b      	mov	r3, r1
 800ec64:	4606      	mov	r6, r0
 800ec66:	460f      	mov	r7, r1
 800ec68:	4640      	mov	r0, r8
 800ec6a:	4649      	mov	r1, r9
 800ec6c:	f7f1 fc9c 	bl	80005a8 <__aeabi_dsub>
 800ec70:	4622      	mov	r2, r4
 800ec72:	462b      	mov	r3, r5
 800ec74:	f7f1 fc98 	bl	80005a8 <__aeabi_dsub>
 800ec78:	a31b      	add	r3, pc, #108	; (adr r3, 800ece8 <__ieee754_rem_pio2+0x330>)
 800ec7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7e:	4604      	mov	r4, r0
 800ec80:	460d      	mov	r5, r1
 800ec82:	ec51 0b18 	vmov	r0, r1, d8
 800ec86:	f7f1 fe47 	bl	8000918 <__aeabi_dmul>
 800ec8a:	4622      	mov	r2, r4
 800ec8c:	462b      	mov	r3, r5
 800ec8e:	f7f1 fc8b 	bl	80005a8 <__aeabi_dsub>
 800ec92:	4604      	mov	r4, r0
 800ec94:	460d      	mov	r5, r1
 800ec96:	e75f      	b.n	800eb58 <__ieee754_rem_pio2+0x1a0>
 800ec98:	4b1b      	ldr	r3, [pc, #108]	; (800ed08 <__ieee754_rem_pio2+0x350>)
 800ec9a:	4598      	cmp	r8, r3
 800ec9c:	dd36      	ble.n	800ed0c <__ieee754_rem_pio2+0x354>
 800ec9e:	ee10 2a10 	vmov	r2, s0
 800eca2:	462b      	mov	r3, r5
 800eca4:	4620      	mov	r0, r4
 800eca6:	4629      	mov	r1, r5
 800eca8:	f7f1 fc7e 	bl	80005a8 <__aeabi_dsub>
 800ecac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ecb0:	e9ca 0100 	strd	r0, r1, [sl]
 800ecb4:	e694      	b.n	800e9e0 <__ieee754_rem_pio2+0x28>
 800ecb6:	bf00      	nop
 800ecb8:	54400000 	.word	0x54400000
 800ecbc:	3ff921fb 	.word	0x3ff921fb
 800ecc0:	1a626331 	.word	0x1a626331
 800ecc4:	3dd0b461 	.word	0x3dd0b461
 800ecc8:	1a600000 	.word	0x1a600000
 800eccc:	3dd0b461 	.word	0x3dd0b461
 800ecd0:	2e037073 	.word	0x2e037073
 800ecd4:	3ba3198a 	.word	0x3ba3198a
 800ecd8:	6dc9c883 	.word	0x6dc9c883
 800ecdc:	3fe45f30 	.word	0x3fe45f30
 800ece0:	2e000000 	.word	0x2e000000
 800ece4:	3ba3198a 	.word	0x3ba3198a
 800ece8:	252049c1 	.word	0x252049c1
 800ecec:	397b839a 	.word	0x397b839a
 800ecf0:	3fe921fb 	.word	0x3fe921fb
 800ecf4:	4002d97b 	.word	0x4002d97b
 800ecf8:	3ff921fb 	.word	0x3ff921fb
 800ecfc:	413921fb 	.word	0x413921fb
 800ed00:	3fe00000 	.word	0x3fe00000
 800ed04:	08010300 	.word	0x08010300
 800ed08:	7fefffff 	.word	0x7fefffff
 800ed0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ed10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ed14:	ee10 0a10 	vmov	r0, s0
 800ed18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ed1c:	ee10 6a10 	vmov	r6, s0
 800ed20:	460f      	mov	r7, r1
 800ed22:	f7f2 f893 	bl	8000e4c <__aeabi_d2iz>
 800ed26:	f7f1 fd8d 	bl	8000844 <__aeabi_i2d>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	4630      	mov	r0, r6
 800ed30:	4639      	mov	r1, r7
 800ed32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ed36:	f7f1 fc37 	bl	80005a8 <__aeabi_dsub>
 800ed3a:	4b23      	ldr	r3, [pc, #140]	; (800edc8 <__ieee754_rem_pio2+0x410>)
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	f7f1 fdeb 	bl	8000918 <__aeabi_dmul>
 800ed42:	460f      	mov	r7, r1
 800ed44:	4606      	mov	r6, r0
 800ed46:	f7f2 f881 	bl	8000e4c <__aeabi_d2iz>
 800ed4a:	f7f1 fd7b 	bl	8000844 <__aeabi_i2d>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	460b      	mov	r3, r1
 800ed52:	4630      	mov	r0, r6
 800ed54:	4639      	mov	r1, r7
 800ed56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed5a:	f7f1 fc25 	bl	80005a8 <__aeabi_dsub>
 800ed5e:	4b1a      	ldr	r3, [pc, #104]	; (800edc8 <__ieee754_rem_pio2+0x410>)
 800ed60:	2200      	movs	r2, #0
 800ed62:	f7f1 fdd9 	bl	8000918 <__aeabi_dmul>
 800ed66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ed6a:	ad04      	add	r5, sp, #16
 800ed6c:	f04f 0803 	mov.w	r8, #3
 800ed70:	46a9      	mov	r9, r5
 800ed72:	2600      	movs	r6, #0
 800ed74:	2700      	movs	r7, #0
 800ed76:	4632      	mov	r2, r6
 800ed78:	463b      	mov	r3, r7
 800ed7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800ed7e:	46c3      	mov	fp, r8
 800ed80:	3d08      	subs	r5, #8
 800ed82:	f108 38ff 	add.w	r8, r8, #4294967295
 800ed86:	f7f2 f82f 	bl	8000de8 <__aeabi_dcmpeq>
 800ed8a:	2800      	cmp	r0, #0
 800ed8c:	d1f3      	bne.n	800ed76 <__ieee754_rem_pio2+0x3be>
 800ed8e:	4b0f      	ldr	r3, [pc, #60]	; (800edcc <__ieee754_rem_pio2+0x414>)
 800ed90:	9301      	str	r3, [sp, #4]
 800ed92:	2302      	movs	r3, #2
 800ed94:	9300      	str	r3, [sp, #0]
 800ed96:	4622      	mov	r2, r4
 800ed98:	465b      	mov	r3, fp
 800ed9a:	4651      	mov	r1, sl
 800ed9c:	4648      	mov	r0, r9
 800ed9e:	f000 f8e3 	bl	800ef68 <__kernel_rem_pio2>
 800eda2:	9b02      	ldr	r3, [sp, #8]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	4683      	mov	fp, r0
 800eda8:	f6bf ae46 	bge.w	800ea38 <__ieee754_rem_pio2+0x80>
 800edac:	e9da 2100 	ldrd	r2, r1, [sl]
 800edb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edb4:	e9ca 2300 	strd	r2, r3, [sl]
 800edb8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800edbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edc0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800edc4:	e73a      	b.n	800ec3c <__ieee754_rem_pio2+0x284>
 800edc6:	bf00      	nop
 800edc8:	41700000 	.word	0x41700000
 800edcc:	08010380 	.word	0x08010380

0800edd0 <__ieee754_sqrtf>:
 800edd0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800edd4:	4770      	bx	lr
	...

0800edd8 <__kernel_cos>:
 800edd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eddc:	ec57 6b10 	vmov	r6, r7, d0
 800ede0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ede4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ede8:	ed8d 1b00 	vstr	d1, [sp]
 800edec:	da07      	bge.n	800edfe <__kernel_cos+0x26>
 800edee:	ee10 0a10 	vmov	r0, s0
 800edf2:	4639      	mov	r1, r7
 800edf4:	f7f2 f82a 	bl	8000e4c <__aeabi_d2iz>
 800edf8:	2800      	cmp	r0, #0
 800edfa:	f000 8088 	beq.w	800ef0e <__kernel_cos+0x136>
 800edfe:	4632      	mov	r2, r6
 800ee00:	463b      	mov	r3, r7
 800ee02:	4630      	mov	r0, r6
 800ee04:	4639      	mov	r1, r7
 800ee06:	f7f1 fd87 	bl	8000918 <__aeabi_dmul>
 800ee0a:	4b51      	ldr	r3, [pc, #324]	; (800ef50 <__kernel_cos+0x178>)
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	4604      	mov	r4, r0
 800ee10:	460d      	mov	r5, r1
 800ee12:	f7f1 fd81 	bl	8000918 <__aeabi_dmul>
 800ee16:	a340      	add	r3, pc, #256	; (adr r3, 800ef18 <__kernel_cos+0x140>)
 800ee18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee1c:	4682      	mov	sl, r0
 800ee1e:	468b      	mov	fp, r1
 800ee20:	4620      	mov	r0, r4
 800ee22:	4629      	mov	r1, r5
 800ee24:	f7f1 fd78 	bl	8000918 <__aeabi_dmul>
 800ee28:	a33d      	add	r3, pc, #244	; (adr r3, 800ef20 <__kernel_cos+0x148>)
 800ee2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee2e:	f7f1 fbbd 	bl	80005ac <__adddf3>
 800ee32:	4622      	mov	r2, r4
 800ee34:	462b      	mov	r3, r5
 800ee36:	f7f1 fd6f 	bl	8000918 <__aeabi_dmul>
 800ee3a:	a33b      	add	r3, pc, #236	; (adr r3, 800ef28 <__kernel_cos+0x150>)
 800ee3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee40:	f7f1 fbb2 	bl	80005a8 <__aeabi_dsub>
 800ee44:	4622      	mov	r2, r4
 800ee46:	462b      	mov	r3, r5
 800ee48:	f7f1 fd66 	bl	8000918 <__aeabi_dmul>
 800ee4c:	a338      	add	r3, pc, #224	; (adr r3, 800ef30 <__kernel_cos+0x158>)
 800ee4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee52:	f7f1 fbab 	bl	80005ac <__adddf3>
 800ee56:	4622      	mov	r2, r4
 800ee58:	462b      	mov	r3, r5
 800ee5a:	f7f1 fd5d 	bl	8000918 <__aeabi_dmul>
 800ee5e:	a336      	add	r3, pc, #216	; (adr r3, 800ef38 <__kernel_cos+0x160>)
 800ee60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee64:	f7f1 fba0 	bl	80005a8 <__aeabi_dsub>
 800ee68:	4622      	mov	r2, r4
 800ee6a:	462b      	mov	r3, r5
 800ee6c:	f7f1 fd54 	bl	8000918 <__aeabi_dmul>
 800ee70:	a333      	add	r3, pc, #204	; (adr r3, 800ef40 <__kernel_cos+0x168>)
 800ee72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee76:	f7f1 fb99 	bl	80005ac <__adddf3>
 800ee7a:	4622      	mov	r2, r4
 800ee7c:	462b      	mov	r3, r5
 800ee7e:	f7f1 fd4b 	bl	8000918 <__aeabi_dmul>
 800ee82:	4622      	mov	r2, r4
 800ee84:	462b      	mov	r3, r5
 800ee86:	f7f1 fd47 	bl	8000918 <__aeabi_dmul>
 800ee8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee8e:	4604      	mov	r4, r0
 800ee90:	460d      	mov	r5, r1
 800ee92:	4630      	mov	r0, r6
 800ee94:	4639      	mov	r1, r7
 800ee96:	f7f1 fd3f 	bl	8000918 <__aeabi_dmul>
 800ee9a:	460b      	mov	r3, r1
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	4629      	mov	r1, r5
 800eea0:	4620      	mov	r0, r4
 800eea2:	f7f1 fb81 	bl	80005a8 <__aeabi_dsub>
 800eea6:	4b2b      	ldr	r3, [pc, #172]	; (800ef54 <__kernel_cos+0x17c>)
 800eea8:	4598      	cmp	r8, r3
 800eeaa:	4606      	mov	r6, r0
 800eeac:	460f      	mov	r7, r1
 800eeae:	dc10      	bgt.n	800eed2 <__kernel_cos+0xfa>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	460b      	mov	r3, r1
 800eeb4:	4650      	mov	r0, sl
 800eeb6:	4659      	mov	r1, fp
 800eeb8:	f7f1 fb76 	bl	80005a8 <__aeabi_dsub>
 800eebc:	460b      	mov	r3, r1
 800eebe:	4926      	ldr	r1, [pc, #152]	; (800ef58 <__kernel_cos+0x180>)
 800eec0:	4602      	mov	r2, r0
 800eec2:	2000      	movs	r0, #0
 800eec4:	f7f1 fb70 	bl	80005a8 <__aeabi_dsub>
 800eec8:	ec41 0b10 	vmov	d0, r0, r1
 800eecc:	b003      	add	sp, #12
 800eece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed2:	4b22      	ldr	r3, [pc, #136]	; (800ef5c <__kernel_cos+0x184>)
 800eed4:	4920      	ldr	r1, [pc, #128]	; (800ef58 <__kernel_cos+0x180>)
 800eed6:	4598      	cmp	r8, r3
 800eed8:	bfcc      	ite	gt
 800eeda:	4d21      	ldrgt	r5, [pc, #132]	; (800ef60 <__kernel_cos+0x188>)
 800eedc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800eee0:	2400      	movs	r4, #0
 800eee2:	4622      	mov	r2, r4
 800eee4:	462b      	mov	r3, r5
 800eee6:	2000      	movs	r0, #0
 800eee8:	f7f1 fb5e 	bl	80005a8 <__aeabi_dsub>
 800eeec:	4622      	mov	r2, r4
 800eeee:	4680      	mov	r8, r0
 800eef0:	4689      	mov	r9, r1
 800eef2:	462b      	mov	r3, r5
 800eef4:	4650      	mov	r0, sl
 800eef6:	4659      	mov	r1, fp
 800eef8:	f7f1 fb56 	bl	80005a8 <__aeabi_dsub>
 800eefc:	4632      	mov	r2, r6
 800eefe:	463b      	mov	r3, r7
 800ef00:	f7f1 fb52 	bl	80005a8 <__aeabi_dsub>
 800ef04:	4602      	mov	r2, r0
 800ef06:	460b      	mov	r3, r1
 800ef08:	4640      	mov	r0, r8
 800ef0a:	4649      	mov	r1, r9
 800ef0c:	e7da      	b.n	800eec4 <__kernel_cos+0xec>
 800ef0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ef48 <__kernel_cos+0x170>
 800ef12:	e7db      	b.n	800eecc <__kernel_cos+0xf4>
 800ef14:	f3af 8000 	nop.w
 800ef18:	be8838d4 	.word	0xbe8838d4
 800ef1c:	bda8fae9 	.word	0xbda8fae9
 800ef20:	bdb4b1c4 	.word	0xbdb4b1c4
 800ef24:	3e21ee9e 	.word	0x3e21ee9e
 800ef28:	809c52ad 	.word	0x809c52ad
 800ef2c:	3e927e4f 	.word	0x3e927e4f
 800ef30:	19cb1590 	.word	0x19cb1590
 800ef34:	3efa01a0 	.word	0x3efa01a0
 800ef38:	16c15177 	.word	0x16c15177
 800ef3c:	3f56c16c 	.word	0x3f56c16c
 800ef40:	5555554c 	.word	0x5555554c
 800ef44:	3fa55555 	.word	0x3fa55555
 800ef48:	00000000 	.word	0x00000000
 800ef4c:	3ff00000 	.word	0x3ff00000
 800ef50:	3fe00000 	.word	0x3fe00000
 800ef54:	3fd33332 	.word	0x3fd33332
 800ef58:	3ff00000 	.word	0x3ff00000
 800ef5c:	3fe90000 	.word	0x3fe90000
 800ef60:	3fd20000 	.word	0x3fd20000
 800ef64:	00000000 	.word	0x00000000

0800ef68 <__kernel_rem_pio2>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	ed2d 8b02 	vpush	{d8}
 800ef70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ef74:	f112 0f14 	cmn.w	r2, #20
 800ef78:	9308      	str	r3, [sp, #32]
 800ef7a:	9101      	str	r1, [sp, #4]
 800ef7c:	4bc4      	ldr	r3, [pc, #784]	; (800f290 <__kernel_rem_pio2+0x328>)
 800ef7e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ef80:	900b      	str	r0, [sp, #44]	; 0x2c
 800ef82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ef86:	9302      	str	r3, [sp, #8]
 800ef88:	9b08      	ldr	r3, [sp, #32]
 800ef8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ef8e:	bfa8      	it	ge
 800ef90:	1ed4      	subge	r4, r2, #3
 800ef92:	9306      	str	r3, [sp, #24]
 800ef94:	bfb2      	itee	lt
 800ef96:	2400      	movlt	r4, #0
 800ef98:	2318      	movge	r3, #24
 800ef9a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ef9e:	f06f 0317 	mvn.w	r3, #23
 800efa2:	fb04 3303 	mla	r3, r4, r3, r3
 800efa6:	eb03 0a02 	add.w	sl, r3, r2
 800efaa:	9b02      	ldr	r3, [sp, #8]
 800efac:	9a06      	ldr	r2, [sp, #24]
 800efae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f280 <__kernel_rem_pio2+0x318>
 800efb2:	eb03 0802 	add.w	r8, r3, r2
 800efb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800efb8:	1aa7      	subs	r7, r4, r2
 800efba:	ae22      	add	r6, sp, #136	; 0x88
 800efbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800efc0:	2500      	movs	r5, #0
 800efc2:	4545      	cmp	r5, r8
 800efc4:	dd13      	ble.n	800efee <__kernel_rem_pio2+0x86>
 800efc6:	9b08      	ldr	r3, [sp, #32]
 800efc8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f280 <__kernel_rem_pio2+0x318>
 800efcc:	aa22      	add	r2, sp, #136	; 0x88
 800efce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800efd2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800efd6:	f04f 0800 	mov.w	r8, #0
 800efda:	9b02      	ldr	r3, [sp, #8]
 800efdc:	4598      	cmp	r8, r3
 800efde:	dc2f      	bgt.n	800f040 <__kernel_rem_pio2+0xd8>
 800efe0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800efe4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800efe8:	462f      	mov	r7, r5
 800efea:	2600      	movs	r6, #0
 800efec:	e01b      	b.n	800f026 <__kernel_rem_pio2+0xbe>
 800efee:	42ef      	cmn	r7, r5
 800eff0:	d407      	bmi.n	800f002 <__kernel_rem_pio2+0x9a>
 800eff2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800eff6:	f7f1 fc25 	bl	8000844 <__aeabi_i2d>
 800effa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800effe:	3501      	adds	r5, #1
 800f000:	e7df      	b.n	800efc2 <__kernel_rem_pio2+0x5a>
 800f002:	ec51 0b18 	vmov	r0, r1, d8
 800f006:	e7f8      	b.n	800effa <__kernel_rem_pio2+0x92>
 800f008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f00c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f010:	f7f1 fc82 	bl	8000918 <__aeabi_dmul>
 800f014:	4602      	mov	r2, r0
 800f016:	460b      	mov	r3, r1
 800f018:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f01c:	f7f1 fac6 	bl	80005ac <__adddf3>
 800f020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f024:	3601      	adds	r6, #1
 800f026:	9b06      	ldr	r3, [sp, #24]
 800f028:	429e      	cmp	r6, r3
 800f02a:	f1a7 0708 	sub.w	r7, r7, #8
 800f02e:	ddeb      	ble.n	800f008 <__kernel_rem_pio2+0xa0>
 800f030:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f034:	f108 0801 	add.w	r8, r8, #1
 800f038:	ecab 7b02 	vstmia	fp!, {d7}
 800f03c:	3508      	adds	r5, #8
 800f03e:	e7cc      	b.n	800efda <__kernel_rem_pio2+0x72>
 800f040:	9b02      	ldr	r3, [sp, #8]
 800f042:	aa0e      	add	r2, sp, #56	; 0x38
 800f044:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f048:	930d      	str	r3, [sp, #52]	; 0x34
 800f04a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f04c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f050:	9c02      	ldr	r4, [sp, #8]
 800f052:	930c      	str	r3, [sp, #48]	; 0x30
 800f054:	00e3      	lsls	r3, r4, #3
 800f056:	930a      	str	r3, [sp, #40]	; 0x28
 800f058:	ab9a      	add	r3, sp, #616	; 0x268
 800f05a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f05e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f062:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f066:	ab72      	add	r3, sp, #456	; 0x1c8
 800f068:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f06c:	46c3      	mov	fp, r8
 800f06e:	46a1      	mov	r9, r4
 800f070:	f1b9 0f00 	cmp.w	r9, #0
 800f074:	f1a5 0508 	sub.w	r5, r5, #8
 800f078:	dc77      	bgt.n	800f16a <__kernel_rem_pio2+0x202>
 800f07a:	ec47 6b10 	vmov	d0, r6, r7
 800f07e:	4650      	mov	r0, sl
 800f080:	f000 fdae 	bl	800fbe0 <scalbn>
 800f084:	ec57 6b10 	vmov	r6, r7, d0
 800f088:	2200      	movs	r2, #0
 800f08a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f08e:	ee10 0a10 	vmov	r0, s0
 800f092:	4639      	mov	r1, r7
 800f094:	f7f1 fc40 	bl	8000918 <__aeabi_dmul>
 800f098:	ec41 0b10 	vmov	d0, r0, r1
 800f09c:	f000 fd20 	bl	800fae0 <floor>
 800f0a0:	4b7c      	ldr	r3, [pc, #496]	; (800f294 <__kernel_rem_pio2+0x32c>)
 800f0a2:	ec51 0b10 	vmov	r0, r1, d0
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	f7f1 fc36 	bl	8000918 <__aeabi_dmul>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	4639      	mov	r1, r7
 800f0b4:	f7f1 fa78 	bl	80005a8 <__aeabi_dsub>
 800f0b8:	460f      	mov	r7, r1
 800f0ba:	4606      	mov	r6, r0
 800f0bc:	f7f1 fec6 	bl	8000e4c <__aeabi_d2iz>
 800f0c0:	9004      	str	r0, [sp, #16]
 800f0c2:	f7f1 fbbf 	bl	8000844 <__aeabi_i2d>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	4639      	mov	r1, r7
 800f0ce:	f7f1 fa6b 	bl	80005a8 <__aeabi_dsub>
 800f0d2:	f1ba 0f00 	cmp.w	sl, #0
 800f0d6:	4606      	mov	r6, r0
 800f0d8:	460f      	mov	r7, r1
 800f0da:	dd6d      	ble.n	800f1b8 <__kernel_rem_pio2+0x250>
 800f0dc:	1e62      	subs	r2, r4, #1
 800f0de:	ab0e      	add	r3, sp, #56	; 0x38
 800f0e0:	9d04      	ldr	r5, [sp, #16]
 800f0e2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f0e6:	f1ca 0118 	rsb	r1, sl, #24
 800f0ea:	fa40 f301 	asr.w	r3, r0, r1
 800f0ee:	441d      	add	r5, r3
 800f0f0:	408b      	lsls	r3, r1
 800f0f2:	1ac0      	subs	r0, r0, r3
 800f0f4:	ab0e      	add	r3, sp, #56	; 0x38
 800f0f6:	9504      	str	r5, [sp, #16]
 800f0f8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f0fc:	f1ca 0317 	rsb	r3, sl, #23
 800f100:	fa40 fb03 	asr.w	fp, r0, r3
 800f104:	f1bb 0f00 	cmp.w	fp, #0
 800f108:	dd65      	ble.n	800f1d6 <__kernel_rem_pio2+0x26e>
 800f10a:	9b04      	ldr	r3, [sp, #16]
 800f10c:	2200      	movs	r2, #0
 800f10e:	3301      	adds	r3, #1
 800f110:	9304      	str	r3, [sp, #16]
 800f112:	4615      	mov	r5, r2
 800f114:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f118:	4294      	cmp	r4, r2
 800f11a:	f300 809c 	bgt.w	800f256 <__kernel_rem_pio2+0x2ee>
 800f11e:	f1ba 0f00 	cmp.w	sl, #0
 800f122:	dd07      	ble.n	800f134 <__kernel_rem_pio2+0x1cc>
 800f124:	f1ba 0f01 	cmp.w	sl, #1
 800f128:	f000 80c0 	beq.w	800f2ac <__kernel_rem_pio2+0x344>
 800f12c:	f1ba 0f02 	cmp.w	sl, #2
 800f130:	f000 80c6 	beq.w	800f2c0 <__kernel_rem_pio2+0x358>
 800f134:	f1bb 0f02 	cmp.w	fp, #2
 800f138:	d14d      	bne.n	800f1d6 <__kernel_rem_pio2+0x26e>
 800f13a:	4632      	mov	r2, r6
 800f13c:	463b      	mov	r3, r7
 800f13e:	4956      	ldr	r1, [pc, #344]	; (800f298 <__kernel_rem_pio2+0x330>)
 800f140:	2000      	movs	r0, #0
 800f142:	f7f1 fa31 	bl	80005a8 <__aeabi_dsub>
 800f146:	4606      	mov	r6, r0
 800f148:	460f      	mov	r7, r1
 800f14a:	2d00      	cmp	r5, #0
 800f14c:	d043      	beq.n	800f1d6 <__kernel_rem_pio2+0x26e>
 800f14e:	4650      	mov	r0, sl
 800f150:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f288 <__kernel_rem_pio2+0x320>
 800f154:	f000 fd44 	bl	800fbe0 <scalbn>
 800f158:	4630      	mov	r0, r6
 800f15a:	4639      	mov	r1, r7
 800f15c:	ec53 2b10 	vmov	r2, r3, d0
 800f160:	f7f1 fa22 	bl	80005a8 <__aeabi_dsub>
 800f164:	4606      	mov	r6, r0
 800f166:	460f      	mov	r7, r1
 800f168:	e035      	b.n	800f1d6 <__kernel_rem_pio2+0x26e>
 800f16a:	4b4c      	ldr	r3, [pc, #304]	; (800f29c <__kernel_rem_pio2+0x334>)
 800f16c:	2200      	movs	r2, #0
 800f16e:	4630      	mov	r0, r6
 800f170:	4639      	mov	r1, r7
 800f172:	f7f1 fbd1 	bl	8000918 <__aeabi_dmul>
 800f176:	f7f1 fe69 	bl	8000e4c <__aeabi_d2iz>
 800f17a:	f7f1 fb63 	bl	8000844 <__aeabi_i2d>
 800f17e:	4602      	mov	r2, r0
 800f180:	460b      	mov	r3, r1
 800f182:	ec43 2b18 	vmov	d8, r2, r3
 800f186:	4b46      	ldr	r3, [pc, #280]	; (800f2a0 <__kernel_rem_pio2+0x338>)
 800f188:	2200      	movs	r2, #0
 800f18a:	f7f1 fbc5 	bl	8000918 <__aeabi_dmul>
 800f18e:	4602      	mov	r2, r0
 800f190:	460b      	mov	r3, r1
 800f192:	4630      	mov	r0, r6
 800f194:	4639      	mov	r1, r7
 800f196:	f7f1 fa07 	bl	80005a8 <__aeabi_dsub>
 800f19a:	f7f1 fe57 	bl	8000e4c <__aeabi_d2iz>
 800f19e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f1a2:	f84b 0b04 	str.w	r0, [fp], #4
 800f1a6:	ec51 0b18 	vmov	r0, r1, d8
 800f1aa:	f7f1 f9ff 	bl	80005ac <__adddf3>
 800f1ae:	f109 39ff 	add.w	r9, r9, #4294967295
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	460f      	mov	r7, r1
 800f1b6:	e75b      	b.n	800f070 <__kernel_rem_pio2+0x108>
 800f1b8:	d106      	bne.n	800f1c8 <__kernel_rem_pio2+0x260>
 800f1ba:	1e63      	subs	r3, r4, #1
 800f1bc:	aa0e      	add	r2, sp, #56	; 0x38
 800f1be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f1c2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f1c6:	e79d      	b.n	800f104 <__kernel_rem_pio2+0x19c>
 800f1c8:	4b36      	ldr	r3, [pc, #216]	; (800f2a4 <__kernel_rem_pio2+0x33c>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f7f1 fe2a 	bl	8000e24 <__aeabi_dcmpge>
 800f1d0:	2800      	cmp	r0, #0
 800f1d2:	d13d      	bne.n	800f250 <__kernel_rem_pio2+0x2e8>
 800f1d4:	4683      	mov	fp, r0
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	2300      	movs	r3, #0
 800f1da:	4630      	mov	r0, r6
 800f1dc:	4639      	mov	r1, r7
 800f1de:	f7f1 fe03 	bl	8000de8 <__aeabi_dcmpeq>
 800f1e2:	2800      	cmp	r0, #0
 800f1e4:	f000 80c0 	beq.w	800f368 <__kernel_rem_pio2+0x400>
 800f1e8:	1e65      	subs	r5, r4, #1
 800f1ea:	462b      	mov	r3, r5
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	9902      	ldr	r1, [sp, #8]
 800f1f0:	428b      	cmp	r3, r1
 800f1f2:	da6c      	bge.n	800f2ce <__kernel_rem_pio2+0x366>
 800f1f4:	2a00      	cmp	r2, #0
 800f1f6:	f000 8089 	beq.w	800f30c <__kernel_rem_pio2+0x3a4>
 800f1fa:	ab0e      	add	r3, sp, #56	; 0x38
 800f1fc:	f1aa 0a18 	sub.w	sl, sl, #24
 800f200:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f204:	2b00      	cmp	r3, #0
 800f206:	f000 80ad 	beq.w	800f364 <__kernel_rem_pio2+0x3fc>
 800f20a:	4650      	mov	r0, sl
 800f20c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f288 <__kernel_rem_pio2+0x320>
 800f210:	f000 fce6 	bl	800fbe0 <scalbn>
 800f214:	ab9a      	add	r3, sp, #616	; 0x268
 800f216:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f21a:	ec57 6b10 	vmov	r6, r7, d0
 800f21e:	00ec      	lsls	r4, r5, #3
 800f220:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f224:	46aa      	mov	sl, r5
 800f226:	f1ba 0f00 	cmp.w	sl, #0
 800f22a:	f280 80d6 	bge.w	800f3da <__kernel_rem_pio2+0x472>
 800f22e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f280 <__kernel_rem_pio2+0x318>
 800f232:	462e      	mov	r6, r5
 800f234:	2e00      	cmp	r6, #0
 800f236:	f2c0 8104 	blt.w	800f442 <__kernel_rem_pio2+0x4da>
 800f23a:	ab72      	add	r3, sp, #456	; 0x1c8
 800f23c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f240:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f2a8 <__kernel_rem_pio2+0x340>
 800f244:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f248:	f04f 0800 	mov.w	r8, #0
 800f24c:	1baf      	subs	r7, r5, r6
 800f24e:	e0ea      	b.n	800f426 <__kernel_rem_pio2+0x4be>
 800f250:	f04f 0b02 	mov.w	fp, #2
 800f254:	e759      	b.n	800f10a <__kernel_rem_pio2+0x1a2>
 800f256:	f8d8 3000 	ldr.w	r3, [r8]
 800f25a:	b955      	cbnz	r5, 800f272 <__kernel_rem_pio2+0x30a>
 800f25c:	b123      	cbz	r3, 800f268 <__kernel_rem_pio2+0x300>
 800f25e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f262:	f8c8 3000 	str.w	r3, [r8]
 800f266:	2301      	movs	r3, #1
 800f268:	3201      	adds	r2, #1
 800f26a:	f108 0804 	add.w	r8, r8, #4
 800f26e:	461d      	mov	r5, r3
 800f270:	e752      	b.n	800f118 <__kernel_rem_pio2+0x1b0>
 800f272:	1acb      	subs	r3, r1, r3
 800f274:	f8c8 3000 	str.w	r3, [r8]
 800f278:	462b      	mov	r3, r5
 800f27a:	e7f5      	b.n	800f268 <__kernel_rem_pio2+0x300>
 800f27c:	f3af 8000 	nop.w
	...
 800f28c:	3ff00000 	.word	0x3ff00000
 800f290:	080104c8 	.word	0x080104c8
 800f294:	40200000 	.word	0x40200000
 800f298:	3ff00000 	.word	0x3ff00000
 800f29c:	3e700000 	.word	0x3e700000
 800f2a0:	41700000 	.word	0x41700000
 800f2a4:	3fe00000 	.word	0x3fe00000
 800f2a8:	08010488 	.word	0x08010488
 800f2ac:	1e62      	subs	r2, r4, #1
 800f2ae:	ab0e      	add	r3, sp, #56	; 0x38
 800f2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f2b8:	a90e      	add	r1, sp, #56	; 0x38
 800f2ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f2be:	e739      	b.n	800f134 <__kernel_rem_pio2+0x1cc>
 800f2c0:	1e62      	subs	r2, r4, #1
 800f2c2:	ab0e      	add	r3, sp, #56	; 0x38
 800f2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f2cc:	e7f4      	b.n	800f2b8 <__kernel_rem_pio2+0x350>
 800f2ce:	a90e      	add	r1, sp, #56	; 0x38
 800f2d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	430a      	orrs	r2, r1
 800f2d8:	e789      	b.n	800f1ee <__kernel_rem_pio2+0x286>
 800f2da:	3301      	adds	r3, #1
 800f2dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f2e0:	2900      	cmp	r1, #0
 800f2e2:	d0fa      	beq.n	800f2da <__kernel_rem_pio2+0x372>
 800f2e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2e6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f2ea:	446a      	add	r2, sp
 800f2ec:	3a98      	subs	r2, #152	; 0x98
 800f2ee:	920a      	str	r2, [sp, #40]	; 0x28
 800f2f0:	9a08      	ldr	r2, [sp, #32]
 800f2f2:	18e3      	adds	r3, r4, r3
 800f2f4:	18a5      	adds	r5, r4, r2
 800f2f6:	aa22      	add	r2, sp, #136	; 0x88
 800f2f8:	f104 0801 	add.w	r8, r4, #1
 800f2fc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f300:	9304      	str	r3, [sp, #16]
 800f302:	9b04      	ldr	r3, [sp, #16]
 800f304:	4543      	cmp	r3, r8
 800f306:	da04      	bge.n	800f312 <__kernel_rem_pio2+0x3aa>
 800f308:	461c      	mov	r4, r3
 800f30a:	e6a3      	b.n	800f054 <__kernel_rem_pio2+0xec>
 800f30c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f30e:	2301      	movs	r3, #1
 800f310:	e7e4      	b.n	800f2dc <__kernel_rem_pio2+0x374>
 800f312:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f314:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f318:	f7f1 fa94 	bl	8000844 <__aeabi_i2d>
 800f31c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f322:	46ab      	mov	fp, r5
 800f324:	461c      	mov	r4, r3
 800f326:	f04f 0900 	mov.w	r9, #0
 800f32a:	2600      	movs	r6, #0
 800f32c:	2700      	movs	r7, #0
 800f32e:	9b06      	ldr	r3, [sp, #24]
 800f330:	4599      	cmp	r9, r3
 800f332:	dd06      	ble.n	800f342 <__kernel_rem_pio2+0x3da>
 800f334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f336:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f33a:	f108 0801 	add.w	r8, r8, #1
 800f33e:	930a      	str	r3, [sp, #40]	; 0x28
 800f340:	e7df      	b.n	800f302 <__kernel_rem_pio2+0x39a>
 800f342:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f346:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f34a:	f7f1 fae5 	bl	8000918 <__aeabi_dmul>
 800f34e:	4602      	mov	r2, r0
 800f350:	460b      	mov	r3, r1
 800f352:	4630      	mov	r0, r6
 800f354:	4639      	mov	r1, r7
 800f356:	f7f1 f929 	bl	80005ac <__adddf3>
 800f35a:	f109 0901 	add.w	r9, r9, #1
 800f35e:	4606      	mov	r6, r0
 800f360:	460f      	mov	r7, r1
 800f362:	e7e4      	b.n	800f32e <__kernel_rem_pio2+0x3c6>
 800f364:	3d01      	subs	r5, #1
 800f366:	e748      	b.n	800f1fa <__kernel_rem_pio2+0x292>
 800f368:	ec47 6b10 	vmov	d0, r6, r7
 800f36c:	f1ca 0000 	rsb	r0, sl, #0
 800f370:	f000 fc36 	bl	800fbe0 <scalbn>
 800f374:	ec57 6b10 	vmov	r6, r7, d0
 800f378:	4ba0      	ldr	r3, [pc, #640]	; (800f5fc <__kernel_rem_pio2+0x694>)
 800f37a:	ee10 0a10 	vmov	r0, s0
 800f37e:	2200      	movs	r2, #0
 800f380:	4639      	mov	r1, r7
 800f382:	f7f1 fd4f 	bl	8000e24 <__aeabi_dcmpge>
 800f386:	b1f8      	cbz	r0, 800f3c8 <__kernel_rem_pio2+0x460>
 800f388:	4b9d      	ldr	r3, [pc, #628]	; (800f600 <__kernel_rem_pio2+0x698>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	4630      	mov	r0, r6
 800f38e:	4639      	mov	r1, r7
 800f390:	f7f1 fac2 	bl	8000918 <__aeabi_dmul>
 800f394:	f7f1 fd5a 	bl	8000e4c <__aeabi_d2iz>
 800f398:	4680      	mov	r8, r0
 800f39a:	f7f1 fa53 	bl	8000844 <__aeabi_i2d>
 800f39e:	4b97      	ldr	r3, [pc, #604]	; (800f5fc <__kernel_rem_pio2+0x694>)
 800f3a0:	2200      	movs	r2, #0
 800f3a2:	f7f1 fab9 	bl	8000918 <__aeabi_dmul>
 800f3a6:	460b      	mov	r3, r1
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	4639      	mov	r1, r7
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	f7f1 f8fb 	bl	80005a8 <__aeabi_dsub>
 800f3b2:	f7f1 fd4b 	bl	8000e4c <__aeabi_d2iz>
 800f3b6:	1c65      	adds	r5, r4, #1
 800f3b8:	ab0e      	add	r3, sp, #56	; 0x38
 800f3ba:	f10a 0a18 	add.w	sl, sl, #24
 800f3be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f3c2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f3c6:	e720      	b.n	800f20a <__kernel_rem_pio2+0x2a2>
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	4639      	mov	r1, r7
 800f3cc:	f7f1 fd3e 	bl	8000e4c <__aeabi_d2iz>
 800f3d0:	ab0e      	add	r3, sp, #56	; 0x38
 800f3d2:	4625      	mov	r5, r4
 800f3d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f3d8:	e717      	b.n	800f20a <__kernel_rem_pio2+0x2a2>
 800f3da:	ab0e      	add	r3, sp, #56	; 0x38
 800f3dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f3e0:	f7f1 fa30 	bl	8000844 <__aeabi_i2d>
 800f3e4:	4632      	mov	r2, r6
 800f3e6:	463b      	mov	r3, r7
 800f3e8:	f7f1 fa96 	bl	8000918 <__aeabi_dmul>
 800f3ec:	4b84      	ldr	r3, [pc, #528]	; (800f600 <__kernel_rem_pio2+0x698>)
 800f3ee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	4639      	mov	r1, r7
 800f3f8:	f7f1 fa8e 	bl	8000918 <__aeabi_dmul>
 800f3fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f400:	4606      	mov	r6, r0
 800f402:	460f      	mov	r7, r1
 800f404:	e70f      	b.n	800f226 <__kernel_rem_pio2+0x2be>
 800f406:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f40a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f40e:	f7f1 fa83 	bl	8000918 <__aeabi_dmul>
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f41a:	f7f1 f8c7 	bl	80005ac <__adddf3>
 800f41e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f422:	f108 0801 	add.w	r8, r8, #1
 800f426:	9b02      	ldr	r3, [sp, #8]
 800f428:	4598      	cmp	r8, r3
 800f42a:	dc01      	bgt.n	800f430 <__kernel_rem_pio2+0x4c8>
 800f42c:	45b8      	cmp	r8, r7
 800f42e:	ddea      	ble.n	800f406 <__kernel_rem_pio2+0x49e>
 800f430:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f434:	ab4a      	add	r3, sp, #296	; 0x128
 800f436:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f43a:	ed87 7b00 	vstr	d7, [r7]
 800f43e:	3e01      	subs	r6, #1
 800f440:	e6f8      	b.n	800f234 <__kernel_rem_pio2+0x2cc>
 800f442:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f444:	2b02      	cmp	r3, #2
 800f446:	dc0b      	bgt.n	800f460 <__kernel_rem_pio2+0x4f8>
 800f448:	2b00      	cmp	r3, #0
 800f44a:	dc35      	bgt.n	800f4b8 <__kernel_rem_pio2+0x550>
 800f44c:	d059      	beq.n	800f502 <__kernel_rem_pio2+0x59a>
 800f44e:	9b04      	ldr	r3, [sp, #16]
 800f450:	f003 0007 	and.w	r0, r3, #7
 800f454:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f458:	ecbd 8b02 	vpop	{d8}
 800f45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f460:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f462:	2b03      	cmp	r3, #3
 800f464:	d1f3      	bne.n	800f44e <__kernel_rem_pio2+0x4e6>
 800f466:	ab4a      	add	r3, sp, #296	; 0x128
 800f468:	4423      	add	r3, r4
 800f46a:	9306      	str	r3, [sp, #24]
 800f46c:	461c      	mov	r4, r3
 800f46e:	469a      	mov	sl, r3
 800f470:	9502      	str	r5, [sp, #8]
 800f472:	9b02      	ldr	r3, [sp, #8]
 800f474:	2b00      	cmp	r3, #0
 800f476:	f1aa 0a08 	sub.w	sl, sl, #8
 800f47a:	dc6b      	bgt.n	800f554 <__kernel_rem_pio2+0x5ec>
 800f47c:	46aa      	mov	sl, r5
 800f47e:	f1ba 0f01 	cmp.w	sl, #1
 800f482:	f1a4 0408 	sub.w	r4, r4, #8
 800f486:	f300 8085 	bgt.w	800f594 <__kernel_rem_pio2+0x62c>
 800f48a:	9c06      	ldr	r4, [sp, #24]
 800f48c:	2000      	movs	r0, #0
 800f48e:	3408      	adds	r4, #8
 800f490:	2100      	movs	r1, #0
 800f492:	2d01      	cmp	r5, #1
 800f494:	f300 809d 	bgt.w	800f5d2 <__kernel_rem_pio2+0x66a>
 800f498:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f49c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f4a0:	f1bb 0f00 	cmp.w	fp, #0
 800f4a4:	f040 809b 	bne.w	800f5de <__kernel_rem_pio2+0x676>
 800f4a8:	9b01      	ldr	r3, [sp, #4]
 800f4aa:	e9c3 5600 	strd	r5, r6, [r3]
 800f4ae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f4b2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f4b6:	e7ca      	b.n	800f44e <__kernel_rem_pio2+0x4e6>
 800f4b8:	3408      	adds	r4, #8
 800f4ba:	ab4a      	add	r3, sp, #296	; 0x128
 800f4bc:	441c      	add	r4, r3
 800f4be:	462e      	mov	r6, r5
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	2100      	movs	r1, #0
 800f4c4:	2e00      	cmp	r6, #0
 800f4c6:	da36      	bge.n	800f536 <__kernel_rem_pio2+0x5ce>
 800f4c8:	f1bb 0f00 	cmp.w	fp, #0
 800f4cc:	d039      	beq.n	800f542 <__kernel_rem_pio2+0x5da>
 800f4ce:	4602      	mov	r2, r0
 800f4d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4d4:	9c01      	ldr	r4, [sp, #4]
 800f4d6:	e9c4 2300 	strd	r2, r3, [r4]
 800f4da:	4602      	mov	r2, r0
 800f4dc:	460b      	mov	r3, r1
 800f4de:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f4e2:	f7f1 f861 	bl	80005a8 <__aeabi_dsub>
 800f4e6:	ae4c      	add	r6, sp, #304	; 0x130
 800f4e8:	2401      	movs	r4, #1
 800f4ea:	42a5      	cmp	r5, r4
 800f4ec:	da2c      	bge.n	800f548 <__kernel_rem_pio2+0x5e0>
 800f4ee:	f1bb 0f00 	cmp.w	fp, #0
 800f4f2:	d002      	beq.n	800f4fa <__kernel_rem_pio2+0x592>
 800f4f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	9b01      	ldr	r3, [sp, #4]
 800f4fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f500:	e7a5      	b.n	800f44e <__kernel_rem_pio2+0x4e6>
 800f502:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f506:	eb0d 0403 	add.w	r4, sp, r3
 800f50a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f50e:	2000      	movs	r0, #0
 800f510:	2100      	movs	r1, #0
 800f512:	2d00      	cmp	r5, #0
 800f514:	da09      	bge.n	800f52a <__kernel_rem_pio2+0x5c2>
 800f516:	f1bb 0f00 	cmp.w	fp, #0
 800f51a:	d002      	beq.n	800f522 <__kernel_rem_pio2+0x5ba>
 800f51c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f520:	4619      	mov	r1, r3
 800f522:	9b01      	ldr	r3, [sp, #4]
 800f524:	e9c3 0100 	strd	r0, r1, [r3]
 800f528:	e791      	b.n	800f44e <__kernel_rem_pio2+0x4e6>
 800f52a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f52e:	f7f1 f83d 	bl	80005ac <__adddf3>
 800f532:	3d01      	subs	r5, #1
 800f534:	e7ed      	b.n	800f512 <__kernel_rem_pio2+0x5aa>
 800f536:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f53a:	f7f1 f837 	bl	80005ac <__adddf3>
 800f53e:	3e01      	subs	r6, #1
 800f540:	e7c0      	b.n	800f4c4 <__kernel_rem_pio2+0x55c>
 800f542:	4602      	mov	r2, r0
 800f544:	460b      	mov	r3, r1
 800f546:	e7c5      	b.n	800f4d4 <__kernel_rem_pio2+0x56c>
 800f548:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f54c:	f7f1 f82e 	bl	80005ac <__adddf3>
 800f550:	3401      	adds	r4, #1
 800f552:	e7ca      	b.n	800f4ea <__kernel_rem_pio2+0x582>
 800f554:	e9da 8900 	ldrd	r8, r9, [sl]
 800f558:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f55c:	9b02      	ldr	r3, [sp, #8]
 800f55e:	3b01      	subs	r3, #1
 800f560:	9302      	str	r3, [sp, #8]
 800f562:	4632      	mov	r2, r6
 800f564:	463b      	mov	r3, r7
 800f566:	4640      	mov	r0, r8
 800f568:	4649      	mov	r1, r9
 800f56a:	f7f1 f81f 	bl	80005ac <__adddf3>
 800f56e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	4640      	mov	r0, r8
 800f578:	4649      	mov	r1, r9
 800f57a:	f7f1 f815 	bl	80005a8 <__aeabi_dsub>
 800f57e:	4632      	mov	r2, r6
 800f580:	463b      	mov	r3, r7
 800f582:	f7f1 f813 	bl	80005ac <__adddf3>
 800f586:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f58a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f58e:	ed8a 7b00 	vstr	d7, [sl]
 800f592:	e76e      	b.n	800f472 <__kernel_rem_pio2+0x50a>
 800f594:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f598:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f59c:	4640      	mov	r0, r8
 800f59e:	4632      	mov	r2, r6
 800f5a0:	463b      	mov	r3, r7
 800f5a2:	4649      	mov	r1, r9
 800f5a4:	f7f1 f802 	bl	80005ac <__adddf3>
 800f5a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	4640      	mov	r0, r8
 800f5b2:	4649      	mov	r1, r9
 800f5b4:	f7f0 fff8 	bl	80005a8 <__aeabi_dsub>
 800f5b8:	4632      	mov	r2, r6
 800f5ba:	463b      	mov	r3, r7
 800f5bc:	f7f0 fff6 	bl	80005ac <__adddf3>
 800f5c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f5c8:	ed84 7b00 	vstr	d7, [r4]
 800f5cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f5d0:	e755      	b.n	800f47e <__kernel_rem_pio2+0x516>
 800f5d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f5d6:	f7f0 ffe9 	bl	80005ac <__adddf3>
 800f5da:	3d01      	subs	r5, #1
 800f5dc:	e759      	b.n	800f492 <__kernel_rem_pio2+0x52a>
 800f5de:	9b01      	ldr	r3, [sp, #4]
 800f5e0:	9a01      	ldr	r2, [sp, #4]
 800f5e2:	601d      	str	r5, [r3, #0]
 800f5e4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f5e8:	605c      	str	r4, [r3, #4]
 800f5ea:	609f      	str	r7, [r3, #8]
 800f5ec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f5f0:	60d3      	str	r3, [r2, #12]
 800f5f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f5f6:	6110      	str	r0, [r2, #16]
 800f5f8:	6153      	str	r3, [r2, #20]
 800f5fa:	e728      	b.n	800f44e <__kernel_rem_pio2+0x4e6>
 800f5fc:	41700000 	.word	0x41700000
 800f600:	3e700000 	.word	0x3e700000
 800f604:	00000000 	.word	0x00000000

0800f608 <__kernel_sin>:
 800f608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f60c:	ed2d 8b04 	vpush	{d8-d9}
 800f610:	eeb0 8a41 	vmov.f32	s16, s2
 800f614:	eef0 8a61 	vmov.f32	s17, s3
 800f618:	ec55 4b10 	vmov	r4, r5, d0
 800f61c:	b083      	sub	sp, #12
 800f61e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f622:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f626:	9001      	str	r0, [sp, #4]
 800f628:	da06      	bge.n	800f638 <__kernel_sin+0x30>
 800f62a:	ee10 0a10 	vmov	r0, s0
 800f62e:	4629      	mov	r1, r5
 800f630:	f7f1 fc0c 	bl	8000e4c <__aeabi_d2iz>
 800f634:	2800      	cmp	r0, #0
 800f636:	d051      	beq.n	800f6dc <__kernel_sin+0xd4>
 800f638:	4622      	mov	r2, r4
 800f63a:	462b      	mov	r3, r5
 800f63c:	4620      	mov	r0, r4
 800f63e:	4629      	mov	r1, r5
 800f640:	f7f1 f96a 	bl	8000918 <__aeabi_dmul>
 800f644:	4682      	mov	sl, r0
 800f646:	468b      	mov	fp, r1
 800f648:	4602      	mov	r2, r0
 800f64a:	460b      	mov	r3, r1
 800f64c:	4620      	mov	r0, r4
 800f64e:	4629      	mov	r1, r5
 800f650:	f7f1 f962 	bl	8000918 <__aeabi_dmul>
 800f654:	a341      	add	r3, pc, #260	; (adr r3, 800f75c <__kernel_sin+0x154>)
 800f656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65a:	4680      	mov	r8, r0
 800f65c:	4689      	mov	r9, r1
 800f65e:	4650      	mov	r0, sl
 800f660:	4659      	mov	r1, fp
 800f662:	f7f1 f959 	bl	8000918 <__aeabi_dmul>
 800f666:	a33f      	add	r3, pc, #252	; (adr r3, 800f764 <__kernel_sin+0x15c>)
 800f668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66c:	f7f0 ff9c 	bl	80005a8 <__aeabi_dsub>
 800f670:	4652      	mov	r2, sl
 800f672:	465b      	mov	r3, fp
 800f674:	f7f1 f950 	bl	8000918 <__aeabi_dmul>
 800f678:	a33c      	add	r3, pc, #240	; (adr r3, 800f76c <__kernel_sin+0x164>)
 800f67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f67e:	f7f0 ff95 	bl	80005ac <__adddf3>
 800f682:	4652      	mov	r2, sl
 800f684:	465b      	mov	r3, fp
 800f686:	f7f1 f947 	bl	8000918 <__aeabi_dmul>
 800f68a:	a33a      	add	r3, pc, #232	; (adr r3, 800f774 <__kernel_sin+0x16c>)
 800f68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f690:	f7f0 ff8a 	bl	80005a8 <__aeabi_dsub>
 800f694:	4652      	mov	r2, sl
 800f696:	465b      	mov	r3, fp
 800f698:	f7f1 f93e 	bl	8000918 <__aeabi_dmul>
 800f69c:	a337      	add	r3, pc, #220	; (adr r3, 800f77c <__kernel_sin+0x174>)
 800f69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a2:	f7f0 ff83 	bl	80005ac <__adddf3>
 800f6a6:	9b01      	ldr	r3, [sp, #4]
 800f6a8:	4606      	mov	r6, r0
 800f6aa:	460f      	mov	r7, r1
 800f6ac:	b9eb      	cbnz	r3, 800f6ea <__kernel_sin+0xe2>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	460b      	mov	r3, r1
 800f6b2:	4650      	mov	r0, sl
 800f6b4:	4659      	mov	r1, fp
 800f6b6:	f7f1 f92f 	bl	8000918 <__aeabi_dmul>
 800f6ba:	a325      	add	r3, pc, #148	; (adr r3, 800f750 <__kernel_sin+0x148>)
 800f6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c0:	f7f0 ff72 	bl	80005a8 <__aeabi_dsub>
 800f6c4:	4642      	mov	r2, r8
 800f6c6:	464b      	mov	r3, r9
 800f6c8:	f7f1 f926 	bl	8000918 <__aeabi_dmul>
 800f6cc:	4602      	mov	r2, r0
 800f6ce:	460b      	mov	r3, r1
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	4629      	mov	r1, r5
 800f6d4:	f7f0 ff6a 	bl	80005ac <__adddf3>
 800f6d8:	4604      	mov	r4, r0
 800f6da:	460d      	mov	r5, r1
 800f6dc:	ec45 4b10 	vmov	d0, r4, r5
 800f6e0:	b003      	add	sp, #12
 800f6e2:	ecbd 8b04 	vpop	{d8-d9}
 800f6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ea:	4b1b      	ldr	r3, [pc, #108]	; (800f758 <__kernel_sin+0x150>)
 800f6ec:	ec51 0b18 	vmov	r0, r1, d8
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	f7f1 f911 	bl	8000918 <__aeabi_dmul>
 800f6f6:	4632      	mov	r2, r6
 800f6f8:	ec41 0b19 	vmov	d9, r0, r1
 800f6fc:	463b      	mov	r3, r7
 800f6fe:	4640      	mov	r0, r8
 800f700:	4649      	mov	r1, r9
 800f702:	f7f1 f909 	bl	8000918 <__aeabi_dmul>
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	ec51 0b19 	vmov	r0, r1, d9
 800f70e:	f7f0 ff4b 	bl	80005a8 <__aeabi_dsub>
 800f712:	4652      	mov	r2, sl
 800f714:	465b      	mov	r3, fp
 800f716:	f7f1 f8ff 	bl	8000918 <__aeabi_dmul>
 800f71a:	ec53 2b18 	vmov	r2, r3, d8
 800f71e:	f7f0 ff43 	bl	80005a8 <__aeabi_dsub>
 800f722:	a30b      	add	r3, pc, #44	; (adr r3, 800f750 <__kernel_sin+0x148>)
 800f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f728:	4606      	mov	r6, r0
 800f72a:	460f      	mov	r7, r1
 800f72c:	4640      	mov	r0, r8
 800f72e:	4649      	mov	r1, r9
 800f730:	f7f1 f8f2 	bl	8000918 <__aeabi_dmul>
 800f734:	4602      	mov	r2, r0
 800f736:	460b      	mov	r3, r1
 800f738:	4630      	mov	r0, r6
 800f73a:	4639      	mov	r1, r7
 800f73c:	f7f0 ff36 	bl	80005ac <__adddf3>
 800f740:	4602      	mov	r2, r0
 800f742:	460b      	mov	r3, r1
 800f744:	4620      	mov	r0, r4
 800f746:	4629      	mov	r1, r5
 800f748:	f7f0 ff2e 	bl	80005a8 <__aeabi_dsub>
 800f74c:	e7c4      	b.n	800f6d8 <__kernel_sin+0xd0>
 800f74e:	bf00      	nop
 800f750:	55555549 	.word	0x55555549
 800f754:	3fc55555 	.word	0x3fc55555
 800f758:	3fe00000 	.word	0x3fe00000
 800f75c:	5acfd57c 	.word	0x5acfd57c
 800f760:	3de5d93a 	.word	0x3de5d93a
 800f764:	8a2b9ceb 	.word	0x8a2b9ceb
 800f768:	3e5ae5e6 	.word	0x3e5ae5e6
 800f76c:	57b1fe7d 	.word	0x57b1fe7d
 800f770:	3ec71de3 	.word	0x3ec71de3
 800f774:	19c161d5 	.word	0x19c161d5
 800f778:	3f2a01a0 	.word	0x3f2a01a0
 800f77c:	1110f8a6 	.word	0x1110f8a6
 800f780:	3f811111 	.word	0x3f811111
 800f784:	00000000 	.word	0x00000000

0800f788 <atan>:
 800f788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	ec55 4b10 	vmov	r4, r5, d0
 800f790:	4bc3      	ldr	r3, [pc, #780]	; (800faa0 <atan+0x318>)
 800f792:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f796:	429e      	cmp	r6, r3
 800f798:	46ab      	mov	fp, r5
 800f79a:	dd18      	ble.n	800f7ce <atan+0x46>
 800f79c:	4bc1      	ldr	r3, [pc, #772]	; (800faa4 <atan+0x31c>)
 800f79e:	429e      	cmp	r6, r3
 800f7a0:	dc01      	bgt.n	800f7a6 <atan+0x1e>
 800f7a2:	d109      	bne.n	800f7b8 <atan+0x30>
 800f7a4:	b144      	cbz	r4, 800f7b8 <atan+0x30>
 800f7a6:	4622      	mov	r2, r4
 800f7a8:	462b      	mov	r3, r5
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	f7f0 fefd 	bl	80005ac <__adddf3>
 800f7b2:	4604      	mov	r4, r0
 800f7b4:	460d      	mov	r5, r1
 800f7b6:	e006      	b.n	800f7c6 <atan+0x3e>
 800f7b8:	f1bb 0f00 	cmp.w	fp, #0
 800f7bc:	f300 8131 	bgt.w	800fa22 <atan+0x29a>
 800f7c0:	a59b      	add	r5, pc, #620	; (adr r5, 800fa30 <atan+0x2a8>)
 800f7c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f7c6:	ec45 4b10 	vmov	d0, r4, r5
 800f7ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ce:	4bb6      	ldr	r3, [pc, #728]	; (800faa8 <atan+0x320>)
 800f7d0:	429e      	cmp	r6, r3
 800f7d2:	dc14      	bgt.n	800f7fe <atan+0x76>
 800f7d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f7d8:	429e      	cmp	r6, r3
 800f7da:	dc0d      	bgt.n	800f7f8 <atan+0x70>
 800f7dc:	a396      	add	r3, pc, #600	; (adr r3, 800fa38 <atan+0x2b0>)
 800f7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e2:	ee10 0a10 	vmov	r0, s0
 800f7e6:	4629      	mov	r1, r5
 800f7e8:	f7f0 fee0 	bl	80005ac <__adddf3>
 800f7ec:	4baf      	ldr	r3, [pc, #700]	; (800faac <atan+0x324>)
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f7f1 fb22 	bl	8000e38 <__aeabi_dcmpgt>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	d1e6      	bne.n	800f7c6 <atan+0x3e>
 800f7f8:	f04f 3aff 	mov.w	sl, #4294967295
 800f7fc:	e02b      	b.n	800f856 <atan+0xce>
 800f7fe:	f000 f963 	bl	800fac8 <fabs>
 800f802:	4bab      	ldr	r3, [pc, #684]	; (800fab0 <atan+0x328>)
 800f804:	429e      	cmp	r6, r3
 800f806:	ec55 4b10 	vmov	r4, r5, d0
 800f80a:	f300 80bf 	bgt.w	800f98c <atan+0x204>
 800f80e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f812:	429e      	cmp	r6, r3
 800f814:	f300 80a0 	bgt.w	800f958 <atan+0x1d0>
 800f818:	ee10 2a10 	vmov	r2, s0
 800f81c:	ee10 0a10 	vmov	r0, s0
 800f820:	462b      	mov	r3, r5
 800f822:	4629      	mov	r1, r5
 800f824:	f7f0 fec2 	bl	80005ac <__adddf3>
 800f828:	4ba0      	ldr	r3, [pc, #640]	; (800faac <atan+0x324>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	f7f0 febc 	bl	80005a8 <__aeabi_dsub>
 800f830:	2200      	movs	r2, #0
 800f832:	4606      	mov	r6, r0
 800f834:	460f      	mov	r7, r1
 800f836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f83a:	4620      	mov	r0, r4
 800f83c:	4629      	mov	r1, r5
 800f83e:	f7f0 feb5 	bl	80005ac <__adddf3>
 800f842:	4602      	mov	r2, r0
 800f844:	460b      	mov	r3, r1
 800f846:	4630      	mov	r0, r6
 800f848:	4639      	mov	r1, r7
 800f84a:	f7f1 f98f 	bl	8000b6c <__aeabi_ddiv>
 800f84e:	f04f 0a00 	mov.w	sl, #0
 800f852:	4604      	mov	r4, r0
 800f854:	460d      	mov	r5, r1
 800f856:	4622      	mov	r2, r4
 800f858:	462b      	mov	r3, r5
 800f85a:	4620      	mov	r0, r4
 800f85c:	4629      	mov	r1, r5
 800f85e:	f7f1 f85b 	bl	8000918 <__aeabi_dmul>
 800f862:	4602      	mov	r2, r0
 800f864:	460b      	mov	r3, r1
 800f866:	4680      	mov	r8, r0
 800f868:	4689      	mov	r9, r1
 800f86a:	f7f1 f855 	bl	8000918 <__aeabi_dmul>
 800f86e:	a374      	add	r3, pc, #464	; (adr r3, 800fa40 <atan+0x2b8>)
 800f870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f874:	4606      	mov	r6, r0
 800f876:	460f      	mov	r7, r1
 800f878:	f7f1 f84e 	bl	8000918 <__aeabi_dmul>
 800f87c:	a372      	add	r3, pc, #456	; (adr r3, 800fa48 <atan+0x2c0>)
 800f87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f882:	f7f0 fe93 	bl	80005ac <__adddf3>
 800f886:	4632      	mov	r2, r6
 800f888:	463b      	mov	r3, r7
 800f88a:	f7f1 f845 	bl	8000918 <__aeabi_dmul>
 800f88e:	a370      	add	r3, pc, #448	; (adr r3, 800fa50 <atan+0x2c8>)
 800f890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f894:	f7f0 fe8a 	bl	80005ac <__adddf3>
 800f898:	4632      	mov	r2, r6
 800f89a:	463b      	mov	r3, r7
 800f89c:	f7f1 f83c 	bl	8000918 <__aeabi_dmul>
 800f8a0:	a36d      	add	r3, pc, #436	; (adr r3, 800fa58 <atan+0x2d0>)
 800f8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a6:	f7f0 fe81 	bl	80005ac <__adddf3>
 800f8aa:	4632      	mov	r2, r6
 800f8ac:	463b      	mov	r3, r7
 800f8ae:	f7f1 f833 	bl	8000918 <__aeabi_dmul>
 800f8b2:	a36b      	add	r3, pc, #428	; (adr r3, 800fa60 <atan+0x2d8>)
 800f8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b8:	f7f0 fe78 	bl	80005ac <__adddf3>
 800f8bc:	4632      	mov	r2, r6
 800f8be:	463b      	mov	r3, r7
 800f8c0:	f7f1 f82a 	bl	8000918 <__aeabi_dmul>
 800f8c4:	a368      	add	r3, pc, #416	; (adr r3, 800fa68 <atan+0x2e0>)
 800f8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ca:	f7f0 fe6f 	bl	80005ac <__adddf3>
 800f8ce:	4642      	mov	r2, r8
 800f8d0:	464b      	mov	r3, r9
 800f8d2:	f7f1 f821 	bl	8000918 <__aeabi_dmul>
 800f8d6:	a366      	add	r3, pc, #408	; (adr r3, 800fa70 <atan+0x2e8>)
 800f8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8dc:	4680      	mov	r8, r0
 800f8de:	4689      	mov	r9, r1
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	4639      	mov	r1, r7
 800f8e4:	f7f1 f818 	bl	8000918 <__aeabi_dmul>
 800f8e8:	a363      	add	r3, pc, #396	; (adr r3, 800fa78 <atan+0x2f0>)
 800f8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ee:	f7f0 fe5b 	bl	80005a8 <__aeabi_dsub>
 800f8f2:	4632      	mov	r2, r6
 800f8f4:	463b      	mov	r3, r7
 800f8f6:	f7f1 f80f 	bl	8000918 <__aeabi_dmul>
 800f8fa:	a361      	add	r3, pc, #388	; (adr r3, 800fa80 <atan+0x2f8>)
 800f8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f900:	f7f0 fe52 	bl	80005a8 <__aeabi_dsub>
 800f904:	4632      	mov	r2, r6
 800f906:	463b      	mov	r3, r7
 800f908:	f7f1 f806 	bl	8000918 <__aeabi_dmul>
 800f90c:	a35e      	add	r3, pc, #376	; (adr r3, 800fa88 <atan+0x300>)
 800f90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f912:	f7f0 fe49 	bl	80005a8 <__aeabi_dsub>
 800f916:	4632      	mov	r2, r6
 800f918:	463b      	mov	r3, r7
 800f91a:	f7f0 fffd 	bl	8000918 <__aeabi_dmul>
 800f91e:	a35c      	add	r3, pc, #368	; (adr r3, 800fa90 <atan+0x308>)
 800f920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f924:	f7f0 fe40 	bl	80005a8 <__aeabi_dsub>
 800f928:	4632      	mov	r2, r6
 800f92a:	463b      	mov	r3, r7
 800f92c:	f7f0 fff4 	bl	8000918 <__aeabi_dmul>
 800f930:	4602      	mov	r2, r0
 800f932:	460b      	mov	r3, r1
 800f934:	4640      	mov	r0, r8
 800f936:	4649      	mov	r1, r9
 800f938:	f7f0 fe38 	bl	80005ac <__adddf3>
 800f93c:	4622      	mov	r2, r4
 800f93e:	462b      	mov	r3, r5
 800f940:	f7f0 ffea 	bl	8000918 <__aeabi_dmul>
 800f944:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f948:	4602      	mov	r2, r0
 800f94a:	460b      	mov	r3, r1
 800f94c:	d14b      	bne.n	800f9e6 <atan+0x25e>
 800f94e:	4620      	mov	r0, r4
 800f950:	4629      	mov	r1, r5
 800f952:	f7f0 fe29 	bl	80005a8 <__aeabi_dsub>
 800f956:	e72c      	b.n	800f7b2 <atan+0x2a>
 800f958:	ee10 0a10 	vmov	r0, s0
 800f95c:	4b53      	ldr	r3, [pc, #332]	; (800faac <atan+0x324>)
 800f95e:	2200      	movs	r2, #0
 800f960:	4629      	mov	r1, r5
 800f962:	f7f0 fe21 	bl	80005a8 <__aeabi_dsub>
 800f966:	4b51      	ldr	r3, [pc, #324]	; (800faac <atan+0x324>)
 800f968:	4606      	mov	r6, r0
 800f96a:	460f      	mov	r7, r1
 800f96c:	2200      	movs	r2, #0
 800f96e:	4620      	mov	r0, r4
 800f970:	4629      	mov	r1, r5
 800f972:	f7f0 fe1b 	bl	80005ac <__adddf3>
 800f976:	4602      	mov	r2, r0
 800f978:	460b      	mov	r3, r1
 800f97a:	4630      	mov	r0, r6
 800f97c:	4639      	mov	r1, r7
 800f97e:	f7f1 f8f5 	bl	8000b6c <__aeabi_ddiv>
 800f982:	f04f 0a01 	mov.w	sl, #1
 800f986:	4604      	mov	r4, r0
 800f988:	460d      	mov	r5, r1
 800f98a:	e764      	b.n	800f856 <atan+0xce>
 800f98c:	4b49      	ldr	r3, [pc, #292]	; (800fab4 <atan+0x32c>)
 800f98e:	429e      	cmp	r6, r3
 800f990:	da1d      	bge.n	800f9ce <atan+0x246>
 800f992:	ee10 0a10 	vmov	r0, s0
 800f996:	4b48      	ldr	r3, [pc, #288]	; (800fab8 <atan+0x330>)
 800f998:	2200      	movs	r2, #0
 800f99a:	4629      	mov	r1, r5
 800f99c:	f7f0 fe04 	bl	80005a8 <__aeabi_dsub>
 800f9a0:	4b45      	ldr	r3, [pc, #276]	; (800fab8 <atan+0x330>)
 800f9a2:	4606      	mov	r6, r0
 800f9a4:	460f      	mov	r7, r1
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	4620      	mov	r0, r4
 800f9aa:	4629      	mov	r1, r5
 800f9ac:	f7f0 ffb4 	bl	8000918 <__aeabi_dmul>
 800f9b0:	4b3e      	ldr	r3, [pc, #248]	; (800faac <atan+0x324>)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	f7f0 fdfa 	bl	80005ac <__adddf3>
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	460b      	mov	r3, r1
 800f9bc:	4630      	mov	r0, r6
 800f9be:	4639      	mov	r1, r7
 800f9c0:	f7f1 f8d4 	bl	8000b6c <__aeabi_ddiv>
 800f9c4:	f04f 0a02 	mov.w	sl, #2
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	460d      	mov	r5, r1
 800f9cc:	e743      	b.n	800f856 <atan+0xce>
 800f9ce:	462b      	mov	r3, r5
 800f9d0:	ee10 2a10 	vmov	r2, s0
 800f9d4:	4939      	ldr	r1, [pc, #228]	; (800fabc <atan+0x334>)
 800f9d6:	2000      	movs	r0, #0
 800f9d8:	f7f1 f8c8 	bl	8000b6c <__aeabi_ddiv>
 800f9dc:	f04f 0a03 	mov.w	sl, #3
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	460d      	mov	r5, r1
 800f9e4:	e737      	b.n	800f856 <atan+0xce>
 800f9e6:	4b36      	ldr	r3, [pc, #216]	; (800fac0 <atan+0x338>)
 800f9e8:	4e36      	ldr	r6, [pc, #216]	; (800fac4 <atan+0x33c>)
 800f9ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f9ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f9f2:	e9da 2300 	ldrd	r2, r3, [sl]
 800f9f6:	f7f0 fdd7 	bl	80005a8 <__aeabi_dsub>
 800f9fa:	4622      	mov	r2, r4
 800f9fc:	462b      	mov	r3, r5
 800f9fe:	f7f0 fdd3 	bl	80005a8 <__aeabi_dsub>
 800fa02:	4602      	mov	r2, r0
 800fa04:	460b      	mov	r3, r1
 800fa06:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fa0a:	f7f0 fdcd 	bl	80005a8 <__aeabi_dsub>
 800fa0e:	f1bb 0f00 	cmp.w	fp, #0
 800fa12:	4604      	mov	r4, r0
 800fa14:	460d      	mov	r5, r1
 800fa16:	f6bf aed6 	bge.w	800f7c6 <atan+0x3e>
 800fa1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa1e:	461d      	mov	r5, r3
 800fa20:	e6d1      	b.n	800f7c6 <atan+0x3e>
 800fa22:	a51d      	add	r5, pc, #116	; (adr r5, 800fa98 <atan+0x310>)
 800fa24:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fa28:	e6cd      	b.n	800f7c6 <atan+0x3e>
 800fa2a:	bf00      	nop
 800fa2c:	f3af 8000 	nop.w
 800fa30:	54442d18 	.word	0x54442d18
 800fa34:	bff921fb 	.word	0xbff921fb
 800fa38:	8800759c 	.word	0x8800759c
 800fa3c:	7e37e43c 	.word	0x7e37e43c
 800fa40:	e322da11 	.word	0xe322da11
 800fa44:	3f90ad3a 	.word	0x3f90ad3a
 800fa48:	24760deb 	.word	0x24760deb
 800fa4c:	3fa97b4b 	.word	0x3fa97b4b
 800fa50:	a0d03d51 	.word	0xa0d03d51
 800fa54:	3fb10d66 	.word	0x3fb10d66
 800fa58:	c54c206e 	.word	0xc54c206e
 800fa5c:	3fb745cd 	.word	0x3fb745cd
 800fa60:	920083ff 	.word	0x920083ff
 800fa64:	3fc24924 	.word	0x3fc24924
 800fa68:	5555550d 	.word	0x5555550d
 800fa6c:	3fd55555 	.word	0x3fd55555
 800fa70:	2c6a6c2f 	.word	0x2c6a6c2f
 800fa74:	bfa2b444 	.word	0xbfa2b444
 800fa78:	52defd9a 	.word	0x52defd9a
 800fa7c:	3fadde2d 	.word	0x3fadde2d
 800fa80:	af749a6d 	.word	0xaf749a6d
 800fa84:	3fb3b0f2 	.word	0x3fb3b0f2
 800fa88:	fe231671 	.word	0xfe231671
 800fa8c:	3fbc71c6 	.word	0x3fbc71c6
 800fa90:	9998ebc4 	.word	0x9998ebc4
 800fa94:	3fc99999 	.word	0x3fc99999
 800fa98:	54442d18 	.word	0x54442d18
 800fa9c:	3ff921fb 	.word	0x3ff921fb
 800faa0:	440fffff 	.word	0x440fffff
 800faa4:	7ff00000 	.word	0x7ff00000
 800faa8:	3fdbffff 	.word	0x3fdbffff
 800faac:	3ff00000 	.word	0x3ff00000
 800fab0:	3ff2ffff 	.word	0x3ff2ffff
 800fab4:	40038000 	.word	0x40038000
 800fab8:	3ff80000 	.word	0x3ff80000
 800fabc:	bff00000 	.word	0xbff00000
 800fac0:	080104f8 	.word	0x080104f8
 800fac4:	080104d8 	.word	0x080104d8

0800fac8 <fabs>:
 800fac8:	ec51 0b10 	vmov	r0, r1, d0
 800facc:	ee10 2a10 	vmov	r2, s0
 800fad0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fad4:	ec43 2b10 	vmov	d0, r2, r3
 800fad8:	4770      	bx	lr
 800fada:	0000      	movs	r0, r0
 800fadc:	0000      	movs	r0, r0
	...

0800fae0 <floor>:
 800fae0:	ec51 0b10 	vmov	r0, r1, d0
 800fae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800faec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800faf0:	2e13      	cmp	r6, #19
 800faf2:	ee10 5a10 	vmov	r5, s0
 800faf6:	ee10 8a10 	vmov	r8, s0
 800fafa:	460c      	mov	r4, r1
 800fafc:	dc32      	bgt.n	800fb64 <floor+0x84>
 800fafe:	2e00      	cmp	r6, #0
 800fb00:	da14      	bge.n	800fb2c <floor+0x4c>
 800fb02:	a333      	add	r3, pc, #204	; (adr r3, 800fbd0 <floor+0xf0>)
 800fb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb08:	f7f0 fd50 	bl	80005ac <__adddf3>
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	2300      	movs	r3, #0
 800fb10:	f7f1 f992 	bl	8000e38 <__aeabi_dcmpgt>
 800fb14:	b138      	cbz	r0, 800fb26 <floor+0x46>
 800fb16:	2c00      	cmp	r4, #0
 800fb18:	da57      	bge.n	800fbca <floor+0xea>
 800fb1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fb1e:	431d      	orrs	r5, r3
 800fb20:	d001      	beq.n	800fb26 <floor+0x46>
 800fb22:	4c2d      	ldr	r4, [pc, #180]	; (800fbd8 <floor+0xf8>)
 800fb24:	2500      	movs	r5, #0
 800fb26:	4621      	mov	r1, r4
 800fb28:	4628      	mov	r0, r5
 800fb2a:	e025      	b.n	800fb78 <floor+0x98>
 800fb2c:	4f2b      	ldr	r7, [pc, #172]	; (800fbdc <floor+0xfc>)
 800fb2e:	4137      	asrs	r7, r6
 800fb30:	ea01 0307 	and.w	r3, r1, r7
 800fb34:	4303      	orrs	r3, r0
 800fb36:	d01f      	beq.n	800fb78 <floor+0x98>
 800fb38:	a325      	add	r3, pc, #148	; (adr r3, 800fbd0 <floor+0xf0>)
 800fb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb3e:	f7f0 fd35 	bl	80005ac <__adddf3>
 800fb42:	2200      	movs	r2, #0
 800fb44:	2300      	movs	r3, #0
 800fb46:	f7f1 f977 	bl	8000e38 <__aeabi_dcmpgt>
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	d0eb      	beq.n	800fb26 <floor+0x46>
 800fb4e:	2c00      	cmp	r4, #0
 800fb50:	bfbe      	ittt	lt
 800fb52:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fb56:	fa43 f606 	asrlt.w	r6, r3, r6
 800fb5a:	19a4      	addlt	r4, r4, r6
 800fb5c:	ea24 0407 	bic.w	r4, r4, r7
 800fb60:	2500      	movs	r5, #0
 800fb62:	e7e0      	b.n	800fb26 <floor+0x46>
 800fb64:	2e33      	cmp	r6, #51	; 0x33
 800fb66:	dd0b      	ble.n	800fb80 <floor+0xa0>
 800fb68:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800fb6c:	d104      	bne.n	800fb78 <floor+0x98>
 800fb6e:	ee10 2a10 	vmov	r2, s0
 800fb72:	460b      	mov	r3, r1
 800fb74:	f7f0 fd1a 	bl	80005ac <__adddf3>
 800fb78:	ec41 0b10 	vmov	d0, r0, r1
 800fb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb80:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800fb84:	f04f 33ff 	mov.w	r3, #4294967295
 800fb88:	fa23 f707 	lsr.w	r7, r3, r7
 800fb8c:	4207      	tst	r7, r0
 800fb8e:	d0f3      	beq.n	800fb78 <floor+0x98>
 800fb90:	a30f      	add	r3, pc, #60	; (adr r3, 800fbd0 <floor+0xf0>)
 800fb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb96:	f7f0 fd09 	bl	80005ac <__adddf3>
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	f7f1 f94b 	bl	8000e38 <__aeabi_dcmpgt>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d0bf      	beq.n	800fb26 <floor+0x46>
 800fba6:	2c00      	cmp	r4, #0
 800fba8:	da02      	bge.n	800fbb0 <floor+0xd0>
 800fbaa:	2e14      	cmp	r6, #20
 800fbac:	d103      	bne.n	800fbb6 <floor+0xd6>
 800fbae:	3401      	adds	r4, #1
 800fbb0:	ea25 0507 	bic.w	r5, r5, r7
 800fbb4:	e7b7      	b.n	800fb26 <floor+0x46>
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800fbbc:	fa03 f606 	lsl.w	r6, r3, r6
 800fbc0:	4435      	add	r5, r6
 800fbc2:	4545      	cmp	r5, r8
 800fbc4:	bf38      	it	cc
 800fbc6:	18e4      	addcc	r4, r4, r3
 800fbc8:	e7f2      	b.n	800fbb0 <floor+0xd0>
 800fbca:	2500      	movs	r5, #0
 800fbcc:	462c      	mov	r4, r5
 800fbce:	e7aa      	b.n	800fb26 <floor+0x46>
 800fbd0:	8800759c 	.word	0x8800759c
 800fbd4:	7e37e43c 	.word	0x7e37e43c
 800fbd8:	bff00000 	.word	0xbff00000
 800fbdc:	000fffff 	.word	0x000fffff

0800fbe0 <scalbn>:
 800fbe0:	b570      	push	{r4, r5, r6, lr}
 800fbe2:	ec55 4b10 	vmov	r4, r5, d0
 800fbe6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800fbea:	4606      	mov	r6, r0
 800fbec:	462b      	mov	r3, r5
 800fbee:	b99a      	cbnz	r2, 800fc18 <scalbn+0x38>
 800fbf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fbf4:	4323      	orrs	r3, r4
 800fbf6:	d036      	beq.n	800fc66 <scalbn+0x86>
 800fbf8:	4b39      	ldr	r3, [pc, #228]	; (800fce0 <scalbn+0x100>)
 800fbfa:	4629      	mov	r1, r5
 800fbfc:	ee10 0a10 	vmov	r0, s0
 800fc00:	2200      	movs	r2, #0
 800fc02:	f7f0 fe89 	bl	8000918 <__aeabi_dmul>
 800fc06:	4b37      	ldr	r3, [pc, #220]	; (800fce4 <scalbn+0x104>)
 800fc08:	429e      	cmp	r6, r3
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	460d      	mov	r5, r1
 800fc0e:	da10      	bge.n	800fc32 <scalbn+0x52>
 800fc10:	a32b      	add	r3, pc, #172	; (adr r3, 800fcc0 <scalbn+0xe0>)
 800fc12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc16:	e03a      	b.n	800fc8e <scalbn+0xae>
 800fc18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800fc1c:	428a      	cmp	r2, r1
 800fc1e:	d10c      	bne.n	800fc3a <scalbn+0x5a>
 800fc20:	ee10 2a10 	vmov	r2, s0
 800fc24:	4620      	mov	r0, r4
 800fc26:	4629      	mov	r1, r5
 800fc28:	f7f0 fcc0 	bl	80005ac <__adddf3>
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	460d      	mov	r5, r1
 800fc30:	e019      	b.n	800fc66 <scalbn+0x86>
 800fc32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fc36:	460b      	mov	r3, r1
 800fc38:	3a36      	subs	r2, #54	; 0x36
 800fc3a:	4432      	add	r2, r6
 800fc3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fc40:	428a      	cmp	r2, r1
 800fc42:	dd08      	ble.n	800fc56 <scalbn+0x76>
 800fc44:	2d00      	cmp	r5, #0
 800fc46:	a120      	add	r1, pc, #128	; (adr r1, 800fcc8 <scalbn+0xe8>)
 800fc48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc4c:	da1c      	bge.n	800fc88 <scalbn+0xa8>
 800fc4e:	a120      	add	r1, pc, #128	; (adr r1, 800fcd0 <scalbn+0xf0>)
 800fc50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc54:	e018      	b.n	800fc88 <scalbn+0xa8>
 800fc56:	2a00      	cmp	r2, #0
 800fc58:	dd08      	ble.n	800fc6c <scalbn+0x8c>
 800fc5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fc5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fc62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fc66:	ec45 4b10 	vmov	d0, r4, r5
 800fc6a:	bd70      	pop	{r4, r5, r6, pc}
 800fc6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fc70:	da19      	bge.n	800fca6 <scalbn+0xc6>
 800fc72:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fc76:	429e      	cmp	r6, r3
 800fc78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fc7c:	dd0a      	ble.n	800fc94 <scalbn+0xb4>
 800fc7e:	a112      	add	r1, pc, #72	; (adr r1, 800fcc8 <scalbn+0xe8>)
 800fc80:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d1e2      	bne.n	800fc4e <scalbn+0x6e>
 800fc88:	a30f      	add	r3, pc, #60	; (adr r3, 800fcc8 <scalbn+0xe8>)
 800fc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc8e:	f7f0 fe43 	bl	8000918 <__aeabi_dmul>
 800fc92:	e7cb      	b.n	800fc2c <scalbn+0x4c>
 800fc94:	a10a      	add	r1, pc, #40	; (adr r1, 800fcc0 <scalbn+0xe0>)
 800fc96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d0b8      	beq.n	800fc10 <scalbn+0x30>
 800fc9e:	a10e      	add	r1, pc, #56	; (adr r1, 800fcd8 <scalbn+0xf8>)
 800fca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fca4:	e7b4      	b.n	800fc10 <scalbn+0x30>
 800fca6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fcaa:	3236      	adds	r2, #54	; 0x36
 800fcac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fcb0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fcb4:	4620      	mov	r0, r4
 800fcb6:	4b0c      	ldr	r3, [pc, #48]	; (800fce8 <scalbn+0x108>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	e7e8      	b.n	800fc8e <scalbn+0xae>
 800fcbc:	f3af 8000 	nop.w
 800fcc0:	c2f8f359 	.word	0xc2f8f359
 800fcc4:	01a56e1f 	.word	0x01a56e1f
 800fcc8:	8800759c 	.word	0x8800759c
 800fccc:	7e37e43c 	.word	0x7e37e43c
 800fcd0:	8800759c 	.word	0x8800759c
 800fcd4:	fe37e43c 	.word	0xfe37e43c
 800fcd8:	c2f8f359 	.word	0xc2f8f359
 800fcdc:	81a56e1f 	.word	0x81a56e1f
 800fce0:	43500000 	.word	0x43500000
 800fce4:	ffff3cb0 	.word	0xffff3cb0
 800fce8:	3c900000 	.word	0x3c900000

0800fcec <_init>:
 800fcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcee:	bf00      	nop
 800fcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcf2:	bc08      	pop	{r3}
 800fcf4:	469e      	mov	lr, r3
 800fcf6:	4770      	bx	lr

0800fcf8 <_fini>:
 800fcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfa:	bf00      	nop
 800fcfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcfe:	bc08      	pop	{r3}
 800fd00:	469e      	mov	lr, r3
 800fd02:	4770      	bx	lr
