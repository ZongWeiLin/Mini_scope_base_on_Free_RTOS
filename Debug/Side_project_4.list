
Side_project_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000feb4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08010088  08010088  00020088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080108b8  080108b8  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  080108b8  080108b8  000208b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080108c0  080108c0  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080108c0  080108c0  000208c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080108c4  080108c4  000208c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  080108c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005468  200000a4  0801096c  000300a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000550c  0801096c  0003550c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204b9  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a24  00000000  00000000  0005058d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  00054fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a18  00000000  00000000  00056bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002867e  00000000  00000000  000585e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002353b  00000000  00000000  00080c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ece18  00000000  00000000  000a4199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00190fb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d4c  00000000  00000000  00191004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801006c 	.word	0x0801006c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	0801006c 	.word	0x0801006c

08000210 <cr4_fft_64_stm32>:
 8000210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000214:	f04f 0c00 	mov.w	ip, #0
 8000218:	4603      	mov	r3, r0
 800021a:	f04f 0000 	mov.w	r0, #0

0800021e <preloop_v7>:
 800021e:	eb01 6e9c 	add.w	lr, r1, ip, lsr #26
 8000222:	f9be 5002 	ldrsh.w	r5, [lr, #2]
 8000226:	f93e 4b40 	ldrsh.w	r4, [lr], #64
 800022a:	f9be 9002 	ldrsh.w	r9, [lr, #2]
 800022e:	f93e 8b40 	ldrsh.w	r8, [lr], #64
 8000232:	f9be 7002 	ldrsh.w	r7, [lr, #2]
 8000236:	f93e 6b40 	ldrsh.w	r6, [lr], #64
 800023a:	f9be b002 	ldrsh.w	fp, [lr, #2]
 800023e:	f93e ab40 	ldrsh.w	sl, [lr], #64
 8000242:	44d0      	add	r8, sl
 8000244:	44d9      	add	r9, fp
 8000246:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 800024a:	eba9 0b4b 	sub.w	fp, r9, fp, lsl #1
 800024e:	ea4f 04a4 	mov.w	r4, r4, asr #2
 8000252:	ea4f 05a5 	mov.w	r5, r5, asr #2
 8000256:	eb04 04a6 	add.w	r4, r4, r6, asr #2
 800025a:	eb05 05a7 	add.w	r5, r5, r7, asr #2
 800025e:	eba4 0666 	sub.w	r6, r4, r6, asr #1
 8000262:	eba5 0767 	sub.w	r7, r5, r7, asr #1
 8000266:	eb04 04a8 	add.w	r4, r4, r8, asr #2
 800026a:	eb05 05a9 	add.w	r5, r5, r9, asr #2
 800026e:	eba4 0868 	sub.w	r8, r4, r8, asr #1
 8000272:	eba5 0969 	sub.w	r9, r5, r9, asr #1
 8000276:	eb06 06ab 	add.w	r6, r6, fp, asr #2
 800027a:	eba7 07aa 	sub.w	r7, r7, sl, asr #2
 800027e:	eba6 0b6b 	sub.w	fp, r6, fp, asr #1
 8000282:	eb07 0a6a 	add.w	sl, r7, sl, asr #1
 8000286:	805d      	strh	r5, [r3, #2]
 8000288:	f823 4b04 	strh.w	r4, [r3], #4
 800028c:	805f      	strh	r7, [r3, #2]
 800028e:	f823 6b04 	strh.w	r6, [r3], #4
 8000292:	f8a3 9002 	strh.w	r9, [r3, #2]
 8000296:	f823 8b04 	strh.w	r8, [r3], #4
 800029a:	f8a3 a002 	strh.w	sl, [r3, #2]
 800029e:	f823 bb04 	strh.w	fp, [r3], #4
 80002a2:	f100 0001 	add.w	r0, r0, #1
 80002a6:	fa90 fca0 	rbit	ip, r0
 80002aa:	2810      	cmp	r0, #16
 80002ac:	d1b7      	bne.n	800021e <preloop_v7>
 80002ae:	eba3 0182 	sub.w	r1, r3, r2, lsl #2
 80002b2:	f04f 0010 	mov.w	r0, #16
 80002b6:	0912      	lsrs	r2, r2, #4
 80002b8:	f20f 132e 	addw	r3, pc, #302	; 0x12e

080002bc <passloop_v7>:
 80002bc:	e92d 0006 	stmdb	sp!, {r1, r2}
 80002c0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80002c4:	4461      	add	r1, ip
 80002c6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000

080002ca <grouploop_v7>:
 80002ca:	eb02 3280 	add.w	r2, r2, r0, lsl #14

080002ce <butterloop_v7>:
 80002ce:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80002d2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80002d6:	eba1 0100 	sub.w	r1, r1, r0
 80002da:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80002de:	f9b3 a000 	ldrsh.w	sl, [r3]
 80002e2:	f103 0304 	add.w	r3, r3, #4
 80002e6:	eba5 0e04 	sub.w	lr, r5, r4
 80002ea:	fb0e fc0b 	mul.w	ip, lr, fp
 80002ee:	eb0a 0e4b 	add.w	lr, sl, fp, lsl #1
 80002f2:	fb05 cb0a 	mla	fp, r5, sl, ip
 80002f6:	fb04 ca0e 	mla	sl, r4, lr, ip
 80002fa:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80002fe:	f9b1 4000 	ldrsh.w	r4, [r1]
 8000302:	eba1 0100 	sub.w	r1, r1, r0
 8000306:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 800030a:	f9b3 8000 	ldrsh.w	r8, [r3]
 800030e:	f103 0304 	add.w	r3, r3, #4
 8000312:	eba5 0e04 	sub.w	lr, r5, r4
 8000316:	fb0e fc09 	mul.w	ip, lr, r9
 800031a:	eb08 0e49 	add.w	lr, r8, r9, lsl #1
 800031e:	fb05 c908 	mla	r9, r5, r8, ip
 8000322:	fb04 c80e 	mla	r8, r4, lr, ip
 8000326:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800032a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800032e:	eba1 0100 	sub.w	r1, r1, r0
 8000332:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 8000336:	f9b3 6000 	ldrsh.w	r6, [r3]
 800033a:	f103 0304 	add.w	r3, r3, #4
 800033e:	eba5 0e04 	sub.w	lr, r5, r4
 8000342:	fb0e fc07 	mul.w	ip, lr, r7
 8000346:	eb06 0e47 	add.w	lr, r6, r7, lsl #1
 800034a:	fb05 c706 	mla	r7, r5, r6, ip
 800034e:	fb04 c60e 	mla	r6, r4, lr, ip
 8000352:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8000356:	f9b1 4000 	ldrsh.w	r4, [r1]
 800035a:	44d0      	add	r8, sl
 800035c:	44d9      	add	r9, fp
 800035e:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000362:	eba9 0b4b 	sub.w	fp, r9, fp, lsl #1
 8000366:	ea4f 04a4 	mov.w	r4, r4, asr #2
 800036a:	ea4f 05a5 	mov.w	r5, r5, asr #2
 800036e:	eb04 4426 	add.w	r4, r4, r6, asr #16
 8000372:	eb05 4527 	add.w	r5, r5, r7, asr #16
 8000376:	eba4 36e6 	sub.w	r6, r4, r6, asr #15
 800037a:	eba5 37e7 	sub.w	r7, r5, r7, asr #15
 800037e:	eb04 4428 	add.w	r4, r4, r8, asr #16
 8000382:	eb05 4529 	add.w	r5, r5, r9, asr #16
 8000386:	eba4 38e8 	sub.w	r8, r4, r8, asr #15
 800038a:	eba5 39e9 	sub.w	r9, r5, r9, asr #15
 800038e:	eb06 462b 	add.w	r6, r6, fp, asr #16
 8000392:	eba7 472a 	sub.w	r7, r7, sl, asr #16
 8000396:	eba6 3beb 	sub.w	fp, r6, fp, asr #15
 800039a:	eb07 3aea 	add.w	sl, r7, sl, asr #15
 800039e:	804d      	strh	r5, [r1, #2]
 80003a0:	800c      	strh	r4, [r1, #0]
 80003a2:	4401      	add	r1, r0
 80003a4:	804f      	strh	r7, [r1, #2]
 80003a6:	800e      	strh	r6, [r1, #0]
 80003a8:	4401      	add	r1, r0
 80003aa:	f8a1 9002 	strh.w	r9, [r1, #2]
 80003ae:	f8a1 8000 	strh.w	r8, [r1]
 80003b2:	4401      	add	r1, r0
 80003b4:	f8a1 a002 	strh.w	sl, [r1, #2]
 80003b8:	f821 bb04 	strh.w	fp, [r1], #4
 80003bc:	f5b2 3280 	subs.w	r2, r2, #65536	; 0x10000
 80003c0:	da85      	bge.n	80002ce <butterloop_v7>
 80003c2:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80003c6:	4461      	add	r1, ip
 80003c8:	f1a2 0201 	sub.w	r2, r2, #1
 80003cc:	ea5f 4e02 	movs.w	lr, r2, lsl #16
 80003d0:	bf18      	it	ne
 80003d2:	eba3 030c 	subne.w	r3, r3, ip
 80003d6:	f47f af78 	bne.w	80002ca <grouploop_v7>
 80003da:	bc06      	pop	{r1, r2}
 80003dc:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80003e0:	0892      	lsrs	r2, r2, #2
 80003e2:	f47f af6b 	bne.w	80002bc <passloop_v7>
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003ea <TableFFT_V7>:
 80003ea:	4000      	.short	0x4000
 80003ec:	40000000 	.word	0x40000000
 80003f0:	40000000 	.word	0x40000000
 80003f4:	dd5d0000 	.word	0xdd5d0000
 80003f8:	22a33b21 	.word	0x22a33b21
 80003fc:	0000187e 	.word	0x0000187e
 8000400:	a57e2d41 	.word	0xa57e2d41
 8000404:	00002d41 	.word	0x00002d41
 8000408:	c0002d41 	.word	0xc0002d41
 800040c:	dd5d4000 	.word	0xdd5d4000
 8000410:	dd5de782 	.word	0xdd5de782
 8000414:	a57e3b21 	.word	0xa57e3b21
 8000418:	40002d41 	.word	0x40002d41
 800041c:	40000000 	.word	0x40000000
 8000420:	40000000 	.word	0x40000000
 8000424:	2aaa0000 	.word	0x2aaa0000
 8000428:	396b1294 	.word	0x396b1294
 800042c:	32490646 	.word	0x32490646
 8000430:	11a80c7c 	.word	0x11a80c7c
 8000434:	3249238e 	.word	0x3249238e
 8000438:	22a30c7c 	.word	0x22a30c7c
 800043c:	f721187e 	.word	0xf721187e
 8000440:	2aaa3179 	.word	0x2aaa3179
 8000444:	11a81294 	.word	0x11a81294
 8000448:	dd5d238e 	.word	0xdd5d238e
 800044c:	22a33b21 	.word	0x22a33b21
 8000450:	0000187e 	.word	0x0000187e
 8000454:	c6952d41 	.word	0xc6952d41
 8000458:	1a463fb1 	.word	0x1a463fb1
 800045c:	ee581e2b 	.word	0xee581e2b
 8000460:	b4be3537 	.word	0xb4be3537
 8000464:	11a83ec5 	.word	0x11a83ec5
 8000468:	dd5d238e 	.word	0xdd5d238e
 800046c:	a9633b21 	.word	0xa9633b21
 8000470:	08df3871 	.word	0x08df3871
 8000474:	cdb7289a 	.word	0xcdb7289a
 8000478:	a57e3ec5 	.word	0xa57e3ec5
 800047c:	00002d41 	.word	0x00002d41
 8000480:	c0002d41 	.word	0xc0002d41
 8000484:	a9634000 	.word	0xa9634000
 8000488:	f7211e2b 	.word	0xf7211e2b
 800048c:	b4be3179 	.word	0xb4be3179
 8000490:	b4be3ec5 	.word	0xb4be3ec5
 8000494:	ee580c7c 	.word	0xee580c7c
 8000498:	ac613537 	.word	0xac613537
 800049c:	c6953b21 	.word	0xc6953b21
 80004a0:	e5baf9ba 	.word	0xe5baf9ba
 80004a4:	a73b3871 	.word	0xa73b3871
 80004a8:	dd5d3537 	.word	0xdd5d3537
 80004ac:	dd5de782 	.word	0xdd5de782
 80004b0:	a57e3b21 	.word	0xa57e3b21
 80004b4:	f7212d41 	.word	0xf7212d41
 80004b8:	d556d766 	.word	0xd556d766
 80004bc:	a73b3d3f 	.word	0xa73b3d3f
 80004c0:	11a8238e 	.word	0x11a8238e
 80004c4:	cdb7cac9 	.word	0xcdb7cac9
 80004c8:	ac613ec5 	.word	0xac613ec5
 80004cc:	2aaa187e 	.word	0x2aaa187e
 80004d0:	c695c2c1 	.word	0xc695c2c1
 80004d4:	b4be3fb1 	.word	0xb4be3fb1
 80004d8:	0c7c      	.short	0x0c7c

080004da <strcmp>:
 80004da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	bf28      	it	cs
 80004e6:	429a      	cmpcs	r2, r3
 80004e8:	d0f7      	beq.n	80004da <strcmp>
 80004ea:	1ad0      	subs	r0, r2, r3
 80004ec:	4770      	bx	lr

080004ee <strlen>:
 80004ee:	4603      	mov	r3, r0
 80004f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d1fb      	bne.n	80004f0 <strlen+0x2>
 80004f8:	1a18      	subs	r0, r3, r0
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
	...

08000500 <memchr>:
 8000500:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000504:	2a10      	cmp	r2, #16
 8000506:	db2b      	blt.n	8000560 <memchr+0x60>
 8000508:	f010 0f07 	tst.w	r0, #7
 800050c:	d008      	beq.n	8000520 <memchr+0x20>
 800050e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000512:	3a01      	subs	r2, #1
 8000514:	428b      	cmp	r3, r1
 8000516:	d02d      	beq.n	8000574 <memchr+0x74>
 8000518:	f010 0f07 	tst.w	r0, #7
 800051c:	b342      	cbz	r2, 8000570 <memchr+0x70>
 800051e:	d1f6      	bne.n	800050e <memchr+0xe>
 8000520:	b4f0      	push	{r4, r5, r6, r7}
 8000522:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000526:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800052a:	f022 0407 	bic.w	r4, r2, #7
 800052e:	f07f 0700 	mvns.w	r7, #0
 8000532:	2300      	movs	r3, #0
 8000534:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000538:	3c08      	subs	r4, #8
 800053a:	ea85 0501 	eor.w	r5, r5, r1
 800053e:	ea86 0601 	eor.w	r6, r6, r1
 8000542:	fa85 f547 	uadd8	r5, r5, r7
 8000546:	faa3 f587 	sel	r5, r3, r7
 800054a:	fa86 f647 	uadd8	r6, r6, r7
 800054e:	faa5 f687 	sel	r6, r5, r7
 8000552:	b98e      	cbnz	r6, 8000578 <memchr+0x78>
 8000554:	d1ee      	bne.n	8000534 <memchr+0x34>
 8000556:	bcf0      	pop	{r4, r5, r6, r7}
 8000558:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800055c:	f002 0207 	and.w	r2, r2, #7
 8000560:	b132      	cbz	r2, 8000570 <memchr+0x70>
 8000562:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000566:	3a01      	subs	r2, #1
 8000568:	ea83 0301 	eor.w	r3, r3, r1
 800056c:	b113      	cbz	r3, 8000574 <memchr+0x74>
 800056e:	d1f8      	bne.n	8000562 <memchr+0x62>
 8000570:	2000      	movs	r0, #0
 8000572:	4770      	bx	lr
 8000574:	3801      	subs	r0, #1
 8000576:	4770      	bx	lr
 8000578:	2d00      	cmp	r5, #0
 800057a:	bf06      	itte	eq
 800057c:	4635      	moveq	r5, r6
 800057e:	3803      	subeq	r0, #3
 8000580:	3807      	subne	r0, #7
 8000582:	f015 0f01 	tst.w	r5, #1
 8000586:	d107      	bne.n	8000598 <memchr+0x98>
 8000588:	3001      	adds	r0, #1
 800058a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800058e:	bf02      	ittt	eq
 8000590:	3001      	addeq	r0, #1
 8000592:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000596:	3001      	addeq	r0, #1
 8000598:	bcf0      	pop	{r4, r5, r6, r7}
 800059a:	3801      	subs	r0, #1
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <__aeabi_drsub>:
 80005a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	e002      	b.n	80005ac <__adddf3>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dsub>:
 80005a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005ac <__adddf3>:
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	bf1f      	itttt	ne
 80005c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d2:	f000 80e2 	beq.w	800079a <__adddf3+0x1ee>
 80005d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005de:	bfb8      	it	lt
 80005e0:	426d      	neglt	r5, r5
 80005e2:	dd0c      	ble.n	80005fe <__adddf3+0x52>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea80 0202 	eor.w	r2, r0, r2
 80005ea:	ea81 0303 	eor.w	r3, r1, r3
 80005ee:	ea82 0000 	eor.w	r0, r2, r0
 80005f2:	ea83 0101 	eor.w	r1, r3, r1
 80005f6:	ea80 0202 	eor.w	r2, r0, r2
 80005fa:	ea81 0303 	eor.w	r3, r1, r3
 80005fe:	2d36      	cmp	r5, #54	; 0x36
 8000600:	bf88      	it	hi
 8000602:	bd30      	pophi	{r4, r5, pc}
 8000604:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000608:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800060c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000610:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000614:	d002      	beq.n	800061c <__adddf3+0x70>
 8000616:	4240      	negs	r0, r0
 8000618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000620:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000624:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000628:	d002      	beq.n	8000630 <__adddf3+0x84>
 800062a:	4252      	negs	r2, r2
 800062c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000630:	ea94 0f05 	teq	r4, r5
 8000634:	f000 80a7 	beq.w	8000786 <__adddf3+0x1da>
 8000638:	f1a4 0401 	sub.w	r4, r4, #1
 800063c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000640:	db0d      	blt.n	800065e <__adddf3+0xb2>
 8000642:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000646:	fa22 f205 	lsr.w	r2, r2, r5
 800064a:	1880      	adds	r0, r0, r2
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	fa03 f20e 	lsl.w	r2, r3, lr
 8000654:	1880      	adds	r0, r0, r2
 8000656:	fa43 f305 	asr.w	r3, r3, r5
 800065a:	4159      	adcs	r1, r3
 800065c:	e00e      	b.n	800067c <__adddf3+0xd0>
 800065e:	f1a5 0520 	sub.w	r5, r5, #32
 8000662:	f10e 0e20 	add.w	lr, lr, #32
 8000666:	2a01      	cmp	r2, #1
 8000668:	fa03 fc0e 	lsl.w	ip, r3, lr
 800066c:	bf28      	it	cs
 800066e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000672:	fa43 f305 	asr.w	r3, r3, r5
 8000676:	18c0      	adds	r0, r0, r3
 8000678:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	d507      	bpl.n	8000692 <__adddf3+0xe6>
 8000682:	f04f 0e00 	mov.w	lr, #0
 8000686:	f1dc 0c00 	rsbs	ip, ip, #0
 800068a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800068e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000692:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000696:	d31b      	bcc.n	80006d0 <__adddf3+0x124>
 8000698:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800069c:	d30c      	bcc.n	80006b8 <__adddf3+0x10c>
 800069e:	0849      	lsrs	r1, r1, #1
 80006a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80006a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006a8:	f104 0401 	add.w	r4, r4, #1
 80006ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006b4:	f080 809a 	bcs.w	80007ec <__adddf3+0x240>
 80006b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	ea41 0105 	orr.w	r1, r1, r5
 80006ce:	bd30      	pop	{r4, r5, pc}
 80006d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006d4:	4140      	adcs	r0, r0
 80006d6:	eb41 0101 	adc.w	r1, r1, r1
 80006da:	3c01      	subs	r4, #1
 80006dc:	bf28      	it	cs
 80006de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80006e2:	d2e9      	bcs.n	80006b8 <__adddf3+0x10c>
 80006e4:	f091 0f00 	teq	r1, #0
 80006e8:	bf04      	itt	eq
 80006ea:	4601      	moveq	r1, r0
 80006ec:	2000      	moveq	r0, #0
 80006ee:	fab1 f381 	clz	r3, r1
 80006f2:	bf08      	it	eq
 80006f4:	3320      	addeq	r3, #32
 80006f6:	f1a3 030b 	sub.w	r3, r3, #11
 80006fa:	f1b3 0220 	subs.w	r2, r3, #32
 80006fe:	da0c      	bge.n	800071a <__adddf3+0x16e>
 8000700:	320c      	adds	r2, #12
 8000702:	dd08      	ble.n	8000716 <__adddf3+0x16a>
 8000704:	f102 0c14 	add.w	ip, r2, #20
 8000708:	f1c2 020c 	rsb	r2, r2, #12
 800070c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000710:	fa21 f102 	lsr.w	r1, r1, r2
 8000714:	e00c      	b.n	8000730 <__adddf3+0x184>
 8000716:	f102 0214 	add.w	r2, r2, #20
 800071a:	bfd8      	it	le
 800071c:	f1c2 0c20 	rsble	ip, r2, #32
 8000720:	fa01 f102 	lsl.w	r1, r1, r2
 8000724:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000728:	bfdc      	itt	le
 800072a:	ea41 010c 	orrle.w	r1, r1, ip
 800072e:	4090      	lslle	r0, r2
 8000730:	1ae4      	subs	r4, r4, r3
 8000732:	bfa2      	ittt	ge
 8000734:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000738:	4329      	orrge	r1, r5
 800073a:	bd30      	popge	{r4, r5, pc}
 800073c:	ea6f 0404 	mvn.w	r4, r4
 8000740:	3c1f      	subs	r4, #31
 8000742:	da1c      	bge.n	800077e <__adddf3+0x1d2>
 8000744:	340c      	adds	r4, #12
 8000746:	dc0e      	bgt.n	8000766 <__adddf3+0x1ba>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0220 	rsb	r2, r4, #32
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f302 	lsl.w	r3, r1, r2
 8000758:	ea40 0003 	orr.w	r0, r0, r3
 800075c:	fa21 f304 	lsr.w	r3, r1, r4
 8000760:	ea45 0103 	orr.w	r1, r5, r3
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	f1c4 040c 	rsb	r4, r4, #12
 800076a:	f1c4 0220 	rsb	r2, r4, #32
 800076e:	fa20 f002 	lsr.w	r0, r0, r2
 8000772:	fa01 f304 	lsl.w	r3, r1, r4
 8000776:	ea40 0003 	orr.w	r0, r0, r3
 800077a:	4629      	mov	r1, r5
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	fa21 f004 	lsr.w	r0, r1, r4
 8000782:	4629      	mov	r1, r5
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	f094 0f00 	teq	r4, #0
 800078a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800078e:	bf06      	itte	eq
 8000790:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000794:	3401      	addeq	r4, #1
 8000796:	3d01      	subne	r5, #1
 8000798:	e74e      	b.n	8000638 <__adddf3+0x8c>
 800079a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800079e:	bf18      	it	ne
 80007a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007a4:	d029      	beq.n	80007fa <__adddf3+0x24e>
 80007a6:	ea94 0f05 	teq	r4, r5
 80007aa:	bf08      	it	eq
 80007ac:	ea90 0f02 	teqeq	r0, r2
 80007b0:	d005      	beq.n	80007be <__adddf3+0x212>
 80007b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80007b6:	bf04      	itt	eq
 80007b8:	4619      	moveq	r1, r3
 80007ba:	4610      	moveq	r0, r2
 80007bc:	bd30      	pop	{r4, r5, pc}
 80007be:	ea91 0f03 	teq	r1, r3
 80007c2:	bf1e      	ittt	ne
 80007c4:	2100      	movne	r1, #0
 80007c6:	2000      	movne	r0, #0
 80007c8:	bd30      	popne	{r4, r5, pc}
 80007ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007ce:	d105      	bne.n	80007dc <__adddf3+0x230>
 80007d0:	0040      	lsls	r0, r0, #1
 80007d2:	4149      	adcs	r1, r1
 80007d4:	bf28      	it	cs
 80007d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80007da:	bd30      	pop	{r4, r5, pc}
 80007dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80007e0:	bf3c      	itt	cc
 80007e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80007e6:	bd30      	popcc	{r4, r5, pc}
 80007e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd30      	pop	{r4, r5, pc}
 80007fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007fe:	bf1a      	itte	ne
 8000800:	4619      	movne	r1, r3
 8000802:	4610      	movne	r0, r2
 8000804:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000808:	bf1c      	itt	ne
 800080a:	460b      	movne	r3, r1
 800080c:	4602      	movne	r2, r0
 800080e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000812:	bf06      	itte	eq
 8000814:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000818:	ea91 0f03 	teqeq	r1, r3
 800081c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000820:	bd30      	pop	{r4, r5, pc}
 8000822:	bf00      	nop

08000824 <__aeabi_ui2d>:
 8000824:	f090 0f00 	teq	r0, #0
 8000828:	bf04      	itt	eq
 800082a:	2100      	moveq	r1, #0
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000834:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000838:	f04f 0500 	mov.w	r5, #0
 800083c:	f04f 0100 	mov.w	r1, #0
 8000840:	e750      	b.n	80006e4 <__adddf3+0x138>
 8000842:	bf00      	nop

08000844 <__aeabi_i2d>:
 8000844:	f090 0f00 	teq	r0, #0
 8000848:	bf04      	itt	eq
 800084a:	2100      	moveq	r1, #0
 800084c:	4770      	bxeq	lr
 800084e:	b530      	push	{r4, r5, lr}
 8000850:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000854:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000858:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800085c:	bf48      	it	mi
 800085e:	4240      	negmi	r0, r0
 8000860:	f04f 0100 	mov.w	r1, #0
 8000864:	e73e      	b.n	80006e4 <__adddf3+0x138>
 8000866:	bf00      	nop

08000868 <__aeabi_f2d>:
 8000868:	0042      	lsls	r2, r0, #1
 800086a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800086e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000872:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000876:	bf1f      	itttt	ne
 8000878:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800087c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000880:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000884:	4770      	bxne	lr
 8000886:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800088a:	bf08      	it	eq
 800088c:	4770      	bxeq	lr
 800088e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000892:	bf04      	itt	eq
 8000894:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000898:	4770      	bxeq	lr
 800089a:	b530      	push	{r4, r5, lr}
 800089c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	e71c      	b.n	80006e4 <__adddf3+0x138>
 80008aa:	bf00      	nop

080008ac <__aeabi_ul2d>:
 80008ac:	ea50 0201 	orrs.w	r2, r0, r1
 80008b0:	bf08      	it	eq
 80008b2:	4770      	bxeq	lr
 80008b4:	b530      	push	{r4, r5, lr}
 80008b6:	f04f 0500 	mov.w	r5, #0
 80008ba:	e00a      	b.n	80008d2 <__aeabi_l2d+0x16>

080008bc <__aeabi_l2d>:
 80008bc:	ea50 0201 	orrs.w	r2, r0, r1
 80008c0:	bf08      	it	eq
 80008c2:	4770      	bxeq	lr
 80008c4:	b530      	push	{r4, r5, lr}
 80008c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008ca:	d502      	bpl.n	80008d2 <__aeabi_l2d+0x16>
 80008cc:	4240      	negs	r0, r0
 80008ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008de:	f43f aed8 	beq.w	8000692 <__adddf3+0xe6>
 80008e2:	f04f 0203 	mov.w	r2, #3
 80008e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008ea:	bf18      	it	ne
 80008ec:	3203      	addne	r2, #3
 80008ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008f2:	bf18      	it	ne
 80008f4:	3203      	addne	r2, #3
 80008f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008fa:	f1c2 0320 	rsb	r3, r2, #32
 80008fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	fa01 fe03 	lsl.w	lr, r1, r3
 800090a:	ea40 000e 	orr.w	r0, r0, lr
 800090e:	fa21 f102 	lsr.w	r1, r1, r2
 8000912:	4414      	add	r4, r2
 8000914:	e6bd      	b.n	8000692 <__adddf3+0xe6>
 8000916:	bf00      	nop

08000918 <__aeabi_dmul>:
 8000918:	b570      	push	{r4, r5, r6, lr}
 800091a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800091e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000922:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000926:	bf1d      	ittte	ne
 8000928:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800092c:	ea94 0f0c 	teqne	r4, ip
 8000930:	ea95 0f0c 	teqne	r5, ip
 8000934:	f000 f8de 	bleq	8000af4 <__aeabi_dmul+0x1dc>
 8000938:	442c      	add	r4, r5
 800093a:	ea81 0603 	eor.w	r6, r1, r3
 800093e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000942:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000946:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800094a:	bf18      	it	ne
 800094c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000958:	d038      	beq.n	80009cc <__aeabi_dmul+0xb4>
 800095a:	fba0 ce02 	umull	ip, lr, r0, r2
 800095e:	f04f 0500 	mov.w	r5, #0
 8000962:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000966:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800096a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800096e:	f04f 0600 	mov.w	r6, #0
 8000972:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000976:	f09c 0f00 	teq	ip, #0
 800097a:	bf18      	it	ne
 800097c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000980:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000984:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000988:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800098c:	d204      	bcs.n	8000998 <__aeabi_dmul+0x80>
 800098e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000992:	416d      	adcs	r5, r5
 8000994:	eb46 0606 	adc.w	r6, r6, r6
 8000998:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800099c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80009a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80009a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80009a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80009ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b0:	bf88      	it	hi
 80009b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b6:	d81e      	bhi.n	80009f6 <__aeabi_dmul+0xde>
 80009b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80009c2:	f150 0000 	adcs.w	r0, r0, #0
 80009c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80009d0:	ea46 0101 	orr.w	r1, r6, r1
 80009d4:	ea40 0002 	orr.w	r0, r0, r2
 80009d8:	ea81 0103 	eor.w	r1, r1, r3
 80009dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	f300 80ab 	bgt.w	8000b50 <__aeabi_dmul+0x238>
 80009fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009fe:	bfde      	ittt	le
 8000a00:	2000      	movle	r0, #0
 8000a02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a06:	bd70      	pople	{r4, r5, r6, pc}
 8000a08:	f1c4 0400 	rsb	r4, r4, #0
 8000a0c:	3c20      	subs	r4, #32
 8000a0e:	da35      	bge.n	8000a7c <__aeabi_dmul+0x164>
 8000a10:	340c      	adds	r4, #12
 8000a12:	dc1b      	bgt.n	8000a4c <__aeabi_dmul+0x134>
 8000a14:	f104 0414 	add.w	r4, r4, #20
 8000a18:	f1c4 0520 	rsb	r5, r4, #32
 8000a1c:	fa00 f305 	lsl.w	r3, r0, r5
 8000a20:	fa20 f004 	lsr.w	r0, r0, r4
 8000a24:	fa01 f205 	lsl.w	r2, r1, r5
 8000a28:	ea40 0002 	orr.w	r0, r0, r2
 8000a2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a38:	fa21 f604 	lsr.w	r6, r1, r4
 8000a3c:	eb42 0106 	adc.w	r1, r2, r6
 8000a40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a44:	bf08      	it	eq
 8000a46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	f1c4 040c 	rsb	r4, r4, #12
 8000a50:	f1c4 0520 	rsb	r5, r4, #32
 8000a54:	fa00 f304 	lsl.w	r3, r0, r4
 8000a58:	fa20 f005 	lsr.w	r0, r0, r5
 8000a5c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a60:	ea40 0002 	orr.w	r0, r0, r2
 8000a64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a6c:	f141 0100 	adc.w	r1, r1, #0
 8000a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a74:	bf08      	it	eq
 8000a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f1c4 0520 	rsb	r5, r4, #32
 8000a80:	fa00 f205 	lsl.w	r2, r0, r5
 8000a84:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a88:	fa20 f304 	lsr.w	r3, r0, r4
 8000a8c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a90:	ea43 0302 	orr.w	r3, r3, r2
 8000a94:	fa21 f004 	lsr.w	r0, r1, r4
 8000a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a9c:	fa21 f204 	lsr.w	r2, r1, r4
 8000aa0:	ea20 0002 	bic.w	r0, r0, r2
 8000aa4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000aa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000aac:	bf08      	it	eq
 8000aae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f094 0f00 	teq	r4, #0
 8000ab8:	d10f      	bne.n	8000ada <__aeabi_dmul+0x1c2>
 8000aba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000abe:	0040      	lsls	r0, r0, #1
 8000ac0:	eb41 0101 	adc.w	r1, r1, r1
 8000ac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ac8:	bf08      	it	eq
 8000aca:	3c01      	subeq	r4, #1
 8000acc:	d0f7      	beq.n	8000abe <__aeabi_dmul+0x1a6>
 8000ace:	ea41 0106 	orr.w	r1, r1, r6
 8000ad2:	f095 0f00 	teq	r5, #0
 8000ad6:	bf18      	it	ne
 8000ad8:	4770      	bxne	lr
 8000ada:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000ade:	0052      	lsls	r2, r2, #1
 8000ae0:	eb43 0303 	adc.w	r3, r3, r3
 8000ae4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000ae8:	bf08      	it	eq
 8000aea:	3d01      	subeq	r5, #1
 8000aec:	d0f7      	beq.n	8000ade <__aeabi_dmul+0x1c6>
 8000aee:	ea43 0306 	orr.w	r3, r3, r6
 8000af2:	4770      	bx	lr
 8000af4:	ea94 0f0c 	teq	r4, ip
 8000af8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000afc:	bf18      	it	ne
 8000afe:	ea95 0f0c 	teqne	r5, ip
 8000b02:	d00c      	beq.n	8000b1e <__aeabi_dmul+0x206>
 8000b04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b08:	bf18      	it	ne
 8000b0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b0e:	d1d1      	bne.n	8000ab4 <__aeabi_dmul+0x19c>
 8000b10:	ea81 0103 	eor.w	r1, r1, r3
 8000b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
 8000b1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b22:	bf06      	itte	eq
 8000b24:	4610      	moveq	r0, r2
 8000b26:	4619      	moveq	r1, r3
 8000b28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b2c:	d019      	beq.n	8000b62 <__aeabi_dmul+0x24a>
 8000b2e:	ea94 0f0c 	teq	r4, ip
 8000b32:	d102      	bne.n	8000b3a <__aeabi_dmul+0x222>
 8000b34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b38:	d113      	bne.n	8000b62 <__aeabi_dmul+0x24a>
 8000b3a:	ea95 0f0c 	teq	r5, ip
 8000b3e:	d105      	bne.n	8000b4c <__aeabi_dmul+0x234>
 8000b40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b44:	bf1c      	itt	ne
 8000b46:	4610      	movne	r0, r2
 8000b48:	4619      	movne	r1, r3
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dmul+0x24a>
 8000b4c:	ea81 0103 	eor.w	r1, r1, r3
 8000b50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	bd70      	pop	{r4, r5, r6, pc}
 8000b62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}

08000b6c <__aeabi_ddiv>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b7a:	bf1d      	ittte	ne
 8000b7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b80:	ea94 0f0c 	teqne	r4, ip
 8000b84:	ea95 0f0c 	teqne	r5, ip
 8000b88:	f000 f8a7 	bleq	8000cda <__aeabi_ddiv+0x16e>
 8000b8c:	eba4 0405 	sub.w	r4, r4, r5
 8000b90:	ea81 0e03 	eor.w	lr, r1, r3
 8000b94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b9c:	f000 8088 	beq.w	8000cb0 <__aeabi_ddiv+0x144>
 8000ba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ba4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ba8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000bac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000bb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000bb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000bb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000bbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000bc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000bc4:	429d      	cmp	r5, r3
 8000bc6:	bf08      	it	eq
 8000bc8:	4296      	cmpeq	r6, r2
 8000bca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000bce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000bd2:	d202      	bcs.n	8000bda <__aeabi_ddiv+0x6e>
 8000bd4:	085b      	lsrs	r3, r3, #1
 8000bd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bda:	1ab6      	subs	r6, r6, r2
 8000bdc:	eb65 0503 	sbc.w	r5, r5, r3
 8000be0:	085b      	lsrs	r3, r3, #1
 8000be2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000be6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000bea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000bee:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bf6:	bf22      	ittt	cs
 8000bf8:	1ab6      	subcs	r6, r6, r2
 8000bfa:	4675      	movcs	r5, lr
 8000bfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c00:	085b      	lsrs	r3, r3, #1
 8000c02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c0e:	bf22      	ittt	cs
 8000c10:	1ab6      	subcs	r6, r6, r2
 8000c12:	4675      	movcs	r5, lr
 8000c14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c18:	085b      	lsrs	r3, r3, #1
 8000c1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c26:	bf22      	ittt	cs
 8000c28:	1ab6      	subcs	r6, r6, r2
 8000c2a:	4675      	movcs	r5, lr
 8000c2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c3e:	bf22      	ittt	cs
 8000c40:	1ab6      	subcs	r6, r6, r2
 8000c42:	4675      	movcs	r5, lr
 8000c44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c4c:	d018      	beq.n	8000c80 <__aeabi_ddiv+0x114>
 8000c4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c6a:	d1c0      	bne.n	8000bee <__aeabi_ddiv+0x82>
 8000c6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c70:	d10b      	bne.n	8000c8a <__aeabi_ddiv+0x11e>
 8000c72:	ea41 0100 	orr.w	r1, r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c7e:	e7b6      	b.n	8000bee <__aeabi_ddiv+0x82>
 8000c80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c84:	bf04      	itt	eq
 8000c86:	4301      	orreq	r1, r0
 8000c88:	2000      	moveq	r0, #0
 8000c8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c8e:	bf88      	it	hi
 8000c90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c94:	f63f aeaf 	bhi.w	80009f6 <__aeabi_dmul+0xde>
 8000c98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c9c:	bf04      	itt	eq
 8000c9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ca6:	f150 0000 	adcs.w	r0, r0, #0
 8000caa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000cb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000cb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000cbc:	bfc2      	ittt	gt
 8000cbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000cc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000cc6:	bd70      	popgt	{r4, r5, r6, pc}
 8000cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ccc:	f04f 0e00 	mov.w	lr, #0
 8000cd0:	3c01      	subs	r4, #1
 8000cd2:	e690      	b.n	80009f6 <__aeabi_dmul+0xde>
 8000cd4:	ea45 0e06 	orr.w	lr, r5, r6
 8000cd8:	e68d      	b.n	80009f6 <__aeabi_dmul+0xde>
 8000cda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000cde:	ea94 0f0c 	teq	r4, ip
 8000ce2:	bf08      	it	eq
 8000ce4:	ea95 0f0c 	teqeq	r5, ip
 8000ce8:	f43f af3b 	beq.w	8000b62 <__aeabi_dmul+0x24a>
 8000cec:	ea94 0f0c 	teq	r4, ip
 8000cf0:	d10a      	bne.n	8000d08 <__aeabi_ddiv+0x19c>
 8000cf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000cf6:	f47f af34 	bne.w	8000b62 <__aeabi_dmul+0x24a>
 8000cfa:	ea95 0f0c 	teq	r5, ip
 8000cfe:	f47f af25 	bne.w	8000b4c <__aeabi_dmul+0x234>
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	e72c      	b.n	8000b62 <__aeabi_dmul+0x24a>
 8000d08:	ea95 0f0c 	teq	r5, ip
 8000d0c:	d106      	bne.n	8000d1c <__aeabi_ddiv+0x1b0>
 8000d0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d12:	f43f aefd 	beq.w	8000b10 <__aeabi_dmul+0x1f8>
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	e722      	b.n	8000b62 <__aeabi_dmul+0x24a>
 8000d1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d20:	bf18      	it	ne
 8000d22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d26:	f47f aec5 	bne.w	8000ab4 <__aeabi_dmul+0x19c>
 8000d2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d2e:	f47f af0d 	bne.w	8000b4c <__aeabi_dmul+0x234>
 8000d32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d36:	f47f aeeb 	bne.w	8000b10 <__aeabi_dmul+0x1f8>
 8000d3a:	e712      	b.n	8000b62 <__aeabi_dmul+0x24a>

08000d3c <__gedf2>:
 8000d3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000d40:	e006      	b.n	8000d50 <__cmpdf2+0x4>
 8000d42:	bf00      	nop

08000d44 <__ledf2>:
 8000d44:	f04f 0c01 	mov.w	ip, #1
 8000d48:	e002      	b.n	8000d50 <__cmpdf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__cmpdf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d60:	bf18      	it	ne
 8000d62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d66:	d01b      	beq.n	8000da0 <__cmpdf2+0x54>
 8000d68:	b001      	add	sp, #4
 8000d6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d6e:	bf0c      	ite	eq
 8000d70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d74:	ea91 0f03 	teqne	r1, r3
 8000d78:	bf02      	ittt	eq
 8000d7a:	ea90 0f02 	teqeq	r0, r2
 8000d7e:	2000      	moveq	r0, #0
 8000d80:	4770      	bxeq	lr
 8000d82:	f110 0f00 	cmn.w	r0, #0
 8000d86:	ea91 0f03 	teq	r1, r3
 8000d8a:	bf58      	it	pl
 8000d8c:	4299      	cmppl	r1, r3
 8000d8e:	bf08      	it	eq
 8000d90:	4290      	cmpeq	r0, r2
 8000d92:	bf2c      	ite	cs
 8000d94:	17d8      	asrcs	r0, r3, #31
 8000d96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d9a:	f040 0001 	orr.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000da8:	d102      	bne.n	8000db0 <__cmpdf2+0x64>
 8000daa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dae:	d107      	bne.n	8000dc0 <__cmpdf2+0x74>
 8000db0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000db8:	d1d6      	bne.n	8000d68 <__cmpdf2+0x1c>
 8000dba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dbe:	d0d3      	beq.n	8000d68 <__cmpdf2+0x1c>
 8000dc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_cdrcmple>:
 8000dc8:	4684      	mov	ip, r0
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4662      	mov	r2, ip
 8000dce:	468c      	mov	ip, r1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4663      	mov	r3, ip
 8000dd4:	e000      	b.n	8000dd8 <__aeabi_cdcmpeq>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_cdcmpeq>:
 8000dd8:	b501      	push	{r0, lr}
 8000dda:	f7ff ffb7 	bl	8000d4c <__cmpdf2>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	bf48      	it	mi
 8000de2:	f110 0f00 	cmnmi.w	r0, #0
 8000de6:	bd01      	pop	{r0, pc}

08000de8 <__aeabi_dcmpeq>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff fff4 	bl	8000dd8 <__aeabi_cdcmpeq>
 8000df0:	bf0c      	ite	eq
 8000df2:	2001      	moveq	r0, #1
 8000df4:	2000      	movne	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_dcmplt>:
 8000dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e00:	f7ff ffea 	bl	8000dd8 <__aeabi_cdcmpeq>
 8000e04:	bf34      	ite	cc
 8000e06:	2001      	movcc	r0, #1
 8000e08:	2000      	movcs	r0, #0
 8000e0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0e:	bf00      	nop

08000e10 <__aeabi_dcmple>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff ffe0 	bl	8000dd8 <__aeabi_cdcmpeq>
 8000e18:	bf94      	ite	ls
 8000e1a:	2001      	movls	r0, #1
 8000e1c:	2000      	movhi	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_dcmpge>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffce 	bl	8000dc8 <__aeabi_cdrcmple>
 8000e2c:	bf94      	ite	ls
 8000e2e:	2001      	movls	r0, #1
 8000e30:	2000      	movhi	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_dcmpgt>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffc4 	bl	8000dc8 <__aeabi_cdrcmple>
 8000e40:	bf34      	ite	cc
 8000e42:	2001      	movcc	r0, #1
 8000e44:	2000      	movcs	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_d2iz>:
 8000e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e54:	d215      	bcs.n	8000e82 <__aeabi_d2iz+0x36>
 8000e56:	d511      	bpl.n	8000e7c <__aeabi_d2iz+0x30>
 8000e58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e60:	d912      	bls.n	8000e88 <__aeabi_d2iz+0x3c>
 8000e62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e72:	fa23 f002 	lsr.w	r0, r3, r2
 8000e76:	bf18      	it	ne
 8000e78:	4240      	negne	r0, r0
 8000e7a:	4770      	bx	lr
 8000e7c:	f04f 0000 	mov.w	r0, #0
 8000e80:	4770      	bx	lr
 8000e82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e86:	d105      	bne.n	8000e94 <__aeabi_d2iz+0x48>
 8000e88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e92:	4770      	bx	lr
 8000e94:	f04f 0000 	mov.w	r0, #0
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <__aeabi_d2uiz>:
 8000e9c:	004a      	lsls	r2, r1, #1
 8000e9e:	d211      	bcs.n	8000ec4 <__aeabi_d2uiz+0x28>
 8000ea0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ea4:	d211      	bcs.n	8000eca <__aeabi_d2uiz+0x2e>
 8000ea6:	d50d      	bpl.n	8000ec4 <__aeabi_d2uiz+0x28>
 8000ea8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000eac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000eb0:	d40e      	bmi.n	8000ed0 <__aeabi_d2uiz+0x34>
 8000eb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ebe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ec2:	4770      	bx	lr
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	4770      	bx	lr
 8000eca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ece:	d102      	bne.n	8000ed6 <__aeabi_d2uiz+0x3a>
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	4770      	bx	lr
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	4770      	bx	lr

08000edc <__aeabi_d2f>:
 8000edc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ee0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ee4:	bf24      	itt	cs
 8000ee6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000eea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000eee:	d90d      	bls.n	8000f0c <__aeabi_d2f+0x30>
 8000ef0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ef8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000efc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000f00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000f04:	bf08      	it	eq
 8000f06:	f020 0001 	biceq.w	r0, r0, #1
 8000f0a:	4770      	bx	lr
 8000f0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000f10:	d121      	bne.n	8000f56 <__aeabi_d2f+0x7a>
 8000f12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000f16:	bfbc      	itt	lt
 8000f18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000f1c:	4770      	bxlt	lr
 8000f1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f26:	f1c2 0218 	rsb	r2, r2, #24
 8000f2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000f2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f32:	fa20 f002 	lsr.w	r0, r0, r2
 8000f36:	bf18      	it	ne
 8000f38:	f040 0001 	orrne.w	r0, r0, #1
 8000f3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f48:	ea40 000c 	orr.w	r0, r0, ip
 8000f4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000f50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f54:	e7cc      	b.n	8000ef0 <__aeabi_d2f+0x14>
 8000f56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f5a:	d107      	bne.n	8000f6c <__aeabi_d2f+0x90>
 8000f5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f60:	bf1e      	ittt	ne
 8000f62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f6a:	4770      	bxne	lr
 8000f6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__aeabi_uldivmod>:
 8000f7c:	b953      	cbnz	r3, 8000f94 <__aeabi_uldivmod+0x18>
 8000f7e:	b94a      	cbnz	r2, 8000f94 <__aeabi_uldivmod+0x18>
 8000f80:	2900      	cmp	r1, #0
 8000f82:	bf08      	it	eq
 8000f84:	2800      	cmpeq	r0, #0
 8000f86:	bf1c      	itt	ne
 8000f88:	f04f 31ff 	movne.w	r1, #4294967295
 8000f8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f90:	f000 b974 	b.w	800127c <__aeabi_idiv0>
 8000f94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f9c:	f000 f806 	bl	8000fac <__udivmoddi4>
 8000fa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa8:	b004      	add	sp, #16
 8000faa:	4770      	bx	lr

08000fac <__udivmoddi4>:
 8000fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb0:	9d08      	ldr	r5, [sp, #32]
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	468e      	mov	lr, r1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d14d      	bne.n	8001056 <__udivmoddi4+0xaa>
 8000fba:	428a      	cmp	r2, r1
 8000fbc:	4694      	mov	ip, r2
 8000fbe:	d969      	bls.n	8001094 <__udivmoddi4+0xe8>
 8000fc0:	fab2 f282 	clz	r2, r2
 8000fc4:	b152      	cbz	r2, 8000fdc <__udivmoddi4+0x30>
 8000fc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000fca:	f1c2 0120 	rsb	r1, r2, #32
 8000fce:	fa20 f101 	lsr.w	r1, r0, r1
 8000fd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000fda:	4094      	lsls	r4, r2
 8000fdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fe0:	0c21      	lsrs	r1, r4, #16
 8000fe2:	fbbe f6f8 	udiv	r6, lr, r8
 8000fe6:	fa1f f78c 	uxth.w	r7, ip
 8000fea:	fb08 e316 	mls	r3, r8, r6, lr
 8000fee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ff2:	fb06 f107 	mul.w	r1, r6, r7
 8000ff6:	4299      	cmp	r1, r3
 8000ff8:	d90a      	bls.n	8001010 <__udivmoddi4+0x64>
 8000ffa:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffe:	f106 30ff 	add.w	r0, r6, #4294967295
 8001002:	f080 811f 	bcs.w	8001244 <__udivmoddi4+0x298>
 8001006:	4299      	cmp	r1, r3
 8001008:	f240 811c 	bls.w	8001244 <__udivmoddi4+0x298>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	1a5b      	subs	r3, r3, r1
 8001012:	b2a4      	uxth	r4, r4
 8001014:	fbb3 f0f8 	udiv	r0, r3, r8
 8001018:	fb08 3310 	mls	r3, r8, r0, r3
 800101c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001020:	fb00 f707 	mul.w	r7, r0, r7
 8001024:	42a7      	cmp	r7, r4
 8001026:	d90a      	bls.n	800103e <__udivmoddi4+0x92>
 8001028:	eb1c 0404 	adds.w	r4, ip, r4
 800102c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001030:	f080 810a 	bcs.w	8001248 <__udivmoddi4+0x29c>
 8001034:	42a7      	cmp	r7, r4
 8001036:	f240 8107 	bls.w	8001248 <__udivmoddi4+0x29c>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001042:	1be4      	subs	r4, r4, r7
 8001044:	2600      	movs	r6, #0
 8001046:	b11d      	cbz	r5, 8001050 <__udivmoddi4+0xa4>
 8001048:	40d4      	lsrs	r4, r2
 800104a:	2300      	movs	r3, #0
 800104c:	e9c5 4300 	strd	r4, r3, [r5]
 8001050:	4631      	mov	r1, r6
 8001052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001056:	428b      	cmp	r3, r1
 8001058:	d909      	bls.n	800106e <__udivmoddi4+0xc2>
 800105a:	2d00      	cmp	r5, #0
 800105c:	f000 80ef 	beq.w	800123e <__udivmoddi4+0x292>
 8001060:	2600      	movs	r6, #0
 8001062:	e9c5 0100 	strd	r0, r1, [r5]
 8001066:	4630      	mov	r0, r6
 8001068:	4631      	mov	r1, r6
 800106a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800106e:	fab3 f683 	clz	r6, r3
 8001072:	2e00      	cmp	r6, #0
 8001074:	d14a      	bne.n	800110c <__udivmoddi4+0x160>
 8001076:	428b      	cmp	r3, r1
 8001078:	d302      	bcc.n	8001080 <__udivmoddi4+0xd4>
 800107a:	4282      	cmp	r2, r0
 800107c:	f200 80f9 	bhi.w	8001272 <__udivmoddi4+0x2c6>
 8001080:	1a84      	subs	r4, r0, r2
 8001082:	eb61 0303 	sbc.w	r3, r1, r3
 8001086:	2001      	movs	r0, #1
 8001088:	469e      	mov	lr, r3
 800108a:	2d00      	cmp	r5, #0
 800108c:	d0e0      	beq.n	8001050 <__udivmoddi4+0xa4>
 800108e:	e9c5 4e00 	strd	r4, lr, [r5]
 8001092:	e7dd      	b.n	8001050 <__udivmoddi4+0xa4>
 8001094:	b902      	cbnz	r2, 8001098 <__udivmoddi4+0xec>
 8001096:	deff      	udf	#255	; 0xff
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	2a00      	cmp	r2, #0
 800109e:	f040 8092 	bne.w	80011c6 <__udivmoddi4+0x21a>
 80010a2:	eba1 010c 	sub.w	r1, r1, ip
 80010a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010aa:	fa1f fe8c 	uxth.w	lr, ip
 80010ae:	2601      	movs	r6, #1
 80010b0:	0c20      	lsrs	r0, r4, #16
 80010b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80010b6:	fb07 1113 	mls	r1, r7, r3, r1
 80010ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010be:	fb0e f003 	mul.w	r0, lr, r3
 80010c2:	4288      	cmp	r0, r1
 80010c4:	d908      	bls.n	80010d8 <__udivmoddi4+0x12c>
 80010c6:	eb1c 0101 	adds.w	r1, ip, r1
 80010ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80010ce:	d202      	bcs.n	80010d6 <__udivmoddi4+0x12a>
 80010d0:	4288      	cmp	r0, r1
 80010d2:	f200 80cb 	bhi.w	800126c <__udivmoddi4+0x2c0>
 80010d6:	4643      	mov	r3, r8
 80010d8:	1a09      	subs	r1, r1, r0
 80010da:	b2a4      	uxth	r4, r4
 80010dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80010e0:	fb07 1110 	mls	r1, r7, r0, r1
 80010e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010e8:	fb0e fe00 	mul.w	lr, lr, r0
 80010ec:	45a6      	cmp	lr, r4
 80010ee:	d908      	bls.n	8001102 <__udivmoddi4+0x156>
 80010f0:	eb1c 0404 	adds.w	r4, ip, r4
 80010f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80010f8:	d202      	bcs.n	8001100 <__udivmoddi4+0x154>
 80010fa:	45a6      	cmp	lr, r4
 80010fc:	f200 80bb 	bhi.w	8001276 <__udivmoddi4+0x2ca>
 8001100:	4608      	mov	r0, r1
 8001102:	eba4 040e 	sub.w	r4, r4, lr
 8001106:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800110a:	e79c      	b.n	8001046 <__udivmoddi4+0x9a>
 800110c:	f1c6 0720 	rsb	r7, r6, #32
 8001110:	40b3      	lsls	r3, r6
 8001112:	fa22 fc07 	lsr.w	ip, r2, r7
 8001116:	ea4c 0c03 	orr.w	ip, ip, r3
 800111a:	fa20 f407 	lsr.w	r4, r0, r7
 800111e:	fa01 f306 	lsl.w	r3, r1, r6
 8001122:	431c      	orrs	r4, r3
 8001124:	40f9      	lsrs	r1, r7
 8001126:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800112a:	fa00 f306 	lsl.w	r3, r0, r6
 800112e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001132:	0c20      	lsrs	r0, r4, #16
 8001134:	fa1f fe8c 	uxth.w	lr, ip
 8001138:	fb09 1118 	mls	r1, r9, r8, r1
 800113c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001140:	fb08 f00e 	mul.w	r0, r8, lr
 8001144:	4288      	cmp	r0, r1
 8001146:	fa02 f206 	lsl.w	r2, r2, r6
 800114a:	d90b      	bls.n	8001164 <__udivmoddi4+0x1b8>
 800114c:	eb1c 0101 	adds.w	r1, ip, r1
 8001150:	f108 3aff 	add.w	sl, r8, #4294967295
 8001154:	f080 8088 	bcs.w	8001268 <__udivmoddi4+0x2bc>
 8001158:	4288      	cmp	r0, r1
 800115a:	f240 8085 	bls.w	8001268 <__udivmoddi4+0x2bc>
 800115e:	f1a8 0802 	sub.w	r8, r8, #2
 8001162:	4461      	add	r1, ip
 8001164:	1a09      	subs	r1, r1, r0
 8001166:	b2a4      	uxth	r4, r4
 8001168:	fbb1 f0f9 	udiv	r0, r1, r9
 800116c:	fb09 1110 	mls	r1, r9, r0, r1
 8001170:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001174:	fb00 fe0e 	mul.w	lr, r0, lr
 8001178:	458e      	cmp	lr, r1
 800117a:	d908      	bls.n	800118e <__udivmoddi4+0x1e2>
 800117c:	eb1c 0101 	adds.w	r1, ip, r1
 8001180:	f100 34ff 	add.w	r4, r0, #4294967295
 8001184:	d26c      	bcs.n	8001260 <__udivmoddi4+0x2b4>
 8001186:	458e      	cmp	lr, r1
 8001188:	d96a      	bls.n	8001260 <__udivmoddi4+0x2b4>
 800118a:	3802      	subs	r0, #2
 800118c:	4461      	add	r1, ip
 800118e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001192:	fba0 9402 	umull	r9, r4, r0, r2
 8001196:	eba1 010e 	sub.w	r1, r1, lr
 800119a:	42a1      	cmp	r1, r4
 800119c:	46c8      	mov	r8, r9
 800119e:	46a6      	mov	lr, r4
 80011a0:	d356      	bcc.n	8001250 <__udivmoddi4+0x2a4>
 80011a2:	d053      	beq.n	800124c <__udivmoddi4+0x2a0>
 80011a4:	b15d      	cbz	r5, 80011be <__udivmoddi4+0x212>
 80011a6:	ebb3 0208 	subs.w	r2, r3, r8
 80011aa:	eb61 010e 	sbc.w	r1, r1, lr
 80011ae:	fa01 f707 	lsl.w	r7, r1, r7
 80011b2:	fa22 f306 	lsr.w	r3, r2, r6
 80011b6:	40f1      	lsrs	r1, r6
 80011b8:	431f      	orrs	r7, r3
 80011ba:	e9c5 7100 	strd	r7, r1, [r5]
 80011be:	2600      	movs	r6, #0
 80011c0:	4631      	mov	r1, r6
 80011c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c6:	f1c2 0320 	rsb	r3, r2, #32
 80011ca:	40d8      	lsrs	r0, r3
 80011cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d0:	fa21 f303 	lsr.w	r3, r1, r3
 80011d4:	4091      	lsls	r1, r2
 80011d6:	4301      	orrs	r1, r0
 80011d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011dc:	fa1f fe8c 	uxth.w	lr, ip
 80011e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80011e4:	fb07 3610 	mls	r6, r7, r0, r3
 80011e8:	0c0b      	lsrs	r3, r1, #16
 80011ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011ee:	fb00 f60e 	mul.w	r6, r0, lr
 80011f2:	429e      	cmp	r6, r3
 80011f4:	fa04 f402 	lsl.w	r4, r4, r2
 80011f8:	d908      	bls.n	800120c <__udivmoddi4+0x260>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8001202:	d22f      	bcs.n	8001264 <__udivmoddi4+0x2b8>
 8001204:	429e      	cmp	r6, r3
 8001206:	d92d      	bls.n	8001264 <__udivmoddi4+0x2b8>
 8001208:	3802      	subs	r0, #2
 800120a:	4463      	add	r3, ip
 800120c:	1b9b      	subs	r3, r3, r6
 800120e:	b289      	uxth	r1, r1
 8001210:	fbb3 f6f7 	udiv	r6, r3, r7
 8001214:	fb07 3316 	mls	r3, r7, r6, r3
 8001218:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800121c:	fb06 f30e 	mul.w	r3, r6, lr
 8001220:	428b      	cmp	r3, r1
 8001222:	d908      	bls.n	8001236 <__udivmoddi4+0x28a>
 8001224:	eb1c 0101 	adds.w	r1, ip, r1
 8001228:	f106 38ff 	add.w	r8, r6, #4294967295
 800122c:	d216      	bcs.n	800125c <__udivmoddi4+0x2b0>
 800122e:	428b      	cmp	r3, r1
 8001230:	d914      	bls.n	800125c <__udivmoddi4+0x2b0>
 8001232:	3e02      	subs	r6, #2
 8001234:	4461      	add	r1, ip
 8001236:	1ac9      	subs	r1, r1, r3
 8001238:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800123c:	e738      	b.n	80010b0 <__udivmoddi4+0x104>
 800123e:	462e      	mov	r6, r5
 8001240:	4628      	mov	r0, r5
 8001242:	e705      	b.n	8001050 <__udivmoddi4+0xa4>
 8001244:	4606      	mov	r6, r0
 8001246:	e6e3      	b.n	8001010 <__udivmoddi4+0x64>
 8001248:	4618      	mov	r0, r3
 800124a:	e6f8      	b.n	800103e <__udivmoddi4+0x92>
 800124c:	454b      	cmp	r3, r9
 800124e:	d2a9      	bcs.n	80011a4 <__udivmoddi4+0x1f8>
 8001250:	ebb9 0802 	subs.w	r8, r9, r2
 8001254:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001258:	3801      	subs	r0, #1
 800125a:	e7a3      	b.n	80011a4 <__udivmoddi4+0x1f8>
 800125c:	4646      	mov	r6, r8
 800125e:	e7ea      	b.n	8001236 <__udivmoddi4+0x28a>
 8001260:	4620      	mov	r0, r4
 8001262:	e794      	b.n	800118e <__udivmoddi4+0x1e2>
 8001264:	4640      	mov	r0, r8
 8001266:	e7d1      	b.n	800120c <__udivmoddi4+0x260>
 8001268:	46d0      	mov	r8, sl
 800126a:	e77b      	b.n	8001164 <__udivmoddi4+0x1b8>
 800126c:	3b02      	subs	r3, #2
 800126e:	4461      	add	r1, ip
 8001270:	e732      	b.n	80010d8 <__udivmoddi4+0x12c>
 8001272:	4630      	mov	r0, r6
 8001274:	e709      	b.n	800108a <__udivmoddi4+0xde>
 8001276:	4464      	add	r4, ip
 8001278:	3802      	subs	r0, #2
 800127a:	e742      	b.n	8001102 <__udivmoddi4+0x156>

0800127c <__aeabi_idiv0>:
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff f930 	bl	80004ee <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <Send_Uart+0x28>)
 800129a:	f006 fa74 	bl	8007786 <HAL_UART_Transmit>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000a04 	.word	0x20000a04

080012ac <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80012b4:	2201      	movs	r2, #1
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <Mount_SD+0x38>)
 80012ba:	f009 fbc7 	bl	800aa4c <f_mount>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <Mount_SD+0x3c>)
 80012c4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <Mount_SD+0x3c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <Mount_SD+0x2a>
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <Mount_SD+0x40>)
 80012d0:	f7ff ffd6 	bl	8001280 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 80012d4:	e002      	b.n	80012dc <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <Mount_SD+0x44>)
 80012d8:	f7ff ffd2 	bl	8001280 <Send_Uart>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000c0 	.word	0x200000c0
 80012e8:	2000053c 	.word	0x2000053c
 80012ec:	08010088 	.word	0x08010088
 80012f0:	080100ac 	.word	0x080100ac

080012f4 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	2000      	movs	r0, #0
 8001302:	f009 fba3 	bl	800aa4c <f_mount>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <Unmount_SD+0x38>)
 800130c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <Unmount_SD+0x38>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <Unmount_SD+0x2a>
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <Unmount_SD+0x3c>)
 8001318:	f7ff ffb2 	bl	8001280 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 800131c:	e002      	b.n	8001324 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <Unmount_SD+0x40>)
 8001320:	f7ff ffae 	bl	8001280 <Send_Uart>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000053c 	.word	0x2000053c
 8001330:	080100d0 	.word	0x080100d0
 8001334:	080100f8 	.word	0x080100f8

08001338 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 800133e:	2014      	movs	r0, #20
 8001340:	f00c fd2a 	bl	800dd98 <pvPortMalloc>
 8001344:	6378      	str	r0, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <Format_SD+0xb4>)
 8001348:	4929      	ldr	r1, [pc, #164]	; (80013f0 <Format_SD+0xb8>)
 800134a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800134c:	f00c ff4e 	bl	800e1ec <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001354:	4618      	mov	r0, r3
 8001356:	f009 fffe 	bl	800b356 <f_opendir>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <Format_SD+0xbc>)
 8001360:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <Format_SD+0xbc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d136      	bne.n	80013d8 <Format_SD+0xa0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4922      	ldr	r1, [pc, #136]	; (80013f8 <Format_SD+0xc0>)
 800136e:	4618      	mov	r0, r3
 8001370:	f00a f895 	bl	800b49e <f_readdir>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <Format_SD+0xbc>)
 800137a:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <Format_SD+0xbc>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d125      	bne.n	80013d0 <Format_SD+0x98>
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <Format_SD+0xc0>)
 8001386:	7a5b      	ldrb	r3, [r3, #9]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d021      	beq.n	80013d0 <Format_SD+0x98>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <Format_SD+0xc0>)
 800138e:	7a1b      	ldrb	r3, [r3, #8]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	d011      	beq.n	80013bc <Format_SD+0x84>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001398:	4918      	ldr	r1, [pc, #96]	; (80013fc <Format_SD+0xc4>)
 800139a:	4819      	ldr	r0, [pc, #100]	; (8001400 <Format_SD+0xc8>)
 800139c:	f7ff f89d 	bl	80004da <strcmp>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <Format_SD+0x94>
            	fresult = f_unlink(fno.fname);
 80013a6:	4815      	ldr	r0, [pc, #84]	; (80013fc <Format_SD+0xc4>)
 80013a8:	f00a f8fc 	bl	800b5a4 <f_unlink>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <Format_SD+0xbc>)
 80013b2:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <Format_SD+0xbc>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b07      	cmp	r3, #7
 80013ba:	e7d6      	b.n	800136a <Format_SD+0x32>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80013bc:	480f      	ldr	r0, [pc, #60]	; (80013fc <Format_SD+0xc4>)
 80013be:	f00a f8f1 	bl	800b5a4 <f_unlink>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <Format_SD+0xbc>)
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e7ce      	b.n	800136a <Format_SD+0x32>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80013cc:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80013ce:	e7cc      	b.n	800136a <Format_SD+0x32>
            }
        }
        f_closedir(&dir);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00a f838 	bl	800b448 <f_closedir>
    }
    vPortFree(path);
 80013d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013da:	f00c fda9 	bl	800df30 <vPortFree>
    return fresult;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <Format_SD+0xbc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3738      	adds	r7, #56	; 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	0801014c 	.word	0x0801014c
 80013f0:	0801011c 	.word	0x0801011c
 80013f4:	2000053c 	.word	0x2000053c
 80013f8:	20000524 	.word	0x20000524
 80013fc:	2000052d 	.word	0x2000052d
 8001400:	08010120 	.word	0x08010120

08001404 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800140c:	4940      	ldr	r1, [pc, #256]	; (8001510 <Create_File+0x10c>)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f00a f888 	bl	800b524 <f_stat>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <Create_File+0x110>)
 800141a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <Create_File+0x110>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d111      	bne.n	8001448 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001424:	2064      	movs	r0, #100	; 0x64
 8001426:	f00c fcb7 	bl	800dd98 <pvPortMalloc>
 800142a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	493a      	ldr	r1, [pc, #232]	; (8001518 <Create_File+0x114>)
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f00c fedb 	bl	800e1ec <siprintf>
		Send_Uart(buf);
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff ff22 	bl	8001280 <Send_Uart>
		vPortFree(buf);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f00c fd77 	bl	800df30 <vPortFree>
	    return fresult;
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <Create_File+0x110>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	e05f      	b.n	8001508 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001448:	220b      	movs	r2, #11
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4833      	ldr	r0, [pc, #204]	; (800151c <Create_File+0x118>)
 800144e:	f009 fb61 	bl	800ab14 <f_open>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <Create_File+0x110>)
 8001458:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <Create_File+0x110>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d014      	beq.n	800148c <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f00c fc98 	bl	800dd98 <pvPortMalloc>
 8001468:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <Create_File+0x110>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	492b      	ldr	r1, [pc, #172]	; (8001520 <Create_File+0x11c>)
 8001474:	6938      	ldr	r0, [r7, #16]
 8001476:	f00c feb9 	bl	800e1ec <siprintf>
			Send_Uart(buf);
 800147a:	6938      	ldr	r0, [r7, #16]
 800147c:	f7ff ff00 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 8001480:	6938      	ldr	r0, [r7, #16]
 8001482:	f00c fd55 	bl	800df30 <vPortFree>
		    return fresult;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <Create_File+0x110>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	e03d      	b.n	8001508 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800148c:	2064      	movs	r0, #100	; 0x64
 800148e:	f00c fc83 	bl	800dd98 <pvPortMalloc>
 8001492:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4923      	ldr	r1, [pc, #140]	; (8001524 <Create_File+0x120>)
 8001498:	69f8      	ldr	r0, [r7, #28]
 800149a:	f00c fea7 	bl	800e1ec <siprintf>
			Send_Uart(buf);
 800149e:	69f8      	ldr	r0, [r7, #28]
 80014a0:	f7ff feee 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 80014a4:	69f8      	ldr	r0, [r7, #28]
 80014a6:	f00c fd43 	bl	800df30 <vPortFree>
		}

		fresult = f_close(&fil);
 80014aa:	481c      	ldr	r0, [pc, #112]	; (800151c <Create_File+0x118>)
 80014ac:	f009 ff24 	bl	800b2f8 <f_close>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <Create_File+0x110>)
 80014b6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <Create_File+0x110>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d012      	beq.n	80014e6 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f00c fc69 	bl	800dd98 <pvPortMalloc>
 80014c6:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <Create_File+0x110>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4915      	ldr	r1, [pc, #84]	; (8001528 <Create_File+0x124>)
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f00c fe8a 	bl	800e1ec <siprintf>
			Send_Uart(buf);
 80014d8:	6978      	ldr	r0, [r7, #20]
 80014da:	f7ff fed1 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f00c fd26 	bl	800df30 <vPortFree>
 80014e4:	e00e      	b.n	8001504 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014e6:	2064      	movs	r0, #100	; 0x64
 80014e8:	f00c fc56 	bl	800dd98 <pvPortMalloc>
 80014ec:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	490e      	ldr	r1, [pc, #56]	; (800152c <Create_File+0x128>)
 80014f2:	69b8      	ldr	r0, [r7, #24]
 80014f4:	f00c fe7a 	bl	800e1ec <siprintf>
			Send_Uart(buf);
 80014f8:	69b8      	ldr	r0, [r7, #24]
 80014fa:	f7ff fec1 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 80014fe:	69b8      	ldr	r0, [r7, #24]
 8001500:	f00c fd16 	bl	800df30 <vPortFree>
		}
	}
    return fresult;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <Create_File+0x110>)
 8001506:	781b      	ldrb	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000524 	.word	0x20000524
 8001514:	2000053c 	.word	0x2000053c
 8001518:	080102c8 	.word	0x080102c8
 800151c:	200002f4 	.word	0x200002f4
 8001520:	08010300 	.word	0x08010300
 8001524:	08010328 	.word	0x08010328
 8001528:	08010368 	.word	0x08010368
 800152c:	080102a8 	.word	0x080102a8

08001530 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800153a:	4953      	ldr	r1, [pc, #332]	; (8001688 <Update_File+0x158>)
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f009 fff1 	bl	800b524 <f_stat>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <Update_File+0x15c>)
 8001548:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <Update_File+0x15c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d011      	beq.n	8001576 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f00c fc20 	bl	800dd98 <pvPortMalloc>
 8001558:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	494c      	ldr	r1, [pc, #304]	; (8001690 <Update_File+0x160>)
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f00c fe44 	bl	800e1ec <siprintf>
		Send_Uart (buf);
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f7ff fe8b 	bl	8001280 <Send_Uart>
		vPortFree(buf);
 800156a:	68b8      	ldr	r0, [r7, #8]
 800156c:	f00c fce0 	bl	800df30 <vPortFree>
	    return fresult;
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <Update_File+0x15c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	e083      	b.n	800167e <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001576:	2232      	movs	r2, #50	; 0x32
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4846      	ldr	r0, [pc, #280]	; (8001694 <Update_File+0x164>)
 800157c:	f009 faca 	bl	800ab14 <f_open>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <Update_File+0x15c>)
 8001586:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <Update_File+0x15c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d014      	beq.n	80015ba <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001590:	2064      	movs	r0, #100	; 0x64
 8001592:	f00c fc01 	bl	800dd98 <pvPortMalloc>
 8001596:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <Update_File+0x15c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	493d      	ldr	r1, [pc, #244]	; (8001698 <Update_File+0x168>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f00c fe22 	bl	800e1ec <siprintf>
	    	Send_Uart(buf);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff fe69 	bl	8001280 <Send_Uart>
	        vPortFree(buf);
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f00c fcbe 	bl	800df30 <vPortFree>
	        return fresult;
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <Update_File+0x15c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	e061      	b.n	800167e <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f7fe ff97 	bl	80004ee <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <Update_File+0x16c>)
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	4833      	ldr	r0, [pc, #204]	; (8001694 <Update_File+0x164>)
 80015c8:	f009 fc69 	bl	800ae9e <f_write>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b2e      	ldr	r3, [pc, #184]	; (800168c <Update_File+0x15c>)
 80015d2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <Update_File+0x15c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d012      	beq.n	8001602 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80015dc:	2064      	movs	r0, #100	; 0x64
 80015de:	f00c fbdb 	bl	800dd98 <pvPortMalloc>
 80015e2:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <Update_File+0x15c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	492c      	ldr	r1, [pc, #176]	; (80016a0 <Update_File+0x170>)
 80015ee:	69b8      	ldr	r0, [r7, #24]
 80015f0:	f00c fdfc 	bl	800e1ec <siprintf>
	    	Send_Uart(buf);
 80015f4:	69b8      	ldr	r0, [r7, #24]
 80015f6:	f7ff fe43 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 80015fa:	69b8      	ldr	r0, [r7, #24]
 80015fc:	f00c fc98 	bl	800df30 <vPortFree>
 8001600:	e00e      	b.n	8001620 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001602:	2064      	movs	r0, #100	; 0x64
 8001604:	f00c fbc8 	bl	800dd98 <pvPortMalloc>
 8001608:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4925      	ldr	r1, [pc, #148]	; (80016a4 <Update_File+0x174>)
 800160e:	69f8      	ldr	r0, [r7, #28]
 8001610:	f00c fdec 	bl	800e1ec <siprintf>
	    	Send_Uart(buf);
 8001614:	69f8      	ldr	r0, [r7, #28]
 8001616:	f7ff fe33 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 800161a:	69f8      	ldr	r0, [r7, #28]
 800161c:	f00c fc88 	bl	800df30 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001620:	481c      	ldr	r0, [pc, #112]	; (8001694 <Update_File+0x164>)
 8001622:	f009 fe69 	bl	800b2f8 <f_close>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <Update_File+0x15c>)
 800162c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <Update_File+0x15c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d012      	beq.n	800165c <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001636:	2064      	movs	r0, #100	; 0x64
 8001638:	f00c fbae 	bl	800dd98 <pvPortMalloc>
 800163c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <Update_File+0x15c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4918      	ldr	r1, [pc, #96]	; (80016a8 <Update_File+0x178>)
 8001648:	6938      	ldr	r0, [r7, #16]
 800164a:	f00c fdcf 	bl	800e1ec <siprintf>
	    	Send_Uart(buf);
 800164e:	6938      	ldr	r0, [r7, #16]
 8001650:	f7ff fe16 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 8001654:	6938      	ldr	r0, [r7, #16]
 8001656:	f00c fc6b 	bl	800df30 <vPortFree>
 800165a:	e00e      	b.n	800167a <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800165c:	2064      	movs	r0, #100	; 0x64
 800165e:	f00c fb9b 	bl	800dd98 <pvPortMalloc>
 8001662:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4911      	ldr	r1, [pc, #68]	; (80016ac <Update_File+0x17c>)
 8001668:	6978      	ldr	r0, [r7, #20]
 800166a:	f00c fdbf 	bl	800e1ec <siprintf>
	    	Send_Uart(buf);
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff fe06 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 8001674:	6978      	ldr	r0, [r7, #20]
 8001676:	f00c fc5b 	bl	800df30 <vPortFree>
	     }
	}
    return fresult;
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <Update_File+0x15c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000524 	.word	0x20000524
 800168c:	2000053c 	.word	0x2000053c
 8001690:	08010150 	.word	0x08010150
 8001694:	200002f4 	.word	0x200002f4
 8001698:	08010170 	.word	0x08010170
 800169c:	20000540 	.word	0x20000540
 80016a0:	0801038c 	.word	0x0801038c
 80016a4:	080103b4 	.word	0x080103b4
 80016a8:	08010280 	.word	0x08010280
 80016ac:	080102a8 	.word	0x080102a8

080016b0 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ba:	4802      	ldr	r0, [pc, #8]	; (80016c4 <SELECT+0x14>)
 80016bc:	f004 f8b8 	bl	8005830 <HAL_GPIO_WritePin>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800

080016c8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d2:	4802      	ldr	r0, [pc, #8]	; (80016dc <DESELECT+0x14>)
 80016d4:	f004 f8ac 	bl	8005830 <HAL_GPIO_WritePin>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020800 	.word	0x40020800

080016e0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&SPI_HABDLE) != HAL_SPI_STATE_READY);
 80016ea:	bf00      	nop
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <SPI_TxByte+0x30>)
 80016ee:	f005 fa3a 	bl	8006b66 <HAL_SPI_GetState>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d1f9      	bne.n	80016ec <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&SPI_HABDLE, &data, 1, SPI_TIMEOUT);
 80016f8:	1df9      	adds	r1, r7, #7
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	2201      	movs	r2, #1
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <SPI_TxByte+0x30>)
 8001702:	f004 ff52 	bl	80065aa <HAL_SPI_Transmit>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200008d8 	.word	0x200008d8

08001714 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800171a:	23ff      	movs	r3, #255	; 0xff
 800171c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&SPI_HABDLE) != HAL_SPI_STATE_READY));
 8001722:	bf00      	nop
 8001724:	4809      	ldr	r0, [pc, #36]	; (800174c <SPI_RxByte+0x38>)
 8001726:	f005 fa1e 	bl	8006b66 <HAL_SPI_GetState>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d1f9      	bne.n	8001724 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&SPI_HABDLE, &dummy, &data, 1, SPI_TIMEOUT);
 8001730:	1dba      	adds	r2, r7, #6
 8001732:	1df9      	adds	r1, r7, #7
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <SPI_RxByte+0x38>)
 800173e:	f005 f870 	bl	8006822 <HAL_SPI_TransmitReceive>
  
  return data;
 8001742:	79bb      	ldrb	r3, [r7, #6]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200008d8 	.word	0x200008d8

08001750 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001758:	f7ff ffdc 	bl	8001714 <SPI_RxByte>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	701a      	strb	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <SD_ReadyWait+0x34>)
 8001774:	2232      	movs	r2, #50	; 0x32
 8001776:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001778:	f7ff ffcc 	bl	8001714 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800177c:	f7ff ffca 	bl	8001714 <SPI_RxByte>
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d004      	beq.n	8001794 <SD_ReadyWait+0x28>
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SD_ReadyWait+0x34>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f3      	bne.n	800177c <SD_ReadyWait+0x10>
  
  return res;
 8001794:	79fb      	ldrb	r3, [r7, #7]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20001722 	.word	0x20001722

080017a4 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80017aa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80017ae:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80017b0:	f7ff ff8a 	bl	80016c8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e005      	b.n	80017c6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80017ba:	20ff      	movs	r0, #255	; 0xff
 80017bc:	f7ff ff90 	bl	80016e0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	3301      	adds	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	ddf6      	ble.n	80017ba <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80017cc:	f7ff ff70 	bl	80016b0 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80017d0:	2340      	movs	r3, #64	; 0x40
 80017d2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80017e4:	2395      	movs	r3, #149	; 0x95
 80017e6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e009      	b.n	8001802 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80017ee:	1d3a      	adds	r2, r7, #4
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff72 	bl	80016e0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b05      	cmp	r3, #5
 8001806:	ddf2      	ble.n	80017ee <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8001808:	e002      	b.n	8001810 <SD_PowerOn+0x6c>
  {
    Count--;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3b01      	subs	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001810:	f7ff ff80 	bl	8001714 <SPI_RxByte>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d002      	beq.n	8001820 <SD_PowerOn+0x7c>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f4      	bne.n	800180a <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001820:	f7ff ff52 	bl	80016c8 <DESELECT>
  SPI_TxByte(0XFF);
 8001824:	20ff      	movs	r0, #255	; 0xff
 8001826:	f7ff ff5b 	bl	80016e0 <SPI_TxByte>
  
  PowerFlag = 1;
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <SD_PowerOn+0x94>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000545 	.word	0x20000545

0800183c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <SD_PowerOff+0x14>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000545 	.word	0x20000545

08001854 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <SD_CheckPower+0x14>)
 800185a:	781b      	ldrb	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000545 	.word	0x20000545

0800186c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <SD_RxDataBlock+0x68>)
 8001878:	220a      	movs	r2, #10
 800187a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800187c:	f7ff ff4a 	bl	8001714 <SPI_RxByte>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d104      	bne.n	8001894 <SD_RxDataBlock+0x28>
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <SD_RxDataBlock+0x68>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f3      	bne.n	800187c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2bfe      	cmp	r3, #254	; 0xfe
 8001898:	d001      	beq.n	800189e <SD_RxDataBlock+0x32>
    return FALSE;
 800189a:	2300      	movs	r3, #0
 800189c:	e016      	b.n	80018cc <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff53 	bl	8001750 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff4d 	bl	8001750 <SPI_RxBytePtr>
  } while(btr -= 2);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3b02      	subs	r3, #2
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ed      	bne.n	800189e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80018c2:	f7ff ff27 	bl	8001714 <SPI_RxByte>
  SPI_RxByte();
 80018c6:	f7ff ff25 	bl	8001714 <SPI_RxByte>
  
  return TRUE;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20001721 	.word	0x20001721

080018d8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80018e8:	f7ff ff40 	bl	800176c <SD_ReadyWait>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d001      	beq.n	80018f6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e040      	b.n	8001978 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fef1 	bl	80016e0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	2bfd      	cmp	r3, #253	; 0xfd
 8001902:	d031      	beq.n	8001968 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fee5 	bl	80016e0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fede 	bl	80016e0 <SPI_TxByte>
    } while (--wc);
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	3b01      	subs	r3, #1
 8001928:	73bb      	strb	r3, [r7, #14]
 800192a:	7bbb      	ldrb	r3, [r7, #14]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1eb      	bne.n	8001908 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001930:	f7ff fef0 	bl	8001714 <SPI_RxByte>
    SPI_RxByte();
 8001934:	f7ff feee 	bl	8001714 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001938:	e00b      	b.n	8001952 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800193a:	f7ff feeb 	bl	8001714 <SPI_RxByte>
 800193e:	4603      	mov	r3, r0
 8001940:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	2b05      	cmp	r3, #5
 800194a:	d006      	beq.n	800195a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800194c:	7b7b      	ldrb	r3, [r7, #13]
 800194e:	3301      	adds	r3, #1
 8001950:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001952:	7b7b      	ldrb	r3, [r7, #13]
 8001954:	2b40      	cmp	r3, #64	; 0x40
 8001956:	d9f0      	bls.n	800193a <SD_TxDataBlock+0x62>
 8001958:	e000      	b.n	800195c <SD_TxDataBlock+0x84>
        break;
 800195a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800195c:	bf00      	nop
 800195e:	f7ff fed9 	bl	8001714 <SPI_RxByte>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0fa      	beq.n	800195e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b05      	cmp	r3, #5
 8001970:	d101      	bne.n	8001976 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800198c:	f7ff feee 	bl	800176c <SD_ReadyWait>
 8001990:	4603      	mov	r3, r0
 8001992:	2bff      	cmp	r3, #255	; 0xff
 8001994:	d001      	beq.n	800199a <SD_SendCmd+0x1a>
    return 0xFF;
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	e040      	b.n	8001a1c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe9f 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	0e1b      	lsrs	r3, r3, #24
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe99 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe93 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe8d 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fe88 	bl	80016e0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d101      	bne.n	80019de <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80019da:	2395      	movs	r3, #149	; 0x95
 80019dc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b48      	cmp	r3, #72	; 0x48
 80019e2:	d101      	bne.n	80019e8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80019e4:	2387      	movs	r3, #135	; 0x87
 80019e6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fe78 	bl	80016e0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b4c      	cmp	r3, #76	; 0x4c
 80019f4:	d101      	bne.n	80019fa <SD_SendCmd+0x7a>
    SPI_RxByte();
 80019f6:	f7ff fe8d 	bl	8001714 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80019fa:	230a      	movs	r3, #10
 80019fc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80019fe:	f7ff fe89 	bl	8001714 <SPI_RxByte>
 8001a02:	4603      	mov	r3, r0
 8001a04:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001a06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da05      	bge.n	8001a1a <SD_SendCmd+0x9a>
 8001a0e:	7bbb      	ldrb	r3, [r7, #14]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	73bb      	strb	r3, [r7, #14]
 8001a14:	7bbb      	ldrb	r3, [r7, #14]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f1      	bne.n	80019fe <SD_SendCmd+0x7e>
  
  return res;
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d5      	b.n	8001be4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001a38:	4b6c      	ldr	r3, [pc, #432]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <SD_disk_initialize+0x2a>
    return Stat;        
 8001a46:	4b69      	ldr	r3, [pc, #420]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	e0ca      	b.n	8001be4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001a4e:	f7ff fea9 	bl	80017a4 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001a52:	f7ff fe2d 	bl	80016b0 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2040      	movs	r0, #64	; 0x40
 8001a5e:	f7ff ff8f 	bl	8001980 <SD_SendCmd>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 80a5 	bne.w	8001bb4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001a6c:	2264      	movs	r2, #100	; 0x64
 8001a6e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001a70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a74:	2048      	movs	r0, #72	; 0x48
 8001a76:	f7ff ff83 	bl	8001980 <SD_SendCmd>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d158      	bne.n	8001b32 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e00c      	b.n	8001aa0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a86:	7bfc      	ldrb	r4, [r7, #15]
 8001a88:	f7ff fe44 	bl	8001714 <SPI_RxByte>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f104 0310 	add.w	r3, r4, #16
 8001a94:	443b      	add	r3, r7
 8001a96:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d9ef      	bls.n	8001a86 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001aa6:	7abb      	ldrb	r3, [r7, #10]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f040 8083 	bne.w	8001bb4 <SD_disk_initialize+0x190>
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	2baa      	cmp	r3, #170	; 0xaa
 8001ab2:	d17f      	bne.n	8001bb4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2077      	movs	r0, #119	; 0x77
 8001ab8:	f7ff ff62 	bl	8001980 <SD_SendCmd>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d807      	bhi.n	8001ad2 <SD_disk_initialize+0xae>
 8001ac2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ac6:	2069      	movs	r0, #105	; 0x69
 8001ac8:	f7ff ff5a 	bl	8001980 <SD_SendCmd>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1eb      	bne.n	8001ab4 <SD_disk_initialize+0x90>
 8001adc:	e000      	b.n	8001ae0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001ade:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d064      	beq.n	8001bb4 <SD_disk_initialize+0x190>
 8001aea:	2100      	movs	r1, #0
 8001aec:	207a      	movs	r0, #122	; 0x7a
 8001aee:	f7ff ff47 	bl	8001980 <SD_SendCmd>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d15d      	bne.n	8001bb4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e00c      	b.n	8001b18 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001afe:	7bfc      	ldrb	r4, [r7, #15]
 8001b00:	f7ff fe08 	bl	8001714 <SPI_RxByte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	f104 0310 	add.w	r3, r4, #16
 8001b0c:	443b      	add	r3, r7
 8001b0e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	3301      	adds	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d9ef      	bls.n	8001afe <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001b1e:	7a3b      	ldrb	r3, [r7, #8]
 8001b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SD_disk_initialize+0x108>
 8001b28:	2306      	movs	r3, #6
 8001b2a:	e000      	b.n	8001b2e <SD_disk_initialize+0x10a>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	73bb      	strb	r3, [r7, #14]
 8001b30:	e040      	b.n	8001bb4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001b32:	2100      	movs	r1, #0
 8001b34:	2077      	movs	r0, #119	; 0x77
 8001b36:	f7ff ff23 	bl	8001980 <SD_SendCmd>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d808      	bhi.n	8001b52 <SD_disk_initialize+0x12e>
 8001b40:	2100      	movs	r1, #0
 8001b42:	2069      	movs	r0, #105	; 0x69
 8001b44:	f7ff ff1c 	bl	8001980 <SD_SendCmd>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d801      	bhi.n	8001b52 <SD_disk_initialize+0x12e>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e000      	b.n	8001b54 <SD_disk_initialize+0x130>
 8001b52:	2301      	movs	r3, #1
 8001b54:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d10e      	bne.n	8001b7a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2077      	movs	r0, #119	; 0x77
 8001b60:	f7ff ff0e 	bl	8001980 <SD_SendCmd>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d80e      	bhi.n	8001b88 <SD_disk_initialize+0x164>
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2069      	movs	r0, #105	; 0x69
 8001b6e:	f7ff ff07 	bl	8001980 <SD_SendCmd>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001b78:	e00d      	b.n	8001b96 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2041      	movs	r0, #65	; 0x41
 8001b7e:	f7ff feff 	bl	8001980 <SD_SendCmd>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e1      	bne.n	8001b56 <SD_disk_initialize+0x132>
 8001b92:	e000      	b.n	8001b96 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001b94:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <SD_disk_initialize+0x18c>
 8001ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba4:	2050      	movs	r0, #80	; 0x50
 8001ba6:	f7ff feeb 	bl	8001980 <SD_SendCmd>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <SD_disk_initialize+0x1d0>)
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001bba:	f7ff fd85 	bl	80016c8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001bbe:	f7ff fda9 	bl	8001714 <SPI_RxByte>
  
  if (type) 
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e001      	b.n	8001bde <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001bda:	f7ff fe2f 	bl	800183c <SD_PowerOff>
  }
  
  return Stat;
 8001bde:	4b03      	ldr	r3, [pc, #12]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20001721 	.word	0x20001721
 8001bf4:	20000544 	.word	0x20000544

08001bf8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e002      	b.n	8001c12 <SD_disk_status+0x1a>
  
  return Stat;
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SD_disk_status+0x28>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <SD_disk_read+0x1c>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <SD_disk_read+0x20>
    return RES_PARERR;
 8001c40:	2304      	movs	r3, #4
 8001c42:	e051      	b.n	8001ce8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <SD_disk_read+0xcc>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e048      	b.n	8001ce8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001c56:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <SD_disk_read+0xd0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001c68:	f7ff fd22 	bl	80016b0 <SELECT>
  
  if (count == 1) 
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d111      	bne.n	8001c96 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	2051      	movs	r0, #81	; 0x51
 8001c76:	f7ff fe83 	bl	8001980 <SD_SendCmd>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d129      	bne.n	8001cd4 <SD_disk_read+0xb0>
 8001c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	f7ff fdf1 	bl	800186c <SD_RxDataBlock>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <SD_disk_read+0xb0>
      count = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	e01e      	b.n	8001cd4 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	2052      	movs	r0, #82	; 0x52
 8001c9a:	f7ff fe71 	bl	8001980 <SD_SendCmd>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d117      	bne.n	8001cd4 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca8:	68b8      	ldr	r0, [r7, #8]
 8001caa:	f7ff fddf 	bl	800186c <SD_RxDataBlock>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00a      	beq.n	8001cca <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cba:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ed      	bne.n	8001ca4 <SD_disk_read+0x80>
 8001cc8:	e000      	b.n	8001ccc <SD_disk_read+0xa8>
          break;
 8001cca:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001ccc:	2100      	movs	r1, #0
 8001cce:	204c      	movs	r0, #76	; 0x4c
 8001cd0:	f7ff fe56 	bl	8001980 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001cd4:	f7ff fcf8 	bl	80016c8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001cd8:	f7ff fd1c 	bl	8001714 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000544 	.word	0x20000544

08001cf8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <SD_disk_write+0x1c>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <SD_disk_write+0x20>
    return RES_PARERR;
 8001d14:	2304      	movs	r3, #4
 8001d16:	e06b      	b.n	8001df0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001d18:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <SD_disk_write+0x100>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e062      	b.n	8001df0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <SD_disk_write+0x100>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e059      	b.n	8001df0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <SD_disk_write+0x104>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	025b      	lsls	r3, r3, #9
 8001d4c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001d4e:	f7ff fcaf 	bl	80016b0 <SELECT>
  
  if (count == 1) 
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d110      	bne.n	8001d7a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	2058      	movs	r0, #88	; 0x58
 8001d5c:	f7ff fe10 	bl	8001980 <SD_SendCmd>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d13a      	bne.n	8001ddc <SD_disk_write+0xe4>
 8001d66:	21fe      	movs	r1, #254	; 0xfe
 8001d68:	68b8      	ldr	r0, [r7, #8]
 8001d6a:	f7ff fdb5 	bl	80018d8 <SD_TxDataBlock>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d033      	beq.n	8001ddc <SD_disk_write+0xe4>
      count = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	e030      	b.n	8001ddc <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <SD_disk_write+0x104>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d86:	2100      	movs	r1, #0
 8001d88:	2077      	movs	r0, #119	; 0x77
 8001d8a:	f7ff fdf9 	bl	8001980 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	2057      	movs	r0, #87	; 0x57
 8001d92:	f7ff fdf5 	bl	8001980 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	2059      	movs	r0, #89	; 0x59
 8001d9a:	f7ff fdf1 	bl	8001980 <SD_SendCmd>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11b      	bne.n	8001ddc <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001da4:	21fc      	movs	r1, #252	; 0xfc
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f7ff fd96 	bl	80018d8 <SD_TxDataBlock>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001db8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ee      	bne.n	8001da4 <SD_disk_write+0xac>
 8001dc6:	e000      	b.n	8001dca <SD_disk_write+0xd2>
          break;
 8001dc8:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001dca:	21fd      	movs	r1, #253	; 0xfd
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fd83 	bl	80018d8 <SD_TxDataBlock>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <SD_disk_write+0xe4>
      {        
        count = 1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001ddc:	f7ff fc74 	bl	80016c8 <DESELECT>
  SPI_RxByte();
 8001de0:	f7ff fc98 	bl	8001714 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000544 	.word	0x20000544

08001e00 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b08b      	sub	sp, #44	; 0x2c
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	603a      	str	r2, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e11b      	b.n	8002056 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d129      	bne.n	8001e7e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d017      	beq.n	8001e62 <SD_disk_ioctl+0x62>
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	dc1f      	bgt.n	8001e76 <SD_disk_ioctl+0x76>
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <SD_disk_ioctl+0x40>
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d00b      	beq.n	8001e56 <SD_disk_ioctl+0x56>
 8001e3e:	e01a      	b.n	8001e76 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001e40:	f7ff fd08 	bl	8001854 <SD_CheckPower>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001e4a:	f7ff fcf7 	bl	800183c <SD_PowerOff>
      res = RES_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e54:	e0fd      	b.n	8002052 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001e56:	f7ff fca5 	bl	80017a4 <SD_PowerOn>
      res = RES_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e60:	e0f7      	b.n	8002052 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	1c5c      	adds	r4, r3, #1
 8001e66:	f7ff fcf5 	bl	8001854 <SD_CheckPower>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e74:	e0ed      	b.n	8002052 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001e76:	2304      	movs	r3, #4
 8001e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e7c:	e0e9      	b.n	8002052 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001e7e:	4b78      	ldr	r3, [pc, #480]	; (8002060 <SD_disk_ioctl+0x260>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0e2      	b.n	8002056 <SD_disk_ioctl+0x256>
    
    SELECT();
 8001e90:	f7ff fc0e 	bl	80016b0 <SELECT>
    
    switch (ctrl) 
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	2b0d      	cmp	r3, #13
 8001e98:	f200 80cc 	bhi.w	8002034 <SD_disk_ioctl+0x234>
 8001e9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <SD_disk_ioctl+0xa4>)
 8001e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea2:	bf00      	nop
 8001ea4:	08001f9f 	.word	0x08001f9f
 8001ea8:	08001edd 	.word	0x08001edd
 8001eac:	08001f8f 	.word	0x08001f8f
 8001eb0:	08002035 	.word	0x08002035
 8001eb4:	08002035 	.word	0x08002035
 8001eb8:	08002035 	.word	0x08002035
 8001ebc:	08002035 	.word	0x08002035
 8001ec0:	08002035 	.word	0x08002035
 8001ec4:	08002035 	.word	0x08002035
 8001ec8:	08002035 	.word	0x08002035
 8001ecc:	08002035 	.word	0x08002035
 8001ed0:	08001fb1 	.word	0x08001fb1
 8001ed4:	08001fd5 	.word	0x08001fd5
 8001ed8:	08001ff9 	.word	0x08001ff9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001edc:	2100      	movs	r1, #0
 8001ede:	2049      	movs	r0, #73	; 0x49
 8001ee0:	f7ff fd4e 	bl	8001980 <SD_SendCmd>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 80a8 	bne.w	800203c <SD_disk_ioctl+0x23c>
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2110      	movs	r1, #16
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fcba 	bl	800186c <SD_RxDataBlock>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 809e 	beq.w	800203c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001f00:	7b3b      	ldrb	r3, [r7, #12]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10e      	bne.n	8001f28 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f0a:	7d7b      	ldrb	r3, [r7, #21]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	7d3b      	ldrb	r3, [r7, #20]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001f1e:	8bfb      	ldrh	r3, [r7, #30]
 8001f20:	029a      	lsls	r2, r3, #10
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e02e      	b.n	8001f86 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001f28:	7c7b      	ldrb	r3, [r7, #17]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	7dbb      	ldrb	r3, [r7, #22]
 8001f32:	09db      	lsrs	r3, r3, #7
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	7d7b      	ldrb	r3, [r7, #21]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 0306 	and.w	r3, r3, #6
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f50:	7d3b      	ldrb	r3, [r7, #20]
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	7cbb      	ldrb	r3, [r7, #18]
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f78:	8bfa      	ldrh	r2, [r7, #30]
 8001f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f7e:	3b09      	subs	r3, #9
 8001f80:	409a      	lsls	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001f8c:	e056      	b.n	800203c <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f94:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f9c:	e055      	b.n	800204a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001f9e:	f7ff fbe5 	bl	800176c <SD_ReadyWait>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2bff      	cmp	r3, #255	; 0xff
 8001fa6:	d14b      	bne.n	8002040 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fae:	e047      	b.n	8002040 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2049      	movs	r0, #73	; 0x49
 8001fb4:	f7ff fce4 	bl	8001980 <SD_SendCmd>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d142      	bne.n	8002044 <SD_disk_ioctl+0x244>
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	6a38      	ldr	r0, [r7, #32]
 8001fc2:	f7ff fc53 	bl	800186c <SD_RxDataBlock>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d03b      	beq.n	8002044 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fd2:	e037      	b.n	8002044 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	204a      	movs	r0, #74	; 0x4a
 8001fd8:	f7ff fcd2 	bl	8001980 <SD_SendCmd>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d132      	bne.n	8002048 <SD_disk_ioctl+0x248>
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	6a38      	ldr	r0, [r7, #32]
 8001fe6:	f7ff fc41 	bl	800186c <SD_RxDataBlock>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d02b      	beq.n	8002048 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ff6:	e027      	b.n	8002048 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	207a      	movs	r0, #122	; 0x7a
 8001ffc:	f7ff fcc0 	bl	8001980 <SD_SendCmd>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800200c:	e00b      	b.n	8002026 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800200e:	6a3c      	ldr	r4, [r7, #32]
 8002010:	1c63      	adds	r3, r4, #1
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	f7ff fb7e 	bl	8001714 <SPI_RxByte>
 8002018:	4603      	mov	r3, r0
 800201a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800201c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002020:	3301      	adds	r3, #1
 8002022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002026:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800202a:	2b03      	cmp	r3, #3
 800202c:	d9ef      	bls.n	800200e <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002034:	2304      	movs	r3, #4
 8002036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800203a:	e006      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 800203c:	bf00      	nop
 800203e:	e004      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 8002040:	bf00      	nop
 8002042:	e002      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 8002044:	bf00      	nop
 8002046:	e000      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 8002048:	bf00      	nop
    }
    
    DESELECT();
 800204a:	f7ff fb3d 	bl	80016c8 <DESELECT>
    SPI_RxByte();
 800204e:	f7ff fb61 	bl	8001714 <SPI_RxByte>
  }
  
  return res;
 8002052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002056:	4618      	mov	r0, r3
 8002058:	372c      	adds	r7, #44	; 0x2c
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000

08002064 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a07      	ldr	r2, [pc, #28]	; (8002090 <vApplicationGetIdleTaskMemory+0x2c>)
 8002074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <vApplicationGetIdleTaskMemory+0x30>)
 800207a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000548 	.word	0x20000548
 8002094:	2000059c 	.word	0x2000059c

08002098 <Critical_section_Uart>:
void VLPT_task(void *argument);
void SD_task(void *argument);
void Send_task(void *argument);

void Critical_section_Uart(int len,char *str)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	xSemaphoreTake(SimMutex,portMAX_DELAY);
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <Critical_section_Uart+0x44>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f04f 31ff 	mov.w	r1, #4294967295
 80020aa:	4618      	mov	r0, r3
 80020ac:	f00a f93c 	bl	800c328 <xQueueSemaphoreTake>
	HAL_UART_Transmit_DMA(&huart4, (uint8_t *)str,len);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	6839      	ldr	r1, [r7, #0]
 80020b8:	4809      	ldr	r0, [pc, #36]	; (80020e0 <Critical_section_Uart+0x48>)
 80020ba:	f005 fbf7 	bl	80078ac <HAL_UART_Transmit_DMA>
	HAL_Delay(1);
 80020be:	2001      	movs	r0, #1
 80020c0:	f001 fe48 	bl	8003d54 <HAL_Delay>
	xSemaphoreGive(SimMutex);
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <Critical_section_Uart+0x44>)
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	2300      	movs	r3, #0
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	f009 febf 	bl	800be50 <xQueueGenericSend>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000079c 	.word	0x2000079c
 80020e0:	200009c0 	.word	0x200009c0

080020e4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART4)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a8a      	ldr	r2, [pc, #552]	; (8002330 <HAL_UART_RxCpltCallback+0x238>)
 8002106:	4293      	cmp	r3, r2
 8002108:	f040 8131 	bne.w	800236e <HAL_UART_RxCpltCallback+0x276>
	{
		if(rx_buf[1]==0x31)
 800210c:	4b89      	ldr	r3, [pc, #548]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 800210e:	785b      	ldrb	r3, [r3, #1]
 8002110:	2b31      	cmp	r3, #49	; 0x31
 8002112:	d175      	bne.n	8002200 <HAL_UART_RxCpltCallback+0x108>
		{
			if(rx_buf[2]==0x02)
 8002114:	4b87      	ldr	r3, [pc, #540]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 8002116:	789b      	ldrb	r3, [r3, #2]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d10b      	bne.n	8002134 <HAL_UART_RxCpltCallback+0x3c>
			{
				if(rx_buf[3]==0x01)stop_button=1;
 800211c:	4b85      	ldr	r3, [pc, #532]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 800211e:	78db      	ldrb	r3, [r3, #3]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d103      	bne.n	800212c <HAL_UART_RxCpltCallback+0x34>
 8002124:	4b84      	ldr	r3, [pc, #528]	; (8002338 <HAL_UART_RxCpltCallback+0x240>)
 8002126:	2201      	movs	r2, #1
 8002128:	601a      	str	r2, [r3, #0]
			{

			}
		}
	}
}
 800212a:	e120      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else stop_button=0;
 800212c:	4b82      	ldr	r3, [pc, #520]	; (8002338 <HAL_UART_RxCpltCallback+0x240>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
}
 8002132:	e11c      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x05)
 8002134:	4b7f      	ldr	r3, [pc, #508]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 8002136:	789b      	ldrb	r3, [r3, #2]
 8002138:	2b05      	cmp	r3, #5
 800213a:	d111      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x68>
				time_scale_tune=time_scale*2;
 800213c:	4b7f      	ldr	r3, [pc, #508]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4a7f      	ldr	r2, [pc, #508]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 8002144:	6013      	str	r3, [r2, #0]
				if(time_scale_tune<128)time_scale=time_scale_tune;
 8002146:	4b7e      	ldr	r3, [pc, #504]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b7f      	cmp	r3, #127	; 0x7f
 800214c:	dc04      	bgt.n	8002158 <HAL_UART_RxCpltCallback+0x60>
 800214e:	4b7c      	ldr	r3, [pc, #496]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7a      	ldr	r2, [pc, #488]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 8002154:	6013      	str	r3, [r2, #0]
}
 8002156:	e10a      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else time_scale=128;
 8002158:	4b78      	ldr	r3, [pc, #480]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	601a      	str	r2, [r3, #0]
}
 800215e:	e106      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x06)
 8002160:	4b74      	ldr	r3, [pc, #464]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 8002162:	789b      	ldrb	r3, [r3, #2]
 8002164:	2b06      	cmp	r3, #6
 8002166:	d114      	bne.n	8002192 <HAL_UART_RxCpltCallback+0x9a>
				time_scale_tune=time_scale/2;
 8002168:	4b74      	ldr	r3, [pc, #464]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0fda      	lsrs	r2, r3, #31
 800216e:	4413      	add	r3, r2
 8002170:	105b      	asrs	r3, r3, #1
 8002172:	461a      	mov	r2, r3
 8002174:	4b72      	ldr	r3, [pc, #456]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 8002176:	601a      	str	r2, [r3, #0]
				if(time_scale_tune>1)time_scale=time_scale_tune;
 8002178:	4b71      	ldr	r3, [pc, #452]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	dd04      	ble.n	800218a <HAL_UART_RxCpltCallback+0x92>
 8002180:	4b6f      	ldr	r3, [pc, #444]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6d      	ldr	r2, [pc, #436]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	e0f1      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else time_scale=1;
 800218a:	4b6c      	ldr	r3, [pc, #432]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]
}
 8002190:	e0ed      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x0A)
 8002192:	4b68      	ldr	r3, [pc, #416]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 8002194:	789b      	ldrb	r3, [r3, #2]
 8002196:	2b0a      	cmp	r3, #10
 8002198:	d10b      	bne.n	80021b2 <HAL_UART_RxCpltCallback+0xba>
				if(rx_buf[3]==0x01)FFT_button=1;
 800219a:	4b66      	ldr	r3, [pc, #408]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 800219c:	78db      	ldrb	r3, [r3, #3]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d103      	bne.n	80021aa <HAL_UART_RxCpltCallback+0xb2>
 80021a2:	4b68      	ldr	r3, [pc, #416]	; (8002344 <HAL_UART_RxCpltCallback+0x24c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	e0e1      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else FFT_button=0;
 80021aa:	4b66      	ldr	r3, [pc, #408]	; (8002344 <HAL_UART_RxCpltCallback+0x24c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	e0dd      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x0B)
 80021b2:	4b60      	ldr	r3, [pc, #384]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 80021b4:	789b      	ldrb	r3, [r3, #2]
 80021b6:	2b0b      	cmp	r3, #11
 80021b8:	d10b      	bne.n	80021d2 <HAL_UART_RxCpltCallback+0xda>
				if(rx_buf[3]==0x01)amplify=10;
 80021ba:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 80021bc:	78db      	ldrb	r3, [r3, #3]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d103      	bne.n	80021ca <HAL_UART_RxCpltCallback+0xd2>
 80021c2:	4b61      	ldr	r3, [pc, #388]	; (8002348 <HAL_UART_RxCpltCallback+0x250>)
 80021c4:	220a      	movs	r2, #10
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	e0d1      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else amplify=1;
 80021ca:	4b5f      	ldr	r3, [pc, #380]	; (8002348 <HAL_UART_RxCpltCallback+0x250>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
}
 80021d0:	e0cd      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x08)
 80021d2:	4b58      	ldr	r3, [pc, #352]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 80021d4:	789b      	ldrb	r3, [r3, #2]
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d106      	bne.n	80021e8 <HAL_UART_RxCpltCallback+0xf0>
				SD_flag=1;//let sd_falg=1,when write is done,reset flag=0;
 80021da:	4b5c      	ldr	r3, [pc, #368]	; (800234c <HAL_UART_RxCpltCallback+0x254>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]
				SD_ADC_falg=1;//Store ADC data to SD card
 80021e0:	4b5b      	ldr	r3, [pc, #364]	; (8002350 <HAL_UART_RxCpltCallback+0x258>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	e0c2      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x0C)
 80021e8:	4b52      	ldr	r3, [pc, #328]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 80021ea:	789b      	ldrb	r3, [r3, #2]
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	f040 80be 	bne.w	800236e <HAL_UART_RxCpltCallback+0x276>
				SD_flag=1;//let sd_falg=1,when write is done,reset flag=0;
 80021f2:	4b56      	ldr	r3, [pc, #344]	; (800234c <HAL_UART_RxCpltCallback+0x254>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
				SD_FFT_falg=1;//Store FFT data to SD card
 80021f8:	4b56      	ldr	r3, [pc, #344]	; (8002354 <HAL_UART_RxCpltCallback+0x25c>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
}
 80021fe:	e0b6      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			if(rx_buf[2]==0x02)
 8002200:	4b4c      	ldr	r3, [pc, #304]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 8002202:	789b      	ldrb	r3, [r3, #2]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d10b      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x128>
				if(rx_buf[3]==0x01)stop_button=1;
 8002208:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 800220a:	78db      	ldrb	r3, [r3, #3]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d103      	bne.n	8002218 <HAL_UART_RxCpltCallback+0x120>
 8002210:	4b49      	ldr	r3, [pc, #292]	; (8002338 <HAL_UART_RxCpltCallback+0x240>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]
}
 8002216:	e0aa      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else stop_button=0;
 8002218:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_UART_RxCpltCallback+0x240>)
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	e0a6      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x05)
 8002220:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 8002222:	789b      	ldrb	r3, [r3, #2]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d111      	bne.n	800224c <HAL_UART_RxCpltCallback+0x154>
				time_scale_tune=time_scale*2;
 8002228:	4b44      	ldr	r3, [pc, #272]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4a44      	ldr	r2, [pc, #272]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 8002230:	6013      	str	r3, [r2, #0]
				if(time_scale_tune<128)time_scale=time_scale_tune;
 8002232:	4b43      	ldr	r3, [pc, #268]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b7f      	cmp	r3, #127	; 0x7f
 8002238:	dc04      	bgt.n	8002244 <HAL_UART_RxCpltCallback+0x14c>
 800223a:	4b41      	ldr	r3, [pc, #260]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a3f      	ldr	r2, [pc, #252]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 8002240:	6013      	str	r3, [r2, #0]
}
 8002242:	e094      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else time_scale=128;
 8002244:	4b3d      	ldr	r3, [pc, #244]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 8002246:	2280      	movs	r2, #128	; 0x80
 8002248:	601a      	str	r2, [r3, #0]
}
 800224a:	e090      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x06)
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 800224e:	789b      	ldrb	r3, [r3, #2]
 8002250:	2b06      	cmp	r3, #6
 8002252:	d114      	bne.n	800227e <HAL_UART_RxCpltCallback+0x186>
				time_scale_tune=time_scale/2;
 8002254:	4b39      	ldr	r3, [pc, #228]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0fda      	lsrs	r2, r3, #31
 800225a:	4413      	add	r3, r2
 800225c:	105b      	asrs	r3, r3, #1
 800225e:	461a      	mov	r2, r3
 8002260:	4b37      	ldr	r3, [pc, #220]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 8002262:	601a      	str	r2, [r3, #0]
				if(time_scale_tune>1)time_scale=time_scale_tune;
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	dd04      	ble.n	8002276 <HAL_UART_RxCpltCallback+0x17e>
 800226c:	4b34      	ldr	r3, [pc, #208]	; (8002340 <HAL_UART_RxCpltCallback+0x248>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	e07b      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else time_scale=1;
 8002276:	4b31      	ldr	r3, [pc, #196]	; (800233c <HAL_UART_RxCpltCallback+0x244>)
 8002278:	2201      	movs	r2, #1
 800227a:	601a      	str	r2, [r3, #0]
}
 800227c:	e077      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x07)
 800227e:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 8002280:	789b      	ldrb	r3, [r3, #2]
 8002282:	2b07      	cmp	r3, #7
 8002284:	d112      	bne.n	80022ac <HAL_UART_RxCpltCallback+0x1b4>
				mag_scale_tune=mag_scale*2;
 8002286:	4b34      	ldr	r3, [pc, #208]	; (8002358 <HAL_UART_RxCpltCallback+0x260>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b33      	ldr	r3, [pc, #204]	; (800235c <HAL_UART_RxCpltCallback+0x264>)
 8002290:	701a      	strb	r2, [r3, #0]
				if(mag_scale_tune<32)mag_scale=mag_scale_tune;
 8002292:	4b32      	ldr	r3, [pc, #200]	; (800235c <HAL_UART_RxCpltCallback+0x264>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b1f      	cmp	r3, #31
 8002298:	d804      	bhi.n	80022a4 <HAL_UART_RxCpltCallback+0x1ac>
 800229a:	4b30      	ldr	r3, [pc, #192]	; (800235c <HAL_UART_RxCpltCallback+0x264>)
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <HAL_UART_RxCpltCallback+0x260>)
 80022a0:	701a      	strb	r2, [r3, #0]
}
 80022a2:	e064      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else mag_scale=32;
 80022a4:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <HAL_UART_RxCpltCallback+0x260>)
 80022a6:	2220      	movs	r2, #32
 80022a8:	701a      	strb	r2, [r3, #0]
}
 80022aa:	e060      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x08)
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 80022ae:	789b      	ldrb	r3, [r3, #2]
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d112      	bne.n	80022da <HAL_UART_RxCpltCallback+0x1e2>
				mag_scale_tune=mag_scale/2;
 80022b4:	4b28      	ldr	r3, [pc, #160]	; (8002358 <HAL_UART_RxCpltCallback+0x260>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <HAL_UART_RxCpltCallback+0x264>)
 80022be:	701a      	strb	r2, [r3, #0]
				if(mag_scale_tune>1)mag_scale=mag_scale_tune;
 80022c0:	4b26      	ldr	r3, [pc, #152]	; (800235c <HAL_UART_RxCpltCallback+0x264>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d904      	bls.n	80022d2 <HAL_UART_RxCpltCallback+0x1da>
 80022c8:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_UART_RxCpltCallback+0x264>)
 80022ca:	781a      	ldrb	r2, [r3, #0]
 80022cc:	4b22      	ldr	r3, [pc, #136]	; (8002358 <HAL_UART_RxCpltCallback+0x260>)
 80022ce:	701a      	strb	r2, [r3, #0]
}
 80022d0:	e04d      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else mag_scale=1;
 80022d2:	4b21      	ldr	r3, [pc, #132]	; (8002358 <HAL_UART_RxCpltCallback+0x260>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
}
 80022d8:	e049      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x09)
 80022da:	4b16      	ldr	r3, [pc, #88]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 80022dc:	789b      	ldrb	r3, [r3, #2]
 80022de:	2b09      	cmp	r3, #9
 80022e0:	d112      	bne.n	8002308 <HAL_UART_RxCpltCallback+0x210>
				scope_bias_tune=scope_bias_tune+5;
 80022e2:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <HAL_UART_RxCpltCallback+0x268>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	3305      	adds	r3, #5
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_UART_RxCpltCallback+0x268>)
 80022ec:	701a      	strb	r2, [r3, #0]
				if(scope_bias_tune<255)scope_bias=scope_bias_tune;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_UART_RxCpltCallback+0x268>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2bff      	cmp	r3, #255	; 0xff
 80022f4:	d004      	beq.n	8002300 <HAL_UART_RxCpltCallback+0x208>
 80022f6:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <HAL_UART_RxCpltCallback+0x268>)
 80022f8:	781a      	ldrb	r2, [r3, #0]
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_UART_RxCpltCallback+0x26c>)
 80022fc:	701a      	strb	r2, [r3, #0]
}
 80022fe:	e036      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
				else scope_bias=255;
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_UART_RxCpltCallback+0x26c>)
 8002302:	22ff      	movs	r2, #255	; 0xff
 8002304:	701a      	strb	r2, [r3, #0]
}
 8002306:	e032      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x0A)
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_UART_RxCpltCallback+0x23c>)
 800230a:	789b      	ldrb	r3, [r3, #2]
 800230c:	2b0a      	cmp	r3, #10
 800230e:	d12e      	bne.n	800236e <HAL_UART_RxCpltCallback+0x276>
				scope_bias_tune=scope_bias_tune-5;
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_UART_RxCpltCallback+0x268>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	3b05      	subs	r3, #5
 8002316:	b2da      	uxtb	r2, r3
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_UART_RxCpltCallback+0x268>)
 800231a:	701a      	strb	r2, [r3, #0]
				if(scope_bias_tune>0)scope_bias=scope_bias_tune;
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_UART_RxCpltCallback+0x268>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d021      	beq.n	8002368 <HAL_UART_RxCpltCallback+0x270>
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_UART_RxCpltCallback+0x268>)
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_UART_RxCpltCallback+0x26c>)
 800232a:	701a      	strb	r2, [r3, #0]
}
 800232c:	e01f      	b.n	800236e <HAL_UART_RxCpltCallback+0x276>
 800232e:	bf00      	nop
 8002330:	40004c00 	.word	0x40004c00
 8002334:	20000b80 	.word	0x20000b80
 8002338:	20000b68 	.word	0x20000b68
 800233c:	20000008 	.word	0x20000008
 8002340:	20000004 	.word	0x20000004
 8002344:	20000b6c 	.word	0x20000b6c
 8002348:	20000010 	.word	0x20000010
 800234c:	20000b70 	.word	0x20000b70
 8002350:	20000b74 	.word	0x20000b74
 8002354:	20000b78 	.word	0x20000b78
 8002358:	2000000d 	.word	0x2000000d
 800235c:	2000000c 	.word	0x2000000c
 8002360:	20000b7c 	.word	0x20000b7c
 8002364:	20000b7d 	.word	0x20000b7d
				else scope_bias=0;
 8002368:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_UART_RxCpltCallback+0x284>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000b7d 	.word	0x20000b7d

08002380 <get_sinval>:
//-------------sin waveform generate-----------------//
//---------------------------------------------------//
uint32_t sin_val[100];//for saving sin waveform sample data

void get_sinval ()
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
	for(int i=0;i<100;i++)
 8002386:	2300      	movs	r3, #0
 8002388:	607b      	str	r3, [r7, #4]
 800238a:	e03a      	b.n	8002402 <get_sinval+0x82>
	{
		sin_val[i]=(sin(i*2*PI*1/100)*(4096/2)+2048);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fa57 	bl	8000844 <__aeabi_i2d>
 8002396:	a323      	add	r3, pc, #140	; (adr r3, 8002424 <get_sinval+0xa4>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe fabc 	bl	8000918 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <get_sinval+0x98>)
 80023ae:	f7fe fbdd 	bl	8000b6c <__aeabi_ddiv>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	ec43 2b17 	vmov	d7, r2, r3
 80023ba:	eeb0 0a47 	vmov.f32	s0, s14
 80023be:	eef0 0a67 	vmov.f32	s1, s15
 80023c2:	f00c fb75 	bl	800eab0 <sin>
 80023c6:	ec51 0b10 	vmov	r0, r1, d0
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <get_sinval+0x9c>)
 80023d0:	f7fe faa2 	bl	8000918 <__aeabi_dmul>
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <get_sinval+0x9c>)
 80023e2:	f7fe f8e3 	bl	80005ac <__adddf3>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fd55 	bl	8000e9c <__aeabi_d2uiz>
 80023f2:	4602      	mov	r2, r0
 80023f4:	490a      	ldr	r1, [pc, #40]	; (8002420 <get_sinval+0xa0>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<100;i++)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	3301      	adds	r3, #1
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b63      	cmp	r3, #99	; 0x63
 8002406:	ddc1      	ble.n	800238c <get_sinval+0xc>
	}
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	f3af 8000 	nop.w
 8002418:	40590000 	.word	0x40590000
 800241c:	40a00000 	.word	0x40a00000
 8002420:	20000ff8 	.word	0x20000ff8
 8002424:	fc8b007a 	.word	0xfc8b007a
 8002428:	400921fa 	.word	0x400921fa

0800242c <PowerMag>:
* 形 参：_usFFTPoints FFT点数
* 返 回 值: 无
*********************************************************************************************************
*/
void PowerMag(uint16_t _usFFTPoints)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
	int16_t lX,lY;
	uint16_t i;
	float32_t mag;
	/* 计算幅值 */
	for (i=0; i < _usFFTPoints; i++)
 8002436:	2300      	movs	r3, #0
 8002438:	83fb      	strh	r3, [r7, #30]
 800243a:	e045      	b.n	80024c8 <PowerMag+0x9c>
	{
	lX= (output[i]<<16)>>16; /* 实部*/
 800243c:	8bfb      	ldrh	r3, [r7, #30]
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <PowerMag+0xb8>)
 8002440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002444:	83bb      	strh	r3, [r7, #28]
	lY= (output[i]>> 16); /* 虚部 */
 8002446:	8bfb      	ldrh	r3, [r7, #30]
 8002448:	4a26      	ldr	r2, [pc, #152]	; (80024e4 <PowerMag+0xb8>)
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	837b      	strh	r3, [r7, #26]
	arm_sqrt_f32((float32_t)(lX*lX+ lY*lY), &mag); /* 求模 */
 8002452:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002456:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800245a:	fb03 f202 	mul.w	r2, r3, r2
 800245e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002462:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8002466:	fb01 f303 	mul.w	r3, r1, r3
 800246a:	4413      	add	r3, r2
 800246c:	ee07 3a90 	vmov	s15, r3
 8002470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002474:	edc7 7a05 	vstr	s15, [r7, #20]
 8002478:	f107 030c 	add.w	r3, r7, #12
 800247c:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800247e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002482:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	db09      	blt.n	80024a0 <PowerMag+0x74>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800248c:	ed97 0a05 	vldr	s0, [r7, #20]
 8002490:	f00c fb68 	bl	800eb64 <sqrtf>
 8002494:	eef0 7a40 	vmov.f32	s15, s0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 800249e:	e004      	b.n	80024aa <PowerMag+0x7e>
    }
    else
    {
      *pOut = 0.0f;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80024a8:	bf00      	nop
	Mag[i]= mag*2; /* 求模后乘以2才是实际模值，直流分量不需要乘2 */
 80024aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80024ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024b2:	8bfb      	ldrh	r3, [r7, #30]
 80024b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024b8:	ee17 1a90 	vmov	r1, s15
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <PowerMag+0xbc>)
 80024be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0; i < _usFFTPoints; i++)
 80024c2:	8bfb      	ldrh	r3, [r7, #30]
 80024c4:	3301      	adds	r3, #1
 80024c6:	83fb      	strh	r3, [r7, #30]
 80024c8:	8bfa      	ldrh	r2, [r7, #30]
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d3b5      	bcc.n	800243c <PowerMag+0x10>
	}

	/* 由于上面多乘了2，所以这里直流分量要除以2 */
	Mag[0] = Mag[0]>>1;
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <PowerMag+0xbc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	085b      	lsrs	r3, r3, #1
 80024d6:	4a04      	ldr	r2, [pc, #16]	; (80024e8 <PowerMag+0xbc>)
 80024d8:	6013      	str	r3, [r2, #0]
}
 80024da:	bf00      	nop
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	2000129c 	.word	0x2000129c
 80024e8:	2000139c 	.word	0x2000139c
 80024ec:	00000000 	.word	0x00000000

080024f0 <Power_Phase_Radians>:
* 形 参：_usFFTPoints FFT点数， uiCmpValue 阀值
* 返 回 值: 无
*********************************************************************************************************
*/
void Power_Phase_Radians(uint16_t _usFFTPoints, uint32_t _uiCmpValue)
{
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	80fb      	strh	r3, [r7, #6]
	int16_t lX, lY;
	uint16_t i;
	float32_t phase;
	float32_t mag;
	for (i=0; i <_usFFTPoints; i++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	83fb      	strh	r3, [r7, #30]
 8002500:	e084      	b.n	800260c <Power_Phase_Radians+0x11c>
	{
		lX= (output[i]<<16)>>16; /* 实部 */
 8002502:	8bfb      	ldrh	r3, [r7, #30]
 8002504:	4a48      	ldr	r2, [pc, #288]	; (8002628 <Power_Phase_Radians+0x138>)
 8002506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250a:	83bb      	strh	r3, [r7, #28]
		lY= (output[i] >> 16); /* 虚部 */
 800250c:	8bfb      	ldrh	r3, [r7, #30]
 800250e:	4a46      	ldr	r2, [pc, #280]	; (8002628 <Power_Phase_Radians+0x138>)
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	0c1b      	lsrs	r3, r3, #16
 8002516:	837b      	strh	r3, [r7, #26]
		phase = atan2(lY, lX); /* atan2求解的结果范围是(-pi, pi], 弧度制 */
 8002518:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800251c:	4618      	mov	r0, r3
 800251e:	f7fe f991 	bl	8000844 <__aeabi_i2d>
 8002522:	4604      	mov	r4, r0
 8002524:	460d      	mov	r5, r1
 8002526:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f98a 	bl	8000844 <__aeabi_i2d>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	ec43 2b11 	vmov	d1, r2, r3
 8002538:	ec45 4b10 	vmov	d0, r4, r5
 800253c:	f00c fb10 	bl	800eb60 <atan2>
 8002540:	ec53 2b10 	vmov	r2, r3, d0
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f7fe fcc8 	bl	8000edc <__aeabi_d2f>
 800254c:	4603      	mov	r3, r0
 800254e:	617b      	str	r3, [r7, #20]
		arm_sqrt_f32((float32_t)(lX*lX+ lY*lY), &mag); /* 求模 */
 8002550:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002554:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002558:	fb03 f202 	mul.w	r2, r3, r2
 800255c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002560:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002572:	edc7 7a04 	vstr	s15, [r7, #16]
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 800257c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002588:	db09      	blt.n	800259e <Power_Phase_Radians+0xae>
      *pOut = __builtin_sqrtf(in);
 800258a:	ed97 0a04 	vldr	s0, [r7, #16]
 800258e:	f00c fae9 	bl	800eb64 <sqrtf>
 8002592:	eef0 7a40 	vmov.f32	s15, s0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800259c:	e004      	b.n	80025a8 <Power_Phase_Radians+0xb8>
      *pOut = 0.0f;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80025a6:	bf00      	nop
		if(_uiCmpValue > mag)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	dd07      	ble.n	80025d0 <Power_Phase_Radians+0xe0>
		{
			Phase[i] = 0;
 80025c0:	8bfb      	ldrh	r3, [r7, #30]
 80025c2:	4a1a      	ldr	r2, [pc, #104]	; (800262c <Power_Phase_Radians+0x13c>)
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e01a      	b.n	8002606 <Power_Phase_Radians+0x116>
		}
		else
		{
			Phase[i] = phase* 180.0f/PI; /* 将求解的结果由弧度转换为角度 */
 80025d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002630 <Power_Phase_Radians+0x140>
 80025d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025dc:	ee17 0a90 	vmov	r0, s15
 80025e0:	f7fe f942 	bl	8000868 <__aeabi_f2d>
 80025e4:	a30e      	add	r3, pc, #56	; (adr r3, 8002620 <Power_Phase_Radians+0x130>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f7fe fabf 	bl	8000b6c <__aeabi_ddiv>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	8bfc      	ldrh	r4, [r7, #30]
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7fe fc70 	bl	8000edc <__aeabi_d2f>
 80025fc:	4602      	mov	r2, r0
 80025fe:	490b      	ldr	r1, [pc, #44]	; (800262c <Power_Phase_Radians+0x13c>)
 8002600:	00a3      	lsls	r3, r4, #2
 8002602:	440b      	add	r3, r1
 8002604:	601a      	str	r2, [r3, #0]
	for (i=0; i <_usFFTPoints; i++)
 8002606:	8bfb      	ldrh	r3, [r7, #30]
 8002608:	3301      	adds	r3, #1
 800260a:	83fb      	strh	r3, [r7, #30]
 800260c:	8bfa      	ldrh	r2, [r7, #30]
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	429a      	cmp	r2, r3
 8002612:	f4ff af76 	bcc.w	8002502 <Power_Phase_Radians+0x12>
		}
	}
}
 8002616:	bf00      	nop
 8002618:	bf00      	nop
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bdb0      	pop	{r4, r5, r7, pc}
 8002620:	fc8b007a 	.word	0xfc8b007a
 8002624:	400921fa 	.word	0x400921fa
 8002628:	2000129c 	.word	0x2000129c
 800262c:	2000149c 	.word	0x2000149c
 8002630:	43340000 	.word	0x43340000

08002634 <DSP_FFTPhase>:
* 形 参：无
* 返 回 值: 无
*********************************************************************************************************
*/
void DSP_FFTPhase(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	/* 计算64点FFT
	 output：输出结果，高16位是虚部，低16位是实部。
	 input ：输入数据，高16位是虚部，低16位是实部。
	 第三个参数必须是64。
	*/
	cr4_fft_64_stm32(output, input, 64);
 8002638:	2240      	movs	r2, #64	; 0x40
 800263a:	4906      	ldr	r1, [pc, #24]	; (8002654 <DSP_FFTPhase+0x20>)
 800263c:	4806      	ldr	r0, [pc, #24]	; (8002658 <DSP_FFTPhase+0x24>)
 800263e:	f7fd fde7 	bl	8000210 <cr4_fft_64_stm32>
	/* 求幅值 */
	PowerMag(FFT_length);
 8002642:	2040      	movs	r0, #64	; 0x40
 8002644:	f7ff fef2 	bl	800242c <PowerMag>

	Power_Phase_Radians(FFT_length, 100);
 8002648:	2164      	movs	r1, #100	; 0x64
 800264a:	2040      	movs	r0, #64	; 0x40
 800264c:	f7ff ff50 	bl	80024f0 <Power_Phase_Radians>
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	2000119c 	.word	0x2000119c
 8002658:	2000129c 	.word	0x2000129c

0800265c <buffer_value_set>:
int sd_store_counter=0;
int write_counter_adc=0;
int write_counter_fft=0;

void buffer_value_set()
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
	for(int i=0;i<64;i++)
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	e007      	b.n	8002678 <buffer_value_set+0x1c>
	{
		buf_val[i]=i;
 8002668:	4908      	ldr	r1, [pc, #32]	; (800268c <buffer_value_set+0x30>)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<64;i++)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3301      	adds	r3, #1
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b3f      	cmp	r3, #63	; 0x3f
 800267c:	ddf4      	ble.n	8002668 <buffer_value_set+0xc>
	}
}
 800267e:	bf00      	nop
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	200015d0 	.word	0x200015d0

08002690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002696:	f001 fb1b 	bl	8003cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800269a:	f000 f8d3 	bl	8002844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800269e:	f000 fb29 	bl	8002cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80026a2:	f000 fad9 	bl	8002c58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80026a6:	f000 faad 	bl	8002c04 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80026aa:	f000 fa81 	bl	8002bb0 <MX_UART4_Init>
  MX_DAC_Init();
 80026ae:	f000 f987 	bl	80029c0 <MX_DAC_Init>
  MX_ADC1_Init();
 80026b2:	f000 f933 	bl	800291c <MX_ADC1_Init>
  MX_TIM2_Init();
 80026b6:	f000 f9e3 	bl	8002a80 <MX_TIM2_Init>
  MX_TIM3_Init();
 80026ba:	f000 fa2d 	bl	8002b18 <MX_TIM3_Init>
  MX_SPI3_Init();
 80026be:	f000 f9a9 	bl	8002a14 <MX_SPI3_Init>
  MX_FATFS_Init();
 80026c2:	f006 faef 	bl	8008ca4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  //SD card setup//
  buffer_value_set();
 80026c6:	f7ff ffc9 	bl	800265c <buffer_value_set>


  Mount_SD("/");
 80026ca:	483e      	ldr	r0, [pc, #248]	; (80027c4 <main+0x134>)
 80026cc:	f7fe fdee 	bl	80012ac <Mount_SD>
  Format_SD();
 80026d0:	f7fe fe32 	bl	8001338 <Format_SD>
  Create_File("ADC.TXT");
 80026d4:	483c      	ldr	r0, [pc, #240]	; (80027c8 <main+0x138>)
 80026d6:	f7fe fe95 	bl	8001404 <Create_File>
  Create_File("FFT.TXT");
 80026da:	483c      	ldr	r0, [pc, #240]	; (80027cc <main+0x13c>)
 80026dc:	f7fe fe92 	bl	8001404 <Create_File>
  Unmount_SD("/");
 80026e0:	4838      	ldr	r0, [pc, #224]	; (80027c4 <main+0x134>)
 80026e2:	f7fe fe07 	bl	80012f4 <Unmount_SD>




  //DAC setup//
  HAL_TIM_Base_Start(&htim2);
 80026e6:	483a      	ldr	r0, [pc, #232]	; (80027d0 <main+0x140>)
 80026e8:	f004 fb66 	bl	8006db8 <HAL_TIM_Base_Start>
  get_sinval();
 80026ec:	f7ff fe48 	bl	8002380 <get_sinval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 80026f0:	2300      	movs	r3, #0
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	2364      	movs	r3, #100	; 0x64
 80026f6:	4a37      	ldr	r2, [pc, #220]	; (80027d4 <main+0x144>)
 80026f8:	2100      	movs	r1, #0
 80026fa:	4837      	ldr	r0, [pc, #220]	; (80027d8 <main+0x148>)
 80026fc:	f002 f93c 	bl	8004978 <HAL_DAC_Start_DMA>
  //ADC_DMA_setup//
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc_dma,1);
 8002700:	2201      	movs	r2, #1
 8002702:	4936      	ldr	r1, [pc, #216]	; (80027dc <main+0x14c>)
 8002704:	4836      	ldr	r0, [pc, #216]	; (80027e0 <main+0x150>)
 8002706:	f001 fc5f 	bl	8003fc8 <HAL_ADC_Start_DMA>

  //TIM3 interrupt setup//
  HAL_TIM_Base_Start_IT(&htim3);
 800270a:	4836      	ldr	r0, [pc, #216]	; (80027e4 <main+0x154>)
 800270c:	f004 fbbc 	bl	8006e88 <HAL_TIM_Base_Start_IT>

  //Start Receive IT//
  HAL_UART_Receive_DMA(&huart4, rx_buf, 5);
 8002710:	2205      	movs	r2, #5
 8002712:	4935      	ldr	r1, [pc, #212]	; (80027e8 <main+0x158>)
 8002714:	4835      	ldr	r0, [pc, #212]	; (80027ec <main+0x15c>)
 8002716:	f005 f947 	bl	80079a8 <HAL_UART_Receive_DMA>



  //create mutex//
  SimMutex = xSemaphoreCreateMutex();
 800271a:	2001      	movs	r0, #1
 800271c:	f009 fb7f 	bl	800be1e <xQueueCreateMutex>
 8002720:	4603      	mov	r3, r0
 8002722:	4a33      	ldr	r2, [pc, #204]	; (80027f0 <main+0x160>)
 8002724:	6013      	str	r3, [r2, #0]
  if(SimMutex!=NULL)mutex_flag=1;
 8002726:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <main+0x160>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <main+0xa4>
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <main+0x164>)
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]


  //Queue create//
  SD_queue=xQueueCreate(64,sizeof(int));
 8002734:	2200      	movs	r2, #0
 8002736:	2104      	movs	r1, #4
 8002738:	2040      	movs	r0, #64	; 0x40
 800273a:	f009 fafd 	bl	800bd38 <xQueueGenericCreate>
 800273e:	4603      	mov	r3, r0
 8002740:	4a2d      	ldr	r2, [pc, #180]	; (80027f8 <main+0x168>)
 8002742:	6013      	str	r3, [r2, #0]

  //create task//
  xTaskCreate(HPT_task,"HPT",128,NULL,6,&HPT_handler);
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <main+0x16c>)
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2306      	movs	r3, #6
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2300      	movs	r3, #0
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	492b      	ldr	r1, [pc, #172]	; (8002800 <main+0x170>)
 8002752:	482c      	ldr	r0, [pc, #176]	; (8002804 <main+0x174>)
 8002754:	f00a f947 	bl	800c9e6 <xTaskCreate>
  xTaskCreate(MPT_task,"MPT",128,NULL,5,&MPT_handler);
 8002758:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <main+0x178>)
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2305      	movs	r3, #5
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	2300      	movs	r3, #0
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	4929      	ldr	r1, [pc, #164]	; (800280c <main+0x17c>)
 8002766:	482a      	ldr	r0, [pc, #168]	; (8002810 <main+0x180>)
 8002768:	f00a f93d 	bl	800c9e6 <xTaskCreate>
  xTaskCreate(LPT_task,"LPT",128,NULL,4,&LPT_handler);
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <main+0x184>)
 800276e:	9301      	str	r3, [sp, #4]
 8002770:	2304      	movs	r3, #4
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2300      	movs	r3, #0
 8002776:	2280      	movs	r2, #128	; 0x80
 8002778:	4927      	ldr	r1, [pc, #156]	; (8002818 <main+0x188>)
 800277a:	4828      	ldr	r0, [pc, #160]	; (800281c <main+0x18c>)
 800277c:	f00a f933 	bl	800c9e6 <xTaskCreate>
  xTaskCreate(VLPT_task,"VLPT",128,NULL,3,&VLPT_handler);
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <main+0x190>)
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	2303      	movs	r3, #3
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2300      	movs	r3, #0
 800278a:	2280      	movs	r2, #128	; 0x80
 800278c:	4925      	ldr	r1, [pc, #148]	; (8002824 <main+0x194>)
 800278e:	4826      	ldr	r0, [pc, #152]	; (8002828 <main+0x198>)
 8002790:	f00a f929 	bl	800c9e6 <xTaskCreate>
  xTaskCreate(SD_task,"SDT",256,NULL,2,&SD_handler);
 8002794:	4b25      	ldr	r3, [pc, #148]	; (800282c <main+0x19c>)
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2302      	movs	r3, #2
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a2:	4923      	ldr	r1, [pc, #140]	; (8002830 <main+0x1a0>)
 80027a4:	4823      	ldr	r0, [pc, #140]	; (8002834 <main+0x1a4>)
 80027a6:	f00a f91e 	bl	800c9e6 <xTaskCreate>
  xTaskCreate(Send_task,"ST",128,NULL,1,&ST_handler);
 80027aa:	4b23      	ldr	r3, [pc, #140]	; (8002838 <main+0x1a8>)
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	2301      	movs	r3, #1
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	2300      	movs	r3, #0
 80027b4:	2280      	movs	r2, #128	; 0x80
 80027b6:	4921      	ldr	r1, [pc, #132]	; (800283c <main+0x1ac>)
 80027b8:	4821      	ldr	r0, [pc, #132]	; (8002840 <main+0x1b0>)
 80027ba:	f00a f914 	bl	800c9e6 <xTaskCreate>
  vTaskStartScheduler();
 80027be:	f00a fa7d 	bl	800ccbc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <main+0x132>
 80027c4:	080104a0 	.word	0x080104a0
 80027c8:	080104a4 	.word	0x080104a4
 80027cc:	080104ac 	.word	0x080104ac
 80027d0:	20000930 	.word	0x20000930
 80027d4:	20000ff8 	.word	0x20000ff8
 80027d8:	20000864 	.word	0x20000864
 80027dc:	20000fd4 	.word	0x20000fd4
 80027e0:	200007bc 	.word	0x200007bc
 80027e4:	20000978 	.word	0x20000978
 80027e8:	20000b80 	.word	0x20000b80
 80027ec:	200009c0 	.word	0x200009c0
 80027f0:	2000079c 	.word	0x2000079c
 80027f4:	20000b85 	.word	0x20000b85
 80027f8:	200007b8 	.word	0x200007b8
 80027fc:	200007a0 	.word	0x200007a0
 8002800:	080104b4 	.word	0x080104b4
 8002804:	08002d99 	.word	0x08002d99
 8002808:	200007a4 	.word	0x200007a4
 800280c:	080104b8 	.word	0x080104b8
 8002810:	08002e31 	.word	0x08002e31
 8002814:	200007a8 	.word	0x200007a8
 8002818:	080104bc 	.word	0x080104bc
 800281c:	08002ef1 	.word	0x08002ef1
 8002820:	200007ac 	.word	0x200007ac
 8002824:	080104c0 	.word	0x080104c0
 8002828:	08002f79 	.word	0x08002f79
 800282c:	200007b0 	.word	0x200007b0
 8002830:	080104c8 	.word	0x080104c8
 8002834:	08002f99 	.word	0x08002f99
 8002838:	200007b4 	.word	0x200007b4
 800283c:	080104cc 	.word	0x080104cc
 8002840:	08003111 	.word	0x08003111

08002844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b094      	sub	sp, #80	; 0x50
 8002848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800284a:	f107 031c 	add.w	r3, r7, #28
 800284e:	2234      	movs	r2, #52	; 0x34
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f00b fcc2 	bl	800e1dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	60da      	str	r2, [r3, #12]
 8002866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	2300      	movs	r3, #0
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <SystemClock_Config+0xd0>)
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	4a28      	ldr	r2, [pc, #160]	; (8002914 <SystemClock_Config+0xd0>)
 8002872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002876:	6413      	str	r3, [r2, #64]	; 0x40
 8002878:	4b26      	ldr	r3, [pc, #152]	; (8002914 <SystemClock_Config+0xd0>)
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002884:	2300      	movs	r3, #0
 8002886:	603b      	str	r3, [r7, #0]
 8002888:	4b23      	ldr	r3, [pc, #140]	; (8002918 <SystemClock_Config+0xd4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a22      	ldr	r2, [pc, #136]	; (8002918 <SystemClock_Config+0xd4>)
 800288e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <SystemClock_Config+0xd4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028a0:	2301      	movs	r3, #1
 80028a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028aa:	2302      	movs	r3, #2
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80028b4:	2304      	movs	r3, #4
 80028b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 80028b8:	23a0      	movs	r3, #160	; 0xa0
 80028ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028bc:	2302      	movs	r3, #2
 80028be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028c0:	2302      	movs	r3, #2
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028c4:	2302      	movs	r3, #2
 80028c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c8:	f107 031c 	add.w	r3, r7, #28
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 fb45 	bl	8005f5c <HAL_RCC_OscConfig>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028d8:	f000 fd9e 	bl	8003418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028dc:	230f      	movs	r3, #15
 80028de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028e0:	2302      	movs	r3, #2
 80028e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028f4:	f107 0308 	add.w	r3, r7, #8
 80028f8:	2105      	movs	r1, #5
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 ffb2 	bl	8005864 <HAL_RCC_ClockConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002906:	f000 fd87 	bl	8003418 <Error_Handler>
  }
}
 800290a:	bf00      	nop
 800290c:	3750      	adds	r7, #80	; 0x50
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	40007000 	.word	0x40007000

0800291c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002922:	463b      	mov	r3, r7
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800292e:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <MX_ADC1_Init+0x98>)
 8002930:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <MX_ADC1_Init+0x9c>)
 8002932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <MX_ADC1_Init+0x98>)
 8002936:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800293a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <MX_ADC1_Init+0x98>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002942:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <MX_ADC1_Init+0x98>)
 8002944:	2200      	movs	r2, #0
 8002946:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002948:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <MX_ADC1_Init+0x98>)
 800294a:	2200      	movs	r2, #0
 800294c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800294e:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <MX_ADC1_Init+0x98>)
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <MX_ADC1_Init+0x98>)
 8002958:	2200      	movs	r2, #0
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800295c:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <MX_ADC1_Init+0x98>)
 800295e:	4a17      	ldr	r2, [pc, #92]	; (80029bc <MX_ADC1_Init+0xa0>)
 8002960:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002962:	4b14      	ldr	r3, [pc, #80]	; (80029b4 <MX_ADC1_Init+0x98>)
 8002964:	2200      	movs	r2, #0
 8002966:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <MX_ADC1_Init+0x98>)
 800296a:	2201      	movs	r2, #1
 800296c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800296e:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <MX_ADC1_Init+0x98>)
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002976:	4b0f      	ldr	r3, [pc, #60]	; (80029b4 <MX_ADC1_Init+0x98>)
 8002978:	2201      	movs	r2, #1
 800297a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800297c:	480d      	ldr	r0, [pc, #52]	; (80029b4 <MX_ADC1_Init+0x98>)
 800297e:	f001 fa0d 	bl	8003d9c <HAL_ADC_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002988:	f000 fd46 	bl	8003418 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800298c:	230e      	movs	r3, #14
 800298e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002990:	2301      	movs	r3, #1
 8002992:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002998:	463b      	mov	r3, r7
 800299a:	4619      	mov	r1, r3
 800299c:	4805      	ldr	r0, [pc, #20]	; (80029b4 <MX_ADC1_Init+0x98>)
 800299e:	f001 fc37 	bl	8004210 <HAL_ADC_ConfigChannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029a8:	f000 fd36 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029ac:	bf00      	nop
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200007bc 	.word	0x200007bc
 80029b8:	40012000 	.word	0x40012000
 80029bc:	0f000001 	.word	0x0f000001

080029c0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80029c6:	463b      	mov	r3, r7
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <MX_DAC_Init+0x4c>)
 80029d0:	4a0f      	ldr	r2, [pc, #60]	; (8002a10 <MX_DAC_Init+0x50>)
 80029d2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80029d4:	480d      	ldr	r0, [pc, #52]	; (8002a0c <MX_DAC_Init+0x4c>)
 80029d6:	f001 ffad 	bl	8004934 <HAL_DAC_Init>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80029e0:	f000 fd1a 	bl	8003418 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80029e4:	2324      	movs	r3, #36	; 0x24
 80029e6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80029ec:	463b      	mov	r3, r7
 80029ee:	2200      	movs	r2, #0
 80029f0:	4619      	mov	r1, r3
 80029f2:	4806      	ldr	r0, [pc, #24]	; (8002a0c <MX_DAC_Init+0x4c>)
 80029f4:	f002 f8ac 	bl	8004b50 <HAL_DAC_ConfigChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80029fe:	f000 fd0b 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000864 	.word	0x20000864
 8002a10:	40007400 	.word	0x40007400

08002a14 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a1a:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <MX_SPI3_Init+0x68>)
 8002a1c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a24:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a38:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a44:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002a46:	4b0c      	ldr	r3, [pc, #48]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a48:	2208      	movs	r2, #8
 8002a4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a4c:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a52:	4b09      	ldr	r3, [pc, #36]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002a5e:	4b06      	ldr	r3, [pc, #24]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a60:	220a      	movs	r2, #10
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <MX_SPI3_Init+0x64>)
 8002a66:	f003 fd17 	bl	8006498 <HAL_SPI_Init>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002a70:	f000 fcd2 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200008d8 	.word	0x200008d8
 8002a7c:	40003c00 	.word	0x40003c00

08002a80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a86:	f107 0308 	add.w	r3, r7, #8
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a94:	463b      	mov	r3, r7
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <MX_TIM2_Init+0x94>)
 8002a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <MX_TIM2_Init+0x94>)
 8002aa6:	224f      	movs	r2, #79	; 0x4f
 8002aa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <MX_TIM2_Init+0x94>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002ab0:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <MX_TIM2_Init+0x94>)
 8002ab2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ab6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab8:	4b16      	ldr	r3, [pc, #88]	; (8002b14 <MX_TIM2_Init+0x94>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <MX_TIM2_Init+0x94>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ac4:	4813      	ldr	r0, [pc, #76]	; (8002b14 <MX_TIM2_Init+0x94>)
 8002ac6:	f004 f927 	bl	8006d18 <HAL_TIM_Base_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002ad0:	f000 fca2 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ad8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002ada:	f107 0308 	add.w	r3, r7, #8
 8002ade:	4619      	mov	r1, r3
 8002ae0:	480c      	ldr	r0, [pc, #48]	; (8002b14 <MX_TIM2_Init+0x94>)
 8002ae2:	f004 fb49 	bl	8007178 <HAL_TIM_ConfigClockSource>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002aec:	f000 fc94 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002af0:	2320      	movs	r3, #32
 8002af2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002af8:	463b      	mov	r3, r7
 8002afa:	4619      	mov	r1, r3
 8002afc:	4805      	ldr	r0, [pc, #20]	; (8002b14 <MX_TIM2_Init+0x94>)
 8002afe:	f004 fd65 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b08:	f000 fc86 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000930 	.word	0x20000930

08002b18 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <MX_TIM3_Init+0x90>)
 8002b36:	4a1d      	ldr	r2, [pc, #116]	; (8002bac <MX_TIM3_Init+0x94>)
 8002b38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <MX_TIM3_Init+0x90>)
 8002b3c:	224f      	movs	r2, #79	; 0x4f
 8002b3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <MX_TIM3_Init+0x90>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <MX_TIM3_Init+0x90>)
 8002b48:	2263      	movs	r2, #99	; 0x63
 8002b4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <MX_TIM3_Init+0x90>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b52:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <MX_TIM3_Init+0x90>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002b58:	4813      	ldr	r0, [pc, #76]	; (8002ba8 <MX_TIM3_Init+0x90>)
 8002b5a:	f004 f8dd 	bl	8006d18 <HAL_TIM_Base_Init>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002b64:	f000 fc58 	bl	8003418 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002b6e:	f107 0308 	add.w	r3, r7, #8
 8002b72:	4619      	mov	r1, r3
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <MX_TIM3_Init+0x90>)
 8002b76:	f004 faff 	bl	8007178 <HAL_TIM_ConfigClockSource>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002b80:	f000 fc4a 	bl	8003418 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b84:	2300      	movs	r3, #0
 8002b86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b8c:	463b      	mov	r3, r7
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4805      	ldr	r0, [pc, #20]	; (8002ba8 <MX_TIM3_Init+0x90>)
 8002b92:	f004 fd1b 	bl	80075cc <HAL_TIMEx_MasterConfigSynchronization>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002b9c:	f000 fc3c 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ba0:	bf00      	nop
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000978 	.word	0x20000978
 8002bac:	40000400 	.word	0x40000400

08002bb0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <MX_UART4_Init+0x4c>)
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <MX_UART4_Init+0x50>)
 8002bb8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <MX_UART4_Init+0x4c>)
 8002bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <MX_UART4_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002bc8:	4b0c      	ldr	r3, [pc, #48]	; (8002bfc <MX_UART4_Init+0x4c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <MX_UART4_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <MX_UART4_Init+0x4c>)
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	4b08      	ldr	r3, [pc, #32]	; (8002bfc <MX_UART4_Init+0x4c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <MX_UART4_Init+0x4c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002be6:	4805      	ldr	r0, [pc, #20]	; (8002bfc <MX_UART4_Init+0x4c>)
 8002be8:	f004 fd80 	bl	80076ec <HAL_UART_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002bf2:	f000 fc11 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200009c0 	.word	0x200009c0
 8002c00:	40004c00 	.word	0x40004c00

08002c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <MX_USART2_UART_Init+0x50>)
 8002c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c3a:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_USART2_UART_Init+0x4c>)
 8002c3c:	f004 fd56 	bl	80076ec <HAL_UART_Init>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c46:	f000 fbe7 	bl	8003418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000a04 	.word	0x20000a04
 8002c54:	40004400 	.word	0x40004400

08002c58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <MX_DMA_Init+0x98>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <MX_DMA_Init+0x98>)
 8002c68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <MX_DMA_Init+0x98>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	603b      	str	r3, [r7, #0]
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <MX_DMA_Init+0x98>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a1b      	ldr	r2, [pc, #108]	; (8002cf0 <MX_DMA_Init+0x98>)
 8002c84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <MX_DMA_Init+0x98>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c92:	603b      	str	r3, [r7, #0]
 8002c94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002c96:	2200      	movs	r2, #0
 8002c98:	2105      	movs	r1, #5
 8002c9a:	200d      	movs	r0, #13
 8002c9c:	f001 fe20 	bl	80048e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002ca0:	200d      	movs	r0, #13
 8002ca2:	f001 fe39 	bl	8004918 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	2105      	movs	r1, #5
 8002caa:	200f      	movs	r0, #15
 8002cac:	f001 fe18 	bl	80048e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002cb0:	200f      	movs	r0, #15
 8002cb2:	f001 fe31 	bl	8004918 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2105      	movs	r1, #5
 8002cba:	2010      	movs	r0, #16
 8002cbc:	f001 fe10 	bl	80048e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002cc0:	2010      	movs	r0, #16
 8002cc2:	f001 fe29 	bl	8004918 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2105      	movs	r1, #5
 8002cca:	2011      	movs	r0, #17
 8002ccc:	f001 fe08 	bl	80048e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002cd0:	2011      	movs	r0, #17
 8002cd2:	f001 fe21 	bl	8004918 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	2105      	movs	r1, #5
 8002cda:	2038      	movs	r0, #56	; 0x38
 8002cdc:	f001 fe00 	bl	80048e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002ce0:	2038      	movs	r0, #56	; 0x38
 8002ce2:	f001 fe19 	bl	8004918 <HAL_NVIC_EnableIRQ>

}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800

08002cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b088      	sub	sp, #32
 8002cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfa:	f107 030c 	add.w	r3, r7, #12
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
 8002d04:	609a      	str	r2, [r3, #8]
 8002d06:	60da      	str	r2, [r3, #12]
 8002d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	4b20      	ldr	r3, [pc, #128]	; (8002d90 <MX_GPIO_Init+0x9c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <MX_GPIO_Init+0x9c>)
 8002d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d18:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <MX_GPIO_Init+0x9c>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <MX_GPIO_Init+0x9c>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <MX_GPIO_Init+0x9c>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <MX_GPIO_Init+0x9c>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	603b      	str	r3, [r7, #0]
 8002d46:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <MX_GPIO_Init+0x9c>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a11      	ldr	r2, [pc, #68]	; (8002d90 <MX_GPIO_Init+0x9c>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <MX_GPIO_Init+0x9c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d64:	480b      	ldr	r0, [pc, #44]	; (8002d94 <MX_GPIO_Init+0xa0>)
 8002d66:	f002 fd63 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d70:	2301      	movs	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7c:	f107 030c 	add.w	r3, r7, #12
 8002d80:	4619      	mov	r1, r3
 8002d82:	4804      	ldr	r0, [pc, #16]	; (8002d94 <MX_GPIO_Init+0xa0>)
 8002d84:	f002 fbc0 	bl	8005508 <HAL_GPIO_Init>

}
 8002d88:	bf00      	nop
 8002d8a:	3720      	adds	r7, #32
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020800 	.word	0x40020800

08002d98 <HPT_task>:

/* USER CODE BEGIN 4 */
void HPT_task(void *argument)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(uart_trans_counter>=1000)uart_trans_counter=0;
 8002da0:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HPT_task+0x74>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002da8:	db02      	blt.n	8002db0 <HPT_task+0x18>
 8002daa:	4b18      	ldr	r3, [pc, #96]	; (8002e0c <HPT_task+0x74>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

		int value=adc_data_buf[uart_trans_counter]/mag_scale+scope_bias;
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <HPT_task+0x74>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <HPT_task+0x78>)
 8002db6:	5cd2      	ldrb	r2, [r2, r3]
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HPT_task+0x7c>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4b14      	ldr	r3, [pc, #80]	; (8002e18 <HPT_task+0x80>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	4413      	add	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
		if(value>=255)value=255;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2bfe      	cmp	r3, #254	; 0xfe
 8002dd0:	dd01      	ble.n	8002dd6 <HPT_task+0x3e>
 8002dd2:	23ff      	movs	r3, #255	; 0xff
 8002dd4:	60fb      	str	r3, [r7, #12]

		int len=sprintf(buf,"add 1,0,%d%s",value,cmd_end);
 8002dd6:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <HPT_task+0x84>)
 8002dd8:	68fa      	ldr	r2, [r7, #12]
 8002dda:	4911      	ldr	r1, [pc, #68]	; (8002e20 <HPT_task+0x88>)
 8002ddc:	4811      	ldr	r0, [pc, #68]	; (8002e24 <HPT_task+0x8c>)
 8002dde:	f00b fa05 	bl	800e1ec <siprintf>
 8002de2:	60b8      	str	r0, [r7, #8]
		if(stop_button==0)
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HPT_task+0x90>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <HPT_task+0x66>
		{
		Critical_section_Uart(len,buf);//if stop button=0,send data to display
 8002dec:	490d      	ldr	r1, [pc, #52]	; (8002e24 <HPT_task+0x8c>)
 8002dee:	68b8      	ldr	r0, [r7, #8]
 8002df0:	f7ff f952 	bl	8002098 <Critical_section_Uart>
		uart_trans_counter++;
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HPT_task+0x74>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HPT_task+0x74>)
 8002dfc:	6013      	str	r3, [r2, #0]
		}


		vTaskDelay(1*time_scale);
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HPT_task+0x94>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f009 ff26 	bl	800cc54 <vTaskDelay>
	{
 8002e08:	e7ca      	b.n	8002da0 <HPT_task+0x8>
 8002e0a:	bf00      	nop
 8002e0c:	20000fe0 	.word	0x20000fe0
 8002e10:	20000bec 	.word	0x20000bec
 8002e14:	2000000d 	.word	0x2000000d
 8002e18:	20000b7d 	.word	0x20000b7d
 8002e1c:	20000014 	.word	0x20000014
 8002e20:	080104d0 	.word	0x080104d0
 8002e24:	20000b88 	.word	0x20000b88
 8002e28:	20000b68 	.word	0x20000b68
 8002e2c:	20000008 	.word	0x20000008

08002e30 <MPT_task>:
	}
}

void MPT_task(void *argument)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(FFT_button==1&&stop_button==0&&fft_complete_flag==0)
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <MPT_task+0x98>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d13e      	bne.n	8002ebe <MPT_task+0x8e>
 8002e40:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <MPT_task+0x9c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d13a      	bne.n	8002ebe <MPT_task+0x8e>
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <MPT_task+0xa0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d136      	bne.n	8002ebe <MPT_task+0x8e>
		{
			if(fft_transfer_counter<0)
 8002e50:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <MPT_task+0xa4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da05      	bge.n	8002e64 <MPT_task+0x34>
			{
				fft_transfer_counter=31;
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <MPT_task+0xa4>)
 8002e5a:	221f      	movs	r2, #31
 8002e5c:	601a      	str	r2, [r3, #0]
				fft_complete_flag=1;//transfer complete set flag to stop transfer data
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <MPT_task+0xa0>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
			}

			if(fft_hold_counter!=1)
 8002e64:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <MPT_task+0xa8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d003      	beq.n	8002e74 <MPT_task+0x44>
			{
				value_fft=0;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <MPT_task+0xac>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	e007      	b.n	8002e84 <MPT_task+0x54>
			}
			else value_fft=Mag[fft_transfer_counter];
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <MPT_task+0xa4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <MPT_task+0xb0>)
 8002e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4b16      	ldr	r3, [pc, #88]	; (8002edc <MPT_task+0xac>)
 8002e82:	601a      	str	r2, [r3, #0]

			int len=sprintf(buf_3,"add 1,1,%d%s",value_fft,cmd_end);
 8002e84:	4b15      	ldr	r3, [pc, #84]	; (8002edc <MPT_task+0xac>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <MPT_task+0xb4>)
 8002e8a:	4917      	ldr	r1, [pc, #92]	; (8002ee8 <MPT_task+0xb8>)
 8002e8c:	4817      	ldr	r0, [pc, #92]	; (8002eec <MPT_task+0xbc>)
 8002e8e:	f00b f9ad 	bl	800e1ec <siprintf>
 8002e92:	60f8      	str	r0, [r7, #12]
			Critical_section_Uart(len,buf_3);//if FFT_button=1,send data to display
 8002e94:	4915      	ldr	r1, [pc, #84]	; (8002eec <MPT_task+0xbc>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f7ff f8fe 	bl	8002098 <Critical_section_Uart>

			if(fft_hold_counter>=10)
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <MPT_task+0xa8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b09      	cmp	r3, #9
 8002ea2:	dd07      	ble.n	8002eb4 <MPT_task+0x84>
			{
				fft_transfer_counter--;
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <MPT_task+0xa4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <MPT_task+0xa4>)
 8002eac:	6013      	str	r3, [r2, #0]
				fft_hold_counter=0;
 8002eae:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <MPT_task+0xa8>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
			}
				fft_hold_counter++;
 8002eb4:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <MPT_task+0xa8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	4a07      	ldr	r2, [pc, #28]	; (8002ed8 <MPT_task+0xa8>)
 8002ebc:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(10);
 8002ebe:	200a      	movs	r0, #10
 8002ec0:	f009 fec8 	bl	800cc54 <vTaskDelay>
		if(FFT_button==1&&stop_button==0&&fft_complete_flag==0)
 8002ec4:	e7b8      	b.n	8002e38 <MPT_task+0x8>
 8002ec6:	bf00      	nop
 8002ec8:	20000b6c 	.word	0x20000b6c
 8002ecc:	20000b68 	.word	0x20000b68
 8002ed0:	20001190 	.word	0x20001190
 8002ed4:	20000018 	.word	0x20000018
 8002ed8:	2000118c 	.word	0x2000118c
 8002edc:	20001194 	.word	0x20001194
 8002ee0:	2000139c 	.word	0x2000139c
 8002ee4:	20000014 	.word	0x20000014
 8002ee8:	080104e0 	.word	0x080104e0
 8002eec:	20000bb8 	.word	0x20000bb8

08002ef0 <LPT_task>:
	}
}

void LPT_task(void *argument)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Receive_DMA(&huart4,rx_buf,5);
 8002ef8:	2205      	movs	r2, #5
 8002efa:	4914      	ldr	r1, [pc, #80]	; (8002f4c <LPT_task+0x5c>)
 8002efc:	4814      	ldr	r0, [pc, #80]	; (8002f50 <LPT_task+0x60>)
 8002efe:	f004 fd53 	bl	80079a8 <HAL_UART_Receive_DMA>

		if(stop_button==0)
 8002f02:	4b14      	ldr	r3, [pc, #80]	; (8002f54 <LPT_task+0x64>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d11b      	bne.n	8002f42 <LPT_task+0x52>
		{
			int len=sprintf(buf_2,"t0.txt=\"freq=%d Hz\"%s",frequency,cmd_end);
 8002f0a:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <LPT_task+0x68>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b12      	ldr	r3, [pc, #72]	; (8002f5c <LPT_task+0x6c>)
 8002f12:	4913      	ldr	r1, [pc, #76]	; (8002f60 <LPT_task+0x70>)
 8002f14:	4813      	ldr	r0, [pc, #76]	; (8002f64 <LPT_task+0x74>)
 8002f16:	f00b f969 	bl	800e1ec <siprintf>
 8002f1a:	60f8      	str	r0, [r7, #12]
			Critical_section_Uart(len,buf_2);
 8002f1c:	4911      	ldr	r1, [pc, #68]	; (8002f64 <LPT_task+0x74>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff f8ba 	bl	8002098 <Critical_section_Uart>
			len=sprintf(buf_4,"t1.txt=\"Mag=%d.%d V\"%s",mag_max_int,mag_max_mod,cmd_end);
 8002f24:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <LPT_task+0x78>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <LPT_task+0x7c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	490b      	ldr	r1, [pc, #44]	; (8002f5c <LPT_task+0x6c>)
 8002f2e:	9100      	str	r1, [sp, #0]
 8002f30:	490f      	ldr	r1, [pc, #60]	; (8002f70 <LPT_task+0x80>)
 8002f32:	4810      	ldr	r0, [pc, #64]	; (8002f74 <LPT_task+0x84>)
 8002f34:	f00b f95a 	bl	800e1ec <siprintf>
 8002f38:	60f8      	str	r0, [r7, #12]
			Critical_section_Uart(len,buf_4);
 8002f3a:	490e      	ldr	r1, [pc, #56]	; (8002f74 <LPT_task+0x84>)
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f7ff f8ab 	bl	8002098 <Critical_section_Uart>
		}
		vTaskDelay(500);
 8002f42:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002f46:	f009 fe85 	bl	800cc54 <vTaskDelay>
		HAL_UART_Receive_DMA(&huart4,rx_buf,5);
 8002f4a:	e7d5      	b.n	8002ef8 <LPT_task+0x8>
 8002f4c:	20000b80 	.word	0x20000b80
 8002f50:	200009c0 	.word	0x200009c0
 8002f54:	20000b68 	.word	0x20000b68
 8002f58:	20000fe8 	.word	0x20000fe8
 8002f5c:	20000014 	.word	0x20000014
 8002f60:	080104f0 	.word	0x080104f0
 8002f64:	20000b9c 	.word	0x20000b9c
 8002f68:	20000fec 	.word	0x20000fec
 8002f6c:	20000ff0 	.word	0x20000ff0
 8002f70:	08010508 	.word	0x08010508
 8002f74:	20000bcc 	.word	0x20000bcc

08002f78 <VLPT_task>:
	}
}

void VLPT_task(void *argument)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		DSP_FFTPhase();
 8002f80:	f7ff fb58 	bl	8002634 <DSP_FFTPhase>
		fft_complete_flag=0;//when fft update,reset the fft flag
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <VLPT_task+0x1c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]

		vTaskDelay(2000);
 8002f8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002f8e:	f009 fe61 	bl	800cc54 <vTaskDelay>
		DSP_FFTPhase();
 8002f92:	e7f5      	b.n	8002f80 <VLPT_task+0x8>
 8002f94:	20001190 	.word	0x20001190

08002f98 <SD_task>:

	}
}

void SD_task(void *argument)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	int value;
	int value_FFT;
	uint32_t Tick_delay=pdMS_TO_TICKS(1);
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
	while(1)
	{
		if(SD_flag==1&&SD_ADC_falg==1)
 8002fa4:	4b4b      	ldr	r3, [pc, #300]	; (80030d4 <SD_task+0x13c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d130      	bne.n	800300e <SD_task+0x76>
 8002fac:	4b4a      	ldr	r3, [pc, #296]	; (80030d8 <SD_task+0x140>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d12c      	bne.n	800300e <SD_task+0x76>
		{
			xQueueReceive(SD_queue, &value, Tick_delay);
 8002fb4:	4b49      	ldr	r3, [pc, #292]	; (80030dc <SD_task+0x144>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f107 010c 	add.w	r1, r7, #12
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f009 f8d2 	bl	800c168 <xQueueReceive>
			if(write_counter_adc!=0)
 8002fc4:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <SD_task+0x148>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <SD_task+0x46>
			sprintf(buf_sd,"%d.%d\n",(write_counter_adc+1),value);
 8002fcc:	4b44      	ldr	r3, [pc, #272]	; (80030e0 <SD_task+0x148>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	4943      	ldr	r1, [pc, #268]	; (80030e4 <SD_task+0x14c>)
 8002fd6:	4844      	ldr	r0, [pc, #272]	; (80030e8 <SD_task+0x150>)
 8002fd8:	f00b f908 	bl	800e1ec <siprintf>
 8002fdc:	e007      	b.n	8002fee <SD_task+0x56>
			else
			sprintf(buf_sd,"ADC_value\n%d.%d\n",(write_counter_adc+1),value);
 8002fde:	4b40      	ldr	r3, [pc, #256]	; (80030e0 <SD_task+0x148>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4941      	ldr	r1, [pc, #260]	; (80030ec <SD_task+0x154>)
 8002fe8:	483f      	ldr	r0, [pc, #252]	; (80030e8 <SD_task+0x150>)
 8002fea:	f00b f8ff 	bl	800e1ec <siprintf>

			//update file//
			Mount_SD("/");
 8002fee:	4840      	ldr	r0, [pc, #256]	; (80030f0 <SD_task+0x158>)
 8002ff0:	f7fe f95c 	bl	80012ac <Mount_SD>
			Update_File("ADC.TXT",buf_sd);
 8002ff4:	493c      	ldr	r1, [pc, #240]	; (80030e8 <SD_task+0x150>)
 8002ff6:	483f      	ldr	r0, [pc, #252]	; (80030f4 <SD_task+0x15c>)
 8002ff8:	f7fe fa9a 	bl	8001530 <Update_File>
			Unmount_SD("/");
 8002ffc:	483c      	ldr	r0, [pc, #240]	; (80030f0 <SD_task+0x158>)
 8002ffe:	f7fe f979 	bl	80012f4 <Unmount_SD>

			write_counter_adc++;
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <SD_task+0x148>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	3301      	adds	r3, #1
 8003008:	4a35      	ldr	r2, [pc, #212]	; (80030e0 <SD_task+0x148>)
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	e031      	b.n	8003072 <SD_task+0xda>
		}
		else
		{
			if(SD_flag==1&&SD_FFT_falg==1)
 800300e:	4b31      	ldr	r3, [pc, #196]	; (80030d4 <SD_task+0x13c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d12d      	bne.n	8003072 <SD_task+0xda>
 8003016:	4b38      	ldr	r3, [pc, #224]	; (80030f8 <SD_task+0x160>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d129      	bne.n	8003072 <SD_task+0xda>
			{
				value_FFT=Mag[write_counter_fft];
 800301e:	4b37      	ldr	r3, [pc, #220]	; (80030fc <SD_task+0x164>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a37      	ldr	r2, [pc, #220]	; (8003100 <SD_task+0x168>)
 8003024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003028:	613b      	str	r3, [r7, #16]
				if(write_counter_fft!=0)
 800302a:	4b34      	ldr	r3, [pc, #208]	; (80030fc <SD_task+0x164>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d008      	beq.n	8003044 <SD_task+0xac>
				sprintf(buf_sd,"%d.%d\n",(write_counter_fft+1),value_FFT);
 8003032:	4b32      	ldr	r3, [pc, #200]	; (80030fc <SD_task+0x164>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	1c5a      	adds	r2, r3, #1
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	492a      	ldr	r1, [pc, #168]	; (80030e4 <SD_task+0x14c>)
 800303c:	482a      	ldr	r0, [pc, #168]	; (80030e8 <SD_task+0x150>)
 800303e:	f00b f8d5 	bl	800e1ec <siprintf>
 8003042:	e007      	b.n	8003054 <SD_task+0xbc>
				else
				sprintf(buf_sd,"Mag_value\n%d.%d\n",(write_counter_fft+1),value_FFT);
 8003044:	4b2d      	ldr	r3, [pc, #180]	; (80030fc <SD_task+0x164>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	1c5a      	adds	r2, r3, #1
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	492d      	ldr	r1, [pc, #180]	; (8003104 <SD_task+0x16c>)
 800304e:	4826      	ldr	r0, [pc, #152]	; (80030e8 <SD_task+0x150>)
 8003050:	f00b f8cc 	bl	800e1ec <siprintf>

				//update file//
				Mount_SD("/");
 8003054:	4826      	ldr	r0, [pc, #152]	; (80030f0 <SD_task+0x158>)
 8003056:	f7fe f929 	bl	80012ac <Mount_SD>
				Update_File("FFT.TXT",buf_sd);
 800305a:	4923      	ldr	r1, [pc, #140]	; (80030e8 <SD_task+0x150>)
 800305c:	482a      	ldr	r0, [pc, #168]	; (8003108 <SD_task+0x170>)
 800305e:	f7fe fa67 	bl	8001530 <Update_File>
				Unmount_SD("/");
 8003062:	4823      	ldr	r0, [pc, #140]	; (80030f0 <SD_task+0x158>)
 8003064:	f7fe f946 	bl	80012f4 <Unmount_SD>

				write_counter_fft++;
 8003068:	4b24      	ldr	r3, [pc, #144]	; (80030fc <SD_task+0x164>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3301      	adds	r3, #1
 800306e:	4a23      	ldr	r2, [pc, #140]	; (80030fc <SD_task+0x164>)
 8003070:	6013      	str	r3, [r2, #0]
			}
		}


		if(write_counter_adc>=64&&SD_ADC_falg==1)
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <SD_task+0x148>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b3f      	cmp	r3, #63	; 0x3f
 8003078:	dd09      	ble.n	800308e <SD_task+0xf6>
 800307a:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <SD_task+0x140>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <SD_task+0xf6>
		{
			write_counter_adc=0;
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <SD_task+0x148>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
			SD_ADC_falg=0;//ADC data store complete
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <SD_task+0x140>)
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
		}

		if(write_counter_fft>=32&&SD_FFT_falg==1)
 800308e:	4b1b      	ldr	r3, [pc, #108]	; (80030fc <SD_task+0x164>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b1f      	cmp	r3, #31
 8003094:	dd09      	ble.n	80030aa <SD_task+0x112>
 8003096:	4b18      	ldr	r3, [pc, #96]	; (80030f8 <SD_task+0x160>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d105      	bne.n	80030aa <SD_task+0x112>
		{
			write_counter_fft=0;
 800309e:	4b17      	ldr	r3, [pc, #92]	; (80030fc <SD_task+0x164>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
			SD_FFT_falg=0;//FFT data store complete
 80030a4:	4b14      	ldr	r3, [pc, #80]	; (80030f8 <SD_task+0x160>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
		}

		if(SD_ADC_falg==0&&SD_FFT_falg==0)
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <SD_task+0x140>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d106      	bne.n	80030c0 <SD_task+0x128>
 80030b2:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <SD_task+0x160>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <SD_task+0x128>
		{
			SD_flag=0;//if data write complete reset flag
 80030ba:	4b06      	ldr	r3, [pc, #24]	; (80030d4 <SD_task+0x13c>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
		}


		vTaskDelay(3*time_scale);
 80030c0:	4b12      	ldr	r3, [pc, #72]	; (800310c <SD_task+0x174>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f009 fdc2 	bl	800cc54 <vTaskDelay>
		if(SD_flag==1&&SD_ADC_falg==1)
 80030d0:	e768      	b.n	8002fa4 <SD_task+0xc>
 80030d2:	bf00      	nop
 80030d4:	20000b70 	.word	0x20000b70
 80030d8:	20000b74 	.word	0x20000b74
 80030dc:	200007b8 	.word	0x200007b8
 80030e0:	200016d0 	.word	0x200016d0
 80030e4:	08010520 	.word	0x08010520
 80030e8:	2000159c 	.word	0x2000159c
 80030ec:	08010528 	.word	0x08010528
 80030f0:	080104a0 	.word	0x080104a0
 80030f4:	080104a4 	.word	0x080104a4
 80030f8:	20000b78 	.word	0x20000b78
 80030fc:	200016d4 	.word	0x200016d4
 8003100:	2000139c 	.word	0x2000139c
 8003104:	0801053c 	.word	0x0801053c
 8003108:	080104ac 	.word	0x080104ac
 800310c:	20000008 	.word	0x20000008

08003110 <Send_task>:
	}
}


void Send_task(void *argument)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	uint32_t Tick_delay=pdMS_TO_TICKS(1);
 8003118:	2301      	movs	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
			xQueueSend(SD_queue,&adc_val,Tick_delay);
 800311c:	4b06      	ldr	r3, [pc, #24]	; (8003138 <Send_task+0x28>)
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	2300      	movs	r3, #0
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4905      	ldr	r1, [pc, #20]	; (800313c <Send_task+0x2c>)
 8003126:	f008 fe93 	bl	800be50 <xQueueGenericSend>
			vTaskDelay(1*time_scale);
 800312a:	4b05      	ldr	r3, [pc, #20]	; (8003140 <Send_task+0x30>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f009 fd90 	bl	800cc54 <vTaskDelay>
			xQueueSend(SD_queue,&adc_val,Tick_delay);
 8003134:	e7f2      	b.n	800311c <Send_task+0xc>
 8003136:	bf00      	nop
 8003138:	200007b8 	.word	0x200007b8
 800313c:	20000be8 	.word	0x20000be8
 8003140:	20000008 	.word	0x20000008

08003144 <HAL_ADC_ConvCpltCallback>:
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	adc_val=adc_dma[0];
 800314c:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_ADC_ConvCpltCallback+0x20>)
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_ADC_ConvCpltCallback+0x24>)
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000fd4 	.word	0x20000fd4
 8003168:	20000be8 	.word	0x20000be8
 800316c:	00000000 	.word	0x00000000

08003170 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b5b0      	push	{r4, r5, r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a90      	ldr	r2, [pc, #576]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003182:	f000 fdc7 	bl	8003d14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a8e      	ldr	r2, [pc, #568]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800318c:	4293      	cmp	r3, r2
 800318e:	f040 8106 	bne.w	800339e <HAL_TIM_PeriodElapsedCallback+0x22e>
  {
	sample_counter++;
 8003192:	4b8d      	ldr	r3, [pc, #564]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	4a8b      	ldr	r2, [pc, #556]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800319a:	6013      	str	r3, [r2, #0]
	//sample counter decide sample rate//
	if(sample_counter>=1*time_scale)
 800319c:	4b8a      	ldr	r3, [pc, #552]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b8a      	ldr	r3, [pc, #552]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	f2c0 80d8 	blt.w	800335a <HAL_TIM_PeriodElapsedCallback+0x1ea>
	{

		sample_counter=0;
 80031aa:	4b87      	ldr	r3, [pc, #540]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]
		if(store_counter>=1000)store_counter=0;
 80031b0:	4b87      	ldr	r3, [pc, #540]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031b8:	db02      	blt.n	80031c0 <HAL_TIM_PeriodElapsedCallback+0x50>
 80031ba:	4b85      	ldr	r3, [pc, #532]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 80031c0:	4884      	ldr	r0, [pc, #528]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80031c2:	f000 fe2f 	bl	8003e24 <HAL_ADC_Start>
		adc_data_buf[store_counter]=adc_val/16;
 80031c6:	4b84      	ldr	r3, [pc, #528]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	091a      	lsrs	r2, r3, #4
 80031cc:	4b80      	ldr	r3, [pc, #512]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	b2d1      	uxtb	r1, r2
 80031d2:	4a82      	ldr	r2, [pc, #520]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80031d4:	54d1      	strb	r1, [r2, r3]
		store_counter++;
 80031d6:	4b7e      	ldr	r3, [pc, #504]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3301      	adds	r3, #1
 80031dc:	4a7c      	ldr	r2, [pc, #496]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80031de:	6013      	str	r3, [r2, #0]



		//frequency calculation//
		if(adc_val>=2048)cros_time++;
 80031e0:	4b7d      	ldr	r3, [pc, #500]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e8:	d305      	bcc.n	80031f6 <HAL_TIM_PeriodElapsedCallback+0x86>
 80031ea:	4b7d      	ldr	r3, [pc, #500]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	4a7b      	ldr	r2, [pc, #492]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e03d      	b.n	8003272 <HAL_TIM_PeriodElapsedCallback+0x102>
		else if(adc_val<2048&&cros_time!=0)
 80031f6:	4b78      	ldr	r3, [pc, #480]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fe:	d238      	bcs.n	8003272 <HAL_TIM_PeriodElapsedCallback+0x102>
 8003200:	4b77      	ldr	r3, [pc, #476]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d034      	beq.n	8003272 <HAL_TIM_PeriodElapsedCallback+0x102>
		{
			frequency=1/(0.0001*time_scale*cros_time*2);
 8003208:	4b70      	ldr	r3, [pc, #448]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fb19 	bl	8000844 <__aeabi_i2d>
 8003212:	a365      	add	r3, pc, #404	; (adr r3, 80033a8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fd fb7e 	bl	8000918 <__aeabi_dmul>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4614      	mov	r4, r2
 8003222:	461d      	mov	r5, r3
 8003224:	4b6e      	ldr	r3, [pc, #440]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd fb0b 	bl	8000844 <__aeabi_i2d>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f7fd fb6f 	bl	8000918 <__aeabi_dmul>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	f7fd f9b1 	bl	80005ac <__adddf3>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	f04f 0000 	mov.w	r0, #0
 8003252:	4964      	ldr	r1, [pc, #400]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8003254:	f7fd fc8a 	bl	8000b6c <__aeabi_ddiv>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4610      	mov	r0, r2
 800325e:	4619      	mov	r1, r3
 8003260:	f7fd fe1c 	bl	8000e9c <__aeabi_d2uiz>
 8003264:	4603      	mov	r3, r0
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800326a:	701a      	strb	r2, [r3, #0]
			cros_time=0;
 800326c:	4b5c      	ldr	r3, [pc, #368]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
		}

		//magnitude calculation//
		if((adc_val/16)>mag_max)
 8003272:	4b59      	ldr	r3, [pc, #356]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	4a5c      	ldr	r2, [pc, #368]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800327a:	7812      	ldrb	r2, [r2, #0]
 800327c:	4293      	cmp	r3, r2
 800327e:	d954      	bls.n	800332a <HAL_TIM_PeriodElapsedCallback+0x1ba>
		{
			mag_max=adc_val/16;//if adc_val >previous value,change max value
 8003280:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	b2da      	uxtb	r2, r3
 8003288:	4b58      	ldr	r3, [pc, #352]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800328a:	701a      	strb	r2, [r3, #0]
			mag_max_int=mag_max*3.3*amplify/255;
 800328c:	4b57      	ldr	r3, [pc, #348]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fad7 	bl	8000844 <__aeabi_i2d>
 8003296:	a346      	add	r3, pc, #280	; (adr r3, 80033b0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329c:	f7fd fb3c 	bl	8000918 <__aeabi_dmul>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4614      	mov	r4, r2
 80032a6:	461d      	mov	r5, r3
 80032a8:	4b51      	ldr	r3, [pc, #324]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7fd fac9 	bl	8000844 <__aeabi_i2d>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4620      	mov	r0, r4
 80032b8:	4629      	mov	r1, r5
 80032ba:	f7fd fb2d 	bl	8000918 <__aeabi_dmul>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	a33c      	add	r3, pc, #240	; (adr r3, 80033b8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f7fd fc4e 	bl	8000b6c <__aeabi_ddiv>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4610      	mov	r0, r2
 80032d6:	4619      	mov	r1, r3
 80032d8:	f7fd fdb8 	bl	8000e4c <__aeabi_d2iz>
 80032dc:	4603      	mov	r3, r0
 80032de:	4a45      	ldr	r2, [pc, #276]	; (80033f4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 80032e0:	6013      	str	r3, [r2, #0]
			mag_max_mod=(mag_max*33/10*amplify%255)/26;
 80032e2:	4b42      	ldr	r3, [pc, #264]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	4613      	mov	r3, r2
 80032ea:	015b      	lsls	r3, r3, #5
 80032ec:	4413      	add	r3, r2
 80032ee:	4a42      	ldr	r2, [pc, #264]	; (80033f8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80032f0:	fb82 1203 	smull	r1, r2, r2, r3
 80032f4:	1092      	asrs	r2, r2, #2
 80032f6:	17db      	asrs	r3, r3, #31
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	4a3d      	ldr	r2, [pc, #244]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	fb02 f103 	mul.w	r1, r2, r3
 8003302:	4b3e      	ldr	r3, [pc, #248]	; (80033fc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8003304:	fb83 2301 	smull	r2, r3, r3, r1
 8003308:	440b      	add	r3, r1
 800330a:	11da      	asrs	r2, r3, #7
 800330c:	17cb      	asrs	r3, r1, #31
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	461a      	mov	r2, r3
 8003312:	0212      	lsls	r2, r2, #8
 8003314:	1ad2      	subs	r2, r2, r3
 8003316:	1a8b      	subs	r3, r1, r2
 8003318:	4a39      	ldr	r2, [pc, #228]	; (8003400 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800331a:	fb82 1203 	smull	r1, r2, r2, r3
 800331e:	10d2      	asrs	r2, r2, #3
 8003320:	17db      	asrs	r3, r3, #31
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	4a37      	ldr	r2, [pc, #220]	; (8003404 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	e017      	b.n	800335a <HAL_TIM_PeriodElapsedCallback+0x1ea>
		}
		else
		{
			flush_counter++;
 800332a:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	4a35      	ldr	r2, [pc, #212]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003332:	6013      	str	r3, [r2, #0]
			if(flush_counter>=(1000/time_scale))//flush data in period
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800333c:	fb92 f2f3 	sdiv	r2, r2, r3
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	dc08      	bgt.n	800335a <HAL_TIM_PeriodElapsedCallback+0x1ea>
			{
				mag_max=0;//reset_mag
 8003348:	4b28      	ldr	r3, [pc, #160]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
				frequency=0;
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
				flush_counter=0;
 8003354:	4b2c      	ldr	r3, [pc, #176]	; (8003408 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//save to fft buffer//
	if(fft_sample_counter>=16)
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b0f      	cmp	r3, #15
 8003360:	dd18      	ble.n	8003394 <HAL_TIM_PeriodElapsedCallback+0x224>
	{
		fft_sample_counter=0;
 8003362:	4b2a      	ldr	r3, [pc, #168]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
		if(fft_counter>=FFT_length)fft_counter=0;
 8003368:	4b29      	ldr	r3, [pc, #164]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b3f      	cmp	r3, #63	; 0x3f
 800336e:	dd02      	ble.n	8003376 <HAL_TIM_PeriodElapsedCallback+0x206>
 8003370:	4b27      	ldr	r3, [pc, #156]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
		input[fft_counter]=adc_val/4-512;
 8003376:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	089a      	lsrs	r2, r3, #2
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 8003384:	4923      	ldr	r1, [pc, #140]	; (8003414 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		fft_counter++;
 800338a:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3301      	adds	r3, #1
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003392:	6013      	str	r3, [r2, #0]
	}

	fft_sample_counter++;
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3301      	adds	r3, #1
 800339a:	4a1c      	ldr	r2, [pc, #112]	; (800340c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800339c:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bdb0      	pop	{r4, r5, r7, pc}
 80033a6:	bf00      	nop
 80033a8:	eb1c432d 	.word	0xeb1c432d
 80033ac:	3f1a36e2 	.word	0x3f1a36e2
 80033b0:	66666666 	.word	0x66666666
 80033b4:	400a6666 	.word	0x400a6666
 80033b8:	00000000 	.word	0x00000000
 80033bc:	406fe000 	.word	0x406fe000
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40000400 	.word	0x40000400
 80033c8:	20000fd8 	.word	0x20000fd8
 80033cc:	20000008 	.word	0x20000008
 80033d0:	20000fdc 	.word	0x20000fdc
 80033d4:	200007bc 	.word	0x200007bc
 80033d8:	20000be8 	.word	0x20000be8
 80033dc:	20000bec 	.word	0x20000bec
 80033e0:	20000fe4 	.word	0x20000fe4
 80033e4:	3ff00000 	.word	0x3ff00000
 80033e8:	20000fe8 	.word	0x20000fe8
 80033ec:	20000fe9 	.word	0x20000fe9
 80033f0:	20000010 	.word	0x20000010
 80033f4:	20000fec 	.word	0x20000fec
 80033f8:	66666667 	.word	0x66666667
 80033fc:	80808081 	.word	0x80808081
 8003400:	4ec4ec4f 	.word	0x4ec4ec4f
 8003404:	20000ff0 	.word	0x20000ff0
 8003408:	20000ff4 	.word	0x20000ff4
 800340c:	20001198 	.word	0x20001198
 8003410:	20001188 	.word	0x20001188
 8003414:	2000119c 	.word	0x2000119c

08003418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800341c:	b672      	cpsid	i
}
 800341e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003420:	e7fe      	b.n	8003420 <Error_Handler+0x8>
	...

08003424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
 800342e:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_MspInit+0x54>)
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	4a11      	ldr	r2, [pc, #68]	; (8003478 <HAL_MspInit+0x54>)
 8003434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003438:	6453      	str	r3, [r2, #68]	; 0x44
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_MspInit+0x54>)
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003446:	2300      	movs	r3, #0
 8003448:	603b      	str	r3, [r7, #0]
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_MspInit+0x54>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <HAL_MspInit+0x54>)
 8003450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003454:	6413      	str	r3, [r2, #64]	; 0x40
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_MspInit+0x54>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003462:	2200      	movs	r2, #0
 8003464:	210f      	movs	r1, #15
 8003466:	f06f 0001 	mvn.w	r0, #1
 800346a:	f001 fa39 	bl	80048e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023800 	.word	0x40023800

0800347c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	609a      	str	r2, [r3, #8]
 8003490:	60da      	str	r2, [r3, #12]
 8003492:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2f      	ldr	r2, [pc, #188]	; (8003558 <HAL_ADC_MspInit+0xdc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d157      	bne.n	800354e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	4b2e      	ldr	r3, [pc, #184]	; (800355c <HAL_ADC_MspInit+0xe0>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	4a2d      	ldr	r2, [pc, #180]	; (800355c <HAL_ADC_MspInit+0xe0>)
 80034a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ac:	6453      	str	r3, [r2, #68]	; 0x44
 80034ae:	4b2b      	ldr	r3, [pc, #172]	; (800355c <HAL_ADC_MspInit+0xe0>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	613b      	str	r3, [r7, #16]
 80034b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_ADC_MspInit+0xe0>)
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	4a26      	ldr	r2, [pc, #152]	; (800355c <HAL_ADC_MspInit+0xe0>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_ADC_MspInit+0xe0>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	f003 0304 	and.w	r3, r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034d6:	2310      	movs	r3, #16
 80034d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034da:	2303      	movs	r3, #3
 80034dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4619      	mov	r1, r3
 80034e8:	481d      	ldr	r0, [pc, #116]	; (8003560 <HAL_ADC_MspInit+0xe4>)
 80034ea:	f002 f80d 	bl	8005508 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034ee:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 80034f0:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <HAL_ADC_MspInit+0xec>)
 80034f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034f4:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003500:	4b18      	ldr	r3, [pc, #96]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003506:	4b17      	ldr	r3, [pc, #92]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 8003508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800350e:	4b15      	ldr	r3, [pc, #84]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 8003510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003514:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003516:	4b13      	ldr	r3, [pc, #76]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 8003518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800351c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800351e:	4b11      	ldr	r3, [pc, #68]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 8003520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003524:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 8003528:	2200      	movs	r2, #0
 800352a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800352c:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 800352e:	2200      	movs	r2, #0
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003532:	480c      	ldr	r0, [pc, #48]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 8003534:	f001 fbe6 	bl	8004d04 <HAL_DMA_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800353e:	f7ff ff6b 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a07      	ldr	r2, [pc, #28]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 8003546:	639a      	str	r2, [r3, #56]	; 0x38
 8003548:	4a06      	ldr	r2, [pc, #24]	; (8003564 <HAL_ADC_MspInit+0xe8>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800354e:	bf00      	nop
 8003550:	3728      	adds	r7, #40	; 0x28
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40012000 	.word	0x40012000
 800355c:	40023800 	.word	0x40023800
 8003560:	40020800 	.word	0x40020800
 8003564:	20000804 	.word	0x20000804
 8003568:	40026410 	.word	0x40026410

0800356c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2f      	ldr	r2, [pc, #188]	; (8003648 <HAL_DAC_MspInit+0xdc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d158      	bne.n	8003640 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <HAL_DAC_MspInit+0xe0>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a2d      	ldr	r2, [pc, #180]	; (800364c <HAL_DAC_MspInit+0xe0>)
 8003598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b2b      	ldr	r3, [pc, #172]	; (800364c <HAL_DAC_MspInit+0xe0>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b27      	ldr	r3, [pc, #156]	; (800364c <HAL_DAC_MspInit+0xe0>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a26      	ldr	r2, [pc, #152]	; (800364c <HAL_DAC_MspInit+0xe0>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <HAL_DAC_MspInit+0xe0>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035c6:	2310      	movs	r3, #16
 80035c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ca:	2303      	movs	r3, #3
 80035cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f107 0314 	add.w	r3, r7, #20
 80035d6:	4619      	mov	r1, r3
 80035d8:	481d      	ldr	r0, [pc, #116]	; (8003650 <HAL_DAC_MspInit+0xe4>)
 80035da:	f001 ff95 	bl	8005508 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80035de:	4b1d      	ldr	r3, [pc, #116]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 80035e0:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_DAC_MspInit+0xec>)
 80035e2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 80035e6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80035ea:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 80035ee:	2240      	movs	r2, #64	; 0x40
 80035f0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035f2:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80035f8:	4b16      	ldr	r3, [pc, #88]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 80035fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035fe:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 8003602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003606:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003608:	4b12      	ldr	r3, [pc, #72]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 800360a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800360e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 8003612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003616:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003618:	4b0e      	ldr	r3, [pc, #56]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 800361a:	2200      	movs	r2, #0
 800361c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 8003620:	2200      	movs	r2, #0
 8003622:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8003624:	480b      	ldr	r0, [pc, #44]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 8003626:	f001 fb6d 	bl	8004d04 <HAL_DMA_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003630:	f7ff fef2 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a07      	ldr	r2, [pc, #28]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	4a06      	ldr	r2, [pc, #24]	; (8003654 <HAL_DAC_MspInit+0xe8>)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40007400 	.word	0x40007400
 800364c:	40023800 	.word	0x40023800
 8003650:	40020000 	.word	0x40020000
 8003654:	20000878 	.word	0x20000878
 8003658:	40026088 	.word	0x40026088

0800365c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_SPI_MspInit+0xa4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d13c      	bne.n	80036f8 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	4b20      	ldr	r3, [pc, #128]	; (8003704 <HAL_SPI_MspInit+0xa8>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a1f      	ldr	r2, [pc, #124]	; (8003704 <HAL_SPI_MspInit+0xa8>)
 8003688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <HAL_SPI_MspInit+0xa8>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b19      	ldr	r3, [pc, #100]	; (8003704 <HAL_SPI_MspInit+0xa8>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a18      	ldr	r2, [pc, #96]	; (8003704 <HAL_SPI_MspInit+0xa8>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b16      	ldr	r3, [pc, #88]	; (8003704 <HAL_SPI_MspInit+0xa8>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80036b6:	2302      	movs	r3, #2
 80036b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 80036c6:	2305      	movs	r3, #5
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ca:	f107 0314 	add.w	r3, r7, #20
 80036ce:	4619      	mov	r1, r3
 80036d0:	480d      	ldr	r0, [pc, #52]	; (8003708 <HAL_SPI_MspInit+0xac>)
 80036d2:	f001 ff19 	bl	8005508 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80036d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036dc:	2302      	movs	r3, #2
 80036de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036e4:	2303      	movs	r3, #3
 80036e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036e8:	2306      	movs	r3, #6
 80036ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ec:	f107 0314 	add.w	r3, r7, #20
 80036f0:	4619      	mov	r1, r3
 80036f2:	4805      	ldr	r0, [pc, #20]	; (8003708 <HAL_SPI_MspInit+0xac>)
 80036f4:	f001 ff08 	bl	8005508 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80036f8:	bf00      	nop
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40003c00 	.word	0x40003c00
 8003704:	40023800 	.word	0x40023800
 8003708:	40020800 	.word	0x40020800

0800370c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d116      	bne.n	800374c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	4b1a      	ldr	r3, [pc, #104]	; (800378c <HAL_TIM_Base_MspInit+0x80>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	4a19      	ldr	r2, [pc, #100]	; (800378c <HAL_TIM_Base_MspInit+0x80>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6413      	str	r3, [r2, #64]	; 0x40
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <HAL_TIM_Base_MspInit+0x80>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800373a:	2200      	movs	r2, #0
 800373c:	2105      	movs	r1, #5
 800373e:	201c      	movs	r0, #28
 8003740:	f001 f8ce 	bl	80048e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003744:	201c      	movs	r0, #28
 8003746:	f001 f8e7 	bl	8004918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800374a:	e01a      	b.n	8003782 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0f      	ldr	r2, [pc, #60]	; (8003790 <HAL_TIM_Base_MspInit+0x84>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d115      	bne.n	8003782 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	60bb      	str	r3, [r7, #8]
 800375a:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_TIM_Base_MspInit+0x80>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	4a0b      	ldr	r2, [pc, #44]	; (800378c <HAL_TIM_Base_MspInit+0x80>)
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	6413      	str	r3, [r2, #64]	; 0x40
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_TIM_Base_MspInit+0x80>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003772:	2200      	movs	r2, #0
 8003774:	2105      	movs	r1, #5
 8003776:	201d      	movs	r0, #29
 8003778:	f001 f8b2 	bl	80048e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800377c:	201d      	movs	r0, #29
 800377e:	f001 f8cb 	bl	8004918 <HAL_NVIC_EnableIRQ>
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	40000400 	.word	0x40000400

08003794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08c      	sub	sp, #48	; 0x30
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800379c:	f107 031c 	add.w	r3, r7, #28
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	609a      	str	r2, [r3, #8]
 80037a8:	60da      	str	r2, [r3, #12]
 80037aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a7f      	ldr	r2, [pc, #508]	; (80039b0 <HAL_UART_MspInit+0x21c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	f040 8091 	bne.w	80038da <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80037b8:	2300      	movs	r3, #0
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	4b7d      	ldr	r3, [pc, #500]	; (80039b4 <HAL_UART_MspInit+0x220>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	4a7c      	ldr	r2, [pc, #496]	; (80039b4 <HAL_UART_MspInit+0x220>)
 80037c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037c6:	6413      	str	r3, [r2, #64]	; 0x40
 80037c8:	4b7a      	ldr	r3, [pc, #488]	; (80039b4 <HAL_UART_MspInit+0x220>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	4b76      	ldr	r3, [pc, #472]	; (80039b4 <HAL_UART_MspInit+0x220>)
 80037da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037dc:	4a75      	ldr	r2, [pc, #468]	; (80039b4 <HAL_UART_MspInit+0x220>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6313      	str	r3, [r2, #48]	; 0x30
 80037e4:	4b73      	ldr	r3, [pc, #460]	; (80039b4 <HAL_UART_MspInit+0x220>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037f0:	2303      	movs	r3, #3
 80037f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f4:	2302      	movs	r3, #2
 80037f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f8:	2300      	movs	r3, #0
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fc:	2303      	movs	r3, #3
 80037fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003800:	2308      	movs	r3, #8
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003804:	f107 031c 	add.w	r3, r7, #28
 8003808:	4619      	mov	r1, r3
 800380a:	486b      	ldr	r0, [pc, #428]	; (80039b8 <HAL_UART_MspInit+0x224>)
 800380c:	f001 fe7c 	bl	8005508 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8003810:	4b6a      	ldr	r3, [pc, #424]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003812:	4a6b      	ldr	r2, [pc, #428]	; (80039c0 <HAL_UART_MspInit+0x22c>)
 8003814:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8003816:	4b69      	ldr	r3, [pc, #420]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003818:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800381c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800381e:	4b67      	ldr	r3, [pc, #412]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003820:	2240      	movs	r2, #64	; 0x40
 8003822:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003824:	4b65      	ldr	r3, [pc, #404]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003826:	2200      	movs	r2, #0
 8003828:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800382a:	4b64      	ldr	r3, [pc, #400]	; (80039bc <HAL_UART_MspInit+0x228>)
 800382c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003830:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003832:	4b62      	ldr	r3, [pc, #392]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003834:	2200      	movs	r2, #0
 8003836:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003838:	4b60      	ldr	r3, [pc, #384]	; (80039bc <HAL_UART_MspInit+0x228>)
 800383a:	2200      	movs	r2, #0
 800383c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800383e:	4b5f      	ldr	r3, [pc, #380]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003840:	2200      	movs	r2, #0
 8003842:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003844:	4b5d      	ldr	r3, [pc, #372]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003846:	2200      	movs	r2, #0
 8003848:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800384a:	4b5c      	ldr	r3, [pc, #368]	; (80039bc <HAL_UART_MspInit+0x228>)
 800384c:	2200      	movs	r2, #0
 800384e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003850:	485a      	ldr	r0, [pc, #360]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003852:	f001 fa57 	bl	8004d04 <HAL_DMA_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800385c:	f7ff fddc 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a56      	ldr	r2, [pc, #344]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003864:	635a      	str	r2, [r3, #52]	; 0x34
 8003866:	4a55      	ldr	r2, [pc, #340]	; (80039bc <HAL_UART_MspInit+0x228>)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800386c:	4b55      	ldr	r3, [pc, #340]	; (80039c4 <HAL_UART_MspInit+0x230>)
 800386e:	4a56      	ldr	r2, [pc, #344]	; (80039c8 <HAL_UART_MspInit+0x234>)
 8003870:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003872:	4b54      	ldr	r3, [pc, #336]	; (80039c4 <HAL_UART_MspInit+0x230>)
 8003874:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003878:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800387a:	4b52      	ldr	r3, [pc, #328]	; (80039c4 <HAL_UART_MspInit+0x230>)
 800387c:	2200      	movs	r2, #0
 800387e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003880:	4b50      	ldr	r3, [pc, #320]	; (80039c4 <HAL_UART_MspInit+0x230>)
 8003882:	2200      	movs	r2, #0
 8003884:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003886:	4b4f      	ldr	r3, [pc, #316]	; (80039c4 <HAL_UART_MspInit+0x230>)
 8003888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800388c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800388e:	4b4d      	ldr	r3, [pc, #308]	; (80039c4 <HAL_UART_MspInit+0x230>)
 8003890:	2200      	movs	r2, #0
 8003892:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003894:	4b4b      	ldr	r3, [pc, #300]	; (80039c4 <HAL_UART_MspInit+0x230>)
 8003896:	2200      	movs	r2, #0
 8003898:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800389a:	4b4a      	ldr	r3, [pc, #296]	; (80039c4 <HAL_UART_MspInit+0x230>)
 800389c:	2200      	movs	r2, #0
 800389e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038a0:	4b48      	ldr	r3, [pc, #288]	; (80039c4 <HAL_UART_MspInit+0x230>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038a6:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <HAL_UART_MspInit+0x230>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80038ac:	4845      	ldr	r0, [pc, #276]	; (80039c4 <HAL_UART_MspInit+0x230>)
 80038ae:	f001 fa29 	bl	8004d04 <HAL_DMA_Init>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80038b8:	f7ff fdae 	bl	8003418 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a41      	ldr	r2, [pc, #260]	; (80039c4 <HAL_UART_MspInit+0x230>)
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38
 80038c2:	4a40      	ldr	r2, [pc, #256]	; (80039c4 <HAL_UART_MspInit+0x230>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	2105      	movs	r1, #5
 80038cc:	2034      	movs	r0, #52	; 0x34
 80038ce:	f001 f807 	bl	80048e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80038d2:	2034      	movs	r0, #52	; 0x34
 80038d4:	f001 f820 	bl	8004918 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038d8:	e066      	b.n	80039a8 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART2)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a3b      	ldr	r2, [pc, #236]	; (80039cc <HAL_UART_MspInit+0x238>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d161      	bne.n	80039a8 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038e4:	2300      	movs	r3, #0
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	4b32      	ldr	r3, [pc, #200]	; (80039b4 <HAL_UART_MspInit+0x220>)
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	4a31      	ldr	r2, [pc, #196]	; (80039b4 <HAL_UART_MspInit+0x220>)
 80038ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f2:	6413      	str	r3, [r2, #64]	; 0x40
 80038f4:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <HAL_UART_MspInit+0x220>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_UART_MspInit+0x220>)
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	4a2a      	ldr	r2, [pc, #168]	; (80039b4 <HAL_UART_MspInit+0x220>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6313      	str	r3, [r2, #48]	; 0x30
 8003910:	4b28      	ldr	r3, [pc, #160]	; (80039b4 <HAL_UART_MspInit+0x220>)
 8003912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800391c:	230c      	movs	r3, #12
 800391e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003920:	2302      	movs	r3, #2
 8003922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003928:	2303      	movs	r3, #3
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800392c:	2307      	movs	r3, #7
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003930:	f107 031c 	add.w	r3, r7, #28
 8003934:	4619      	mov	r1, r3
 8003936:	4820      	ldr	r0, [pc, #128]	; (80039b8 <HAL_UART_MspInit+0x224>)
 8003938:	f001 fde6 	bl	8005508 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800393c:	4b24      	ldr	r3, [pc, #144]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 800393e:	4a25      	ldr	r2, [pc, #148]	; (80039d4 <HAL_UART_MspInit+0x240>)
 8003940:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003942:	4b23      	ldr	r3, [pc, #140]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 8003944:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003948:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800394a:	4b21      	ldr	r3, [pc, #132]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 800394c:	2240      	movs	r2, #64	; 0x40
 800394e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003950:	4b1f      	ldr	r3, [pc, #124]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 8003952:	2200      	movs	r2, #0
 8003954:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003956:	4b1e      	ldr	r3, [pc, #120]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 8003958:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800395c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800395e:	4b1c      	ldr	r3, [pc, #112]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 8003960:	2200      	movs	r2, #0
 8003962:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003964:	4b1a      	ldr	r3, [pc, #104]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800396a:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 800396c:	2200      	movs	r2, #0
 800396e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003970:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 8003972:	2200      	movs	r2, #0
 8003974:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 8003978:	2200      	movs	r2, #0
 800397a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800397c:	4814      	ldr	r0, [pc, #80]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 800397e:	f001 f9c1 	bl	8004d04 <HAL_DMA_Init>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8003988:	f7ff fd46 	bl	8003418 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a10      	ldr	r2, [pc, #64]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 8003990:	635a      	str	r2, [r3, #52]	; 0x34
 8003992:	4a0f      	ldr	r2, [pc, #60]	; (80039d0 <HAL_UART_MspInit+0x23c>)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003998:	2200      	movs	r2, #0
 800399a:	2105      	movs	r1, #5
 800399c:	2026      	movs	r0, #38	; 0x26
 800399e:	f000 ff9f 	bl	80048e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039a2:	2026      	movs	r0, #38	; 0x26
 80039a4:	f000 ffb8 	bl	8004918 <HAL_NVIC_EnableIRQ>
}
 80039a8:	bf00      	nop
 80039aa:	3730      	adds	r7, #48	; 0x30
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40004c00 	.word	0x40004c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40020000 	.word	0x40020000
 80039bc:	20000a48 	.word	0x20000a48
 80039c0:	40026070 	.word	0x40026070
 80039c4:	20000aa8 	.word	0x20000aa8
 80039c8:	40026040 	.word	0x40026040
 80039cc:	40004400 	.word	0x40004400
 80039d0:	20000b08 	.word	0x20000b08
 80039d4:	400260a0 	.word	0x400260a0

080039d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80039e8:	2200      	movs	r2, #0
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	2019      	movs	r0, #25
 80039ee:	f000 ff77 	bl	80048e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80039f2:	2019      	movs	r0, #25
 80039f4:	f000 ff90 	bl	8004918 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <HAL_InitTick+0xa4>)
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6453      	str	r3, [r2, #68]	; 0x44
 8003a08:	4b1c      	ldr	r3, [pc, #112]	; (8003a7c <HAL_InitTick+0xa4>)
 8003a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a14:	f107 0210 	add.w	r2, r7, #16
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f002 f83a 	bl	8005a98 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003a24:	f002 f824 	bl	8005a70 <HAL_RCC_GetPCLK2Freq>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <HAL_InitTick+0xa8>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	0c9b      	lsrs	r3, r3, #18
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003a3c:	4b11      	ldr	r3, [pc, #68]	; (8003a84 <HAL_InitTick+0xac>)
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <HAL_InitTick+0xb0>)
 8003a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003a42:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <HAL_InitTick+0xac>)
 8003a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003a4a:	4a0e      	ldr	r2, [pc, #56]	; (8003a84 <HAL_InitTick+0xac>)
 8003a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_InitTick+0xac>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a56:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <HAL_InitTick+0xac>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003a5c:	4809      	ldr	r0, [pc, #36]	; (8003a84 <HAL_InitTick+0xac>)
 8003a5e:	f003 f95b 	bl	8006d18 <HAL_TIM_Base_Init>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d104      	bne.n	8003a72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003a68:	4806      	ldr	r0, [pc, #24]	; (8003a84 <HAL_InitTick+0xac>)
 8003a6a:	f003 fa0d 	bl	8006e88 <HAL_TIM_Base_Start_IT>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	e000      	b.n	8003a74 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3730      	adds	r7, #48	; 0x30
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	431bde83 	.word	0x431bde83
 8003a84:	200016d8 	.word	0x200016d8
 8003a88:	40010000 	.word	0x40010000

08003a8c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003a90:	4b0e      	ldr	r3, [pc, #56]	; (8003acc <SDTimer_Handler+0x40>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <SDTimer_Handler+0x1c>
    Timer1--;
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <SDTimer_Handler+0x40>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <SDTimer_Handler+0x40>)
 8003aa6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <SDTimer_Handler+0x44>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <SDTimer_Handler+0x34>
    Timer2--;
 8003ab2:	4b07      	ldr	r3, [pc, #28]	; (8003ad0 <SDTimer_Handler+0x44>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	b2da      	uxtb	r2, r3
 8003abc:	4b04      	ldr	r3, [pc, #16]	; (8003ad0 <SDTimer_Handler+0x44>)
 8003abe:	701a      	strb	r2, [r3, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20001721 	.word	0x20001721
 8003ad0:	20001722 	.word	0x20001722

08003ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ad8:	e7fe      	b.n	8003ad8 <NMI_Handler+0x4>

08003ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ade:	e7fe      	b.n	8003ade <HardFault_Handler+0x4>

08003ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae4:	e7fe      	b.n	8003ae4 <MemManage_Handler+0x4>

08003ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aea:	e7fe      	b.n	8003aea <BusFault_Handler+0x4>

08003aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003af0:	e7fe      	b.n	8003af0 <UsageFault_Handler+0x4>

08003af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <DMA1_Stream2_IRQHandler+0x10>)
 8003b06:	f001 fa95 	bl	8005034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003b0a:	bf00      	nop
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20000aa8 	.word	0x20000aa8

08003b14 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003b18:	4802      	ldr	r0, [pc, #8]	; (8003b24 <DMA1_Stream4_IRQHandler+0x10>)
 8003b1a:	f001 fa8b 	bl	8005034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	20000a48 	.word	0x20000a48

08003b28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003b2c:	4802      	ldr	r0, [pc, #8]	; (8003b38 <DMA1_Stream5_IRQHandler+0x10>)
 8003b2e:	f001 fa81 	bl	8005034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20000878 	.word	0x20000878

08003b3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003b40:	4802      	ldr	r0, [pc, #8]	; (8003b4c <DMA1_Stream6_IRQHandler+0x10>)
 8003b42:	f001 fa77 	bl	8005034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	20000b08 	.word	0x20000b08

08003b50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	FatFsCnt++;
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8003b60:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b09      	cmp	r3, #9
 8003b6a:	d904      	bls.n	8003b76 <TIM1_UP_TIM10_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8003b6c:	4b04      	ldr	r3, [pc, #16]	; (8003b80 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8003b72:	f7ff ff8b 	bl	8003a8c <SDTimer_Handler>
	}
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b76:	4803      	ldr	r0, [pc, #12]	; (8003b84 <TIM1_UP_TIM10_IRQHandler+0x34>)
 8003b78:	f003 f9f6 	bl	8006f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20001720 	.word	0x20001720
 8003b84:	200016d8 	.word	0x200016d8

08003b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b8c:	4802      	ldr	r0, [pc, #8]	; (8003b98 <TIM2_IRQHandler+0x10>)
 8003b8e:	f003 f9eb 	bl	8006f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000930 	.word	0x20000930

08003b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ba0:	4802      	ldr	r0, [pc, #8]	; (8003bac <TIM3_IRQHandler+0x10>)
 8003ba2:	f003 f9e1 	bl	8006f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000978 	.word	0x20000978

08003bb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <USART2_IRQHandler+0x10>)
 8003bb6:	f003 ff27 	bl	8007a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000a04 	.word	0x20000a04

08003bc4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <UART4_IRQHandler+0x10>)
 8003bca:	f003 ff1d 	bl	8007a08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	200009c0 	.word	0x200009c0

08003bd8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bdc:	4802      	ldr	r0, [pc, #8]	; (8003be8 <DMA2_Stream0_IRQHandler+0x10>)
 8003bde:	f001 fa29 	bl	8005034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003be2:	bf00      	nop
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	20000804 	.word	0x20000804

08003bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf4:	4a14      	ldr	r2, [pc, #80]	; (8003c48 <_sbrk+0x5c>)
 8003bf6:	4b15      	ldr	r3, [pc, #84]	; (8003c4c <_sbrk+0x60>)
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c00:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <_sbrk+0x64>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d102      	bne.n	8003c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c08:	4b11      	ldr	r3, [pc, #68]	; (8003c50 <_sbrk+0x64>)
 8003c0a:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <_sbrk+0x68>)
 8003c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <_sbrk+0x64>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d207      	bcs.n	8003c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c1c:	f00a faa6 	bl	800e16c <__errno>
 8003c20:	4603      	mov	r3, r0
 8003c22:	220c      	movs	r2, #12
 8003c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c26:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2a:	e009      	b.n	8003c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <_sbrk+0x64>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c32:	4b07      	ldr	r3, [pc, #28]	; (8003c50 <_sbrk+0x64>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4413      	add	r3, r2
 8003c3a:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <_sbrk+0x64>)
 8003c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20020000 	.word	0x20020000
 8003c4c:	00000400 	.word	0x00000400
 8003c50:	20001724 	.word	0x20001724
 8003c54:	20005510 	.word	0x20005510

08003c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <SystemInit+0x20>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <SystemInit+0x20>)
 8003c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c6c:	bf00      	nop
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000ed00 	.word	0xe000ed00

08003c7c <Reset_Handler>:
 8003c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cb4 <LoopFillZerobss+0x12>
 8003c80:	480d      	ldr	r0, [pc, #52]	; (8003cb8 <LoopFillZerobss+0x16>)
 8003c82:	490e      	ldr	r1, [pc, #56]	; (8003cbc <LoopFillZerobss+0x1a>)
 8003c84:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <LoopFillZerobss+0x1e>)
 8003c86:	2300      	movs	r3, #0
 8003c88:	e002      	b.n	8003c90 <LoopCopyDataInit>

08003c8a <CopyDataInit>:
 8003c8a:	58d4      	ldr	r4, [r2, r3]
 8003c8c:	50c4      	str	r4, [r0, r3]
 8003c8e:	3304      	adds	r3, #4

08003c90 <LoopCopyDataInit>:
 8003c90:	18c4      	adds	r4, r0, r3
 8003c92:	428c      	cmp	r4, r1
 8003c94:	d3f9      	bcc.n	8003c8a <CopyDataInit>
 8003c96:	4a0b      	ldr	r2, [pc, #44]	; (8003cc4 <LoopFillZerobss+0x22>)
 8003c98:	4c0b      	ldr	r4, [pc, #44]	; (8003cc8 <LoopFillZerobss+0x26>)
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e001      	b.n	8003ca2 <LoopFillZerobss>

08003c9e <FillZerobss>:
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	3204      	adds	r2, #4

08003ca2 <LoopFillZerobss>:
 8003ca2:	42a2      	cmp	r2, r4
 8003ca4:	d3fb      	bcc.n	8003c9e <FillZerobss>
 8003ca6:	f7ff ffd7 	bl	8003c58 <SystemInit>
 8003caa:	f00a fa65 	bl	800e178 <__libc_init_array>
 8003cae:	f7fe fcef 	bl	8002690 <main>
 8003cb2:	4770      	bx	lr
 8003cb4:	20020000 	.word	0x20020000
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	200000a4 	.word	0x200000a4
 8003cc0:	080108c8 	.word	0x080108c8
 8003cc4:	200000a4 	.word	0x200000a4
 8003cc8:	2000550c 	.word	0x2000550c

08003ccc <ADC_IRQHandler>:
 8003ccc:	e7fe      	b.n	8003ccc <ADC_IRQHandler>
	...

08003cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	; (8003d10 <HAL_Init+0x40>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <HAL_Init+0x40>)
 8003cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_Init+0x40>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_Init+0x40>)
 8003ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <HAL_Init+0x40>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <HAL_Init+0x40>)
 8003cf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003cf8:	2003      	movs	r0, #3
 8003cfa:	f000 fde6 	bl	80048ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cfe:	200f      	movs	r0, #15
 8003d00:	f7ff fe6a 	bl	80039d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d04:	f7ff fb8e 	bl	8003424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023c00 	.word	0x40023c00

08003d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_IncTick+0x20>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_IncTick+0x24>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4413      	add	r3, r2
 8003d24:	4a04      	ldr	r2, [pc, #16]	; (8003d38 <HAL_IncTick+0x24>)
 8003d26:	6013      	str	r3, [r2, #0]
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000024 	.word	0x20000024
 8003d38:	20001728 	.word	0x20001728

08003d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d40:	4b03      	ldr	r3, [pc, #12]	; (8003d50 <HAL_GetTick+0x14>)
 8003d42:	681b      	ldr	r3, [r3, #0]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	20001728 	.word	0x20001728

08003d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d5c:	f7ff ffee 	bl	8003d3c <HAL_GetTick>
 8003d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6c:	d005      	beq.n	8003d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d6e:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <HAL_Delay+0x44>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4413      	add	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d7a:	bf00      	nop
 8003d7c:	f7ff ffde 	bl	8003d3c <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d8f7      	bhi.n	8003d7c <HAL_Delay+0x28>
  {
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	20000024 	.word	0x20000024

08003d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e033      	b.n	8003e1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7ff fb5e 	bl	800347c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f003 0310 	and.w	r3, r3, #16
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d118      	bne.n	8003e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003de2:	f023 0302 	bic.w	r3, r3, #2
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fb40 	bl	8004474 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	f043 0201 	orr.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
 8003e0a:	e001      	b.n	8003e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_ADC_Start+0x1a>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e0b2      	b.n	8003fa4 <HAL_ADC_Start+0x180>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d018      	beq.n	8003e86 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e64:	4b52      	ldr	r3, [pc, #328]	; (8003fb0 <HAL_ADC_Start+0x18c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a52      	ldr	r2, [pc, #328]	; (8003fb4 <HAL_ADC_Start+0x190>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0c9a      	lsrs	r2, r3, #18
 8003e70:	4613      	mov	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4413      	add	r3, r2
 8003e76:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e78:	e002      	b.n	8003e80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f9      	bne.n	8003e7a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d17a      	bne.n	8003f8a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e9c:	f023 0301 	bic.w	r3, r3, #1
 8003ea0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003ebe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed2:	d106      	bne.n	8003ee2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed8:	f023 0206 	bic.w	r2, r3, #6
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	645a      	str	r2, [r3, #68]	; 0x44
 8003ee0:	e002      	b.n	8003ee8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ef0:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_ADC_Start+0x194>)
 8003ef2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003efc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 031f 	and.w	r3, r3, #31
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d12a      	bne.n	8003f60 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a2b      	ldr	r2, [pc, #172]	; (8003fbc <HAL_ADC_Start+0x198>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d015      	beq.n	8003f40 <HAL_ADC_Start+0x11c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a29      	ldr	r2, [pc, #164]	; (8003fc0 <HAL_ADC_Start+0x19c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d105      	bne.n	8003f2a <HAL_ADC_Start+0x106>
 8003f1e:	4b26      	ldr	r3, [pc, #152]	; (8003fb8 <HAL_ADC_Start+0x194>)
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 031f 	and.w	r3, r3, #31
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <HAL_ADC_Start+0x1a0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d136      	bne.n	8003fa2 <HAL_ADC_Start+0x17e>
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_ADC_Start+0x194>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d130      	bne.n	8003fa2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d129      	bne.n	8003fa2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f5c:	609a      	str	r2, [r3, #8]
 8003f5e:	e020      	b.n	8003fa2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <HAL_ADC_Start+0x198>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d11b      	bne.n	8003fa2 <HAL_ADC_Start+0x17e>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d114      	bne.n	8003fa2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f86:	609a      	str	r2, [r3, #8]
 8003f88:	e00b      	b.n	8003fa2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f043 0210 	orr.w	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr
 8003fb0:	2000001c 	.word	0x2000001c
 8003fb4:	431bde83 	.word	0x431bde83
 8003fb8:	40012300 	.word	0x40012300
 8003fbc:	40012000 	.word	0x40012000
 8003fc0:	40012100 	.word	0x40012100
 8003fc4:	40012200 	.word	0x40012200

08003fc8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADC_Start_DMA+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0e9      	b.n	80041ba <HAL_ADC_Start_DMA+0x1f2>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d018      	beq.n	800402e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800400c:	4b6d      	ldr	r3, [pc, #436]	; (80041c4 <HAL_ADC_Start_DMA+0x1fc>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a6d      	ldr	r2, [pc, #436]	; (80041c8 <HAL_ADC_Start_DMA+0x200>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	0c9a      	lsrs	r2, r3, #18
 8004018:	4613      	mov	r3, r2
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	4413      	add	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004020:	e002      	b.n	8004028 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	3b01      	subs	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f9      	bne.n	8004022 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800403c:	d107      	bne.n	800404e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b01      	cmp	r3, #1
 800405a:	f040 80a1 	bne.w	80041a0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d007      	beq.n	8004090 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004088:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800409c:	d106      	bne.n	80040ac <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a2:	f023 0206 	bic.w	r2, r3, #6
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44
 80040aa:	e002      	b.n	80040b2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040ba:	4b44      	ldr	r3, [pc, #272]	; (80041cc <HAL_ADC_Start_DMA+0x204>)
 80040bc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	4a43      	ldr	r2, [pc, #268]	; (80041d0 <HAL_ADC_Start_DMA+0x208>)
 80040c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	4a42      	ldr	r2, [pc, #264]	; (80041d4 <HAL_ADC_Start_DMA+0x20c>)
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	4a41      	ldr	r2, [pc, #260]	; (80041d8 <HAL_ADC_Start_DMA+0x210>)
 80040d4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040de:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80040ee:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040fe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	334c      	adds	r3, #76	; 0x4c
 800410a:	4619      	mov	r1, r3
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f000 fea6 	bl	8004e60 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f003 031f 	and.w	r3, r3, #31
 800411c:	2b00      	cmp	r3, #0
 800411e:	d12a      	bne.n	8004176 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a2d      	ldr	r2, [pc, #180]	; (80041dc <HAL_ADC_Start_DMA+0x214>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d015      	beq.n	8004156 <HAL_ADC_Start_DMA+0x18e>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <HAL_ADC_Start_DMA+0x218>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d105      	bne.n	8004140 <HAL_ADC_Start_DMA+0x178>
 8004134:	4b25      	ldr	r3, [pc, #148]	; (80041cc <HAL_ADC_Start_DMA+0x204>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a27      	ldr	r2, [pc, #156]	; (80041e4 <HAL_ADC_Start_DMA+0x21c>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d136      	bne.n	80041b8 <HAL_ADC_Start_DMA+0x1f0>
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_ADC_Start_DMA+0x204>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 0310 	and.w	r3, r3, #16
 8004152:	2b00      	cmp	r3, #0
 8004154:	d130      	bne.n	80041b8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d129      	bne.n	80041b8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	e020      	b.n	80041b8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a18      	ldr	r2, [pc, #96]	; (80041dc <HAL_ADC_Start_DMA+0x214>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d11b      	bne.n	80041b8 <HAL_ADC_Start_DMA+0x1f0>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d114      	bne.n	80041b8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800419c:	609a      	str	r2, [r3, #8]
 800419e:	e00b      	b.n	80041b8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	f043 0210 	orr.w	r2, r3, #16
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b0:	f043 0201 	orr.w	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	2000001c 	.word	0x2000001c
 80041c8:	431bde83 	.word	0x431bde83
 80041cc:	40012300 	.word	0x40012300
 80041d0:	0800466d 	.word	0x0800466d
 80041d4:	08004727 	.word	0x08004727
 80041d8:	08004743 	.word	0x08004743
 80041dc:	40012000 	.word	0x40012000
 80041e0:	40012100 	.word	0x40012100
 80041e4:	40012200 	.word	0x40012200

080041e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004224:	2b01      	cmp	r3, #1
 8004226:	d101      	bne.n	800422c <HAL_ADC_ConfigChannel+0x1c>
 8004228:	2302      	movs	r3, #2
 800422a:	e113      	b.n	8004454 <HAL_ADC_ConfigChannel+0x244>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b09      	cmp	r3, #9
 800423a:	d925      	bls.n	8004288 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68d9      	ldr	r1, [r3, #12]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	461a      	mov	r2, r3
 800424a:	4613      	mov	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4413      	add	r3, r2
 8004250:	3b1e      	subs	r3, #30
 8004252:	2207      	movs	r2, #7
 8004254:	fa02 f303 	lsl.w	r3, r2, r3
 8004258:	43da      	mvns	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	400a      	ands	r2, r1
 8004260:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68d9      	ldr	r1, [r3, #12]
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	4618      	mov	r0, r3
 8004274:	4603      	mov	r3, r0
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	4403      	add	r3, r0
 800427a:	3b1e      	subs	r3, #30
 800427c:	409a      	lsls	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	e022      	b.n	80042ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6919      	ldr	r1, [r3, #16]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	461a      	mov	r2, r3
 8004296:	4613      	mov	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4413      	add	r3, r2
 800429c:	2207      	movs	r2, #7
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43da      	mvns	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	400a      	ands	r2, r1
 80042aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6919      	ldr	r1, [r3, #16]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	4618      	mov	r0, r3
 80042be:	4603      	mov	r3, r0
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	4403      	add	r3, r0
 80042c4:	409a      	lsls	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d824      	bhi.n	8004320 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	3b05      	subs	r3, #5
 80042e8:	221f      	movs	r2, #31
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43da      	mvns	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	400a      	ands	r2, r1
 80042f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	4618      	mov	r0, r3
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	4613      	mov	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	3b05      	subs	r3, #5
 8004312:	fa00 f203 	lsl.w	r2, r0, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	430a      	orrs	r2, r1
 800431c:	635a      	str	r2, [r3, #52]	; 0x34
 800431e:	e04c      	b.n	80043ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b0c      	cmp	r3, #12
 8004326:	d824      	bhi.n	8004372 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	3b23      	subs	r3, #35	; 0x23
 800433a:	221f      	movs	r2, #31
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43da      	mvns	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	400a      	ands	r2, r1
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	4618      	mov	r0, r3
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	3b23      	subs	r3, #35	; 0x23
 8004364:	fa00 f203 	lsl.w	r2, r0, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
 8004370:	e023      	b.n	80043ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	3b41      	subs	r3, #65	; 0x41
 8004384:	221f      	movs	r2, #31
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43da      	mvns	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	400a      	ands	r2, r1
 8004392:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	4618      	mov	r0, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	3b41      	subs	r3, #65	; 0x41
 80043ae:	fa00 f203 	lsl.w	r2, r0, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043ba:	4b29      	ldr	r3, [pc, #164]	; (8004460 <HAL_ADC_ConfigChannel+0x250>)
 80043bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a28      	ldr	r2, [pc, #160]	; (8004464 <HAL_ADC_ConfigChannel+0x254>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10f      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x1d8>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b12      	cmp	r3, #18
 80043ce:	d10b      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <HAL_ADC_ConfigChannel+0x254>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d12b      	bne.n	800444a <HAL_ADC_ConfigChannel+0x23a>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1c      	ldr	r2, [pc, #112]	; (8004468 <HAL_ADC_ConfigChannel+0x258>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <HAL_ADC_ConfigChannel+0x1f4>
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b11      	cmp	r3, #17
 8004402:	d122      	bne.n	800444a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a11      	ldr	r2, [pc, #68]	; (8004468 <HAL_ADC_ConfigChannel+0x258>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d111      	bne.n	800444a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004426:	4b11      	ldr	r3, [pc, #68]	; (800446c <HAL_ADC_ConfigChannel+0x25c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a11      	ldr	r2, [pc, #68]	; (8004470 <HAL_ADC_ConfigChannel+0x260>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	0c9a      	lsrs	r2, r3, #18
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800443c:	e002      	b.n	8004444 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3b01      	subs	r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1f9      	bne.n	800443e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40012300 	.word	0x40012300
 8004464:	40012000 	.word	0x40012000
 8004468:	10000012 	.word	0x10000012
 800446c:	2000001c 	.word	0x2000001c
 8004470:	431bde83 	.word	0x431bde83

08004474 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800447c:	4b79      	ldr	r3, [pc, #484]	; (8004664 <ADC_Init+0x1f0>)
 800447e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	021a      	lsls	r2, r3, #8
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80044cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6899      	ldr	r1, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68da      	ldr	r2, [r3, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	4a58      	ldr	r2, [pc, #352]	; (8004668 <ADC_Init+0x1f4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d022      	beq.n	8004552 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800451a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6899      	ldr	r1, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800453c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6899      	ldr	r1, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
 8004550:	e00f      	b.n	8004572 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004570:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0202 	bic.w	r2, r2, #2
 8004580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6899      	ldr	r1, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	7e1b      	ldrb	r3, [r3, #24]
 800458c:	005a      	lsls	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01b      	beq.n	80045d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80045be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	3b01      	subs	r3, #1
 80045cc:	035a      	lsls	r2, r3, #13
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	e007      	b.n	80045e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	3b01      	subs	r3, #1
 8004604:	051a      	lsls	r2, r3, #20
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800461c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6899      	ldr	r1, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800462a:	025a      	lsls	r2, r3, #9
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6899      	ldr	r1, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	029a      	lsls	r2, r3, #10
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	40012300 	.word	0x40012300
 8004668:	0f000001 	.word	0x0f000001

0800466c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004682:	2b00      	cmp	r3, #0
 8004684:	d13c      	bne.n	8004700 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d12b      	bne.n	80046f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d127      	bne.n	80046f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d006      	beq.n	80046c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d119      	bne.n	80046f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0220 	bic.w	r2, r2, #32
 80046d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d105      	bne.n	80046f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f0:	f043 0201 	orr.w	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7fe fd23 	bl	8003144 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046fe:	e00e      	b.n	800471e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff fd75 	bl	80041fc <HAL_ADC_ErrorCallback>
}
 8004712:	e004      	b.n	800471e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4798      	blx	r3
}
 800471e:	bf00      	nop
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff fd57 	bl	80041e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2240      	movs	r2, #64	; 0x40
 8004754:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f043 0204 	orr.w	r2, r3, #4
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff fd4a 	bl	80041fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004770:	b480      	push	{r7}
 8004772:	b085      	sub	sp, #20
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004780:	4b0c      	ldr	r3, [pc, #48]	; (80047b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800478c:	4013      	ands	r3, r2
 800478e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800479c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047a2:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <__NVIC_SetPriorityGrouping+0x44>)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	60d3      	str	r3, [r2, #12]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	e000ed00 	.word	0xe000ed00

080047b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <__NVIC_GetPriorityGrouping+0x18>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	0a1b      	lsrs	r3, r3, #8
 80047c2:	f003 0307 	and.w	r3, r3, #7
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	4603      	mov	r3, r0
 80047dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	db0b      	blt.n	80047fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	f003 021f 	and.w	r2, r3, #31
 80047ec:	4907      	ldr	r1, [pc, #28]	; (800480c <__NVIC_EnableIRQ+0x38>)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	2001      	movs	r0, #1
 80047f6:	fa00 f202 	lsl.w	r2, r0, r2
 80047fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047fe:	bf00      	nop
 8004800:	370c      	adds	r7, #12
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	e000e100 	.word	0xe000e100

08004810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	6039      	str	r1, [r7, #0]
 800481a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800481c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004820:	2b00      	cmp	r3, #0
 8004822:	db0a      	blt.n	800483a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	b2da      	uxtb	r2, r3
 8004828:	490c      	ldr	r1, [pc, #48]	; (800485c <__NVIC_SetPriority+0x4c>)
 800482a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800482e:	0112      	lsls	r2, r2, #4
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	440b      	add	r3, r1
 8004834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004838:	e00a      	b.n	8004850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	b2da      	uxtb	r2, r3
 800483e:	4908      	ldr	r1, [pc, #32]	; (8004860 <__NVIC_SetPriority+0x50>)
 8004840:	79fb      	ldrb	r3, [r7, #7]
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	3b04      	subs	r3, #4
 8004848:	0112      	lsls	r2, r2, #4
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	440b      	add	r3, r1
 800484e:	761a      	strb	r2, [r3, #24]
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	e000e100 	.word	0xe000e100
 8004860:	e000ed00 	.word	0xe000ed00

08004864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004864:	b480      	push	{r7}
 8004866:	b089      	sub	sp, #36	; 0x24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f1c3 0307 	rsb	r3, r3, #7
 800487e:	2b04      	cmp	r3, #4
 8004880:	bf28      	it	cs
 8004882:	2304      	movcs	r3, #4
 8004884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	3304      	adds	r3, #4
 800488a:	2b06      	cmp	r3, #6
 800488c:	d902      	bls.n	8004894 <NVIC_EncodePriority+0x30>
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	3b03      	subs	r3, #3
 8004892:	e000      	b.n	8004896 <NVIC_EncodePriority+0x32>
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004898:	f04f 32ff 	mov.w	r2, #4294967295
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43da      	mvns	r2, r3
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	401a      	ands	r2, r3
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048ac:	f04f 31ff 	mov.w	r1, #4294967295
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	43d9      	mvns	r1, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048bc:	4313      	orrs	r3, r2
         );
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3724      	adds	r7, #36	; 0x24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff ff4c 	bl	8004770 <__NVIC_SetPriorityGrouping>
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80048f2:	f7ff ff61 	bl	80047b8 <__NVIC_GetPriorityGrouping>
 80048f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	6978      	ldr	r0, [r7, #20]
 80048fe:	f7ff ffb1 	bl	8004864 <NVIC_EncodePriority>
 8004902:	4602      	mov	r2, r0
 8004904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff ff80 	bl	8004810 <__NVIC_SetPriority>
}
 8004910:	bf00      	nop
 8004912:	3718      	adds	r7, #24
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff ff54 	bl	80047d4 <__NVIC_EnableIRQ>
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e014      	b.n	8004970 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d105      	bne.n	800495c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fe fe08 	bl	800356c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	795b      	ldrb	r3, [r3, #5]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_DAC_Start_DMA+0x22>
 8004996:	2302      	movs	r3, #2
 8004998:	e0ab      	b.n	8004af2 <HAL_DAC_Start_DMA+0x17a>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2201      	movs	r2, #1
 800499e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2202      	movs	r2, #2
 80049a4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d12f      	bne.n	8004a0c <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	4a52      	ldr	r2, [pc, #328]	; (8004afc <HAL_DAC_Start_DMA+0x184>)
 80049b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4a51      	ldr	r2, [pc, #324]	; (8004b00 <HAL_DAC_Start_DMA+0x188>)
 80049ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4a50      	ldr	r2, [pc, #320]	; (8004b04 <HAL_DAC_Start_DMA+0x18c>)
 80049c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049d2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d013      	beq.n	8004a02 <HAL_DAC_Start_DMA+0x8a>
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d845      	bhi.n	8004a6c <HAL_DAC_Start_DMA+0xf4>
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_DAC_Start_DMA+0x76>
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d005      	beq.n	80049f8 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80049ec:	e03e      	b.n	8004a6c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	613b      	str	r3, [r7, #16]
        break;
 80049f6:	e03c      	b.n	8004a72 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	330c      	adds	r3, #12
 80049fe:	613b      	str	r3, [r7, #16]
        break;
 8004a00:	e037      	b.n	8004a72 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3310      	adds	r3, #16
 8004a08:	613b      	str	r3, [r7, #16]
        break;
 8004a0a:	e032      	b.n	8004a72 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a3d      	ldr	r2, [pc, #244]	; (8004b08 <HAL_DAC_Start_DMA+0x190>)
 8004a12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4a3c      	ldr	r2, [pc, #240]	; (8004b0c <HAL_DAC_Start_DMA+0x194>)
 8004a1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a3b      	ldr	r2, [pc, #236]	; (8004b10 <HAL_DAC_Start_DMA+0x198>)
 8004a22:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d013      	beq.n	8004a62 <HAL_DAC_Start_DMA+0xea>
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d817      	bhi.n	8004a70 <HAL_DAC_Start_DMA+0xf8>
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_DAC_Start_DMA+0xd6>
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d005      	beq.n	8004a58 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004a4c:	e010      	b.n	8004a70 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3314      	adds	r3, #20
 8004a54:	613b      	str	r3, [r7, #16]
        break;
 8004a56:	e00c      	b.n	8004a72 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	613b      	str	r3, [r7, #16]
        break;
 8004a60:	e007      	b.n	8004a72 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	331c      	adds	r3, #28
 8004a68:	613b      	str	r3, [r7, #16]
        break;
 8004a6a:	e002      	b.n	8004a72 <HAL_DAC_Start_DMA+0xfa>
        break;
 8004a6c:	bf00      	nop
 8004a6e:	e000      	b.n	8004a72 <HAL_DAC_Start_DMA+0xfa>
        break;
 8004a70:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d111      	bne.n	8004a9c <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a86:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6898      	ldr	r0, [r3, #8]
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	f000 f9e5 	bl	8004e60 <HAL_DMA_Start_IT>
 8004a96:	4603      	mov	r3, r0
 8004a98:	75fb      	strb	r3, [r7, #23]
 8004a9a:	e010      	b.n	8004abe <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	68d8      	ldr	r0, [r3, #12]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	f000 f9d3 	bl	8004e60 <HAL_DMA_Start_IT>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f003 0310 	and.w	r3, r3, #16
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e005      	b.n	8004af0 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	f043 0204 	orr.w	r2, r3, #4
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004af0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	08004bef 	.word	0x08004bef
 8004b00:	08004c11 	.word	0x08004c11
 8004b04:	08004c2d 	.word	0x08004c2d
 8004b08:	08004c97 	.word	0x08004c97
 8004b0c:	08004cb9 	.word	0x08004cb9
 8004b10:	08004cd5 	.word	0x08004cd5

08004b14 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b087      	sub	sp, #28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	795b      	ldrb	r3, [r3, #5]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_DAC_ConfigChannel+0x18>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e03c      	b.n	8004be2 <HAL_DAC_ConfigChannel+0x92>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2202      	movs	r2, #2
 8004b72:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6819      	ldr	r1, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	22c0      	movs	r2, #192	; 0xc0
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	400a      	ands	r2, r1
 8004bd2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfa:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7ff ff89 	bl	8004b14 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	711a      	strb	r2, [r3, #4]
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff ff82 	bl	8004b28 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004c24:	bf00      	nop
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f043 0204 	orr.w	r2, r3, #4
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff78 	bl	8004b3c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	711a      	strb	r2, [r3, #4]
}
 8004c52:	bf00      	nop
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f7ff ffd8 	bl	8004c5a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	711a      	strb	r2, [r3, #4]
}
 8004cb0:	bf00      	nop
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f7ff ffd1 	bl	8004c6e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004ccc:	bf00      	nop
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f043 0204 	orr.w	r2, r3, #4
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff ffc7 	bl	8004c82 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	711a      	strb	r2, [r3, #4]
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
	...

08004d04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d10:	f7ff f814 	bl	8003d3c <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d101      	bne.n	8004d20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e099      	b.n	8004e54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0201 	bic.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d40:	e00f      	b.n	8004d62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d42:	f7fe fffb 	bl	8003d3c <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b05      	cmp	r3, #5
 8004d4e:	d908      	bls.n	8004d62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2203      	movs	r2, #3
 8004d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e078      	b.n	8004e54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e8      	bne.n	8004d42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	4b38      	ldr	r3, [pc, #224]	; (8004e5c <HAL_DMA_Init+0x158>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004da6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d107      	bne.n	8004dcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0307 	bic.w	r3, r3, #7
 8004de2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	697a      	ldr	r2, [r7, #20]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d117      	bne.n	8004e26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00e      	beq.n	8004e26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb01 	bl	8005410 <DMA_CheckFifoParam>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d008      	beq.n	8004e26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2240      	movs	r2, #64	; 0x40
 8004e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e22:	2301      	movs	r3, #1
 8004e24:	e016      	b.n	8004e54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fab8 	bl	80053a4 <DMA_CalcBaseAndBitshift>
 8004e34:	4603      	mov	r3, r0
 8004e36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3c:	223f      	movs	r2, #63	; 0x3f
 8004e3e:	409a      	lsls	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	f010803f 	.word	0xf010803f

08004e60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_DMA_Start_IT+0x26>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e040      	b.n	8004f08 <HAL_DMA_Start_IT+0xa8>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d12f      	bne.n	8004efa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	68b9      	ldr	r1, [r7, #8]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fa4a 	bl	8005348 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb8:	223f      	movs	r2, #63	; 0x3f
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0216 	orr.w	r2, r2, #22
 8004ece:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0208 	orr.w	r2, r2, #8
 8004ee6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f042 0201 	orr.w	r2, r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e005      	b.n	8004f06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004f02:	2302      	movs	r3, #2
 8004f04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004f1e:	f7fe ff0d 	bl	8003d3c <HAL_GetTick>
 8004f22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d008      	beq.n	8004f42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2280      	movs	r2, #128	; 0x80
 8004f34:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e052      	b.n	8004fe8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0216 	bic.w	r2, r2, #22
 8004f50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <HAL_DMA_Abort+0x62>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0208 	bic.w	r2, r2, #8
 8004f80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f022 0201 	bic.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f92:	e013      	b.n	8004fbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f94:	f7fe fed2 	bl	8003d3c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b05      	cmp	r3, #5
 8004fa0:	d90c      	bls.n	8004fbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2203      	movs	r2, #3
 8004fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e015      	b.n	8004fe8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e4      	bne.n	8004f94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fce:	223f      	movs	r2, #63	; 0x3f
 8004fd0:	409a      	lsls	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d004      	beq.n	800500e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2280      	movs	r2, #128	; 0x80
 8005008:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e00c      	b.n	8005028 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2205      	movs	r2, #5
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005040:	4b8e      	ldr	r3, [pc, #568]	; (800527c <HAL_DMA_IRQHandler+0x248>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a8e      	ldr	r2, [pc, #568]	; (8005280 <HAL_DMA_IRQHandler+0x24c>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	0a9b      	lsrs	r3, r3, #10
 800504c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005052:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505e:	2208      	movs	r2, #8
 8005060:	409a      	lsls	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4013      	ands	r3, r2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d01a      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d013      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0204 	bic.w	r2, r2, #4
 8005086:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800508c:	2208      	movs	r2, #8
 800508e:	409a      	lsls	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005098:	f043 0201 	orr.w	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a4:	2201      	movs	r2, #1
 80050a6:	409a      	lsls	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4013      	ands	r3, r2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d012      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00b      	beq.n	80050d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c2:	2201      	movs	r2, #1
 80050c4:	409a      	lsls	r2, r3
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ce:	f043 0202 	orr.w	r2, r3, #2
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050da:	2204      	movs	r2, #4
 80050dc:	409a      	lsls	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4013      	ands	r3, r2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d012      	beq.n	800510c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050f8:	2204      	movs	r2, #4
 80050fa:	409a      	lsls	r2, r3
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f043 0204 	orr.w	r2, r3, #4
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005110:	2210      	movs	r2, #16
 8005112:	409a      	lsls	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4013      	ands	r3, r2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d043      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d03c      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800512e:	2210      	movs	r2, #16
 8005130:	409a      	lsls	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d018      	beq.n	8005176 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d108      	bne.n	8005164 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	2b00      	cmp	r3, #0
 8005158:	d024      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	4798      	blx	r3
 8005162:	e01f      	b.n	80051a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005168:	2b00      	cmp	r3, #0
 800516a:	d01b      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	4798      	blx	r3
 8005174:	e016      	b.n	80051a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d107      	bne.n	8005194 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0208 	bic.w	r2, r2, #8
 8005192:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d003      	beq.n	80051a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	2220      	movs	r2, #32
 80051aa:	409a      	lsls	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 808f 	beq.w	80052d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8087 	beq.w	80052d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ca:	2220      	movs	r2, #32
 80051cc:	409a      	lsls	r2, r3
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d136      	bne.n	800524c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0216 	bic.w	r2, r2, #22
 80051ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <HAL_DMA_IRQHandler+0x1da>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 0208 	bic.w	r2, r2, #8
 800521c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	223f      	movs	r2, #63	; 0x3f
 8005224:	409a      	lsls	r2, r3
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523e:	2b00      	cmp	r3, #0
 8005240:	d07e      	beq.n	8005340 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	4798      	blx	r3
        }
        return;
 800524a:	e079      	b.n	8005340 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01d      	beq.n	8005296 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10d      	bne.n	8005284 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	2b00      	cmp	r3, #0
 800526e:	d031      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	4798      	blx	r3
 8005278:	e02c      	b.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
 800527a:	bf00      	nop
 800527c:	2000001c 	.word	0x2000001c
 8005280:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005288:	2b00      	cmp	r3, #0
 800528a:	d023      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
 8005294:	e01e      	b.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10f      	bne.n	80052c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0210 	bic.w	r2, r2, #16
 80052b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d032      	beq.n	8005342 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d022      	beq.n	800532e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2205      	movs	r2, #5
 80052ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	3301      	adds	r3, #1
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	429a      	cmp	r2, r3
 800530a:	d307      	bcc.n	800531c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1f2      	bne.n	8005300 <HAL_DMA_IRQHandler+0x2cc>
 800531a:	e000      	b.n	800531e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800531c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	4798      	blx	r3
 800533e:	e000      	b.n	8005342 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005340:	bf00      	nop
    }
  }
}
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005364:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	2b40      	cmp	r3, #64	; 0x40
 8005374:	d108      	bne.n	8005388 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005386:	e007      	b.n	8005398 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]
}
 8005398:	bf00      	nop
 800539a:	3714      	adds	r7, #20
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	3b10      	subs	r3, #16
 80053b4:	4a14      	ldr	r2, [pc, #80]	; (8005408 <DMA_CalcBaseAndBitshift+0x64>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	091b      	lsrs	r3, r3, #4
 80053bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80053be:	4a13      	ldr	r2, [pc, #76]	; (800540c <DMA_CalcBaseAndBitshift+0x68>)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d909      	bls.n	80053e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	1d1a      	adds	r2, r3, #4
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	659a      	str	r2, [r3, #88]	; 0x58
 80053e4:	e007      	b.n	80053f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80053ee:	f023 0303 	bic.w	r3, r3, #3
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	aaaaaaab 	.word	0xaaaaaaab
 800540c:	080105b4 	.word	0x080105b4

08005410 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11f      	bne.n	800546a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d856      	bhi.n	80054de <DMA_CheckFifoParam+0xce>
 8005430:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <DMA_CheckFifoParam+0x28>)
 8005432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005436:	bf00      	nop
 8005438:	08005449 	.word	0x08005449
 800543c:	0800545b 	.word	0x0800545b
 8005440:	08005449 	.word	0x08005449
 8005444:	080054df 	.word	0x080054df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d046      	beq.n	80054e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005458:	e043      	b.n	80054e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005462:	d140      	bne.n	80054e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005468:	e03d      	b.n	80054e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005472:	d121      	bne.n	80054b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b03      	cmp	r3, #3
 8005478:	d837      	bhi.n	80054ea <DMA_CheckFifoParam+0xda>
 800547a:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <DMA_CheckFifoParam+0x70>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	08005491 	.word	0x08005491
 8005484:	08005497 	.word	0x08005497
 8005488:	08005491 	.word	0x08005491
 800548c:	080054a9 	.word	0x080054a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	73fb      	strb	r3, [r7, #15]
      break;
 8005494:	e030      	b.n	80054f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800549a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d025      	beq.n	80054ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054a6:	e022      	b.n	80054ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054b0:	d11f      	bne.n	80054f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80054b6:	e01c      	b.n	80054f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d903      	bls.n	80054c6 <DMA_CheckFifoParam+0xb6>
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d003      	beq.n	80054cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80054c4:	e018      	b.n	80054f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
      break;
 80054ca:	e015      	b.n	80054f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00e      	beq.n	80054f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
      break;
 80054dc:	e00b      	b.n	80054f6 <DMA_CheckFifoParam+0xe6>
      break;
 80054de:	bf00      	nop
 80054e0:	e00a      	b.n	80054f8 <DMA_CheckFifoParam+0xe8>
      break;
 80054e2:	bf00      	nop
 80054e4:	e008      	b.n	80054f8 <DMA_CheckFifoParam+0xe8>
      break;
 80054e6:	bf00      	nop
 80054e8:	e006      	b.n	80054f8 <DMA_CheckFifoParam+0xe8>
      break;
 80054ea:	bf00      	nop
 80054ec:	e004      	b.n	80054f8 <DMA_CheckFifoParam+0xe8>
      break;
 80054ee:	bf00      	nop
 80054f0:	e002      	b.n	80054f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80054f2:	bf00      	nop
 80054f4:	e000      	b.n	80054f8 <DMA_CheckFifoParam+0xe8>
      break;
 80054f6:	bf00      	nop
    }
  } 
  
  return status; 
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop

08005508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005508:	b480      	push	{r7}
 800550a:	b089      	sub	sp, #36	; 0x24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800551e:	2300      	movs	r3, #0
 8005520:	61fb      	str	r3, [r7, #28]
 8005522:	e165      	b.n	80057f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005524:	2201      	movs	r2, #1
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4013      	ands	r3, r2
 8005536:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	429a      	cmp	r2, r3
 800553e:	f040 8154 	bne.w	80057ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d005      	beq.n	800555a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005556:	2b02      	cmp	r3, #2
 8005558:	d130      	bne.n	80055bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	2203      	movs	r2, #3
 8005566:	fa02 f303 	lsl.w	r3, r2, r3
 800556a:	43db      	mvns	r3, r3
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	4013      	ands	r3, r2
 8005570:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	fa02 f303 	lsl.w	r3, r2, r3
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	4313      	orrs	r3, r2
 8005582:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005590:	2201      	movs	r2, #1
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4013      	ands	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	091b      	lsrs	r3, r3, #4
 80055a6:	f003 0201 	and.w	r2, r3, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d017      	beq.n	80055f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	2203      	movs	r2, #3
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	4013      	ands	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 0303 	and.w	r3, r3, #3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d123      	bne.n	800564c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	08da      	lsrs	r2, r3, #3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	3208      	adds	r2, #8
 800560c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005610:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	220f      	movs	r2, #15
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	4013      	ands	r3, r2
 8005626:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	691a      	ldr	r2, [r3, #16]
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4313      	orrs	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	08da      	lsrs	r2, r3, #3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3208      	adds	r2, #8
 8005646:	69b9      	ldr	r1, [r7, #24]
 8005648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	2203      	movs	r2, #3
 8005658:	fa02 f303 	lsl.w	r3, r2, r3
 800565c:	43db      	mvns	r3, r3
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	4013      	ands	r3, r2
 8005662:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f003 0203 	and.w	r2, r3, #3
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4313      	orrs	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 80ae 	beq.w	80057ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	4b5d      	ldr	r3, [pc, #372]	; (8005808 <HAL_GPIO_Init+0x300>)
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	4a5c      	ldr	r2, [pc, #368]	; (8005808 <HAL_GPIO_Init+0x300>)
 8005698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800569c:	6453      	str	r3, [r2, #68]	; 0x44
 800569e:	4b5a      	ldr	r3, [pc, #360]	; (8005808 <HAL_GPIO_Init+0x300>)
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056aa:	4a58      	ldr	r2, [pc, #352]	; (800580c <HAL_GPIO_Init+0x304>)
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	3302      	adds	r3, #2
 80056b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	220f      	movs	r2, #15
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	43db      	mvns	r3, r3
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	4013      	ands	r3, r2
 80056cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a4f      	ldr	r2, [pc, #316]	; (8005810 <HAL_GPIO_Init+0x308>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d025      	beq.n	8005722 <HAL_GPIO_Init+0x21a>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a4e      	ldr	r2, [pc, #312]	; (8005814 <HAL_GPIO_Init+0x30c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01f      	beq.n	800571e <HAL_GPIO_Init+0x216>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a4d      	ldr	r2, [pc, #308]	; (8005818 <HAL_GPIO_Init+0x310>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d019      	beq.n	800571a <HAL_GPIO_Init+0x212>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a4c      	ldr	r2, [pc, #304]	; (800581c <HAL_GPIO_Init+0x314>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <HAL_GPIO_Init+0x20e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a4b      	ldr	r2, [pc, #300]	; (8005820 <HAL_GPIO_Init+0x318>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00d      	beq.n	8005712 <HAL_GPIO_Init+0x20a>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a4a      	ldr	r2, [pc, #296]	; (8005824 <HAL_GPIO_Init+0x31c>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <HAL_GPIO_Init+0x206>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a49      	ldr	r2, [pc, #292]	; (8005828 <HAL_GPIO_Init+0x320>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d101      	bne.n	800570a <HAL_GPIO_Init+0x202>
 8005706:	2306      	movs	r3, #6
 8005708:	e00c      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 800570a:	2307      	movs	r3, #7
 800570c:	e00a      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 800570e:	2305      	movs	r3, #5
 8005710:	e008      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 8005712:	2304      	movs	r3, #4
 8005714:	e006      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 8005716:	2303      	movs	r3, #3
 8005718:	e004      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 800571a:	2302      	movs	r3, #2
 800571c:	e002      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_GPIO_Init+0x21c>
 8005722:	2300      	movs	r3, #0
 8005724:	69fa      	ldr	r2, [r7, #28]
 8005726:	f002 0203 	and.w	r2, r2, #3
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	4093      	lsls	r3, r2
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4313      	orrs	r3, r2
 8005732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005734:	4935      	ldr	r1, [pc, #212]	; (800580c <HAL_GPIO_Init+0x304>)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	3302      	adds	r3, #2
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005742:	4b3a      	ldr	r3, [pc, #232]	; (800582c <HAL_GPIO_Init+0x324>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	43db      	mvns	r3, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4013      	ands	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4313      	orrs	r3, r2
 8005764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005766:	4a31      	ldr	r2, [pc, #196]	; (800582c <HAL_GPIO_Init+0x324>)
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800576c:	4b2f      	ldr	r3, [pc, #188]	; (800582c <HAL_GPIO_Init+0x324>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	43db      	mvns	r3, r3
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	4013      	ands	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005790:	4a26      	ldr	r2, [pc, #152]	; (800582c <HAL_GPIO_Init+0x324>)
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005796:	4b25      	ldr	r3, [pc, #148]	; (800582c <HAL_GPIO_Init+0x324>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	43db      	mvns	r3, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057ba:	4a1c      	ldr	r2, [pc, #112]	; (800582c <HAL_GPIO_Init+0x324>)
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <HAL_GPIO_Init+0x324>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	43db      	mvns	r3, r3
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80057e4:	4a11      	ldr	r2, [pc, #68]	; (800582c <HAL_GPIO_Init+0x324>)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	3301      	adds	r3, #1
 80057ee:	61fb      	str	r3, [r7, #28]
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	f67f ae96 	bls.w	8005524 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	3724      	adds	r7, #36	; 0x24
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40023800 	.word	0x40023800
 800580c:	40013800 	.word	0x40013800
 8005810:	40020000 	.word	0x40020000
 8005814:	40020400 	.word	0x40020400
 8005818:	40020800 	.word	0x40020800
 800581c:	40020c00 	.word	0x40020c00
 8005820:	40021000 	.word	0x40021000
 8005824:	40021400 	.word	0x40021400
 8005828:	40021800 	.word	0x40021800
 800582c:	40013c00 	.word	0x40013c00

08005830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800584c:	e003      	b.n	8005856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	041a      	lsls	r2, r3, #16
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	619a      	str	r2, [r3, #24]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e0cc      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005878:	4b68      	ldr	r3, [pc, #416]	; (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 030f 	and.w	r3, r3, #15
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d90c      	bls.n	80058a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005886:	4b65      	ldr	r3, [pc, #404]	; (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800588e:	4b63      	ldr	r3, [pc, #396]	; (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 030f 	and.w	r3, r3, #15
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e0b8      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d020      	beq.n	80058ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058b8:	4b59      	ldr	r3, [pc, #356]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	4a58      	ldr	r2, [pc, #352]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0308 	and.w	r3, r3, #8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058d0:	4b53      	ldr	r3, [pc, #332]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4a52      	ldr	r2, [pc, #328]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058dc:	4b50      	ldr	r3, [pc, #320]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	494d      	ldr	r1, [pc, #308]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d044      	beq.n	8005984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005902:	4b47      	ldr	r3, [pc, #284]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d119      	bne.n	8005942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e07f      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b02      	cmp	r3, #2
 8005918:	d003      	beq.n	8005922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591e:	2b03      	cmp	r3, #3
 8005920:	d107      	bne.n	8005932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005922:	4b3f      	ldr	r3, [pc, #252]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e06f      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005932:	4b3b      	ldr	r3, [pc, #236]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e067      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005942:	4b37      	ldr	r3, [pc, #220]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f023 0203 	bic.w	r2, r3, #3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	4934      	ldr	r1, [pc, #208]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	4313      	orrs	r3, r2
 8005952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005954:	f7fe f9f2 	bl	8003d3c <HAL_GetTick>
 8005958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800595a:	e00a      	b.n	8005972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800595c:	f7fe f9ee 	bl	8003d3c <HAL_GetTick>
 8005960:	4602      	mov	r2, r0
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	f241 3288 	movw	r2, #5000	; 0x1388
 800596a:	4293      	cmp	r3, r2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e04f      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005972:	4b2b      	ldr	r3, [pc, #172]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f003 020c 	and.w	r2, r3, #12
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	429a      	cmp	r2, r3
 8005982:	d1eb      	bne.n	800595c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005984:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d20c      	bcs.n	80059ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005992:	4b22      	ldr	r3, [pc, #136]	; (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 8005994:	683a      	ldr	r2, [r7, #0]
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <HAL_RCC_ClockConfig+0x1b8>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 030f 	and.w	r3, r3, #15
 80059a2:	683a      	ldr	r2, [r7, #0]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e032      	b.n	8005a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059b8:	4b19      	ldr	r3, [pc, #100]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	4916      	ldr	r1, [pc, #88]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059d6:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	490e      	ldr	r1, [pc, #56]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059ea:	f000 f887 	bl	8005afc <HAL_RCC_GetSysClockFreq>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	490a      	ldr	r1, [pc, #40]	; (8005a24 <HAL_RCC_ClockConfig+0x1c0>)
 80059fc:	5ccb      	ldrb	r3, [r1, r3]
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <HAL_RCC_ClockConfig+0x1c4>)
 8005a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <HAL_RCC_ClockConfig+0x1c8>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fd ffe4 	bl	80039d8 <HAL_InitTick>

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	40023c00 	.word	0x40023c00
 8005a20:	40023800 	.word	0x40023800
 8005a24:	0801059c 	.word	0x0801059c
 8005a28:	2000001c 	.word	0x2000001c
 8005a2c:	20000020 	.word	0x20000020

08005a30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a34:	4b03      	ldr	r3, [pc, #12]	; (8005a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a36:	681b      	ldr	r3, [r3, #0]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	2000001c 	.word	0x2000001c

08005a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a4c:	f7ff fff0 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
 8005a50:	4602      	mov	r2, r0
 8005a52:	4b05      	ldr	r3, [pc, #20]	; (8005a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	0a9b      	lsrs	r3, r3, #10
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	4903      	ldr	r1, [pc, #12]	; (8005a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a5e:	5ccb      	ldrb	r3, [r1, r3]
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	40023800 	.word	0x40023800
 8005a6c:	080105ac 	.word	0x080105ac

08005a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a74:	f7ff ffdc 	bl	8005a30 <HAL_RCC_GetHCLKFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b05      	ldr	r3, [pc, #20]	; (8005a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	0b5b      	lsrs	r3, r3, #13
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	4903      	ldr	r1, [pc, #12]	; (8005a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40023800 	.word	0x40023800
 8005a94:	080105ac 	.word	0x080105ac

08005a98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	220f      	movs	r2, #15
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005aa8:	4b12      	ldr	r3, [pc, #72]	; (8005af4 <HAL_RCC_GetClockConfig+0x5c>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0203 	and.w	r2, r3, #3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ab4:	4b0f      	ldr	r3, [pc, #60]	; (8005af4 <HAL_RCC_GetClockConfig+0x5c>)
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ac0:	4b0c      	ldr	r3, [pc, #48]	; (8005af4 <HAL_RCC_GetClockConfig+0x5c>)
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005acc:	4b09      	ldr	r3, [pc, #36]	; (8005af4 <HAL_RCC_GetClockConfig+0x5c>)
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	08db      	lsrs	r3, r3, #3
 8005ad2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <HAL_RCC_GetClockConfig+0x60>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 020f 	and.w	r2, r3, #15
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	601a      	str	r2, [r3, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	40023c00 	.word	0x40023c00

08005afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005afc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b00:	b0ae      	sub	sp, #184	; 0xb8
 8005b02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b22:	4bcb      	ldr	r3, [pc, #812]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 030c 	and.w	r3, r3, #12
 8005b2a:	2b0c      	cmp	r3, #12
 8005b2c:	f200 8206 	bhi.w	8005f3c <HAL_RCC_GetSysClockFreq+0x440>
 8005b30:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005f3d 	.word	0x08005f3d
 8005b40:	08005f3d 	.word	0x08005f3d
 8005b44:	08005f3d 	.word	0x08005f3d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	08005f3d 	.word	0x08005f3d
 8005b50:	08005f3d 	.word	0x08005f3d
 8005b54:	08005f3d 	.word	0x08005f3d
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005f3d 	.word	0x08005f3d
 8005b60:	08005f3d 	.word	0x08005f3d
 8005b64:	08005f3d 	.word	0x08005f3d
 8005b68:	08005d6d 	.word	0x08005d6d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b6c:	4bb9      	ldr	r3, [pc, #740]	; (8005e54 <HAL_RCC_GetSysClockFreq+0x358>)
 8005b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005b72:	e1e7      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b74:	4bb8      	ldr	r3, [pc, #736]	; (8005e58 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005b76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005b7a:	e1e3      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b7c:	4bb4      	ldr	r3, [pc, #720]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b88:	4bb1      	ldr	r3, [pc, #708]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d071      	beq.n	8005c78 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b94:	4bae      	ldr	r3, [pc, #696]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	099b      	lsrs	r3, r3, #6
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ba0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005ba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005bba:	4622      	mov	r2, r4
 8005bbc:	462b      	mov	r3, r5
 8005bbe:	f04f 0000 	mov.w	r0, #0
 8005bc2:	f04f 0100 	mov.w	r1, #0
 8005bc6:	0159      	lsls	r1, r3, #5
 8005bc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bcc:	0150      	lsls	r0, r2, #5
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	1a51      	subs	r1, r2, r1
 8005bd6:	6439      	str	r1, [r7, #64]	; 0x40
 8005bd8:	4629      	mov	r1, r5
 8005bda:	eb63 0301 	sbc.w	r3, r3, r1
 8005bde:	647b      	str	r3, [r7, #68]	; 0x44
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f04f 0300 	mov.w	r3, #0
 8005be8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005bec:	4649      	mov	r1, r9
 8005bee:	018b      	lsls	r3, r1, #6
 8005bf0:	4641      	mov	r1, r8
 8005bf2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bf6:	4641      	mov	r1, r8
 8005bf8:	018a      	lsls	r2, r1, #6
 8005bfa:	4641      	mov	r1, r8
 8005bfc:	1a51      	subs	r1, r2, r1
 8005bfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c00:	4649      	mov	r1, r9
 8005c02:	eb63 0301 	sbc.w	r3, r3, r1
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005c14:	4649      	mov	r1, r9
 8005c16:	00cb      	lsls	r3, r1, #3
 8005c18:	4641      	mov	r1, r8
 8005c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c1e:	4641      	mov	r1, r8
 8005c20:	00ca      	lsls	r2, r1, #3
 8005c22:	4610      	mov	r0, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	4622      	mov	r2, r4
 8005c2a:	189b      	adds	r3, r3, r2
 8005c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c2e:	462b      	mov	r3, r5
 8005c30:	460a      	mov	r2, r1
 8005c32:	eb42 0303 	adc.w	r3, r2, r3
 8005c36:	637b      	str	r3, [r7, #52]	; 0x34
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005c44:	4629      	mov	r1, r5
 8005c46:	024b      	lsls	r3, r1, #9
 8005c48:	4621      	mov	r1, r4
 8005c4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c4e:	4621      	mov	r1, r4
 8005c50:	024a      	lsls	r2, r1, #9
 8005c52:	4610      	mov	r0, r2
 8005c54:	4619      	mov	r1, r3
 8005c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005c68:	f7fb f988 	bl	8000f7c <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4613      	mov	r3, r2
 8005c72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c76:	e067      	b.n	8005d48 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c78:	4b75      	ldr	r3, [pc, #468]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	099b      	lsrs	r3, r3, #6
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c84:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c90:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c92:	2300      	movs	r3, #0
 8005c94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005c96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005c9a:	4622      	mov	r2, r4
 8005c9c:	462b      	mov	r3, r5
 8005c9e:	f04f 0000 	mov.w	r0, #0
 8005ca2:	f04f 0100 	mov.w	r1, #0
 8005ca6:	0159      	lsls	r1, r3, #5
 8005ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cac:	0150      	lsls	r0, r2, #5
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	1a51      	subs	r1, r2, r1
 8005cb6:	62b9      	str	r1, [r7, #40]	; 0x28
 8005cb8:	4629      	mov	r1, r5
 8005cba:	eb63 0301 	sbc.w	r3, r3, r1
 8005cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	f04f 0300 	mov.w	r3, #0
 8005cc8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005ccc:	4649      	mov	r1, r9
 8005cce:	018b      	lsls	r3, r1, #6
 8005cd0:	4641      	mov	r1, r8
 8005cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cd6:	4641      	mov	r1, r8
 8005cd8:	018a      	lsls	r2, r1, #6
 8005cda:	4641      	mov	r1, r8
 8005cdc:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ce0:	4649      	mov	r1, r9
 8005ce2:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	f04f 0300 	mov.w	r3, #0
 8005cee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cf2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cf6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cfa:	4692      	mov	sl, r2
 8005cfc:	469b      	mov	fp, r3
 8005cfe:	4623      	mov	r3, r4
 8005d00:	eb1a 0303 	adds.w	r3, sl, r3
 8005d04:	623b      	str	r3, [r7, #32]
 8005d06:	462b      	mov	r3, r5
 8005d08:	eb4b 0303 	adc.w	r3, fp, r3
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	f04f 0300 	mov.w	r3, #0
 8005d16:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	028b      	lsls	r3, r1, #10
 8005d1e:	4621      	mov	r1, r4
 8005d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d24:	4621      	mov	r1, r4
 8005d26:	028a      	lsls	r2, r1, #10
 8005d28:	4610      	mov	r0, r2
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d30:	2200      	movs	r2, #0
 8005d32:	673b      	str	r3, [r7, #112]	; 0x70
 8005d34:	677a      	str	r2, [r7, #116]	; 0x74
 8005d36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005d3a:	f7fb f91f 	bl	8000f7c <__aeabi_uldivmod>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4613      	mov	r3, r2
 8005d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d48:	4b41      	ldr	r3, [pc, #260]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	0c1b      	lsrs	r3, r3, #16
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	3301      	adds	r3, #1
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005d5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005d6a:	e0eb      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d6c:	4b38      	ldr	r3, [pc, #224]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d78:	4b35      	ldr	r3, [pc, #212]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d06b      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d84:	4b32      	ldr	r3, [pc, #200]	; (8005e50 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	099b      	lsrs	r3, r3, #6
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	663b      	str	r3, [r7, #96]	; 0x60
 8005d98:	2300      	movs	r3, #0
 8005d9a:	667b      	str	r3, [r7, #100]	; 0x64
 8005d9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005da0:	4622      	mov	r2, r4
 8005da2:	462b      	mov	r3, r5
 8005da4:	f04f 0000 	mov.w	r0, #0
 8005da8:	f04f 0100 	mov.w	r1, #0
 8005dac:	0159      	lsls	r1, r3, #5
 8005dae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005db2:	0150      	lsls	r0, r2, #5
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4621      	mov	r1, r4
 8005dba:	1a51      	subs	r1, r2, r1
 8005dbc:	61b9      	str	r1, [r7, #24]
 8005dbe:	4629      	mov	r1, r5
 8005dc0:	eb63 0301 	sbc.w	r3, r3, r1
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005dd2:	4659      	mov	r1, fp
 8005dd4:	018b      	lsls	r3, r1, #6
 8005dd6:	4651      	mov	r1, sl
 8005dd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ddc:	4651      	mov	r1, sl
 8005dde:	018a      	lsls	r2, r1, #6
 8005de0:	4651      	mov	r1, sl
 8005de2:	ebb2 0801 	subs.w	r8, r2, r1
 8005de6:	4659      	mov	r1, fp
 8005de8:	eb63 0901 	sbc.w	r9, r3, r1
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005df8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dfc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e00:	4690      	mov	r8, r2
 8005e02:	4699      	mov	r9, r3
 8005e04:	4623      	mov	r3, r4
 8005e06:	eb18 0303 	adds.w	r3, r8, r3
 8005e0a:	613b      	str	r3, [r7, #16]
 8005e0c:	462b      	mov	r3, r5
 8005e0e:	eb49 0303 	adc.w	r3, r9, r3
 8005e12:	617b      	str	r3, [r7, #20]
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005e20:	4629      	mov	r1, r5
 8005e22:	024b      	lsls	r3, r1, #9
 8005e24:	4621      	mov	r1, r4
 8005e26:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	024a      	lsls	r2, r1, #9
 8005e2e:	4610      	mov	r0, r2
 8005e30:	4619      	mov	r1, r3
 8005e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e36:	2200      	movs	r2, #0
 8005e38:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e3a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005e3c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e40:	f7fb f89c 	bl	8000f7c <__aeabi_uldivmod>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4613      	mov	r3, r2
 8005e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e4e:	e065      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x420>
 8005e50:	40023800 	.word	0x40023800
 8005e54:	00f42400 	.word	0x00f42400
 8005e58:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e5c:	4b3d      	ldr	r3, [pc, #244]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x458>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	099b      	lsrs	r3, r3, #6
 8005e62:	2200      	movs	r2, #0
 8005e64:	4618      	mov	r0, r3
 8005e66:	4611      	mov	r1, r2
 8005e68:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e6c:	653b      	str	r3, [r7, #80]	; 0x50
 8005e6e:	2300      	movs	r3, #0
 8005e70:	657b      	str	r3, [r7, #84]	; 0x54
 8005e72:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005e76:	4642      	mov	r2, r8
 8005e78:	464b      	mov	r3, r9
 8005e7a:	f04f 0000 	mov.w	r0, #0
 8005e7e:	f04f 0100 	mov.w	r1, #0
 8005e82:	0159      	lsls	r1, r3, #5
 8005e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e88:	0150      	lsls	r0, r2, #5
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4641      	mov	r1, r8
 8005e90:	1a51      	subs	r1, r2, r1
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	4649      	mov	r1, r9
 8005e96:	eb63 0301 	sbc.w	r3, r3, r1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005ea8:	4659      	mov	r1, fp
 8005eaa:	018b      	lsls	r3, r1, #6
 8005eac:	4651      	mov	r1, sl
 8005eae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005eb2:	4651      	mov	r1, sl
 8005eb4:	018a      	lsls	r2, r1, #6
 8005eb6:	4651      	mov	r1, sl
 8005eb8:	1a54      	subs	r4, r2, r1
 8005eba:	4659      	mov	r1, fp
 8005ebc:	eb63 0501 	sbc.w	r5, r3, r1
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	00eb      	lsls	r3, r5, #3
 8005eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ece:	00e2      	lsls	r2, r4, #3
 8005ed0:	4614      	mov	r4, r2
 8005ed2:	461d      	mov	r5, r3
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	18e3      	adds	r3, r4, r3
 8005ed8:	603b      	str	r3, [r7, #0]
 8005eda:	464b      	mov	r3, r9
 8005edc:	eb45 0303 	adc.w	r3, r5, r3
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eee:	4629      	mov	r1, r5
 8005ef0:	028b      	lsls	r3, r1, #10
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ef8:	4621      	mov	r1, r4
 8005efa:	028a      	lsls	r2, r1, #10
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f04:	2200      	movs	r2, #0
 8005f06:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f08:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f0a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f0e:	f7fb f835 	bl	8000f7c <__aeabi_uldivmod>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4613      	mov	r3, r2
 8005f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005f1c:	4b0d      	ldr	r3, [pc, #52]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x458>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	0f1b      	lsrs	r3, r3, #28
 8005f22:	f003 0307 	and.w	r3, r3, #7
 8005f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005f2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005f3a:	e003      	b.n	8005f44 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f3c:	4b06      	ldr	r3, [pc, #24]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005f42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	37b8      	adds	r7, #184	; 0xb8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f52:	bf00      	nop
 8005f54:	40023800 	.word	0x40023800
 8005f58:	00f42400 	.word	0x00f42400

08005f5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e28d      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8083 	beq.w	8006082 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f7c:	4b94      	ldr	r3, [pc, #592]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	f003 030c 	and.w	r3, r3, #12
 8005f84:	2b04      	cmp	r3, #4
 8005f86:	d019      	beq.n	8005fbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f88:	4b91      	ldr	r3, [pc, #580]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d106      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005f94:	4b8e      	ldr	r3, [pc, #568]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fa0:	d00c      	beq.n	8005fbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa2:	4b8b      	ldr	r3, [pc, #556]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005faa:	2b0c      	cmp	r3, #12
 8005fac:	d112      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fae:	4b88      	ldr	r3, [pc, #544]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fba:	d10b      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fbc:	4b84      	ldr	r3, [pc, #528]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d05b      	beq.n	8006080 <HAL_RCC_OscConfig+0x124>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d157      	bne.n	8006080 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e25a      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fdc:	d106      	bne.n	8005fec <HAL_RCC_OscConfig+0x90>
 8005fde:	4b7c      	ldr	r3, [pc, #496]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a7b      	ldr	r2, [pc, #492]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	e01d      	b.n	8006028 <HAL_RCC_OscConfig+0xcc>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCC_OscConfig+0xb4>
 8005ff6:	4b76      	ldr	r3, [pc, #472]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a75      	ldr	r2, [pc, #468]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8005ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	4b73      	ldr	r3, [pc, #460]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a72      	ldr	r2, [pc, #456]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8006008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800600c:	6013      	str	r3, [r2, #0]
 800600e:	e00b      	b.n	8006028 <HAL_RCC_OscConfig+0xcc>
 8006010:	4b6f      	ldr	r3, [pc, #444]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a6e      	ldr	r2, [pc, #440]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8006016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	4b6c      	ldr	r3, [pc, #432]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a6b      	ldr	r2, [pc, #428]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8006022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d013      	beq.n	8006058 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006030:	f7fd fe84 	bl	8003d3c <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006038:	f7fd fe80 	bl	8003d3c <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b64      	cmp	r3, #100	; 0x64
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e21f      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800604a:	4b61      	ldr	r3, [pc, #388]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0xdc>
 8006056:	e014      	b.n	8006082 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006058:	f7fd fe70 	bl	8003d3c <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800605e:	e008      	b.n	8006072 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006060:	f7fd fe6c 	bl	8003d3c <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	2b64      	cmp	r3, #100	; 0x64
 800606c:	d901      	bls.n	8006072 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e20b      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006072:	4b57      	ldr	r3, [pc, #348]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f0      	bne.n	8006060 <HAL_RCC_OscConfig+0x104>
 800607e:	e000      	b.n	8006082 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d06f      	beq.n	800616e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800608e:	4b50      	ldr	r3, [pc, #320]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
 8006096:	2b00      	cmp	r3, #0
 8006098:	d017      	beq.n	80060ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800609a:	4b4d      	ldr	r3, [pc, #308]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d105      	bne.n	80060b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80060a6:	4b4a      	ldr	r3, [pc, #296]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060b2:	4b47      	ldr	r3, [pc, #284]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80060ba:	2b0c      	cmp	r3, #12
 80060bc:	d11c      	bne.n	80060f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060be:	4b44      	ldr	r3, [pc, #272]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d116      	bne.n	80060f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ca:	4b41      	ldr	r3, [pc, #260]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_RCC_OscConfig+0x186>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d001      	beq.n	80060e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e1d3      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e2:	4b3b      	ldr	r3, [pc, #236]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	4937      	ldr	r1, [pc, #220]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060f6:	e03a      	b.n	800616e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d020      	beq.n	8006142 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006100:	4b34      	ldr	r3, [pc, #208]	; (80061d4 <HAL_RCC_OscConfig+0x278>)
 8006102:	2201      	movs	r2, #1
 8006104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fd fe19 	bl	8003d3c <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800610e:	f7fd fe15 	bl	8003d3c <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e1b4      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006120:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f0      	beq.n	800610e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612c:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	00db      	lsls	r3, r3, #3
 800613a:	4925      	ldr	r1, [pc, #148]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 800613c:	4313      	orrs	r3, r2
 800613e:	600b      	str	r3, [r1, #0]
 8006140:	e015      	b.n	800616e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006142:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <HAL_RCC_OscConfig+0x278>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006148:	f7fd fdf8 	bl	8003d3c <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800614e:	e008      	b.n	8006162 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006150:	f7fd fdf4 	bl	8003d3c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e193      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006162:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0302 	and.w	r3, r3, #2
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1f0      	bne.n	8006150 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f003 0308 	and.w	r3, r3, #8
 8006176:	2b00      	cmp	r3, #0
 8006178:	d036      	beq.n	80061e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d016      	beq.n	80061b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006182:	4b15      	ldr	r3, [pc, #84]	; (80061d8 <HAL_RCC_OscConfig+0x27c>)
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006188:	f7fd fdd8 	bl	8003d3c <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618e:	e008      	b.n	80061a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006190:	f7fd fdd4 	bl	8003d3c <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e173      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a2:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <HAL_RCC_OscConfig+0x274>)
 80061a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <HAL_RCC_OscConfig+0x234>
 80061ae:	e01b      	b.n	80061e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <HAL_RCC_OscConfig+0x27c>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b6:	f7fd fdc1 	bl	8003d3c <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061bc:	e00e      	b.n	80061dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061be:	f7fd fdbd 	bl	8003d3c <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d907      	bls.n	80061dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e15c      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
 80061d0:	40023800 	.word	0x40023800
 80061d4:	42470000 	.word	0x42470000
 80061d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061dc:	4b8a      	ldr	r3, [pc, #552]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 80061de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1ea      	bne.n	80061be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8097 	beq.w	8006324 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061f6:	2300      	movs	r3, #0
 80061f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061fa:	4b83      	ldr	r3, [pc, #524]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10f      	bne.n	8006226 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006206:	2300      	movs	r3, #0
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	4b7f      	ldr	r3, [pc, #508]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 800620c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620e:	4a7e      	ldr	r2, [pc, #504]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006214:	6413      	str	r3, [r2, #64]	; 0x40
 8006216:	4b7c      	ldr	r3, [pc, #496]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621e:	60bb      	str	r3, [r7, #8]
 8006220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006222:	2301      	movs	r3, #1
 8006224:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006226:	4b79      	ldr	r3, [pc, #484]	; (800640c <HAL_RCC_OscConfig+0x4b0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622e:	2b00      	cmp	r3, #0
 8006230:	d118      	bne.n	8006264 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006232:	4b76      	ldr	r3, [pc, #472]	; (800640c <HAL_RCC_OscConfig+0x4b0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a75      	ldr	r2, [pc, #468]	; (800640c <HAL_RCC_OscConfig+0x4b0>)
 8006238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800623c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800623e:	f7fd fd7d 	bl	8003d3c <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006246:	f7fd fd79 	bl	8003d3c <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e118      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006258:	4b6c      	ldr	r3, [pc, #432]	; (800640c <HAL_RCC_OscConfig+0x4b0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d106      	bne.n	800627a <HAL_RCC_OscConfig+0x31e>
 800626c:	4b66      	ldr	r3, [pc, #408]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 800626e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006270:	4a65      	ldr	r2, [pc, #404]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	6713      	str	r3, [r2, #112]	; 0x70
 8006278:	e01c      	b.n	80062b4 <HAL_RCC_OscConfig+0x358>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	2b05      	cmp	r3, #5
 8006280:	d10c      	bne.n	800629c <HAL_RCC_OscConfig+0x340>
 8006282:	4b61      	ldr	r3, [pc, #388]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006286:	4a60      	ldr	r2, [pc, #384]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006288:	f043 0304 	orr.w	r3, r3, #4
 800628c:	6713      	str	r3, [r2, #112]	; 0x70
 800628e:	4b5e      	ldr	r3, [pc, #376]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006292:	4a5d      	ldr	r2, [pc, #372]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006294:	f043 0301 	orr.w	r3, r3, #1
 8006298:	6713      	str	r3, [r2, #112]	; 0x70
 800629a:	e00b      	b.n	80062b4 <HAL_RCC_OscConfig+0x358>
 800629c:	4b5a      	ldr	r3, [pc, #360]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 800629e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a0:	4a59      	ldr	r2, [pc, #356]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6713      	str	r3, [r2, #112]	; 0x70
 80062a8:	4b57      	ldr	r3, [pc, #348]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	4a56      	ldr	r2, [pc, #344]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 80062ae:	f023 0304 	bic.w	r3, r3, #4
 80062b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d015      	beq.n	80062e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062bc:	f7fd fd3e 	bl	8003d3c <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062c2:	e00a      	b.n	80062da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062c4:	f7fd fd3a 	bl	8003d3c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e0d7      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062da:	4b4b      	ldr	r3, [pc, #300]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 80062dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0ee      	beq.n	80062c4 <HAL_RCC_OscConfig+0x368>
 80062e6:	e014      	b.n	8006312 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e8:	f7fd fd28 	bl	8003d3c <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062f0:	f7fd fd24 	bl	8003d3c <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e0c1      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006306:	4b40      	ldr	r3, [pc, #256]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1ee      	bne.n	80062f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d105      	bne.n	8006324 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006318:	4b3b      	ldr	r3, [pc, #236]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 800631a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631c:	4a3a      	ldr	r2, [pc, #232]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 800631e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006322:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 80ad 	beq.w	8006488 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800632e:	4b36      	ldr	r3, [pc, #216]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b08      	cmp	r3, #8
 8006338:	d060      	beq.n	80063fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d145      	bne.n	80063ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006342:	4b33      	ldr	r3, [pc, #204]	; (8006410 <HAL_RCC_OscConfig+0x4b4>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fd fcf8 	bl	8003d3c <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006350:	f7fd fcf4 	bl	8003d3c <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e093      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006362:	4b29      	ldr	r3, [pc, #164]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	019b      	lsls	r3, r3, #6
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	085b      	lsrs	r3, r3, #1
 8006386:	3b01      	subs	r3, #1
 8006388:	041b      	lsls	r3, r3, #16
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	061b      	lsls	r3, r3, #24
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	071b      	lsls	r3, r3, #28
 800639a:	491b      	ldr	r1, [pc, #108]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 800639c:	4313      	orrs	r3, r2
 800639e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a0:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <HAL_RCC_OscConfig+0x4b4>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063a6:	f7fd fcc9 	bl	8003d3c <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063ac:	e008      	b.n	80063c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ae:	f7fd fcc5 	bl	8003d3c <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d901      	bls.n	80063c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e064      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c0:	4b11      	ldr	r3, [pc, #68]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0f0      	beq.n	80063ae <HAL_RCC_OscConfig+0x452>
 80063cc:	e05c      	b.n	8006488 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ce:	4b10      	ldr	r3, [pc, #64]	; (8006410 <HAL_RCC_OscConfig+0x4b4>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fd fcb2 	bl	8003d3c <HAL_GetTick>
 80063d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063dc:	f7fd fcae 	bl	8003d3c <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e04d      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ee:	4b06      	ldr	r3, [pc, #24]	; (8006408 <HAL_RCC_OscConfig+0x4ac>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1f0      	bne.n	80063dc <HAL_RCC_OscConfig+0x480>
 80063fa:	e045      	b.n	8006488 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d107      	bne.n	8006414 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e040      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
 8006408:	40023800 	.word	0x40023800
 800640c:	40007000 	.word	0x40007000
 8006410:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006414:	4b1f      	ldr	r3, [pc, #124]	; (8006494 <HAL_RCC_OscConfig+0x538>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d030      	beq.n	8006484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800642c:	429a      	cmp	r2, r3
 800642e:	d129      	bne.n	8006484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800643a:	429a      	cmp	r2, r3
 800643c:	d122      	bne.n	8006484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006444:	4013      	ands	r3, r2
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800644a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800644c:	4293      	cmp	r3, r2
 800644e:	d119      	bne.n	8006484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645a:	085b      	lsrs	r3, r3, #1
 800645c:	3b01      	subs	r3, #1
 800645e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006460:	429a      	cmp	r2, r3
 8006462:	d10f      	bne.n	8006484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006470:	429a      	cmp	r2, r3
 8006472:	d107      	bne.n	8006484 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006480:	429a      	cmp	r2, r3
 8006482:	d001      	beq.n	8006488 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40023800 	.word	0x40023800

08006498 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e07b      	b.n	80065a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d108      	bne.n	80064c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ba:	d009      	beq.n	80064d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	61da      	str	r2, [r3, #28]
 80064c2:	e005      	b.n	80064d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fd f8b6 	bl	800365c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006506:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006518:	431a      	orrs	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006540:	431a      	orrs	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	69db      	ldr	r3, [r3, #28]
 8006546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800654a:	431a      	orrs	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a1b      	ldr	r3, [r3, #32]
 8006550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006554:	ea42 0103 	orr.w	r1, r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	0c1b      	lsrs	r3, r3, #16
 800656e:	f003 0104 	and.w	r1, r3, #4
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	f003 0210 	and.w	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006590:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3708      	adds	r7, #8
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b088      	sub	sp, #32
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	603b      	str	r3, [r7, #0]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d101      	bne.n	80065cc <HAL_SPI_Transmit+0x22>
 80065c8:	2302      	movs	r3, #2
 80065ca:	e126      	b.n	800681a <HAL_SPI_Transmit+0x270>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065d4:	f7fd fbb2 	bl	8003d3c <HAL_GetTick>
 80065d8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80065da:	88fb      	ldrh	r3, [r7, #6]
 80065dc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d002      	beq.n	80065f0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065ea:	2302      	movs	r3, #2
 80065ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065ee:	e10b      	b.n	8006808 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_SPI_Transmit+0x52>
 80065f6:	88fb      	ldrh	r3, [r7, #6]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d102      	bne.n	8006602 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006600:	e102      	b.n	8006808 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2203      	movs	r2, #3
 8006606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	88fa      	ldrh	r2, [r7, #6]
 800661a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	88fa      	ldrh	r2, [r7, #6]
 8006620:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006648:	d10f      	bne.n	800666a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006658:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006668:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d007      	beq.n	8006688 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006686:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006690:	d14b      	bne.n	800672a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_SPI_Transmit+0xf6>
 800669a:	8afb      	ldrh	r3, [r7, #22]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d13e      	bne.n	800671e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a4:	881a      	ldrh	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	1c9a      	adds	r2, r3, #2
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	b29a      	uxth	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80066c4:	e02b      	b.n	800671e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0302 	and.w	r3, r3, #2
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d112      	bne.n	80066fa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d8:	881a      	ldrh	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	1c9a      	adds	r2, r3, #2
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	86da      	strh	r2, [r3, #54]	; 0x36
 80066f8:	e011      	b.n	800671e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066fa:	f7fd fb1f 	bl	8003d3c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	429a      	cmp	r2, r3
 8006708:	d803      	bhi.n	8006712 <HAL_SPI_Transmit+0x168>
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006710:	d102      	bne.n	8006718 <HAL_SPI_Transmit+0x16e>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d102      	bne.n	800671e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800671c:	e074      	b.n	8006808 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1ce      	bne.n	80066c6 <HAL_SPI_Transmit+0x11c>
 8006728:	e04c      	b.n	80067c4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_SPI_Transmit+0x18e>
 8006732:	8afb      	ldrh	r3, [r7, #22]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d140      	bne.n	80067ba <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	330c      	adds	r3, #12
 8006742:	7812      	ldrb	r2, [r2, #0]
 8006744:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800675e:	e02c      	b.n	80067ba <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b02      	cmp	r3, #2
 800676c:	d113      	bne.n	8006796 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	7812      	ldrb	r2, [r2, #0]
 800677a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	86da      	strh	r2, [r3, #54]	; 0x36
 8006794:	e011      	b.n	80067ba <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006796:	f7fd fad1 	bl	8003d3c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d803      	bhi.n	80067ae <HAL_SPI_Transmit+0x204>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ac:	d102      	bne.n	80067b4 <HAL_SPI_Transmit+0x20a>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067b8:	e026      	b.n	8006808 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1cd      	bne.n	8006760 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	6839      	ldr	r1, [r7, #0]
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fa63 	bl	8006c94 <SPI_EndRxTxTransaction>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10a      	bne.n	80067f8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067e2:	2300      	movs	r3, #0
 80067e4:	613b      	str	r3, [r7, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	613b      	str	r3, [r7, #16]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	613b      	str	r3, [r7, #16]
 80067f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e000      	b.n	8006808 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006806:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006818:	7ffb      	ldrb	r3, [r7, #31]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3720      	adds	r7, #32
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b08c      	sub	sp, #48	; 0x30
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
 800682e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006830:	2301      	movs	r3, #1
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006840:	2b01      	cmp	r3, #1
 8006842:	d101      	bne.n	8006848 <HAL_SPI_TransmitReceive+0x26>
 8006844:	2302      	movs	r3, #2
 8006846:	e18a      	b.n	8006b5e <HAL_SPI_TransmitReceive+0x33c>
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006850:	f7fd fa74 	bl	8003d3c <HAL_GetTick>
 8006854:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800685c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006866:	887b      	ldrh	r3, [r7, #2]
 8006868:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800686a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800686e:	2b01      	cmp	r3, #1
 8006870:	d00f      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x70>
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006878:	d107      	bne.n	800688a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <HAL_SPI_TransmitReceive+0x68>
 8006882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006886:	2b04      	cmp	r3, #4
 8006888:	d003      	beq.n	8006892 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800688a:	2302      	movs	r3, #2
 800688c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006890:	e15b      	b.n	8006b4a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x82>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x82>
 800689e:	887b      	ldrh	r3, [r7, #2]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d103      	bne.n	80068ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80068aa:	e14e      	b.n	8006b4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d003      	beq.n	80068c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2205      	movs	r2, #5
 80068bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	887a      	ldrh	r2, [r7, #2]
 80068d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	887a      	ldrh	r2, [r7, #2]
 80068d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	887a      	ldrh	r2, [r7, #2]
 80068e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	887a      	ldrh	r2, [r7, #2]
 80068e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b40      	cmp	r3, #64	; 0x40
 8006902:	d007      	beq.n	8006914 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800691c:	d178      	bne.n	8006a10 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <HAL_SPI_TransmitReceive+0x10a>
 8006926:	8b7b      	ldrh	r3, [r7, #26]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d166      	bne.n	80069fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	881a      	ldrh	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693c:	1c9a      	adds	r2, r3, #2
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006950:	e053      	b.n	80069fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b02      	cmp	r3, #2
 800695e:	d11b      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x176>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x176>
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	2b01      	cmp	r3, #1
 800696e:	d113      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	881a      	ldrh	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006980:	1c9a      	adds	r2, r3, #2
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d119      	bne.n	80069da <HAL_SPI_TransmitReceive+0x1b8>
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d014      	beq.n	80069da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	b292      	uxth	r2, r2
 80069bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	1c9a      	adds	r2, r3, #2
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	3b01      	subs	r3, #1
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069d6:	2301      	movs	r3, #1
 80069d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069da:	f7fd f9af 	bl	8003d3c <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d807      	bhi.n	80069fa <HAL_SPI_TransmitReceive+0x1d8>
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d003      	beq.n	80069fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069f8:	e0a7      	b.n	8006b4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1a6      	bne.n	8006952 <HAL_SPI_TransmitReceive+0x130>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1a1      	bne.n	8006952 <HAL_SPI_TransmitReceive+0x130>
 8006a0e:	e07c      	b.n	8006b0a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <HAL_SPI_TransmitReceive+0x1fc>
 8006a18:	8b7b      	ldrh	r3, [r7, #26]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d16b      	bne.n	8006af6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	330c      	adds	r3, #12
 8006a28:	7812      	ldrb	r2, [r2, #0]
 8006a2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a44:	e057      	b.n	8006af6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0302 	and.w	r3, r3, #2
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d11c      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x26c>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d017      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x26c>
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d114      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	7812      	ldrb	r2, [r2, #0]
 8006a70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a76:	1c5a      	adds	r2, r3, #1
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d119      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x2ae>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d014      	beq.n	8006ad0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	1c5a      	adds	r2, r3, #1
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006acc:	2301      	movs	r3, #1
 8006ace:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ad0:	f7fd f934 	bl	8003d3c <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d803      	bhi.n	8006ae8 <HAL_SPI_TransmitReceive+0x2c6>
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	d102      	bne.n	8006aee <HAL_SPI_TransmitReceive+0x2cc>
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d103      	bne.n	8006af6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006af4:	e029      	b.n	8006b4a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d1a2      	bne.n	8006a46 <HAL_SPI_TransmitReceive+0x224>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d19d      	bne.n	8006a46 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f000 f8c0 	bl	8006c94 <SPI_EndRxTxTransaction>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d006      	beq.n	8006b28 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b26:	e010      	b.n	8006b4a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10b      	bne.n	8006b48 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b30:	2300      	movs	r3, #0
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	617b      	str	r3, [r7, #20]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	e000      	b.n	8006b4a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3730      	adds	r7, #48	; 0x30
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b74:	b2db      	uxtb	r3, r3
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	370c      	adds	r7, #12
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	4613      	mov	r3, r2
 8006b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b94:	f7fd f8d2 	bl	8003d3c <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	1a9b      	subs	r3, r3, r2
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006ba4:	f7fd f8ca 	bl	8003d3c <HAL_GetTick>
 8006ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006baa:	4b39      	ldr	r3, [pc, #228]	; (8006c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	015b      	lsls	r3, r3, #5
 8006bb0:	0d1b      	lsrs	r3, r3, #20
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bba:	e054      	b.n	8006c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d050      	beq.n	8006c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bc4:	f7fd f8ba 	bl	8003d3c <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d902      	bls.n	8006bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d13d      	bne.n	8006c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bf2:	d111      	bne.n	8006c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfc:	d004      	beq.n	8006c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c06:	d107      	bne.n	8006c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c20:	d10f      	bne.n	8006c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e017      	b.n	8006c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	bf0c      	ite	eq
 8006c76:	2301      	moveq	r3, #1
 8006c78:	2300      	movne	r3, #0
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	79fb      	ldrb	r3, [r7, #7]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d19b      	bne.n	8006bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3720      	adds	r7, #32
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	2000001c 	.word	0x2000001c

08006c94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <SPI_EndRxTxTransaction+0x7c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <SPI_EndRxTxTransaction+0x80>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	0d5b      	lsrs	r3, r3, #21
 8006cac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cb0:	fb02 f303 	mul.w	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cbe:	d112      	bne.n	8006ce6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2180      	movs	r1, #128	; 0x80
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7ff ff5a 	bl	8006b84 <SPI_WaitFlagStateUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d016      	beq.n	8006d04 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cda:	f043 0220 	orr.w	r2, r3, #32
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e00f      	b.n	8006d06 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfc:	2b80      	cmp	r3, #128	; 0x80
 8006cfe:	d0f2      	beq.n	8006ce6 <SPI_EndRxTxTransaction+0x52>
 8006d00:	e000      	b.n	8006d04 <SPI_EndRxTxTransaction+0x70>
        break;
 8006d02:	bf00      	nop
  }

  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	2000001c 	.word	0x2000001c
 8006d14:	165e9f81 	.word	0x165e9f81

08006d18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e041      	b.n	8006dae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d106      	bne.n	8006d44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fc fce4 	bl	800370c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	4610      	mov	r0, r2
 8006d58:	f000 fafe 	bl	8007358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d001      	beq.n	8006dd0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e046      	b.n	8006e5e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a23      	ldr	r2, [pc, #140]	; (8006e6c <HAL_TIM_Base_Start+0xb4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d022      	beq.n	8006e28 <HAL_TIM_Base_Start+0x70>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dea:	d01d      	beq.n	8006e28 <HAL_TIM_Base_Start+0x70>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1f      	ldr	r2, [pc, #124]	; (8006e70 <HAL_TIM_Base_Start+0xb8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d018      	beq.n	8006e28 <HAL_TIM_Base_Start+0x70>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1e      	ldr	r2, [pc, #120]	; (8006e74 <HAL_TIM_Base_Start+0xbc>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d013      	beq.n	8006e28 <HAL_TIM_Base_Start+0x70>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a1c      	ldr	r2, [pc, #112]	; (8006e78 <HAL_TIM_Base_Start+0xc0>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d00e      	beq.n	8006e28 <HAL_TIM_Base_Start+0x70>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a1b      	ldr	r2, [pc, #108]	; (8006e7c <HAL_TIM_Base_Start+0xc4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d009      	beq.n	8006e28 <HAL_TIM_Base_Start+0x70>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a19      	ldr	r2, [pc, #100]	; (8006e80 <HAL_TIM_Base_Start+0xc8>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d004      	beq.n	8006e28 <HAL_TIM_Base_Start+0x70>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <HAL_TIM_Base_Start+0xcc>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d111      	bne.n	8006e4c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b06      	cmp	r3, #6
 8006e38:	d010      	beq.n	8006e5c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f042 0201 	orr.w	r2, r2, #1
 8006e48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4a:	e007      	b.n	8006e5c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0201 	orr.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40010000 	.word	0x40010000
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800
 8006e78:	40000c00 	.word	0x40000c00
 8006e7c:	40010400 	.word	0x40010400
 8006e80:	40014000 	.word	0x40014000
 8006e84:	40001800 	.word	0x40001800

08006e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d001      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e04e      	b.n	8006f3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f042 0201 	orr.w	r2, r2, #1
 8006eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <HAL_TIM_Base_Start_IT+0xc4>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d022      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x80>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eca:	d01d      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x80>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a1f      	ldr	r2, [pc, #124]	; (8006f50 <HAL_TIM_Base_Start_IT+0xc8>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d018      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x80>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a1e      	ldr	r2, [pc, #120]	; (8006f54 <HAL_TIM_Base_Start_IT+0xcc>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d013      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x80>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1c      	ldr	r2, [pc, #112]	; (8006f58 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d00e      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x80>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d009      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x80>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <HAL_TIM_Base_Start_IT+0xd8>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d004      	beq.n	8006f08 <HAL_TIM_Base_Start_IT+0x80>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d111      	bne.n	8006f2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 0307 	and.w	r3, r3, #7
 8006f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b06      	cmp	r3, #6
 8006f18:	d010      	beq.n	8006f3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0201 	orr.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f2a:	e007      	b.n	8006f3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0201 	orr.w	r2, r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	40010000 	.word	0x40010000
 8006f50:	40000400 	.word	0x40000400
 8006f54:	40000800 	.word	0x40000800
 8006f58:	40000c00 	.word	0x40000c00
 8006f5c:	40010400 	.word	0x40010400
 8006f60:	40014000 	.word	0x40014000
 8006f64:	40001800 	.word	0x40001800

08006f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d122      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d11b      	bne.n	8006fc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f06f 0202 	mvn.w	r2, #2
 8006f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d003      	beq.n	8006fb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f9b5 	bl	800731a <HAL_TIM_IC_CaptureCallback>
 8006fb0:	e005      	b.n	8006fbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f9a7 	bl	8007306 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f9b8 	bl	800732e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	f003 0304 	and.w	r3, r3, #4
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	d122      	bne.n	8007018 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b04      	cmp	r3, #4
 8006fde:	d11b      	bne.n	8007018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f06f 0204 	mvn.w	r2, #4
 8006fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 f98b 	bl	800731a <HAL_TIM_IC_CaptureCallback>
 8007004:	e005      	b.n	8007012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f97d 	bl	8007306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f98e 	bl	800732e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f003 0308 	and.w	r3, r3, #8
 8007022:	2b08      	cmp	r3, #8
 8007024:	d122      	bne.n	800706c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b08      	cmp	r3, #8
 8007032:	d11b      	bne.n	800706c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f06f 0208 	mvn.w	r2, #8
 800703c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2204      	movs	r2, #4
 8007042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	69db      	ldr	r3, [r3, #28]
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f961 	bl	800731a <HAL_TIM_IC_CaptureCallback>
 8007058:	e005      	b.n	8007066 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f953 	bl	8007306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f964 	bl	800732e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	f003 0310 	and.w	r3, r3, #16
 8007076:	2b10      	cmp	r3, #16
 8007078:	d122      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b10      	cmp	r3, #16
 8007086:	d11b      	bne.n	80070c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f06f 0210 	mvn.w	r2, #16
 8007090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2208      	movs	r2, #8
 8007096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f937 	bl	800731a <HAL_TIM_IC_CaptureCallback>
 80070ac:	e005      	b.n	80070ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f929 	bl	8007306 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 f93a 	bl	800732e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d10e      	bne.n	80070ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d107      	bne.n	80070ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0201 	mvn.w	r2, #1
 80070e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fc f842 	bl	8003170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f6:	2b80      	cmp	r3, #128	; 0x80
 80070f8:	d10e      	bne.n	8007118 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007104:	2b80      	cmp	r3, #128	; 0x80
 8007106:	d107      	bne.n	8007118 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fae0 	bl	80076d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	2b40      	cmp	r3, #64	; 0x40
 8007124:	d10e      	bne.n	8007144 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007130:	2b40      	cmp	r3, #64	; 0x40
 8007132:	d107      	bne.n	8007144 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800713c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f8ff 	bl	8007342 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b20      	cmp	r3, #32
 8007150:	d10e      	bne.n	8007170 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b20      	cmp	r3, #32
 800715e:	d107      	bne.n	8007170 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f06f 0220 	mvn.w	r2, #32
 8007168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 faaa 	bl	80076c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <HAL_TIM_ConfigClockSource+0x1c>
 8007190:	2302      	movs	r3, #2
 8007192:	e0b4      	b.n	80072fe <HAL_TIM_ConfigClockSource+0x186>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071cc:	d03e      	beq.n	800724c <HAL_TIM_ConfigClockSource+0xd4>
 80071ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071d2:	f200 8087 	bhi.w	80072e4 <HAL_TIM_ConfigClockSource+0x16c>
 80071d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071da:	f000 8086 	beq.w	80072ea <HAL_TIM_ConfigClockSource+0x172>
 80071de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e2:	d87f      	bhi.n	80072e4 <HAL_TIM_ConfigClockSource+0x16c>
 80071e4:	2b70      	cmp	r3, #112	; 0x70
 80071e6:	d01a      	beq.n	800721e <HAL_TIM_ConfigClockSource+0xa6>
 80071e8:	2b70      	cmp	r3, #112	; 0x70
 80071ea:	d87b      	bhi.n	80072e4 <HAL_TIM_ConfigClockSource+0x16c>
 80071ec:	2b60      	cmp	r3, #96	; 0x60
 80071ee:	d050      	beq.n	8007292 <HAL_TIM_ConfigClockSource+0x11a>
 80071f0:	2b60      	cmp	r3, #96	; 0x60
 80071f2:	d877      	bhi.n	80072e4 <HAL_TIM_ConfigClockSource+0x16c>
 80071f4:	2b50      	cmp	r3, #80	; 0x50
 80071f6:	d03c      	beq.n	8007272 <HAL_TIM_ConfigClockSource+0xfa>
 80071f8:	2b50      	cmp	r3, #80	; 0x50
 80071fa:	d873      	bhi.n	80072e4 <HAL_TIM_ConfigClockSource+0x16c>
 80071fc:	2b40      	cmp	r3, #64	; 0x40
 80071fe:	d058      	beq.n	80072b2 <HAL_TIM_ConfigClockSource+0x13a>
 8007200:	2b40      	cmp	r3, #64	; 0x40
 8007202:	d86f      	bhi.n	80072e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007204:	2b30      	cmp	r3, #48	; 0x30
 8007206:	d064      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007208:	2b30      	cmp	r3, #48	; 0x30
 800720a:	d86b      	bhi.n	80072e4 <HAL_TIM_ConfigClockSource+0x16c>
 800720c:	2b20      	cmp	r3, #32
 800720e:	d060      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007210:	2b20      	cmp	r3, #32
 8007212:	d867      	bhi.n	80072e4 <HAL_TIM_ConfigClockSource+0x16c>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d05c      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x15a>
 8007218:	2b10      	cmp	r3, #16
 800721a:	d05a      	beq.n	80072d2 <HAL_TIM_ConfigClockSource+0x15a>
 800721c:	e062      	b.n	80072e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6818      	ldr	r0, [r3, #0]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6899      	ldr	r1, [r3, #8]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f000 f9ad 	bl	800758c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007240:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	609a      	str	r2, [r3, #8]
      break;
 800724a:	e04f      	b.n	80072ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	6899      	ldr	r1, [r3, #8]
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	f000 f996 	bl	800758c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689a      	ldr	r2, [r3, #8]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800726e:	609a      	str	r2, [r3, #8]
      break;
 8007270:	e03c      	b.n	80072ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6818      	ldr	r0, [r3, #0]
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	6859      	ldr	r1, [r3, #4]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	461a      	mov	r2, r3
 8007280:	f000 f90a 	bl	8007498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2150      	movs	r1, #80	; 0x50
 800728a:	4618      	mov	r0, r3
 800728c:	f000 f963 	bl	8007556 <TIM_ITRx_SetConfig>
      break;
 8007290:	e02c      	b.n	80072ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	6859      	ldr	r1, [r3, #4]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	461a      	mov	r2, r3
 80072a0:	f000 f929 	bl	80074f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2160      	movs	r1, #96	; 0x60
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 f953 	bl	8007556 <TIM_ITRx_SetConfig>
      break;
 80072b0:	e01c      	b.n	80072ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	6859      	ldr	r1, [r3, #4]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	461a      	mov	r2, r3
 80072c0:	f000 f8ea 	bl	8007498 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2140      	movs	r1, #64	; 0x40
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 f943 	bl	8007556 <TIM_ITRx_SetConfig>
      break;
 80072d0:	e00c      	b.n	80072ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4619      	mov	r1, r3
 80072dc:	4610      	mov	r0, r2
 80072de:	f000 f93a 	bl	8007556 <TIM_ITRx_SetConfig>
      break;
 80072e2:	e003      	b.n	80072ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	73fb      	strb	r3, [r7, #15]
      break;
 80072e8:	e000      	b.n	80072ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80072ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800730e:	bf00      	nop
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007322:	bf00      	nop
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
	...

08007358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a40      	ldr	r2, [pc, #256]	; (800746c <TIM_Base_SetConfig+0x114>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d013      	beq.n	8007398 <TIM_Base_SetConfig+0x40>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007376:	d00f      	beq.n	8007398 <TIM_Base_SetConfig+0x40>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a3d      	ldr	r2, [pc, #244]	; (8007470 <TIM_Base_SetConfig+0x118>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00b      	beq.n	8007398 <TIM_Base_SetConfig+0x40>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a3c      	ldr	r2, [pc, #240]	; (8007474 <TIM_Base_SetConfig+0x11c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d007      	beq.n	8007398 <TIM_Base_SetConfig+0x40>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a3b      	ldr	r2, [pc, #236]	; (8007478 <TIM_Base_SetConfig+0x120>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d003      	beq.n	8007398 <TIM_Base_SetConfig+0x40>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a3a      	ldr	r2, [pc, #232]	; (800747c <TIM_Base_SetConfig+0x124>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d108      	bne.n	80073aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	4a2f      	ldr	r2, [pc, #188]	; (800746c <TIM_Base_SetConfig+0x114>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d02b      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b8:	d027      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a2c      	ldr	r2, [pc, #176]	; (8007470 <TIM_Base_SetConfig+0x118>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d023      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a2b      	ldr	r2, [pc, #172]	; (8007474 <TIM_Base_SetConfig+0x11c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d01f      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a2a      	ldr	r2, [pc, #168]	; (8007478 <TIM_Base_SetConfig+0x120>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d01b      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a29      	ldr	r2, [pc, #164]	; (800747c <TIM_Base_SetConfig+0x124>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d017      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a28      	ldr	r2, [pc, #160]	; (8007480 <TIM_Base_SetConfig+0x128>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d013      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a27      	ldr	r2, [pc, #156]	; (8007484 <TIM_Base_SetConfig+0x12c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00f      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a26      	ldr	r2, [pc, #152]	; (8007488 <TIM_Base_SetConfig+0x130>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00b      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a25      	ldr	r2, [pc, #148]	; (800748c <TIM_Base_SetConfig+0x134>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d007      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a24      	ldr	r2, [pc, #144]	; (8007490 <TIM_Base_SetConfig+0x138>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d003      	beq.n	800740a <TIM_Base_SetConfig+0xb2>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a23      	ldr	r2, [pc, #140]	; (8007494 <TIM_Base_SetConfig+0x13c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d108      	bne.n	800741c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a0a      	ldr	r2, [pc, #40]	; (800746c <TIM_Base_SetConfig+0x114>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d003      	beq.n	8007450 <TIM_Base_SetConfig+0xf8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a0c      	ldr	r2, [pc, #48]	; (800747c <TIM_Base_SetConfig+0x124>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d103      	bne.n	8007458 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	691a      	ldr	r2, [r3, #16]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	615a      	str	r2, [r3, #20]
}
 800745e:	bf00      	nop
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	40010000 	.word	0x40010000
 8007470:	40000400 	.word	0x40000400
 8007474:	40000800 	.word	0x40000800
 8007478:	40000c00 	.word	0x40000c00
 800747c:	40010400 	.word	0x40010400
 8007480:	40014000 	.word	0x40014000
 8007484:	40014400 	.word	0x40014400
 8007488:	40014800 	.word	0x40014800
 800748c:	40001800 	.word	0x40001800
 8007490:	40001c00 	.word	0x40001c00
 8007494:	40002000 	.word	0x40002000

08007498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007498:	b480      	push	{r7}
 800749a:	b087      	sub	sp, #28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	f023 0201 	bic.w	r2, r3, #1
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	693a      	ldr	r2, [r7, #16]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	f023 030a 	bic.w	r3, r3, #10
 80074d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4313      	orrs	r3, r2
 80074dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b087      	sub	sp, #28
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f023 0210 	bic.w	r2, r3, #16
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a1b      	ldr	r3, [r3, #32]
 8007518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007520:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	031b      	lsls	r3, r3, #12
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4313      	orrs	r3, r2
 800752a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007532:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	621a      	str	r2, [r3, #32]
}
 800754a:	bf00      	nop
 800754c:	371c      	adds	r7, #28
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007556:	b480      	push	{r7}
 8007558:	b085      	sub	sp, #20
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	f043 0307 	orr.w	r3, r3, #7
 8007578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	609a      	str	r2, [r3, #8]
}
 8007580:	bf00      	nop
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	021a      	lsls	r2, r3, #8
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	697a      	ldr	r2, [r7, #20]
 80075be:	609a      	str	r2, [r3, #8]
}
 80075c0:	bf00      	nop
 80075c2:	371c      	adds	r7, #28
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b085      	sub	sp, #20
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d101      	bne.n	80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075e0:	2302      	movs	r3, #2
 80075e2:	e05a      	b.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a21      	ldr	r2, [pc, #132]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d022      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d01d      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d018      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1b      	ldr	r2, [pc, #108]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1a      	ldr	r2, [pc, #104]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00e      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a18      	ldr	r2, [pc, #96]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d009      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a17      	ldr	r2, [pc, #92]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a15      	ldr	r2, [pc, #84]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d10c      	bne.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4313      	orrs	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	40010000 	.word	0x40010000
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800
 80076b4:	40000c00 	.word	0x40000c00
 80076b8:	40010400 	.word	0x40010400
 80076bc:	40014000 	.word	0x40014000
 80076c0:	40001800 	.word	0x40001800

080076c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e03f      	b.n	800777e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fc f83e 	bl	8003794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2224      	movs	r2, #36	; 0x24
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800772e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f843 	bl	80087bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007744:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695a      	ldr	r2, [r3, #20]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007754:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007764:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b08a      	sub	sp, #40	; 0x28
 800778a:	af02      	add	r7, sp, #8
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	603b      	str	r3, [r7, #0]
 8007792:	4613      	mov	r3, r2
 8007794:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d17c      	bne.n	80078a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <HAL_UART_Transmit+0x2c>
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e075      	b.n	80078a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <HAL_UART_Transmit+0x3e>
 80077c0:	2302      	movs	r3, #2
 80077c2:	e06e      	b.n	80078a2 <HAL_UART_Transmit+0x11c>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2221      	movs	r2, #33	; 0x21
 80077d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077da:	f7fc faaf 	bl	8003d3c <HAL_GetTick>
 80077de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	88fa      	ldrh	r2, [r7, #6]
 80077e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	88fa      	ldrh	r2, [r7, #6]
 80077ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f4:	d108      	bne.n	8007808 <HAL_UART_Transmit+0x82>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d104      	bne.n	8007808 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	61bb      	str	r3, [r7, #24]
 8007806:	e003      	b.n	8007810 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800780c:	2300      	movs	r3, #0
 800780e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007818:	e02a      	b.n	8007870 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2200      	movs	r2, #0
 8007822:	2180      	movs	r1, #128	; 0x80
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 fcfa 	bl	800821e <UART_WaitOnFlagUntilTimeout>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e036      	b.n	80078a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10b      	bne.n	8007852 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	3302      	adds	r3, #2
 800784e:	61bb      	str	r3, [r7, #24]
 8007850:	e007      	b.n	8007862 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	781a      	ldrb	r2, [r3, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	3301      	adds	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007874:	b29b      	uxth	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	d1cf      	bne.n	800781a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2200      	movs	r2, #0
 8007882:	2140      	movs	r1, #64	; 0x40
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f000 fcca 	bl	800821e <UART_WaitOnFlagUntilTimeout>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e006      	b.n	80078a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	e000      	b.n	80078a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80078a0:	2302      	movs	r3, #2
  }
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3720      	adds	r7, #32
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
	...

080078ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08c      	sub	sp, #48	; 0x30
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	4613      	mov	r3, r2
 80078b8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b20      	cmp	r3, #32
 80078c4:	d165      	bne.n	8007992 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <HAL_UART_Transmit_DMA+0x26>
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e05e      	b.n	8007994 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_UART_Transmit_DMA+0x38>
 80078e0:	2302      	movs	r3, #2
 80078e2:	e057      	b.n	8007994 <HAL_UART_Transmit_DMA+0xe8>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	88fa      	ldrh	r2, [r7, #6]
 80078f6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	88fa      	ldrh	r2, [r7, #6]
 80078fc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2221      	movs	r2, #33	; 0x21
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007910:	4a22      	ldr	r2, [pc, #136]	; (800799c <HAL_UART_Transmit_DMA+0xf0>)
 8007912:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007918:	4a21      	ldr	r2, [pc, #132]	; (80079a0 <HAL_UART_Transmit_DMA+0xf4>)
 800791a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007920:	4a20      	ldr	r2, [pc, #128]	; (80079a4 <HAL_UART_Transmit_DMA+0xf8>)
 8007922:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007928:	2200      	movs	r2, #0
 800792a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800792c:	f107 0308 	add.w	r3, r7, #8
 8007930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007938:	6819      	ldr	r1, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3304      	adds	r3, #4
 8007940:	461a      	mov	r2, r3
 8007942:	88fb      	ldrh	r3, [r7, #6]
 8007944:	f7fd fa8c 	bl	8004e60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007950:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3314      	adds	r3, #20
 8007960:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	617b      	str	r3, [r7, #20]
   return(result);
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007970:	62bb      	str	r3, [r7, #40]	; 0x28
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3314      	adds	r3, #20
 8007978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800797a:	627a      	str	r2, [r7, #36]	; 0x24
 800797c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6a39      	ldr	r1, [r7, #32]
 8007980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	61fb      	str	r3, [r7, #28]
   return(result);
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e5      	bne.n	800795a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	e000      	b.n	8007994 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007992:	2302      	movs	r3, #2
  }
}
 8007994:	4618      	mov	r0, r3
 8007996:	3730      	adds	r7, #48	; 0x30
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	08007f79 	.word	0x08007f79
 80079a0:	08008013 	.word	0x08008013
 80079a4:	0800818b 	.word	0x0800818b

080079a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b20      	cmp	r3, #32
 80079c0:	d11d      	bne.n	80079fe <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <HAL_UART_Receive_DMA+0x26>
 80079c8:	88fb      	ldrh	r3, [r7, #6]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d101      	bne.n	80079d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e016      	b.n	8007a00 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_UART_Receive_DMA+0x38>
 80079dc:	2302      	movs	r3, #2
 80079de:	e00f      	b.n	8007a00 <HAL_UART_Receive_DMA+0x58>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80079ee:	88fb      	ldrh	r3, [r7, #6]
 80079f0:	461a      	mov	r2, r3
 80079f2:	68b9      	ldr	r1, [r7, #8]
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 fc81 	bl	80082fc <UART_Start_Receive_DMA>
 80079fa:	4603      	mov	r3, r0
 80079fc:	e000      	b.n	8007a00 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079fe:	2302      	movs	r3, #2
  }
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b0ba      	sub	sp, #232	; 0xe8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007a34:	2300      	movs	r3, #0
 8007a36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10f      	bne.n	8007a6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a52:	f003 0320 	and.w	r3, r3, #32
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <HAL_UART_IRQHandler+0x66>
 8007a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fded 	bl	8008646 <UART_Receive_IT>
      return;
 8007a6c:	e256      	b.n	8007f1c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f000 80de 	beq.w	8007c34 <HAL_UART_IRQHandler+0x22c>
 8007a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d106      	bne.n	8007a92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f000 80d1 	beq.w	8007c34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00b      	beq.n	8007ab6 <HAL_UART_IRQHandler+0xae>
 8007a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d005      	beq.n	8007ab6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	f043 0201 	orr.w	r2, r3, #1
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d00b      	beq.n	8007ada <HAL_UART_IRQHandler+0xd2>
 8007ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac6:	f003 0301 	and.w	r3, r3, #1
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d005      	beq.n	8007ada <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad2:	f043 0202 	orr.w	r2, r3, #2
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00b      	beq.n	8007afe <HAL_UART_IRQHandler+0xf6>
 8007ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d005      	beq.n	8007afe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f043 0204 	orr.w	r2, r3, #4
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b02:	f003 0308 	and.w	r3, r3, #8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d011      	beq.n	8007b2e <HAL_UART_IRQHandler+0x126>
 8007b0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d105      	bne.n	8007b22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b26:	f043 0208 	orr.w	r2, r3, #8
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 81ed 	beq.w	8007f12 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d008      	beq.n	8007b56 <HAL_UART_IRQHandler+0x14e>
 8007b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b48:	f003 0320 	and.w	r3, r3, #32
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fd78 	bl	8008646 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b60:	2b40      	cmp	r3, #64	; 0x40
 8007b62:	bf0c      	ite	eq
 8007b64:	2301      	moveq	r3, #1
 8007b66:	2300      	movne	r3, #0
 8007b68:	b2db      	uxtb	r3, r3
 8007b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	f003 0308 	and.w	r3, r3, #8
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d103      	bne.n	8007b82 <HAL_UART_IRQHandler+0x17a>
 8007b7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d04f      	beq.n	8007c22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fc80 	bl	8008488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b92:	2b40      	cmp	r3, #64	; 0x40
 8007b94:	d141      	bne.n	8007c1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3314      	adds	r3, #20
 8007b9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007ba4:	e853 3f00 	ldrex	r3, [r3]
 8007ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3314      	adds	r3, #20
 8007bbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bd2:	e841 2300 	strex	r3, r2, [r1]
 8007bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1d9      	bne.n	8007b96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d013      	beq.n	8007c12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	4a7d      	ldr	r2, [pc, #500]	; (8007de4 <HAL_UART_IRQHandler+0x3dc>)
 8007bf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7fd f9fa 	bl	8004ff0 <HAL_DMA_Abort_IT>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d016      	beq.n	8007c30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	e00e      	b.n	8007c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f99a 	bl	8007f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c18:	e00a      	b.n	8007c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f996 	bl	8007f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c20:	e006      	b.n	8007c30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f992 	bl	8007f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c2e:	e170      	b.n	8007f12 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c30:	bf00      	nop
    return;
 8007c32:	e16e      	b.n	8007f12 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	f040 814a 	bne.w	8007ed2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c42:	f003 0310 	and.w	r3, r3, #16
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 8143 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c50:	f003 0310 	and.w	r3, r3, #16
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 813c 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	60bb      	str	r3, [r7, #8]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	60bb      	str	r3, [r7, #8]
 8007c6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	f040 80b4 	bne.w	8007de8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f000 8140 	beq.w	8007f16 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	f080 8139 	bcs.w	8007f16 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007caa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cb6:	f000 8088 	beq.w	8007dca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	330c      	adds	r3, #12
 8007cc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	330c      	adds	r3, #12
 8007ce2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1d9      	bne.n	8007cba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3314      	adds	r3, #20
 8007d0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d18:	f023 0301 	bic.w	r3, r3, #1
 8007d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3314      	adds	r3, #20
 8007d26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d36:	e841 2300 	strex	r3, r2, [r1]
 8007d3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1e1      	bne.n	8007d06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3314      	adds	r3, #20
 8007d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3314      	adds	r3, #20
 8007d62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e3      	bne.n	8007d42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2220      	movs	r2, #32
 8007d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d9a:	f023 0310 	bic.w	r3, r3, #16
 8007d9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	330c      	adds	r3, #12
 8007da8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007dac:	65ba      	str	r2, [r7, #88]	; 0x58
 8007dae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007db2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e3      	bne.n	8007d88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd f8a3 	bl	8004f10 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f8c0 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007de0:	e099      	b.n	8007f16 <HAL_UART_IRQHandler+0x50e>
 8007de2:	bf00      	nop
 8007de4:	0800854f 	.word	0x0800854f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 808b 	beq.w	8007f1a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 8086 	beq.w	8007f1a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	330c      	adds	r3, #12
 8007e14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	330c      	adds	r3, #12
 8007e2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007e32:	647a      	str	r2, [r7, #68]	; 0x44
 8007e34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e3a:	e841 2300 	strex	r3, r2, [r1]
 8007e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1e3      	bne.n	8007e0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3314      	adds	r3, #20
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	623b      	str	r3, [r7, #32]
   return(result);
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	f023 0301 	bic.w	r3, r3, #1
 8007e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3314      	adds	r3, #20
 8007e66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e6a:	633a      	str	r2, [r7, #48]	; 0x30
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e3      	bne.n	8007e46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	330c      	adds	r3, #12
 8007e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	e853 3f00 	ldrex	r3, [r3]
 8007e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f023 0310 	bic.w	r3, r3, #16
 8007ea2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	330c      	adds	r3, #12
 8007eac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007eb0:	61fa      	str	r2, [r7, #28]
 8007eb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	69b9      	ldr	r1, [r7, #24]
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	e841 2300 	strex	r3, r2, [r1]
 8007ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d1e3      	bne.n	8007e8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ec4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ec8:	4619      	mov	r1, r3
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f848 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ed0:	e023      	b.n	8007f1a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d009      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x4ea>
 8007ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fb43 	bl	8008576 <UART_Transmit_IT>
    return;
 8007ef0:	e014      	b.n	8007f1c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d00e      	beq.n	8007f1c <HAL_UART_IRQHandler+0x514>
 8007efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d008      	beq.n	8007f1c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fb83 	bl	8008616 <UART_EndTransmit_IT>
    return;
 8007f10:	e004      	b.n	8007f1c <HAL_UART_IRQHandler+0x514>
    return;
 8007f12:	bf00      	nop
 8007f14:	e002      	b.n	8007f1c <HAL_UART_IRQHandler+0x514>
      return;
 8007f16:	bf00      	nop
 8007f18:	e000      	b.n	8007f1c <HAL_UART_IRQHandler+0x514>
      return;
 8007f1a:	bf00      	nop
  }
}
 8007f1c:	37e8      	adds	r7, #232	; 0xe8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop

08007f24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f40:	bf00      	nop
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b083      	sub	sp, #12
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b090      	sub	sp, #64	; 0x40
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d137      	bne.n	8008004 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f96:	2200      	movs	r2, #0
 8007f98:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	3314      	adds	r3, #20
 8007fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	e853 3f00 	ldrex	r3, [r3]
 8007fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3314      	adds	r3, #20
 8007fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fba:	633a      	str	r2, [r7, #48]	; 0x30
 8007fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fc2:	e841 2300 	strex	r3, r2, [r1]
 8007fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1e5      	bne.n	8007f9a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	330c      	adds	r3, #12
 8007fd4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fe4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	330c      	adds	r3, #12
 8007fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fee:	61fa      	str	r2, [r7, #28]
 8007ff0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	69b9      	ldr	r1, [r7, #24]
 8007ff4:	69fa      	ldr	r2, [r7, #28]
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	617b      	str	r3, [r7, #20]
   return(result);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e5      	bne.n	8007fce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008002:	e002      	b.n	800800a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008004:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008006:	f7fa f86d 	bl	80020e4 <HAL_UART_TxCpltCallback>
}
 800800a:	bf00      	nop
 800800c:	3740      	adds	r7, #64	; 0x40
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b084      	sub	sp, #16
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff ff7f 	bl	8007f24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008026:	bf00      	nop
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b09c      	sub	sp, #112	; 0x70
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008046:	2b00      	cmp	r3, #0
 8008048:	d172      	bne.n	8008130 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800804a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804c:	2200      	movs	r2, #0
 800804e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008066:	66bb      	str	r3, [r7, #104]	; 0x68
 8008068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008070:	65ba      	str	r2, [r7, #88]	; 0x58
 8008072:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800807e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e5      	bne.n	8008050 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3314      	adds	r3, #20
 800808a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008096:	f023 0301 	bic.w	r3, r3, #1
 800809a:	667b      	str	r3, [r7, #100]	; 0x64
 800809c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	3314      	adds	r3, #20
 80080a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80080a4:	647a      	str	r2, [r7, #68]	; 0x44
 80080a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080ac:	e841 2300 	strex	r3, r2, [r1]
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e5      	bne.n	8008084 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3314      	adds	r3, #20
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	623b      	str	r3, [r7, #32]
   return(result);
 80080c8:	6a3b      	ldr	r3, [r7, #32]
 80080ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080ce:	663b      	str	r3, [r7, #96]	; 0x60
 80080d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3314      	adds	r3, #20
 80080d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80080d8:	633a      	str	r2, [r7, #48]	; 0x30
 80080da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e5      	bne.n	80080b8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ee:	2220      	movs	r2, #32
 80080f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d119      	bne.n	8008130 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	330c      	adds	r3, #12
 8008102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	e853 3f00 	ldrex	r3, [r3]
 800810a:	60fb      	str	r3, [r7, #12]
   return(result);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0310 	bic.w	r3, r3, #16
 8008112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800811c:	61fa      	str	r2, [r7, #28]
 800811e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	69b9      	ldr	r1, [r7, #24]
 8008122:	69fa      	ldr	r2, [r7, #28]
 8008124:	e841 2300 	strex	r3, r2, [r1]
 8008128:	617b      	str	r3, [r7, #20]
   return(result);
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e5      	bne.n	80080fc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008134:	2b01      	cmp	r3, #1
 8008136:	d106      	bne.n	8008146 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800813c:	4619      	mov	r1, r3
 800813e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008140:	f7ff ff0e 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008144:	e002      	b.n	800814c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008146:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008148:	f7f9 ffd6 	bl	80020f8 <HAL_UART_RxCpltCallback>
}
 800814c:	bf00      	nop
 800814e:	3770      	adds	r7, #112	; 0x70
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008166:	2b01      	cmp	r3, #1
 8008168:	d108      	bne.n	800817c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800816e:	085b      	lsrs	r3, r3, #1
 8008170:	b29b      	uxth	r3, r3
 8008172:	4619      	mov	r1, r3
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f7ff fef3 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800817a:	e002      	b.n	8008182 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7ff fedb 	bl	8007f38 <HAL_UART_RxHalfCpltCallback>
}
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008192:	2300      	movs	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a6:	2b80      	cmp	r3, #128	; 0x80
 80081a8:	bf0c      	ite	eq
 80081aa:	2301      	moveq	r3, #1
 80081ac:	2300      	movne	r3, #0
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	2b21      	cmp	r3, #33	; 0x21
 80081bc:	d108      	bne.n	80081d0 <UART_DMAError+0x46>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d005      	beq.n	80081d0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80081ca:	68b8      	ldr	r0, [r7, #8]
 80081cc:	f000 f934 	bl	8008438 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	695b      	ldr	r3, [r3, #20]
 80081d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081da:	2b40      	cmp	r3, #64	; 0x40
 80081dc:	bf0c      	ite	eq
 80081de:	2301      	moveq	r3, #1
 80081e0:	2300      	movne	r3, #0
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b22      	cmp	r3, #34	; 0x22
 80081f0:	d108      	bne.n	8008204 <UART_DMAError+0x7a>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d005      	beq.n	8008204 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2200      	movs	r2, #0
 80081fc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80081fe:	68b8      	ldr	r0, [r7, #8]
 8008200:	f000 f942 	bl	8008488 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	f043 0210 	orr.w	r2, r3, #16
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008210:	68b8      	ldr	r0, [r7, #8]
 8008212:	f7ff fe9b 	bl	8007f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008216:	bf00      	nop
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b090      	sub	sp, #64	; 0x40
 8008222:	af00      	add	r7, sp, #0
 8008224:	60f8      	str	r0, [r7, #12]
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	603b      	str	r3, [r7, #0]
 800822a:	4613      	mov	r3, r2
 800822c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800822e:	e050      	b.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008236:	d04c      	beq.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800823a:	2b00      	cmp	r3, #0
 800823c:	d007      	beq.n	800824e <UART_WaitOnFlagUntilTimeout+0x30>
 800823e:	f7fb fd7d 	bl	8003d3c <HAL_GetTick>
 8008242:	4602      	mov	r2, r0
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	1ad3      	subs	r3, r2, r3
 8008248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800824a:	429a      	cmp	r2, r3
 800824c:	d241      	bcs.n	80082d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	330c      	adds	r3, #12
 8008254:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	330c      	adds	r3, #12
 800826c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800826e:	637a      	str	r2, [r7, #52]	; 0x34
 8008270:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800827c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e5      	bne.n	800824e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3314      	adds	r3, #20
 8008288:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	613b      	str	r3, [r7, #16]
   return(result);
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f023 0301 	bic.w	r3, r3, #1
 8008298:	63bb      	str	r3, [r7, #56]	; 0x38
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3314      	adds	r3, #20
 80082a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082a2:	623a      	str	r2, [r7, #32]
 80082a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	69f9      	ldr	r1, [r7, #28]
 80082a8:	6a3a      	ldr	r2, [r7, #32]
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e5      	bne.n	8008282 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2220      	movs	r2, #32
 80082ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2220      	movs	r2, #32
 80082c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80082ce:	2303      	movs	r3, #3
 80082d0:	e00f      	b.n	80082f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4013      	ands	r3, r2
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	429a      	cmp	r2, r3
 80082e0:	bf0c      	ite	eq
 80082e2:	2301      	moveq	r3, #1
 80082e4:	2300      	movne	r3, #0
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	461a      	mov	r2, r3
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d09f      	beq.n	8008230 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3740      	adds	r7, #64	; 0x40
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b098      	sub	sp, #96	; 0x60
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	4613      	mov	r3, r2
 8008308:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	88fa      	ldrh	r2, [r7, #6]
 8008314:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2222      	movs	r2, #34	; 0x22
 8008320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008328:	4a40      	ldr	r2, [pc, #256]	; (800842c <UART_Start_Receive_DMA+0x130>)
 800832a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008330:	4a3f      	ldr	r2, [pc, #252]	; (8008430 <UART_Start_Receive_DMA+0x134>)
 8008332:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	4a3e      	ldr	r2, [pc, #248]	; (8008434 <UART_Start_Receive_DMA+0x138>)
 800833a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	2200      	movs	r2, #0
 8008342:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008344:	f107 0308 	add.w	r3, r7, #8
 8008348:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3304      	adds	r3, #4
 8008354:	4619      	mov	r1, r3
 8008356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	f7fc fd80 	bl	8004e60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008360:	2300      	movs	r3, #0
 8008362:	613b      	str	r3, [r7, #16]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d019      	beq.n	80083ba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	330c      	adds	r3, #12
 800838c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800839c:	65bb      	str	r3, [r7, #88]	; 0x58
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	330c      	adds	r3, #12
 80083a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80083a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80083ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80083b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e5      	bne.n	8008386 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3314      	adds	r3, #20
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083cc:	f043 0301 	orr.w	r3, r3, #1
 80083d0:	657b      	str	r3, [r7, #84]	; 0x54
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3314      	adds	r3, #20
 80083d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083da:	63ba      	str	r2, [r7, #56]	; 0x38
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e5      	bne.n	80083ba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3314      	adds	r3, #20
 80083f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	617b      	str	r3, [r7, #20]
   return(result);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008404:	653b      	str	r3, [r7, #80]	; 0x50
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3314      	adds	r3, #20
 800840c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800840e:	627a      	str	r2, [r7, #36]	; 0x24
 8008410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6a39      	ldr	r1, [r7, #32]
 8008414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	61fb      	str	r3, [r7, #28]
   return(result);
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e5      	bne.n	80083ee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3760      	adds	r7, #96	; 0x60
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}
 800842c:	0800802f 	.word	0x0800802f
 8008430:	08008155 	.word	0x08008155
 8008434:	0800818b 	.word	0x0800818b

08008438 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008438:	b480      	push	{r7}
 800843a:	b089      	sub	sp, #36	; 0x24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	330c      	adds	r3, #12
 8008446:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	e853 3f00 	ldrex	r3, [r3]
 800844e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008456:	61fb      	str	r3, [r7, #28]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	330c      	adds	r3, #12
 800845e:	69fa      	ldr	r2, [r7, #28]
 8008460:	61ba      	str	r2, [r7, #24]
 8008462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008464:	6979      	ldr	r1, [r7, #20]
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	e841 2300 	strex	r3, r2, [r1]
 800846c:	613b      	str	r3, [r7, #16]
   return(result);
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d1e5      	bne.n	8008440 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2220      	movs	r2, #32
 8008478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800847c:	bf00      	nop
 800847e:	3724      	adds	r7, #36	; 0x24
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b095      	sub	sp, #84	; 0x54
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	330c      	adds	r3, #12
 8008496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084b0:	643a      	str	r2, [r7, #64]	; 0x40
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e5      	bne.n	8008490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3314      	adds	r3, #20
 80084ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	64bb      	str	r3, [r7, #72]	; 0x48
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3314      	adds	r3, #20
 80084e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e5      	bne.n	80084c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d119      	bne.n	8008534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	330c      	adds	r3, #12
 8008506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f023 0310 	bic.w	r3, r3, #16
 8008516:	647b      	str	r3, [r7, #68]	; 0x44
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	330c      	adds	r3, #12
 800851e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008520:	61ba      	str	r2, [r7, #24]
 8008522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6979      	ldr	r1, [r7, #20]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	613b      	str	r3, [r7, #16]
   return(result);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e5      	bne.n	8008500 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008542:	bf00      	nop
 8008544:	3754      	adds	r7, #84	; 0x54
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff fcef 	bl	8007f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b21      	cmp	r3, #33	; 0x21
 8008588:	d13e      	bne.n	8008608 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008592:	d114      	bne.n	80085be <UART_Transmit_IT+0x48>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d110      	bne.n	80085be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	1c9a      	adds	r2, r3, #2
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	621a      	str	r2, [r3, #32]
 80085bc:	e008      	b.n	80085d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	1c59      	adds	r1, r3, #1
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	6211      	str	r1, [r2, #32]
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3b01      	subs	r3, #1
 80085d8:	b29b      	uxth	r3, r3
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	4619      	mov	r1, r3
 80085de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10f      	bne.n	8008604 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008602:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	e000      	b.n	800860a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008608:	2302      	movs	r3, #2
  }
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800862c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7f9 fd54 	bl	80020e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b08c      	sub	sp, #48	; 0x30
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b22      	cmp	r3, #34	; 0x22
 8008658:	f040 80ab 	bne.w	80087b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008664:	d117      	bne.n	8008696 <UART_Receive_IT+0x50>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d113      	bne.n	8008696 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008676:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008684:	b29a      	uxth	r2, r3
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	1c9a      	adds	r2, r3, #2
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	629a      	str	r2, [r3, #40]	; 0x28
 8008694:	e026      	b.n	80086e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800869c:	2300      	movs	r3, #0
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a8:	d007      	beq.n	80086ba <UART_Receive_IT+0x74>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <UART_Receive_IT+0x82>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d106      	bne.n	80086c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e008      	b.n	80086da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	4619      	mov	r1, r3
 80086f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d15a      	bne.n	80087ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0220 	bic.w	r2, r2, #32
 8008706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695a      	ldr	r2, [r3, #20]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0201 	bic.w	r2, r2, #1
 8008726:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008734:	2b01      	cmp	r3, #1
 8008736:	d135      	bne.n	80087a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	330c      	adds	r3, #12
 8008744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	613b      	str	r3, [r7, #16]
   return(result);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f023 0310 	bic.w	r3, r3, #16
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	330c      	adds	r3, #12
 800875c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875e:	623a      	str	r2, [r7, #32]
 8008760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	69f9      	ldr	r1, [r7, #28]
 8008764:	6a3a      	ldr	r2, [r7, #32]
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	61bb      	str	r3, [r7, #24]
   return(result);
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e5      	bne.n	800873e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0310 	and.w	r3, r3, #16
 800877c:	2b10      	cmp	r3, #16
 800877e:	d10a      	bne.n	8008796 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff fbdf 	bl	8007f60 <HAL_UARTEx_RxEventCallback>
 80087a2:	e002      	b.n	80087aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7f9 fca7 	bl	80020f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	e002      	b.n	80087b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	e000      	b.n	80087b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80087b2:	2302      	movs	r3, #2
  }
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3730      	adds	r7, #48	; 0x30
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087c0:	b0c0      	sub	sp, #256	; 0x100
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d8:	68d9      	ldr	r1, [r3, #12]
 80087da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	ea40 0301 	orr.w	r3, r0, r1
 80087e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	431a      	orrs	r2, r3
 80087fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	4313      	orrs	r3, r2
 8008804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008814:	f021 010c 	bic.w	r1, r1, #12
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008822:	430b      	orrs	r3, r1
 8008824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008836:	6999      	ldr	r1, [r3, #24]
 8008838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	ea40 0301 	orr.w	r3, r0, r1
 8008842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4b8f      	ldr	r3, [pc, #572]	; (8008a88 <UART_SetConfig+0x2cc>)
 800884c:	429a      	cmp	r2, r3
 800884e:	d005      	beq.n	800885c <UART_SetConfig+0xa0>
 8008850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	4b8d      	ldr	r3, [pc, #564]	; (8008a8c <UART_SetConfig+0x2d0>)
 8008858:	429a      	cmp	r2, r3
 800885a:	d104      	bne.n	8008866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800885c:	f7fd f908 	bl	8005a70 <HAL_RCC_GetPCLK2Freq>
 8008860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008864:	e003      	b.n	800886e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008866:	f7fd f8ef 	bl	8005a48 <HAL_RCC_GetPCLK1Freq>
 800886a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800886e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008878:	f040 810c 	bne.w	8008a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800887c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008880:	2200      	movs	r2, #0
 8008882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800888a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800888e:	4622      	mov	r2, r4
 8008890:	462b      	mov	r3, r5
 8008892:	1891      	adds	r1, r2, r2
 8008894:	65b9      	str	r1, [r7, #88]	; 0x58
 8008896:	415b      	adcs	r3, r3
 8008898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800889a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800889e:	4621      	mov	r1, r4
 80088a0:	eb12 0801 	adds.w	r8, r2, r1
 80088a4:	4629      	mov	r1, r5
 80088a6:	eb43 0901 	adc.w	r9, r3, r1
 80088aa:	f04f 0200 	mov.w	r2, #0
 80088ae:	f04f 0300 	mov.w	r3, #0
 80088b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088be:	4690      	mov	r8, r2
 80088c0:	4699      	mov	r9, r3
 80088c2:	4623      	mov	r3, r4
 80088c4:	eb18 0303 	adds.w	r3, r8, r3
 80088c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088cc:	462b      	mov	r3, r5
 80088ce:	eb49 0303 	adc.w	r3, r9, r3
 80088d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80088e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80088ea:	460b      	mov	r3, r1
 80088ec:	18db      	adds	r3, r3, r3
 80088ee:	653b      	str	r3, [r7, #80]	; 0x50
 80088f0:	4613      	mov	r3, r2
 80088f2:	eb42 0303 	adc.w	r3, r2, r3
 80088f6:	657b      	str	r3, [r7, #84]	; 0x54
 80088f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008900:	f7f8 fb3c 	bl	8000f7c <__aeabi_uldivmod>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4b61      	ldr	r3, [pc, #388]	; (8008a90 <UART_SetConfig+0x2d4>)
 800890a:	fba3 2302 	umull	r2, r3, r3, r2
 800890e:	095b      	lsrs	r3, r3, #5
 8008910:	011c      	lsls	r4, r3, #4
 8008912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008916:	2200      	movs	r2, #0
 8008918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800891c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008924:	4642      	mov	r2, r8
 8008926:	464b      	mov	r3, r9
 8008928:	1891      	adds	r1, r2, r2
 800892a:	64b9      	str	r1, [r7, #72]	; 0x48
 800892c:	415b      	adcs	r3, r3
 800892e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008934:	4641      	mov	r1, r8
 8008936:	eb12 0a01 	adds.w	sl, r2, r1
 800893a:	4649      	mov	r1, r9
 800893c:	eb43 0b01 	adc.w	fp, r3, r1
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800894c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008954:	4692      	mov	sl, r2
 8008956:	469b      	mov	fp, r3
 8008958:	4643      	mov	r3, r8
 800895a:	eb1a 0303 	adds.w	r3, sl, r3
 800895e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008962:	464b      	mov	r3, r9
 8008964:	eb4b 0303 	adc.w	r3, fp, r3
 8008968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800896c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800897c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008980:	460b      	mov	r3, r1
 8008982:	18db      	adds	r3, r3, r3
 8008984:	643b      	str	r3, [r7, #64]	; 0x40
 8008986:	4613      	mov	r3, r2
 8008988:	eb42 0303 	adc.w	r3, r2, r3
 800898c:	647b      	str	r3, [r7, #68]	; 0x44
 800898e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008996:	f7f8 faf1 	bl	8000f7c <__aeabi_uldivmod>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	4b3b      	ldr	r3, [pc, #236]	; (8008a90 <UART_SetConfig+0x2d4>)
 80089a2:	fba3 2301 	umull	r2, r3, r3, r1
 80089a6:	095b      	lsrs	r3, r3, #5
 80089a8:	2264      	movs	r2, #100	; 0x64
 80089aa:	fb02 f303 	mul.w	r3, r2, r3
 80089ae:	1acb      	subs	r3, r1, r3
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80089b6:	4b36      	ldr	r3, [pc, #216]	; (8008a90 <UART_SetConfig+0x2d4>)
 80089b8:	fba3 2302 	umull	r2, r3, r3, r2
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089c4:	441c      	add	r4, r3
 80089c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80089d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80089d8:	4642      	mov	r2, r8
 80089da:	464b      	mov	r3, r9
 80089dc:	1891      	adds	r1, r2, r2
 80089de:	63b9      	str	r1, [r7, #56]	; 0x38
 80089e0:	415b      	adcs	r3, r3
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089e8:	4641      	mov	r1, r8
 80089ea:	1851      	adds	r1, r2, r1
 80089ec:	6339      	str	r1, [r7, #48]	; 0x30
 80089ee:	4649      	mov	r1, r9
 80089f0:	414b      	adcs	r3, r1
 80089f2:	637b      	str	r3, [r7, #52]	; 0x34
 80089f4:	f04f 0200 	mov.w	r2, #0
 80089f8:	f04f 0300 	mov.w	r3, #0
 80089fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a00:	4659      	mov	r1, fp
 8008a02:	00cb      	lsls	r3, r1, #3
 8008a04:	4651      	mov	r1, sl
 8008a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a0a:	4651      	mov	r1, sl
 8008a0c:	00ca      	lsls	r2, r1, #3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4619      	mov	r1, r3
 8008a12:	4603      	mov	r3, r0
 8008a14:	4642      	mov	r2, r8
 8008a16:	189b      	adds	r3, r3, r2
 8008a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	460a      	mov	r2, r1
 8008a20:	eb42 0303 	adc.w	r3, r2, r3
 8008a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	18db      	adds	r3, r3, r3
 8008a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a42:	4613      	mov	r3, r2
 8008a44:	eb42 0303 	adc.w	r3, r2, r3
 8008a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a52:	f7f8 fa93 	bl	8000f7c <__aeabi_uldivmod>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <UART_SetConfig+0x2d4>)
 8008a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	2164      	movs	r1, #100	; 0x64
 8008a64:	fb01 f303 	mul.w	r3, r1, r3
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	3332      	adds	r3, #50	; 0x32
 8008a6e:	4a08      	ldr	r2, [pc, #32]	; (8008a90 <UART_SetConfig+0x2d4>)
 8008a70:	fba2 2303 	umull	r2, r3, r2, r3
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	f003 0207 	and.w	r2, r3, #7
 8008a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4422      	add	r2, r4
 8008a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a84:	e105      	b.n	8008c92 <UART_SetConfig+0x4d6>
 8008a86:	bf00      	nop
 8008a88:	40011000 	.word	0x40011000
 8008a8c:	40011400 	.word	0x40011400
 8008a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008aa6:	4642      	mov	r2, r8
 8008aa8:	464b      	mov	r3, r9
 8008aaa:	1891      	adds	r1, r2, r2
 8008aac:	6239      	str	r1, [r7, #32]
 8008aae:	415b      	adcs	r3, r3
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ab6:	4641      	mov	r1, r8
 8008ab8:	1854      	adds	r4, r2, r1
 8008aba:	4649      	mov	r1, r9
 8008abc:	eb43 0501 	adc.w	r5, r3, r1
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	00eb      	lsls	r3, r5, #3
 8008aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ace:	00e2      	lsls	r2, r4, #3
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	461d      	mov	r5, r3
 8008ad4:	4643      	mov	r3, r8
 8008ad6:	18e3      	adds	r3, r4, r3
 8008ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008adc:	464b      	mov	r3, r9
 8008ade:	eb45 0303 	adc.w	r3, r5, r3
 8008ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b02:	4629      	mov	r1, r5
 8008b04:	008b      	lsls	r3, r1, #2
 8008b06:	4621      	mov	r1, r4
 8008b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	008a      	lsls	r2, r1, #2
 8008b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008b14:	f7f8 fa32 	bl	8000f7c <__aeabi_uldivmod>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4b60      	ldr	r3, [pc, #384]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b22:	095b      	lsrs	r3, r3, #5
 8008b24:	011c      	lsls	r4, r3, #4
 8008b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b38:	4642      	mov	r2, r8
 8008b3a:	464b      	mov	r3, r9
 8008b3c:	1891      	adds	r1, r2, r2
 8008b3e:	61b9      	str	r1, [r7, #24]
 8008b40:	415b      	adcs	r3, r3
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b48:	4641      	mov	r1, r8
 8008b4a:	1851      	adds	r1, r2, r1
 8008b4c:	6139      	str	r1, [r7, #16]
 8008b4e:	4649      	mov	r1, r9
 8008b50:	414b      	adcs	r3, r1
 8008b52:	617b      	str	r3, [r7, #20]
 8008b54:	f04f 0200 	mov.w	r2, #0
 8008b58:	f04f 0300 	mov.w	r3, #0
 8008b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b60:	4659      	mov	r1, fp
 8008b62:	00cb      	lsls	r3, r1, #3
 8008b64:	4651      	mov	r1, sl
 8008b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b6a:	4651      	mov	r1, sl
 8008b6c:	00ca      	lsls	r2, r1, #3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	4619      	mov	r1, r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	4642      	mov	r2, r8
 8008b76:	189b      	adds	r3, r3, r2
 8008b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b7c:	464b      	mov	r3, r9
 8008b7e:	460a      	mov	r2, r1
 8008b80:	eb42 0303 	adc.w	r3, r2, r3
 8008b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b94:	f04f 0200 	mov.w	r2, #0
 8008b98:	f04f 0300 	mov.w	r3, #0
 8008b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	008b      	lsls	r3, r1, #2
 8008ba4:	4641      	mov	r1, r8
 8008ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008baa:	4641      	mov	r1, r8
 8008bac:	008a      	lsls	r2, r1, #2
 8008bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008bb2:	f7f8 f9e3 	bl	8000f7c <__aeabi_uldivmod>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4b39      	ldr	r3, [pc, #228]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	2164      	movs	r1, #100	; 0x64
 8008bc4:	fb01 f303 	mul.w	r3, r1, r3
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	3332      	adds	r3, #50	; 0x32
 8008bce:	4a34      	ldr	r2, [pc, #208]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd4:	095b      	lsrs	r3, r3, #5
 8008bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bda:	441c      	add	r4, r3
 8008bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be0:	2200      	movs	r2, #0
 8008be2:	673b      	str	r3, [r7, #112]	; 0x70
 8008be4:	677a      	str	r2, [r7, #116]	; 0x74
 8008be6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008bea:	4642      	mov	r2, r8
 8008bec:	464b      	mov	r3, r9
 8008bee:	1891      	adds	r1, r2, r2
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	415b      	adcs	r3, r3
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bfa:	4641      	mov	r1, r8
 8008bfc:	1851      	adds	r1, r2, r1
 8008bfe:	6039      	str	r1, [r7, #0]
 8008c00:	4649      	mov	r1, r9
 8008c02:	414b      	adcs	r3, r1
 8008c04:	607b      	str	r3, [r7, #4]
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c12:	4659      	mov	r1, fp
 8008c14:	00cb      	lsls	r3, r1, #3
 8008c16:	4651      	mov	r1, sl
 8008c18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c1c:	4651      	mov	r1, sl
 8008c1e:	00ca      	lsls	r2, r1, #3
 8008c20:	4610      	mov	r0, r2
 8008c22:	4619      	mov	r1, r3
 8008c24:	4603      	mov	r3, r0
 8008c26:	4642      	mov	r2, r8
 8008c28:	189b      	adds	r3, r3, r2
 8008c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	460a      	mov	r2, r1
 8008c30:	eb42 0303 	adc.w	r3, r2, r3
 8008c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8008c40:	667a      	str	r2, [r7, #100]	; 0x64
 8008c42:	f04f 0200 	mov.w	r2, #0
 8008c46:	f04f 0300 	mov.w	r3, #0
 8008c4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c4e:	4649      	mov	r1, r9
 8008c50:	008b      	lsls	r3, r1, #2
 8008c52:	4641      	mov	r1, r8
 8008c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c58:	4641      	mov	r1, r8
 8008c5a:	008a      	lsls	r2, r1, #2
 8008c5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c60:	f7f8 f98c 	bl	8000f7c <__aeabi_uldivmod>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c6e:	095b      	lsrs	r3, r3, #5
 8008c70:	2164      	movs	r1, #100	; 0x64
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	011b      	lsls	r3, r3, #4
 8008c7a:	3332      	adds	r3, #50	; 0x32
 8008c7c:	4a08      	ldr	r2, [pc, #32]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c82:	095b      	lsrs	r3, r3, #5
 8008c84:	f003 020f 	and.w	r2, r3, #15
 8008c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4422      	add	r2, r4
 8008c90:	609a      	str	r2, [r3, #8]
}
 8008c92:	bf00      	nop
 8008c94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c9e:	bf00      	nop
 8008ca0:	51eb851f 	.word	0x51eb851f

08008ca4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008ca8:	4904      	ldr	r1, [pc, #16]	; (8008cbc <MX_FATFS_Init+0x18>)
 8008caa:	4805      	ldr	r0, [pc, #20]	; (8008cc0 <MX_FATFS_Init+0x1c>)
 8008cac:	f002 fd78 	bl	800b7a0 <FATFS_LinkDriver>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	4b03      	ldr	r3, [pc, #12]	; (8008cc4 <MX_FATFS_Init+0x20>)
 8008cb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008cb8:	bf00      	nop
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20001730 	.word	0x20001730
 8008cc0:	20000028 	.word	0x20000028
 8008cc4:	2000172c 	.word	0x2000172c

08008cc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008ccc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8008ce2:	79fb      	ldrb	r3, [r7, #7]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7f8 fe9d 	bl	8001a24 <SD_disk_initialize>
 8008cea:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	4618      	mov	r0, r3
 8008d02:	f7f8 ff79 	bl	8001bf8 <SD_disk_status>
 8008d06:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8008d20:	7bf8      	ldrb	r0, [r7, #15]
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	68b9      	ldr	r1, [r7, #8]
 8008d28:	f7f8 ff7c 	bl	8001c24 <SD_disk_read>
 8008d2c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
 8008d42:	4603      	mov	r3, r0
 8008d44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008d46:	7bf8      	ldrb	r0, [r7, #15]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	68b9      	ldr	r1, [r7, #8]
 8008d4e:	f7f8 ffd3 	bl	8001cf8 <SD_disk_write>
 8008d52:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	603a      	str	r2, [r7, #0]
 8008d66:	71fb      	strb	r3, [r7, #7]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008d6c:	79b9      	ldrb	r1, [r7, #6]
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f9 f844 	bl	8001e00 <SD_disk_ioctl>
 8008d78:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
	...

08008d84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	4a08      	ldr	r2, [pc, #32]	; (8008db4 <disk_status+0x30>)
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	4413      	add	r3, r2
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	79fa      	ldrb	r2, [r7, #7]
 8008d9c:	4905      	ldr	r1, [pc, #20]	; (8008db4 <disk_status+0x30>)
 8008d9e:	440a      	add	r2, r1
 8008da0:	7a12      	ldrb	r2, [r2, #8]
 8008da2:	4610      	mov	r0, r2
 8008da4:	4798      	blx	r3
 8008da6:	4603      	mov	r3, r0
 8008da8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	2000175c 	.word	0x2000175c

08008db8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	4a0d      	ldr	r2, [pc, #52]	; (8008e00 <disk_initialize+0x48>)
 8008dca:	5cd3      	ldrb	r3, [r2, r3]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d111      	bne.n	8008df4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	4a0b      	ldr	r2, [pc, #44]	; (8008e00 <disk_initialize+0x48>)
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008dd8:	79fb      	ldrb	r3, [r7, #7]
 8008dda:	4a09      	ldr	r2, [pc, #36]	; (8008e00 <disk_initialize+0x48>)
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	79fa      	ldrb	r2, [r7, #7]
 8008de6:	4906      	ldr	r1, [pc, #24]	; (8008e00 <disk_initialize+0x48>)
 8008de8:	440a      	add	r2, r1
 8008dea:	7a12      	ldrb	r2, [r2, #8]
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	2000175c 	.word	0x2000175c

08008e04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008e04:	b590      	push	{r4, r7, lr}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	607a      	str	r2, [r7, #4]
 8008e0e:	603b      	str	r3, [r7, #0]
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
 8008e16:	4a0a      	ldr	r2, [pc, #40]	; (8008e40 <disk_read+0x3c>)
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	689c      	ldr	r4, [r3, #8]
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	4a07      	ldr	r2, [pc, #28]	; (8008e40 <disk_read+0x3c>)
 8008e24:	4413      	add	r3, r2
 8008e26:	7a18      	ldrb	r0, [r3, #8]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	47a0      	blx	r4
 8008e30:	4603      	mov	r3, r0
 8008e32:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd90      	pop	{r4, r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	2000175c 	.word	0x2000175c

08008e44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008e44:	b590      	push	{r4, r7, lr}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60b9      	str	r1, [r7, #8]
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	4603      	mov	r3, r0
 8008e52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	4a0a      	ldr	r2, [pc, #40]	; (8008e80 <disk_write+0x3c>)
 8008e58:	009b      	lsls	r3, r3, #2
 8008e5a:	4413      	add	r3, r2
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	68dc      	ldr	r4, [r3, #12]
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
 8008e62:	4a07      	ldr	r2, [pc, #28]	; (8008e80 <disk_write+0x3c>)
 8008e64:	4413      	add	r3, r2
 8008e66:	7a18      	ldrb	r0, [r3, #8]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	68b9      	ldr	r1, [r7, #8]
 8008e6e:	47a0      	blx	r4
 8008e70:	4603      	mov	r3, r0
 8008e72:	75fb      	strb	r3, [r7, #23]
  return res;
 8008e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd90      	pop	{r4, r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	2000175c 	.word	0x2000175c

08008e84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	603a      	str	r2, [r7, #0]
 8008e8e:	71fb      	strb	r3, [r7, #7]
 8008e90:	460b      	mov	r3, r1
 8008e92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	4a09      	ldr	r2, [pc, #36]	; (8008ebc <disk_ioctl+0x38>)
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	79fa      	ldrb	r2, [r7, #7]
 8008ea2:	4906      	ldr	r1, [pc, #24]	; (8008ebc <disk_ioctl+0x38>)
 8008ea4:	440a      	add	r2, r1
 8008ea6:	7a10      	ldrb	r0, [r2, #8]
 8008ea8:	79b9      	ldrb	r1, [r7, #6]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	4798      	blx	r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73fb      	strb	r3, [r7, #15]
  return res;
 8008eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	2000175c 	.word	0x2000175c

08008ec0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008ed0:	89fb      	ldrh	r3, [r7, #14]
 8008ed2:	021b      	lsls	r3, r3, #8
 8008ed4:	b21a      	sxth	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	b21b      	sxth	r3, r3
 8008edc:	4313      	orrs	r3, r2
 8008ede:	b21b      	sxth	r3, r3
 8008ee0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008ee2:	89fb      	ldrh	r3, [r7, #14]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	3303      	adds	r3, #3
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	3202      	adds	r2, #2
 8008f08:	7812      	ldrb	r2, [r2, #0]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	021b      	lsls	r3, r3, #8
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	3201      	adds	r2, #1
 8008f16:	7812      	ldrb	r2, [r2, #0]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	021b      	lsls	r3, r3, #8
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	7812      	ldrb	r2, [r2, #0]
 8008f24:	4313      	orrs	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
	return rv;
 8008f28:	68fb      	ldr	r3, [r7, #12]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3714      	adds	r7, #20
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr

08008f36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008f36:	b480      	push	{r7}
 8008f38:	b083      	sub	sp, #12
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	6078      	str	r0, [r7, #4]
 8008f3e:	460b      	mov	r3, r1
 8008f40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	1c5a      	adds	r2, r3, #1
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	887a      	ldrh	r2, [r7, #2]
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	701a      	strb	r2, [r3, #0]
 8008f4e:	887b      	ldrh	r3, [r7, #2]
 8008f50:	0a1b      	lsrs	r3, r3, #8
 8008f52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	887a      	ldrh	r2, [r7, #2]
 8008f5c:	b2d2      	uxtb	r2, r2
 8008f5e:	701a      	strb	r2, [r3, #0]
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
 8008f74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	0a1b      	lsrs	r3, r3, #8
 8008f86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	607a      	str	r2, [r7, #4]
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	0a1b      	lsrs	r3, r3, #8
 8008f98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	b2d2      	uxtb	r2, r2
 8008fa4:	701a      	strb	r2, [r3, #0]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	0a1b      	lsrs	r3, r3, #8
 8008faa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	607a      	str	r2, [r7, #4]
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	b2d2      	uxtb	r2, r2
 8008fb6:	701a      	strb	r2, [r3, #0]
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00d      	beq.n	8008ffa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	1c53      	adds	r3, r2, #1
 8008fe2:	613b      	str	r3, [r7, #16]
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	1c59      	adds	r1, r3, #1
 8008fe8:	6179      	str	r1, [r7, #20]
 8008fea:	7812      	ldrb	r2, [r2, #0]
 8008fec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	607b      	str	r3, [r7, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1f1      	bne.n	8008fde <mem_cpy+0x1a>
	}
}
 8008ffa:	bf00      	nop
 8008ffc:	371c      	adds	r7, #28
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr

08009006 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009006:	b480      	push	{r7}
 8009008:	b087      	sub	sp, #28
 800900a:	af00      	add	r7, sp, #0
 800900c:	60f8      	str	r0, [r7, #12]
 800900e:	60b9      	str	r1, [r7, #8]
 8009010:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	617a      	str	r2, [r7, #20]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	b2d2      	uxtb	r2, r2
 8009020:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	3b01      	subs	r3, #1
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1f3      	bne.n	8009016 <mem_set+0x10>
}
 800902e:	bf00      	nop
 8009030:	bf00      	nop
 8009032:	371c      	adds	r7, #28
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800903c:	b480      	push	{r7}
 800903e:	b089      	sub	sp, #36	; 0x24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	61fb      	str	r3, [r7, #28]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	61fa      	str	r2, [r7, #28]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	4619      	mov	r1, r3
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	61ba      	str	r2, [r7, #24]
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	1acb      	subs	r3, r1, r3
 8009068:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	3b01      	subs	r3, #1
 800906e:	607b      	str	r3, [r7, #4]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <mem_cmp+0x40>
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0eb      	beq.n	8009054 <mem_cmp+0x18>

	return r;
 800907c:	697b      	ldr	r3, [r7, #20]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3724      	adds	r7, #36	; 0x24
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800908a:	b480      	push	{r7}
 800908c:	b083      	sub	sp, #12
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
 8009092:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009094:	e002      	b.n	800909c <chk_chr+0x12>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	3301      	adds	r3, #1
 800909a:	607b      	str	r3, [r7, #4]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d005      	beq.n	80090b0 <chk_chr+0x26>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d1f2      	bne.n	8009096 <chk_chr+0xc>
	return *str;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	781b      	ldrb	r3, [r3, #0]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d009      	beq.n	80090e2 <lock_fs+0x22>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f002 fb9f 	bl	800b816 <ff_req_grant>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <lock_fs+0x22>
 80090de:	2301      	movs	r3, #1
 80090e0:	e000      	b.n	80090e4 <lock_fs+0x24>
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	460b      	mov	r3, r1
 80090f6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d00d      	beq.n	800911a <unlock_fs+0x2e>
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	2b0c      	cmp	r3, #12
 8009102:	d00a      	beq.n	800911a <unlock_fs+0x2e>
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	2b0b      	cmp	r3, #11
 8009108:	d007      	beq.n	800911a <unlock_fs+0x2e>
 800910a:	78fb      	ldrb	r3, [r7, #3]
 800910c:	2b0f      	cmp	r3, #15
 800910e:	d004      	beq.n	800911a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	4618      	mov	r0, r3
 8009116:	f002 fb93 	bl	800b840 <ff_rel_grant>
	}
}
 800911a:	bf00      	nop
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800912e:	2300      	movs	r3, #0
 8009130:	60bb      	str	r3, [r7, #8]
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	60fb      	str	r3, [r7, #12]
 8009136:	e029      	b.n	800918c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009138:	4a27      	ldr	r2, [pc, #156]	; (80091d8 <chk_lock+0xb4>)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	011b      	lsls	r3, r3, #4
 800913e:	4413      	add	r3, r2
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01d      	beq.n	8009182 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009146:	4a24      	ldr	r2, [pc, #144]	; (80091d8 <chk_lock+0xb4>)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	011b      	lsls	r3, r3, #4
 800914c:	4413      	add	r3, r2
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d116      	bne.n	8009186 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009158:	4a1f      	ldr	r2, [pc, #124]	; (80091d8 <chk_lock+0xb4>)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	011b      	lsls	r3, r3, #4
 800915e:	4413      	add	r3, r2
 8009160:	3304      	adds	r3, #4
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009168:	429a      	cmp	r2, r3
 800916a:	d10c      	bne.n	8009186 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800916c:	4a1a      	ldr	r2, [pc, #104]	; (80091d8 <chk_lock+0xb4>)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	4413      	add	r3, r2
 8009174:	3308      	adds	r3, #8
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800917c:	429a      	cmp	r2, r3
 800917e:	d102      	bne.n	8009186 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009180:	e007      	b.n	8009192 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009182:	2301      	movs	r3, #1
 8009184:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3301      	adds	r3, #1
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d9d2      	bls.n	8009138 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d109      	bne.n	80091ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d102      	bne.n	80091a4 <chk_lock+0x80>
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d101      	bne.n	80091a8 <chk_lock+0x84>
 80091a4:	2300      	movs	r3, #0
 80091a6:	e010      	b.n	80091ca <chk_lock+0xa6>
 80091a8:	2312      	movs	r3, #18
 80091aa:	e00e      	b.n	80091ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d108      	bne.n	80091c4 <chk_lock+0xa0>
 80091b2:	4a09      	ldr	r2, [pc, #36]	; (80091d8 <chk_lock+0xb4>)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	4413      	add	r3, r2
 80091ba:	330c      	adds	r3, #12
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091c2:	d101      	bne.n	80091c8 <chk_lock+0xa4>
 80091c4:	2310      	movs	r3, #16
 80091c6:	e000      	b.n	80091ca <chk_lock+0xa6>
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	2000173c 	.word	0x2000173c

080091dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80091e2:	2300      	movs	r3, #0
 80091e4:	607b      	str	r3, [r7, #4]
 80091e6:	e002      	b.n	80091ee <enq_lock+0x12>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	3301      	adds	r3, #1
 80091ec:	607b      	str	r3, [r7, #4]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d806      	bhi.n	8009202 <enq_lock+0x26>
 80091f4:	4a09      	ldr	r2, [pc, #36]	; (800921c <enq_lock+0x40>)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	4413      	add	r3, r2
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d1f2      	bne.n	80091e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2b02      	cmp	r3, #2
 8009206:	bf14      	ite	ne
 8009208:	2301      	movne	r3, #1
 800920a:	2300      	moveq	r3, #0
 800920c:	b2db      	uxtb	r3, r3
}
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	2000173c 	.word	0x2000173c

08009220 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
 800922e:	e01f      	b.n	8009270 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009230:	4a41      	ldr	r2, [pc, #260]	; (8009338 <inc_lock+0x118>)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	011b      	lsls	r3, r3, #4
 8009236:	4413      	add	r3, r2
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d113      	bne.n	800926a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009242:	4a3d      	ldr	r2, [pc, #244]	; (8009338 <inc_lock+0x118>)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	011b      	lsls	r3, r3, #4
 8009248:	4413      	add	r3, r2
 800924a:	3304      	adds	r3, #4
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009252:	429a      	cmp	r2, r3
 8009254:	d109      	bne.n	800926a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009256:	4a38      	ldr	r2, [pc, #224]	; (8009338 <inc_lock+0x118>)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	011b      	lsls	r3, r3, #4
 800925c:	4413      	add	r3, r2
 800925e:	3308      	adds	r3, #8
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009266:	429a      	cmp	r2, r3
 8009268:	d006      	beq.n	8009278 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3301      	adds	r3, #1
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d9dc      	bls.n	8009230 <inc_lock+0x10>
 8009276:	e000      	b.n	800927a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009278:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d132      	bne.n	80092e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009280:	2300      	movs	r3, #0
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	e002      	b.n	800928c <inc_lock+0x6c>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d806      	bhi.n	80092a0 <inc_lock+0x80>
 8009292:	4a29      	ldr	r2, [pc, #164]	; (8009338 <inc_lock+0x118>)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	4413      	add	r3, r2
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1f2      	bne.n	8009286 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d101      	bne.n	80092aa <inc_lock+0x8a>
 80092a6:	2300      	movs	r3, #0
 80092a8:	e040      	b.n	800932c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	4922      	ldr	r1, [pc, #136]	; (8009338 <inc_lock+0x118>)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	011b      	lsls	r3, r3, #4
 80092b4:	440b      	add	r3, r1
 80092b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689a      	ldr	r2, [r3, #8]
 80092bc:	491e      	ldr	r1, [pc, #120]	; (8009338 <inc_lock+0x118>)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	011b      	lsls	r3, r3, #4
 80092c2:	440b      	add	r3, r1
 80092c4:	3304      	adds	r3, #4
 80092c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	695a      	ldr	r2, [r3, #20]
 80092cc:	491a      	ldr	r1, [pc, #104]	; (8009338 <inc_lock+0x118>)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	011b      	lsls	r3, r3, #4
 80092d2:	440b      	add	r3, r1
 80092d4:	3308      	adds	r3, #8
 80092d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80092d8:	4a17      	ldr	r2, [pc, #92]	; (8009338 <inc_lock+0x118>)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	4413      	add	r3, r2
 80092e0:	330c      	adds	r3, #12
 80092e2:	2200      	movs	r2, #0
 80092e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d009      	beq.n	8009300 <inc_lock+0xe0>
 80092ec:	4a12      	ldr	r2, [pc, #72]	; (8009338 <inc_lock+0x118>)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	011b      	lsls	r3, r3, #4
 80092f2:	4413      	add	r3, r2
 80092f4:	330c      	adds	r3, #12
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d001      	beq.n	8009300 <inc_lock+0xe0>
 80092fc:	2300      	movs	r3, #0
 80092fe:	e015      	b.n	800932c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d108      	bne.n	8009318 <inc_lock+0xf8>
 8009306:	4a0c      	ldr	r2, [pc, #48]	; (8009338 <inc_lock+0x118>)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	011b      	lsls	r3, r3, #4
 800930c:	4413      	add	r3, r2
 800930e:	330c      	adds	r3, #12
 8009310:	881b      	ldrh	r3, [r3, #0]
 8009312:	3301      	adds	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	e001      	b.n	800931c <inc_lock+0xfc>
 8009318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800931c:	4906      	ldr	r1, [pc, #24]	; (8009338 <inc_lock+0x118>)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	440b      	add	r3, r1
 8009324:	330c      	adds	r3, #12
 8009326:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3301      	adds	r3, #1
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	2000173c 	.word	0x2000173c

0800933c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3b01      	subs	r3, #1
 8009348:	607b      	str	r3, [r7, #4]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d825      	bhi.n	800939c <dec_lock+0x60>
		n = Files[i].ctr;
 8009350:	4a17      	ldr	r2, [pc, #92]	; (80093b0 <dec_lock+0x74>)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	4413      	add	r3, r2
 8009358:	330c      	adds	r3, #12
 800935a:	881b      	ldrh	r3, [r3, #0]
 800935c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800935e:	89fb      	ldrh	r3, [r7, #14]
 8009360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009364:	d101      	bne.n	800936a <dec_lock+0x2e>
 8009366:	2300      	movs	r3, #0
 8009368:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800936a:	89fb      	ldrh	r3, [r7, #14]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <dec_lock+0x3a>
 8009370:	89fb      	ldrh	r3, [r7, #14]
 8009372:	3b01      	subs	r3, #1
 8009374:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009376:	4a0e      	ldr	r2, [pc, #56]	; (80093b0 <dec_lock+0x74>)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	4413      	add	r3, r2
 800937e:	330c      	adds	r3, #12
 8009380:	89fa      	ldrh	r2, [r7, #14]
 8009382:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009384:	89fb      	ldrh	r3, [r7, #14]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d105      	bne.n	8009396 <dec_lock+0x5a>
 800938a:	4a09      	ldr	r2, [pc, #36]	; (80093b0 <dec_lock+0x74>)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	011b      	lsls	r3, r3, #4
 8009390:	4413      	add	r3, r2
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	737b      	strb	r3, [r7, #13]
 800939a:	e001      	b.n	80093a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800939c:	2302      	movs	r3, #2
 800939e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80093a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3714      	adds	r7, #20
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
 80093ae:	bf00      	nop
 80093b0:	2000173c 	.word	0x2000173c

080093b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	e010      	b.n	80093e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80093c2:	4a0d      	ldr	r2, [pc, #52]	; (80093f8 <clear_lock+0x44>)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	4413      	add	r3, r2
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d105      	bne.n	80093de <clear_lock+0x2a>
 80093d2:	4a09      	ldr	r2, [pc, #36]	; (80093f8 <clear_lock+0x44>)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	011b      	lsls	r3, r3, #4
 80093d8:	4413      	add	r3, r2
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	3301      	adds	r3, #1
 80093e2:	60fb      	str	r3, [r7, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d9eb      	bls.n	80093c2 <clear_lock+0xe>
	}
}
 80093ea:	bf00      	nop
 80093ec:	bf00      	nop
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	2000173c 	.word	0x2000173c

080093fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b086      	sub	sp, #24
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009404:	2300      	movs	r3, #0
 8009406:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	78db      	ldrb	r3, [r3, #3]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d034      	beq.n	800947a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009414:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7858      	ldrb	r0, [r3, #1]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009420:	2301      	movs	r3, #1
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	f7ff fd0e 	bl	8008e44 <disk_write>
 8009428:	4603      	mov	r3, r0
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <sync_window+0x38>
			res = FR_DISK_ERR;
 800942e:	2301      	movs	r3, #1
 8009430:	73fb      	strb	r3, [r7, #15]
 8009432:	e022      	b.n	800947a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	1ad2      	subs	r2, r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69db      	ldr	r3, [r3, #28]
 8009446:	429a      	cmp	r2, r3
 8009448:	d217      	bcs.n	800947a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	789b      	ldrb	r3, [r3, #2]
 800944e:	613b      	str	r3, [r7, #16]
 8009450:	e010      	b.n	8009474 <sync_window+0x78>
					wsect += fs->fsize;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	4413      	add	r3, r2
 800945a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	7858      	ldrb	r0, [r3, #1]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009466:	2301      	movs	r3, #1
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	f7ff fceb 	bl	8008e44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	3b01      	subs	r3, #1
 8009472:	613b      	str	r3, [r7, #16]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2b01      	cmp	r3, #1
 8009478:	d8eb      	bhi.n	8009452 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b084      	sub	sp, #16
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800948e:	2300      	movs	r3, #0
 8009490:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	429a      	cmp	r2, r3
 800949a:	d01b      	beq.n	80094d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff ffad 	bl	80093fc <sync_window>
 80094a2:	4603      	mov	r3, r0
 80094a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d113      	bne.n	80094d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	7858      	ldrb	r0, [r3, #1]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80094b6:	2301      	movs	r3, #1
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	f7ff fca3 	bl	8008e04 <disk_read>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d004      	beq.n	80094ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80094c4:	f04f 33ff 	mov.w	r3, #4294967295
 80094c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80094d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3710      	adds	r7, #16
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
	...

080094e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f7ff ff87 	bl	80093fc <sync_window>
 80094ee:	4603      	mov	r3, r0
 80094f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d158      	bne.n	80095aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b03      	cmp	r3, #3
 80094fe:	d148      	bne.n	8009592 <sync_fs+0xb2>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	791b      	ldrb	r3, [r3, #4]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d144      	bne.n	8009592 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	3334      	adds	r3, #52	; 0x34
 800950c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009510:	2100      	movs	r1, #0
 8009512:	4618      	mov	r0, r3
 8009514:	f7ff fd77 	bl	8009006 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3334      	adds	r3, #52	; 0x34
 800951c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009520:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff fd06 	bl	8008f36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3334      	adds	r3, #52	; 0x34
 800952e:	4921      	ldr	r1, [pc, #132]	; (80095b4 <sync_fs+0xd4>)
 8009530:	4618      	mov	r0, r3
 8009532:	f7ff fd1b 	bl	8008f6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	3334      	adds	r3, #52	; 0x34
 800953a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800953e:	491e      	ldr	r1, [pc, #120]	; (80095b8 <sync_fs+0xd8>)
 8009540:	4618      	mov	r0, r3
 8009542:	f7ff fd13 	bl	8008f6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	3334      	adds	r3, #52	; 0x34
 800954a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7ff fd09 	bl	8008f6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3334      	adds	r3, #52	; 0x34
 800955e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	4619      	mov	r1, r3
 8009568:	4610      	mov	r0, r2
 800956a:	f7ff fcff 	bl	8008f6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7858      	ldrb	r0, [r3, #1]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009586:	2301      	movs	r3, #1
 8009588:	f7ff fc5c 	bl	8008e44 <disk_write>
			fs->fsi_flag = 0;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	785b      	ldrb	r3, [r3, #1]
 8009596:	2200      	movs	r2, #0
 8009598:	2100      	movs	r1, #0
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff fc72 	bl	8008e84 <disk_ioctl>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <sync_fs+0xca>
 80095a6:	2301      	movs	r3, #1
 80095a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	41615252 	.word	0x41615252
 80095b8:	61417272 	.word	0x61417272

080095bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	3b02      	subs	r3, #2
 80095ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	3b02      	subs	r3, #2
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d301      	bcc.n	80095dc <clust2sect+0x20>
 80095d8:	2300      	movs	r3, #0
 80095da:	e008      	b.n	80095ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	895b      	ldrh	r3, [r3, #10]
 80095e0:	461a      	mov	r2, r3
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	fb03 f202 	mul.w	r2, r3, r2
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	4413      	add	r3, r2
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b086      	sub	sp, #24
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	2b01      	cmp	r3, #1
 800960e:	d904      	bls.n	800961a <get_fat+0x20>
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	429a      	cmp	r2, r3
 8009618:	d302      	bcc.n	8009620 <get_fat+0x26>
		val = 1;	/* Internal error */
 800961a:	2301      	movs	r3, #1
 800961c:	617b      	str	r3, [r7, #20]
 800961e:	e08f      	b.n	8009740 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009620:	f04f 33ff 	mov.w	r3, #4294967295
 8009624:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	2b03      	cmp	r3, #3
 800962c:	d062      	beq.n	80096f4 <get_fat+0xfa>
 800962e:	2b03      	cmp	r3, #3
 8009630:	dc7c      	bgt.n	800972c <get_fat+0x132>
 8009632:	2b01      	cmp	r3, #1
 8009634:	d002      	beq.n	800963c <get_fat+0x42>
 8009636:	2b02      	cmp	r3, #2
 8009638:	d042      	beq.n	80096c0 <get_fat+0xc6>
 800963a:	e077      	b.n	800972c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	085b      	lsrs	r3, r3, #1
 8009644:	68fa      	ldr	r2, [r7, #12]
 8009646:	4413      	add	r3, r2
 8009648:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	0a5b      	lsrs	r3, r3, #9
 8009652:	4413      	add	r3, r2
 8009654:	4619      	mov	r1, r3
 8009656:	6938      	ldr	r0, [r7, #16]
 8009658:	f7ff ff14 	bl	8009484 <move_window>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d167      	bne.n	8009732 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	60fa      	str	r2, [r7, #12]
 8009668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966c:	693a      	ldr	r2, [r7, #16]
 800966e:	4413      	add	r3, r2
 8009670:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009674:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	0a5b      	lsrs	r3, r3, #9
 800967e:	4413      	add	r3, r2
 8009680:	4619      	mov	r1, r3
 8009682:	6938      	ldr	r0, [r7, #16]
 8009684:	f7ff fefe 	bl	8009484 <move_window>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d153      	bne.n	8009736 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4413      	add	r3, r2
 8009698:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800969c:	021b      	lsls	r3, r3, #8
 800969e:	461a      	mov	r2, r3
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <get_fat+0xbc>
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	091b      	lsrs	r3, r3, #4
 80096b4:	e002      	b.n	80096bc <get_fat+0xc2>
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096bc:	617b      	str	r3, [r7, #20]
			break;
 80096be:	e03f      	b.n	8009740 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	0a1b      	lsrs	r3, r3, #8
 80096c8:	4413      	add	r3, r2
 80096ca:	4619      	mov	r1, r3
 80096cc:	6938      	ldr	r0, [r7, #16]
 80096ce:	f7ff fed9 	bl	8009484 <move_window>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d130      	bne.n	800973a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	005b      	lsls	r3, r3, #1
 80096e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80096e6:	4413      	add	r3, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff fbe9 	bl	8008ec0 <ld_word>
 80096ee:	4603      	mov	r3, r0
 80096f0:	617b      	str	r3, [r7, #20]
			break;
 80096f2:	e025      	b.n	8009740 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	09db      	lsrs	r3, r3, #7
 80096fc:	4413      	add	r3, r2
 80096fe:	4619      	mov	r1, r3
 8009700:	6938      	ldr	r0, [r7, #16]
 8009702:	f7ff febf 	bl	8009484 <move_window>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d118      	bne.n	800973e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800971a:	4413      	add	r3, r2
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff fbe7 	bl	8008ef0 <ld_dword>
 8009722:	4603      	mov	r3, r0
 8009724:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009728:	617b      	str	r3, [r7, #20]
			break;
 800972a:	e009      	b.n	8009740 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800972c:	2301      	movs	r3, #1
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	e006      	b.n	8009740 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009732:	bf00      	nop
 8009734:	e004      	b.n	8009740 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009736:	bf00      	nop
 8009738:	e002      	b.n	8009740 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800973a:	bf00      	nop
 800973c:	e000      	b.n	8009740 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800973e:	bf00      	nop
		}
	}

	return val;
 8009740:	697b      	ldr	r3, [r7, #20]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800974a:	b590      	push	{r4, r7, lr}
 800974c:	b089      	sub	sp, #36	; 0x24
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009756:	2302      	movs	r3, #2
 8009758:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	2b01      	cmp	r3, #1
 800975e:	f240 80d2 	bls.w	8009906 <put_fat+0x1bc>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	429a      	cmp	r2, r3
 800976a:	f080 80cc 	bcs.w	8009906 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b03      	cmp	r3, #3
 8009774:	f000 8096 	beq.w	80098a4 <put_fat+0x15a>
 8009778:	2b03      	cmp	r3, #3
 800977a:	f300 80cd 	bgt.w	8009918 <put_fat+0x1ce>
 800977e:	2b01      	cmp	r3, #1
 8009780:	d002      	beq.n	8009788 <put_fat+0x3e>
 8009782:	2b02      	cmp	r3, #2
 8009784:	d06e      	beq.n	8009864 <put_fat+0x11a>
 8009786:	e0c7      	b.n	8009918 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	61bb      	str	r3, [r7, #24]
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	085b      	lsrs	r3, r3, #1
 8009790:	69ba      	ldr	r2, [r7, #24]
 8009792:	4413      	add	r3, r2
 8009794:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	0a5b      	lsrs	r3, r3, #9
 800979e:	4413      	add	r3, r2
 80097a0:	4619      	mov	r1, r3
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f7ff fe6e 	bl	8009484 <move_window>
 80097a8:	4603      	mov	r3, r0
 80097aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80097ac:	7ffb      	ldrb	r3, [r7, #31]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f040 80ab 	bne.w	800990a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	1c59      	adds	r1, r3, #1
 80097be:	61b9      	str	r1, [r7, #24]
 80097c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c4:	4413      	add	r3, r2
 80097c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00d      	beq.n	80097ee <put_fat+0xa4>
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	b25b      	sxtb	r3, r3
 80097d8:	f003 030f 	and.w	r3, r3, #15
 80097dc:	b25a      	sxtb	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	011b      	lsls	r3, r3, #4
 80097e4:	b25b      	sxtb	r3, r3
 80097e6:	4313      	orrs	r3, r2
 80097e8:	b25b      	sxtb	r3, r3
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	e001      	b.n	80097f2 <put_fat+0xa8>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	697a      	ldr	r2, [r7, #20]
 80097f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2201      	movs	r2, #1
 80097fa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	0a5b      	lsrs	r3, r3, #9
 8009804:	4413      	add	r3, r2
 8009806:	4619      	mov	r1, r3
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f7ff fe3b 	bl	8009484 <move_window>
 800980e:	4603      	mov	r3, r0
 8009810:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009812:	7ffb      	ldrb	r3, [r7, #31]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d17a      	bne.n	800990e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009824:	4413      	add	r3, r2
 8009826:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <put_fat+0xf0>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	091b      	lsrs	r3, r3, #4
 8009836:	b2db      	uxtb	r3, r3
 8009838:	e00e      	b.n	8009858 <put_fat+0x10e>
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	b25b      	sxtb	r3, r3
 8009840:	f023 030f 	bic.w	r3, r3, #15
 8009844:	b25a      	sxtb	r2, r3
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	0a1b      	lsrs	r3, r3, #8
 800984a:	b25b      	sxtb	r3, r3
 800984c:	f003 030f 	and.w	r3, r3, #15
 8009850:	b25b      	sxtb	r3, r3
 8009852:	4313      	orrs	r3, r2
 8009854:	b25b      	sxtb	r3, r3
 8009856:	b2db      	uxtb	r3, r3
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2201      	movs	r2, #1
 8009860:	70da      	strb	r2, [r3, #3]
			break;
 8009862:	e059      	b.n	8009918 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	0a1b      	lsrs	r3, r3, #8
 800986c:	4413      	add	r3, r2
 800986e:	4619      	mov	r1, r3
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7ff fe07 	bl	8009484 <move_window>
 8009876:	4603      	mov	r3, r0
 8009878:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800987a:	7ffb      	ldrb	r3, [r7, #31]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d148      	bne.n	8009912 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	005b      	lsls	r3, r3, #1
 800988a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800988e:	4413      	add	r3, r2
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	b292      	uxth	r2, r2
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f7ff fb4d 	bl	8008f36 <st_word>
			fs->wflag = 1;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2201      	movs	r2, #1
 80098a0:	70da      	strb	r2, [r3, #3]
			break;
 80098a2:	e039      	b.n	8009918 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	09db      	lsrs	r3, r3, #7
 80098ac:	4413      	add	r3, r2
 80098ae:	4619      	mov	r1, r3
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff fde7 	bl	8009484 <move_window>
 80098b6:	4603      	mov	r3, r0
 80098b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098ba:	7ffb      	ldrb	r3, [r7, #31]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d12a      	bne.n	8009916 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80098d4:	4413      	add	r3, r2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff fb0a 	bl	8008ef0 <ld_dword>
 80098dc:	4603      	mov	r3, r0
 80098de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80098e2:	4323      	orrs	r3, r4
 80098e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80098f4:	4413      	add	r3, r2
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff fb37 	bl	8008f6c <st_dword>
			fs->wflag = 1;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2201      	movs	r2, #1
 8009902:	70da      	strb	r2, [r3, #3]
			break;
 8009904:	e008      	b.n	8009918 <put_fat+0x1ce>
		}
	}
 8009906:	bf00      	nop
 8009908:	e006      	b.n	8009918 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800990a:	bf00      	nop
 800990c:	e004      	b.n	8009918 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800990e:	bf00      	nop
 8009910:	e002      	b.n	8009918 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009912:	bf00      	nop
 8009914:	e000      	b.n	8009918 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009916:	bf00      	nop
	return res;
 8009918:	7ffb      	ldrb	r3, [r7, #31]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3724      	adds	r7, #36	; 0x24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd90      	pop	{r4, r7, pc}

08009922 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b088      	sub	sp, #32
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d904      	bls.n	8009948 <remove_chain+0x26>
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	429a      	cmp	r2, r3
 8009946:	d301      	bcc.n	800994c <remove_chain+0x2a>
 8009948:	2302      	movs	r3, #2
 800994a:	e04b      	b.n	80099e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00c      	beq.n	800996c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	69b8      	ldr	r0, [r7, #24]
 800995a:	f7ff fef6 	bl	800974a <put_fat>
 800995e:	4603      	mov	r3, r0
 8009960:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009962:	7ffb      	ldrb	r3, [r7, #31]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d001      	beq.n	800996c <remove_chain+0x4a>
 8009968:	7ffb      	ldrb	r3, [r7, #31]
 800996a:	e03b      	b.n	80099e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800996c:	68b9      	ldr	r1, [r7, #8]
 800996e:	68f8      	ldr	r0, [r7, #12]
 8009970:	f7ff fe43 	bl	80095fa <get_fat>
 8009974:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d031      	beq.n	80099e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d101      	bne.n	8009986 <remove_chain+0x64>
 8009982:	2302      	movs	r3, #2
 8009984:	e02e      	b.n	80099e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998c:	d101      	bne.n	8009992 <remove_chain+0x70>
 800998e:	2301      	movs	r3, #1
 8009990:	e028      	b.n	80099e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009992:	2200      	movs	r2, #0
 8009994:	68b9      	ldr	r1, [r7, #8]
 8009996:	69b8      	ldr	r0, [r7, #24]
 8009998:	f7ff fed7 	bl	800974a <put_fat>
 800999c:	4603      	mov	r3, r0
 800999e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80099a0:	7ffb      	ldrb	r3, [r7, #31]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <remove_chain+0x88>
 80099a6:	7ffb      	ldrb	r3, [r7, #31]
 80099a8:	e01c      	b.n	80099e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	695a      	ldr	r2, [r3, #20]
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	699b      	ldr	r3, [r3, #24]
 80099b2:	3b02      	subs	r3, #2
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d20b      	bcs.n	80099d0 <remove_chain+0xae>
			fs->free_clst++;
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	1c5a      	adds	r2, r3, #1
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	791b      	ldrb	r3, [r3, #4]
 80099c6:	f043 0301 	orr.w	r3, r3, #1
 80099ca:	b2da      	uxtb	r2, r3
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80099d4:	69bb      	ldr	r3, [r7, #24]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d3c6      	bcc.n	800996c <remove_chain+0x4a>
 80099de:	e000      	b.n	80099e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80099e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3720      	adds	r7, #32
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b088      	sub	sp, #32
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10d      	bne.n	8009a1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d004      	beq.n	8009a18 <create_chain+0x2c>
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d31b      	bcc.n	8009a50 <create_chain+0x64>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	61bb      	str	r3, [r7, #24]
 8009a1c:	e018      	b.n	8009a50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009a1e:	6839      	ldr	r1, [r7, #0]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f7ff fdea 	bl	80095fa <get_fat>
 8009a26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d801      	bhi.n	8009a32 <create_chain+0x46>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e070      	b.n	8009b14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a38:	d101      	bne.n	8009a3e <create_chain+0x52>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	e06a      	b.n	8009b14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	699b      	ldr	r3, [r3, #24]
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d201      	bcs.n	8009a4c <create_chain+0x60>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	e063      	b.n	8009b14 <create_chain+0x128>
		scl = clst;
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	3301      	adds	r3, #1
 8009a58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d307      	bcc.n	8009a74 <create_chain+0x88>
				ncl = 2;
 8009a64:	2302      	movs	r3, #2
 8009a66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009a68:	69fa      	ldr	r2, [r7, #28]
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d901      	bls.n	8009a74 <create_chain+0x88>
 8009a70:	2300      	movs	r3, #0
 8009a72:	e04f      	b.n	8009b14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009a74:	69f9      	ldr	r1, [r7, #28]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff fdbf 	bl	80095fa <get_fat>
 8009a7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00e      	beq.n	8009aa2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d003      	beq.n	8009a92 <create_chain+0xa6>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a90:	d101      	bne.n	8009a96 <create_chain+0xaa>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	e03e      	b.n	8009b14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009a96:	69fa      	ldr	r2, [r7, #28]
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d1da      	bne.n	8009a54 <create_chain+0x68>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	e038      	b.n	8009b14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009aa2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa8:	69f9      	ldr	r1, [r7, #28]
 8009aaa:	6938      	ldr	r0, [r7, #16]
 8009aac:	f7ff fe4d 	bl	800974a <put_fat>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009ab4:	7dfb      	ldrb	r3, [r7, #23]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d109      	bne.n	8009ace <create_chain+0xe2>
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d006      	beq.n	8009ace <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009ac0:	69fa      	ldr	r2, [r7, #28]
 8009ac2:	6839      	ldr	r1, [r7, #0]
 8009ac4:	6938      	ldr	r0, [r7, #16]
 8009ac6:	f7ff fe40 	bl	800974a <put_fat>
 8009aca:	4603      	mov	r3, r0
 8009acc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009ace:	7dfb      	ldrb	r3, [r7, #23]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d116      	bne.n	8009b02 <create_chain+0x116>
		fs->last_clst = ncl;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	69fa      	ldr	r2, [r7, #28]
 8009ad8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	695a      	ldr	r2, [r3, #20]
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	3b02      	subs	r3, #2
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d804      	bhi.n	8009af2 <create_chain+0x106>
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	1e5a      	subs	r2, r3, #1
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	791b      	ldrb	r3, [r3, #4]
 8009af6:	f043 0301 	orr.w	r3, r3, #1
 8009afa:	b2da      	uxtb	r2, r3
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	711a      	strb	r2, [r3, #4]
 8009b00:	e007      	b.n	8009b12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d102      	bne.n	8009b0e <create_chain+0x122>
 8009b08:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0c:	e000      	b.n	8009b10 <create_chain+0x124>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009b12:	69fb      	ldr	r3, [r7, #28]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	3304      	adds	r3, #4
 8009b32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	0a5b      	lsrs	r3, r3, #9
 8009b38:	68fa      	ldr	r2, [r7, #12]
 8009b3a:	8952      	ldrh	r2, [r2, #10]
 8009b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	1d1a      	adds	r2, r3, #4
 8009b46:	613a      	str	r2, [r7, #16]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d101      	bne.n	8009b56 <clmt_clust+0x3a>
 8009b52:	2300      	movs	r3, #0
 8009b54:	e010      	b.n	8009b78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d307      	bcc.n	8009b6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	617b      	str	r3, [r7, #20]
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	3304      	adds	r3, #4
 8009b6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009b6c:	e7e9      	b.n	8009b42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009b6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	4413      	add	r3, r2
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	371c      	adds	r7, #28
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b9a:	d204      	bcs.n	8009ba6 <dir_sdi+0x22>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	f003 031f 	and.w	r3, r3, #31
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <dir_sdi+0x26>
		return FR_INT_ERR;
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	e063      	b.n	8009c72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	683a      	ldr	r2, [r7, #0]
 8009bae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d106      	bne.n	8009bca <dir_sdi+0x46>
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d902      	bls.n	8009bca <dir_sdi+0x46>
		clst = fs->dirbase;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10c      	bne.n	8009bea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	095b      	lsrs	r3, r3, #5
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	8912      	ldrh	r2, [r2, #8]
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d301      	bcc.n	8009be0 <dir_sdi+0x5c>
 8009bdc:	2302      	movs	r3, #2
 8009bde:	e048      	b.n	8009c72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	61da      	str	r2, [r3, #28]
 8009be8:	e029      	b.n	8009c3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	895b      	ldrh	r3, [r3, #10]
 8009bee:	025b      	lsls	r3, r3, #9
 8009bf0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009bf2:	e019      	b.n	8009c28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6979      	ldr	r1, [r7, #20]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7ff fcfe 	bl	80095fa <get_fat>
 8009bfe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c06:	d101      	bne.n	8009c0c <dir_sdi+0x88>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e032      	b.n	8009c72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	2b01      	cmp	r3, #1
 8009c10:	d904      	bls.n	8009c1c <dir_sdi+0x98>
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d301      	bcc.n	8009c20 <dir_sdi+0x9c>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e028      	b.n	8009c72 <dir_sdi+0xee>
			ofs -= csz;
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009c28:	683a      	ldr	r2, [r7, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d2e1      	bcs.n	8009bf4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009c30:	6979      	ldr	r1, [r7, #20]
 8009c32:	6938      	ldr	r0, [r7, #16]
 8009c34:	f7ff fcc2 	bl	80095bc <clust2sect>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	697a      	ldr	r2, [r7, #20]
 8009c42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	69db      	ldr	r3, [r3, #28]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d101      	bne.n	8009c50 <dir_sdi+0xcc>
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	e010      	b.n	8009c72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	69da      	ldr	r2, [r3, #28]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	0a5b      	lsrs	r3, r3, #9
 8009c58:	441a      	add	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c6a:	441a      	add	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}

08009c7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009c7a:	b580      	push	{r7, lr}
 8009c7c:	b086      	sub	sp, #24
 8009c7e:	af00      	add	r7, sp, #0
 8009c80:	6078      	str	r0, [r7, #4]
 8009c82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	3320      	adds	r3, #32
 8009c90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <dir_next+0x28>
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ca0:	d301      	bcc.n	8009ca6 <dir_next+0x2c>
 8009ca2:	2304      	movs	r3, #4
 8009ca4:	e0aa      	b.n	8009dfc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f040 8098 	bne.w	8009de2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	69db      	ldr	r3, [r3, #28]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10b      	bne.n	8009cdc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	095b      	lsrs	r3, r3, #5
 8009cc8:	68fa      	ldr	r2, [r7, #12]
 8009cca:	8912      	ldrh	r2, [r2, #8]
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	f0c0 8088 	bcc.w	8009de2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	61da      	str	r2, [r3, #28]
 8009cd8:	2304      	movs	r3, #4
 8009cda:	e08f      	b.n	8009dfc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	0a5b      	lsrs	r3, r3, #9
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	8952      	ldrh	r2, [r2, #10]
 8009ce4:	3a01      	subs	r2, #1
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d17a      	bne.n	8009de2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	699b      	ldr	r3, [r3, #24]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	4610      	mov	r0, r2
 8009cf6:	f7ff fc80 	bl	80095fa <get_fat>
 8009cfa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d801      	bhi.n	8009d06 <dir_next+0x8c>
 8009d02:	2302      	movs	r3, #2
 8009d04:	e07a      	b.n	8009dfc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0c:	d101      	bne.n	8009d12 <dir_next+0x98>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e074      	b.n	8009dfc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d358      	bcc.n	8009dce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d104      	bne.n	8009d2c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	61da      	str	r2, [r3, #28]
 8009d28:	2304      	movs	r3, #4
 8009d2a:	e067      	b.n	8009dfc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f7ff fe59 	bl	80099ec <create_chain>
 8009d3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <dir_next+0xcc>
 8009d42:	2307      	movs	r3, #7
 8009d44:	e05a      	b.n	8009dfc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d101      	bne.n	8009d50 <dir_next+0xd6>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e055      	b.n	8009dfc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d56:	d101      	bne.n	8009d5c <dir_next+0xe2>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e04f      	b.n	8009dfc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff fb4d 	bl	80093fc <sync_window>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d001      	beq.n	8009d6c <dir_next+0xf2>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	e047      	b.n	8009dfc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3334      	adds	r3, #52	; 0x34
 8009d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d74:	2100      	movs	r1, #0
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff f945 	bl	8009006 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	613b      	str	r3, [r7, #16]
 8009d80:	6979      	ldr	r1, [r7, #20]
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f7ff fc1a 	bl	80095bc <clust2sect>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	631a      	str	r2, [r3, #48]	; 0x30
 8009d8e:	e012      	b.n	8009db6 <dir_next+0x13c>
						fs->wflag = 1;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2201      	movs	r2, #1
 8009d94:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f7ff fb30 	bl	80093fc <sync_window>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <dir_next+0x12c>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e02a      	b.n	8009dfc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	3301      	adds	r3, #1
 8009daa:	613b      	str	r3, [r7, #16]
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db0:	1c5a      	adds	r2, r3, #1
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	631a      	str	r2, [r3, #48]	; 0x30
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	895b      	ldrh	r3, [r3, #10]
 8009dba:	461a      	mov	r2, r3
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d3e6      	bcc.n	8009d90 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	1ad2      	subs	r2, r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009dd4:	6979      	ldr	r1, [r7, #20]
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f7ff fbf0 	bl	80095bc <clust2sect>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009df4:	441a      	add	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009e14:	2100      	movs	r1, #0
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f7ff feb4 	bl	8009b84 <dir_sdi>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d12b      	bne.n	8009e7e <dir_alloc+0x7a>
		n = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69db      	ldr	r3, [r3, #28]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f7ff fb27 	bl	8009484 <move_window>
 8009e36:	4603      	mov	r3, r0
 8009e38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d11d      	bne.n	8009e7c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a1b      	ldr	r3, [r3, #32]
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2be5      	cmp	r3, #229	; 0xe5
 8009e48:	d004      	beq.n	8009e54 <dir_alloc+0x50>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a1b      	ldr	r3, [r3, #32]
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d107      	bne.n	8009e64 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	3301      	adds	r3, #1
 8009e58:	613b      	str	r3, [r7, #16]
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d102      	bne.n	8009e68 <dir_alloc+0x64>
 8009e62:	e00c      	b.n	8009e7e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009e64:	2300      	movs	r3, #0
 8009e66:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009e68:	2101      	movs	r1, #1
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f7ff ff05 	bl	8009c7a <dir_next>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d0d7      	beq.n	8009e2a <dir_alloc+0x26>
 8009e7a:	e000      	b.n	8009e7e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009e7c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
 8009e80:	2b04      	cmp	r3, #4
 8009e82:	d101      	bne.n	8009e88 <dir_alloc+0x84>
 8009e84:	2307      	movs	r3, #7
 8009e86:	75fb      	strb	r3, [r7, #23]
	return res;
 8009e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	331a      	adds	r3, #26
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff f80d 	bl	8008ec0 <ld_word>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d109      	bne.n	8009ec6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	3314      	adds	r3, #20
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff f802 	bl	8008ec0 <ld_word>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	041b      	lsls	r3, r3, #16
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	3710      	adds	r7, #16
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	bd80      	pop	{r7, pc}

08009ed0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b084      	sub	sp, #16
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	331a      	adds	r3, #26
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	b292      	uxth	r2, r2
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f7ff f825 	bl	8008f36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	2b03      	cmp	r3, #3
 8009ef2:	d109      	bne.n	8009f08 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	f103 0214 	add.w	r2, r3, #20
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	0c1b      	lsrs	r3, r3, #16
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	4619      	mov	r1, r3
 8009f02:	4610      	mov	r0, r2
 8009f04:	f7ff f817 	bl	8008f36 <st_word>
	}
}
 8009f08:	bf00      	nop
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8009f1a:	2304      	movs	r3, #4
 8009f1c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8009f24:	e03c      	b.n	8009fa0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	69db      	ldr	r3, [r3, #28]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6938      	ldr	r0, [r7, #16]
 8009f2e:	f7ff faa9 	bl	8009484 <move_window>
 8009f32:	4603      	mov	r3, r0
 8009f34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f36:	7dfb      	ldrb	r3, [r7, #23]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d136      	bne.n	8009faa <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a1b      	ldr	r3, [r3, #32]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d102      	bne.n	8009f50 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009f4a:	2304      	movs	r3, #4
 8009f4c:	75fb      	strb	r3, [r7, #23]
 8009f4e:	e031      	b.n	8009fb4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a1b      	ldr	r3, [r3, #32]
 8009f54:	330b      	adds	r3, #11
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009f5c:	73bb      	strb	r3, [r7, #14]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	7bba      	ldrb	r2, [r7, #14]
 8009f62:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
 8009f66:	2be5      	cmp	r3, #229	; 0xe5
 8009f68:	d011      	beq.n	8009f8e <dir_read+0x7e>
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
 8009f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f6e:	d00e      	beq.n	8009f8e <dir_read+0x7e>
 8009f70:	7bbb      	ldrb	r3, [r7, #14]
 8009f72:	2b0f      	cmp	r3, #15
 8009f74:	d00b      	beq.n	8009f8e <dir_read+0x7e>
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	f023 0320 	bic.w	r3, r3, #32
 8009f7c:	2b08      	cmp	r3, #8
 8009f7e:	bf0c      	ite	eq
 8009f80:	2301      	moveq	r3, #1
 8009f82:	2300      	movne	r3, #0
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	461a      	mov	r2, r3
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d00f      	beq.n	8009fae <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8009f8e:	2100      	movs	r1, #0
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff fe72 	bl	8009c7a <dir_next>
 8009f96:	4603      	mov	r3, r0
 8009f98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009f9a:	7dfb      	ldrb	r3, [r7, #23]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d108      	bne.n	8009fb2 <dir_read+0xa2>
	while (dp->sect) {
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1be      	bne.n	8009f26 <dir_read+0x16>
 8009fa8:	e004      	b.n	8009fb4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009faa:	bf00      	nop
 8009fac:	e002      	b.n	8009fb4 <dir_read+0xa4>
				break;
 8009fae:	bf00      	nop
 8009fb0:	e000      	b.n	8009fb4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009fb2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d002      	beq.n	8009fc0 <dir_read+0xb0>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	61da      	str	r2, [r3, #28]
	return res;
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b086      	sub	sp, #24
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009fd8:	2100      	movs	r1, #0
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff fdd2 	bl	8009b84 <dir_sdi>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <dir_find+0x24>
 8009fea:	7dfb      	ldrb	r3, [r7, #23]
 8009fec:	e03e      	b.n	800a06c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	4619      	mov	r1, r3
 8009ff4:	6938      	ldr	r0, [r7, #16]
 8009ff6:	f7ff fa45 	bl	8009484 <move_window>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d12f      	bne.n	800a064 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6a1b      	ldr	r3, [r3, #32]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a00c:	7bfb      	ldrb	r3, [r7, #15]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d102      	bne.n	800a018 <dir_find+0x4e>
 800a012:	2304      	movs	r3, #4
 800a014:	75fb      	strb	r3, [r7, #23]
 800a016:	e028      	b.n	800a06a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	330b      	adds	r3, #11
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a024:	b2da      	uxtb	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	330b      	adds	r3, #11
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	f003 0308 	and.w	r3, r3, #8
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10a      	bne.n	800a050 <dir_find+0x86>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a18      	ldr	r0, [r3, #32]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	3324      	adds	r3, #36	; 0x24
 800a042:	220b      	movs	r2, #11
 800a044:	4619      	mov	r1, r3
 800a046:	f7fe fff9 	bl	800903c <mem_cmp>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00b      	beq.n	800a068 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a050:	2100      	movs	r1, #0
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7ff fe11 	bl	8009c7a <dir_next>
 800a058:	4603      	mov	r3, r0
 800a05a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a05c:	7dfb      	ldrb	r3, [r7, #23]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0c5      	beq.n	8009fee <dir_find+0x24>
 800a062:	e002      	b.n	800a06a <dir_find+0xa0>
		if (res != FR_OK) break;
 800a064:	bf00      	nop
 800a066:	e000      	b.n	800a06a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a068:	bf00      	nop

	return res;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3718      	adds	r7, #24
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a082:	2101      	movs	r1, #1
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7ff febd 	bl	8009e04 <dir_alloc>
 800a08a:	4603      	mov	r3, r0
 800a08c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d11c      	bne.n	800a0ce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	69db      	ldr	r3, [r3, #28]
 800a098:	4619      	mov	r1, r3
 800a09a:	68b8      	ldr	r0, [r7, #8]
 800a09c:	f7ff f9f2 	bl	8009484 <move_window>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d111      	bne.n	800a0ce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	2220      	movs	r2, #32
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fe ffa7 	bl	8009006 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a18      	ldr	r0, [r3, #32]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	3324      	adds	r3, #36	; 0x24
 800a0c0:	220b      	movs	r2, #11
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	f7fe ff7e 	bl	8008fc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f7ff f9c9 	bl	8009484 <move_window>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800a0f6:	7afb      	ldrb	r3, [r7, #11]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d106      	bne.n	800a10a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6a1b      	ldr	r3, [r3, #32]
 800a100:	22e5      	movs	r2, #229	; 0xe5
 800a102:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2201      	movs	r2, #1
 800a108:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800a10a:	7afb      	ldrb	r3, [r7, #11]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2200      	movs	r2, #0
 800a122:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d04e      	beq.n	800a1ca <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	613b      	str	r3, [r7, #16]
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a134:	e021      	b.n	800a17a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a1a      	ldr	r2, [r3, #32]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	1c59      	adds	r1, r3, #1
 800a13e:	6179      	str	r1, [r7, #20]
 800a140:	4413      	add	r3, r2
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a146:	7bfb      	ldrb	r3, [r7, #15]
 800a148:	2b20      	cmp	r3, #32
 800a14a:	d100      	bne.n	800a14e <get_fileinfo+0x3a>
 800a14c:	e015      	b.n	800a17a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
 800a150:	2b05      	cmp	r3, #5
 800a152:	d101      	bne.n	800a158 <get_fileinfo+0x44>
 800a154:	23e5      	movs	r3, #229	; 0xe5
 800a156:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	2b09      	cmp	r3, #9
 800a15c:	d106      	bne.n	800a16c <get_fileinfo+0x58>
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	1c5a      	adds	r2, r3, #1
 800a162:	613a      	str	r2, [r7, #16]
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	4413      	add	r3, r2
 800a168:	222e      	movs	r2, #46	; 0x2e
 800a16a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	1c5a      	adds	r2, r3, #1
 800a170:	613a      	str	r2, [r7, #16]
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	4413      	add	r3, r2
 800a176:	7bfa      	ldrb	r2, [r7, #15]
 800a178:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	2b0a      	cmp	r3, #10
 800a17e:	d9da      	bls.n	800a136 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	4413      	add	r3, r2
 800a186:	3309      	adds	r3, #9
 800a188:	2200      	movs	r2, #0
 800a18a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	7ada      	ldrb	r2, [r3, #11]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	331c      	adds	r3, #28
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fe fea7 	bl	8008ef0 <ld_dword>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	3316      	adds	r3, #22
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fe9e 	bl	8008ef0 <ld_dword>
 800a1b4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	80da      	strh	r2, [r3, #6]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	0c1b      	lsrs	r3, r3, #16
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	809a      	strh	r2, [r3, #4]
 800a1c8:	e000      	b.n	800a1cc <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a1ca:	bf00      	nop
}
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
	...

0800a1d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b088      	sub	sp, #32
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3324      	adds	r3, #36	; 0x24
 800a1e8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a1ea:	220b      	movs	r2, #11
 800a1ec:	2120      	movs	r1, #32
 800a1ee:	68b8      	ldr	r0, [r7, #8]
 800a1f0:	f7fe ff09 	bl	8009006 <mem_set>
	si = i = 0; ni = 8;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	613b      	str	r3, [r7, #16]
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	61fb      	str	r3, [r7, #28]
 800a1fc:	2308      	movs	r3, #8
 800a1fe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	1c5a      	adds	r2, r3, #1
 800a204:	61fa      	str	r2, [r7, #28]
 800a206:	68fa      	ldr	r2, [r7, #12]
 800a208:	4413      	add	r3, r2
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a20e:	7efb      	ldrb	r3, [r7, #27]
 800a210:	2b20      	cmp	r3, #32
 800a212:	d94e      	bls.n	800a2b2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a214:	7efb      	ldrb	r3, [r7, #27]
 800a216:	2b2f      	cmp	r3, #47	; 0x2f
 800a218:	d006      	beq.n	800a228 <create_name+0x54>
 800a21a:	7efb      	ldrb	r3, [r7, #27]
 800a21c:	2b5c      	cmp	r3, #92	; 0x5c
 800a21e:	d110      	bne.n	800a242 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a220:	e002      	b.n	800a228 <create_name+0x54>
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	3301      	adds	r3, #1
 800a226:	61fb      	str	r3, [r7, #28]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	4413      	add	r3, r2
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	2b2f      	cmp	r3, #47	; 0x2f
 800a232:	d0f6      	beq.n	800a222 <create_name+0x4e>
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	4413      	add	r3, r2
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	2b5c      	cmp	r3, #92	; 0x5c
 800a23e:	d0f0      	beq.n	800a222 <create_name+0x4e>
			break;
 800a240:	e038      	b.n	800a2b4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a242:	7efb      	ldrb	r3, [r7, #27]
 800a244:	2b2e      	cmp	r3, #46	; 0x2e
 800a246:	d003      	beq.n	800a250 <create_name+0x7c>
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d30c      	bcc.n	800a26a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	2b0b      	cmp	r3, #11
 800a254:	d002      	beq.n	800a25c <create_name+0x88>
 800a256:	7efb      	ldrb	r3, [r7, #27]
 800a258:	2b2e      	cmp	r3, #46	; 0x2e
 800a25a:	d001      	beq.n	800a260 <create_name+0x8c>
 800a25c:	2306      	movs	r3, #6
 800a25e:	e044      	b.n	800a2ea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a260:	2308      	movs	r3, #8
 800a262:	613b      	str	r3, [r7, #16]
 800a264:	230b      	movs	r3, #11
 800a266:	617b      	str	r3, [r7, #20]
			continue;
 800a268:	e022      	b.n	800a2b0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a26a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	da04      	bge.n	800a27c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a272:	7efb      	ldrb	r3, [r7, #27]
 800a274:	3b80      	subs	r3, #128	; 0x80
 800a276:	4a1f      	ldr	r2, [pc, #124]	; (800a2f4 <create_name+0x120>)
 800a278:	5cd3      	ldrb	r3, [r2, r3]
 800a27a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a27c:	7efb      	ldrb	r3, [r7, #27]
 800a27e:	4619      	mov	r1, r3
 800a280:	481d      	ldr	r0, [pc, #116]	; (800a2f8 <create_name+0x124>)
 800a282:	f7fe ff02 	bl	800908a <chk_chr>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <create_name+0xbc>
 800a28c:	2306      	movs	r3, #6
 800a28e:	e02c      	b.n	800a2ea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a290:	7efb      	ldrb	r3, [r7, #27]
 800a292:	2b60      	cmp	r3, #96	; 0x60
 800a294:	d905      	bls.n	800a2a2 <create_name+0xce>
 800a296:	7efb      	ldrb	r3, [r7, #27]
 800a298:	2b7a      	cmp	r3, #122	; 0x7a
 800a29a:	d802      	bhi.n	800a2a2 <create_name+0xce>
 800a29c:	7efb      	ldrb	r3, [r7, #27]
 800a29e:	3b20      	subs	r3, #32
 800a2a0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	613a      	str	r2, [r7, #16]
 800a2a8:	68ba      	ldr	r2, [r7, #8]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	7efa      	ldrb	r2, [r7, #27]
 800a2ae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a2b0:	e7a6      	b.n	800a200 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a2b2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	441a      	add	r2, r3
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <create_name+0xf4>
 800a2c4:	2306      	movs	r3, #6
 800a2c6:	e010      	b.n	800a2ea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2be5      	cmp	r3, #229	; 0xe5
 800a2ce:	d102      	bne.n	800a2d6 <create_name+0x102>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2205      	movs	r2, #5
 800a2d4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a2d6:	7efb      	ldrb	r3, [r7, #27]
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	d801      	bhi.n	800a2e0 <create_name+0x10c>
 800a2dc:	2204      	movs	r2, #4
 800a2de:	e000      	b.n	800a2e2 <create_name+0x10e>
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	330b      	adds	r3, #11
 800a2e6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a2e8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3720      	adds	r7, #32
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	080105bc 	.word	0x080105bc
 800a2f8:	08010550 	.word	0x08010550

0800a2fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a310:	e002      	b.n	800a318 <follow_path+0x1c>
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	3301      	adds	r3, #1
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	2b2f      	cmp	r3, #47	; 0x2f
 800a31e:	d0f8      	beq.n	800a312 <follow_path+0x16>
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2b5c      	cmp	r3, #92	; 0x5c
 800a326:	d0f4      	beq.n	800a312 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2200      	movs	r2, #0
 800a32c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	2b1f      	cmp	r3, #31
 800a334:	d80a      	bhi.n	800a34c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2280      	movs	r2, #128	; 0x80
 800a33a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a33e:	2100      	movs	r1, #0
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7ff fc1f 	bl	8009b84 <dir_sdi>
 800a346:	4603      	mov	r3, r0
 800a348:	75fb      	strb	r3, [r7, #23]
 800a34a:	e043      	b.n	800a3d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a34c:	463b      	mov	r3, r7
 800a34e:	4619      	mov	r1, r3
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f7ff ff3f 	bl	800a1d4 <create_name>
 800a356:	4603      	mov	r3, r0
 800a358:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a35a:	7dfb      	ldrb	r3, [r7, #23]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d134      	bne.n	800a3ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff fe32 	bl	8009fca <dir_find>
 800a366:	4603      	mov	r3, r0
 800a368:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a370:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00a      	beq.n	800a38e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d127      	bne.n	800a3ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a37e:	7afb      	ldrb	r3, [r7, #11]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d122      	bne.n	800a3ce <follow_path+0xd2>
 800a388:	2305      	movs	r3, #5
 800a38a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a38c:	e01f      	b.n	800a3ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a38e:	7afb      	ldrb	r3, [r7, #11]
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b00      	cmp	r3, #0
 800a396:	d11c      	bne.n	800a3d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	799b      	ldrb	r3, [r3, #6]
 800a39c:	f003 0310 	and.w	r3, r3, #16
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d102      	bne.n	800a3aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a3a4:	2305      	movs	r3, #5
 800a3a6:	75fb      	strb	r3, [r7, #23]
 800a3a8:	e014      	b.n	800a3d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3b8:	4413      	add	r3, r2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f7ff fd68 	bl	8009e92 <ld_clust>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a3c8:	e7c0      	b.n	800a34c <follow_path+0x50>
			if (res != FR_OK) break;
 800a3ca:	bf00      	nop
 800a3cc:	e002      	b.n	800a3d4 <follow_path+0xd8>
				break;
 800a3ce:	bf00      	nop
 800a3d0:	e000      	b.n	800a3d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a3d2:	bf00      	nop
			}
		}
	}

	return res;
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b087      	sub	sp, #28
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a3e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d031      	beq.n	800a458 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	617b      	str	r3, [r7, #20]
 800a3fa:	e002      	b.n	800a402 <get_ldnumber+0x24>
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	3301      	adds	r3, #1
 800a400:	617b      	str	r3, [r7, #20]
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b20      	cmp	r3, #32
 800a408:	d903      	bls.n	800a412 <get_ldnumber+0x34>
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b3a      	cmp	r3, #58	; 0x3a
 800a410:	d1f4      	bne.n	800a3fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	2b3a      	cmp	r3, #58	; 0x3a
 800a418:	d11c      	bne.n	800a454 <get_ldnumber+0x76>
			tp = *path;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	60fa      	str	r2, [r7, #12]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	3b30      	subs	r3, #48	; 0x30
 800a42a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2b09      	cmp	r3, #9
 800a430:	d80e      	bhi.n	800a450 <get_ldnumber+0x72>
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	429a      	cmp	r2, r3
 800a438:	d10a      	bne.n	800a450 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d107      	bne.n	800a450 <get_ldnumber+0x72>
					vol = (int)i;
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	3301      	adds	r3, #1
 800a448:	617b      	str	r3, [r7, #20]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	e002      	b.n	800a45a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a454:	2300      	movs	r3, #0
 800a456:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a458:	693b      	ldr	r3, [r7, #16]
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	371c      	adds	r7, #28
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
	...

0800a468 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	70da      	strb	r2, [r3, #3]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f04f 32ff 	mov.w	r2, #4294967295
 800a47e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f7fe fffe 	bl	8009484 <move_window>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <check_fs+0x2a>
 800a48e:	2304      	movs	r3, #4
 800a490:	e038      	b.n	800a504 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	3334      	adds	r3, #52	; 0x34
 800a496:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a49a:	4618      	mov	r0, r3
 800a49c:	f7fe fd10 	bl	8008ec0 <ld_word>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d001      	beq.n	800a4b0 <check_fs+0x48>
 800a4ac:	2303      	movs	r3, #3
 800a4ae:	e029      	b.n	800a504 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4b6:	2be9      	cmp	r3, #233	; 0xe9
 800a4b8:	d009      	beq.n	800a4ce <check_fs+0x66>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4c0:	2beb      	cmp	r3, #235	; 0xeb
 800a4c2:	d11e      	bne.n	800a502 <check_fs+0x9a>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a4ca:	2b90      	cmp	r3, #144	; 0x90
 800a4cc:	d119      	bne.n	800a502 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3334      	adds	r3, #52	; 0x34
 800a4d2:	3336      	adds	r3, #54	; 0x36
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7fe fd0b 	bl	8008ef0 <ld_dword>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a4e0:	4a0a      	ldr	r2, [pc, #40]	; (800a50c <check_fs+0xa4>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d101      	bne.n	800a4ea <check_fs+0x82>
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	e00c      	b.n	800a504 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	3334      	adds	r3, #52	; 0x34
 800a4ee:	3352      	adds	r3, #82	; 0x52
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f7fe fcfd 	bl	8008ef0 <ld_dword>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4a05      	ldr	r2, [pc, #20]	; (800a510 <check_fs+0xa8>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d101      	bne.n	800a502 <check_fs+0x9a>
 800a4fe:	2300      	movs	r3, #0
 800a500:	e000      	b.n	800a504 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a502:	2302      	movs	r3, #2
}
 800a504:	4618      	mov	r0, r3
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	00544146 	.word	0x00544146
 800a510:	33544146 	.word	0x33544146

0800a514 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b096      	sub	sp, #88	; 0x58
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	4613      	mov	r3, r2
 800a520:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f7ff ff58 	bl	800a3de <get_ldnumber>
 800a52e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a532:	2b00      	cmp	r3, #0
 800a534:	da01      	bge.n	800a53a <find_volume+0x26>
 800a536:	230b      	movs	r3, #11
 800a538:	e235      	b.n	800a9a6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a53a:	4aa5      	ldr	r2, [pc, #660]	; (800a7d0 <find_volume+0x2bc>)
 800a53c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a53e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a542:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	2b00      	cmp	r3, #0
 800a548:	d101      	bne.n	800a54e <find_volume+0x3a>
 800a54a:	230c      	movs	r3, #12
 800a54c:	e22b      	b.n	800a9a6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800a54e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a550:	f7fe fdb6 	bl	80090c0 <lock_fs>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d101      	bne.n	800a55e <find_volume+0x4a>
 800a55a:	230f      	movs	r3, #15
 800a55c:	e223      	b.n	800a9a6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a562:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	f023 0301 	bic.w	r3, r3, #1
 800a56a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d01a      	beq.n	800a5aa <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a576:	785b      	ldrb	r3, [r3, #1]
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe fc03 	bl	8008d84 <disk_status>
 800a57e:	4603      	mov	r3, r0
 800a580:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a584:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a588:	f003 0301 	and.w	r3, r3, #1
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10c      	bne.n	800a5aa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a590:	79fb      	ldrb	r3, [r7, #7]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d007      	beq.n	800a5a6 <find_volume+0x92>
 800a596:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a5a2:	230a      	movs	r3, #10
 800a5a4:	e1ff      	b.n	800a9a6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e1fd      	b.n	800a9a6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b2:	b2da      	uxtb	r2, r3
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ba:	785b      	ldrb	r3, [r3, #1]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fbfb 	bl	8008db8 <disk_initialize>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a5c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5cc:	f003 0301 	and.w	r3, r3, #1
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e1e6      	b.n	800a9a6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a5d8:	79fb      	ldrb	r3, [r7, #7]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d007      	beq.n	800a5ee <find_volume+0xda>
 800a5de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5e2:	f003 0304 	and.w	r3, r3, #4
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d001      	beq.n	800a5ee <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a5ea:	230a      	movs	r3, #10
 800a5ec:	e1db      	b.n	800a9a6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a5f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a5f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5f6:	f7ff ff37 	bl	800a468 <check_fs>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a604:	2b02      	cmp	r3, #2
 800a606:	d149      	bne.n	800a69c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a608:	2300      	movs	r3, #0
 800a60a:	643b      	str	r3, [r7, #64]	; 0x40
 800a60c:	e01e      	b.n	800a64c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a614:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a616:	011b      	lsls	r3, r3, #4
 800a618:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a61c:	4413      	add	r3, r2
 800a61e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	3304      	adds	r3, #4
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d006      	beq.n	800a638 <find_volume+0x124>
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	3308      	adds	r3, #8
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fe fc5e 	bl	8008ef0 <ld_dword>
 800a634:	4602      	mov	r2, r0
 800a636:	e000      	b.n	800a63a <find_volume+0x126>
 800a638:	2200      	movs	r2, #0
 800a63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	3358      	adds	r3, #88	; 0x58
 800a640:	443b      	add	r3, r7
 800a642:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a648:	3301      	adds	r3, #1
 800a64a:	643b      	str	r3, [r7, #64]	; 0x40
 800a64c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a64e:	2b03      	cmp	r3, #3
 800a650:	d9dd      	bls.n	800a60e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a652:	2300      	movs	r3, #0
 800a654:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <find_volume+0x14e>
 800a65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65e:	3b01      	subs	r3, #1
 800a660:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	3358      	adds	r3, #88	; 0x58
 800a668:	443b      	add	r3, r7
 800a66a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a66e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a672:	2b00      	cmp	r3, #0
 800a674:	d005      	beq.n	800a682 <find_volume+0x16e>
 800a676:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a678:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a67a:	f7ff fef5 	bl	800a468 <check_fs>
 800a67e:	4603      	mov	r3, r0
 800a680:	e000      	b.n	800a684 <find_volume+0x170>
 800a682:	2303      	movs	r3, #3
 800a684:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a688:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d905      	bls.n	800a69c <find_volume+0x188>
 800a690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a692:	3301      	adds	r3, #1
 800a694:	643b      	str	r3, [r7, #64]	; 0x40
 800a696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d9e2      	bls.n	800a662 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a69c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d101      	bne.n	800a6a8 <find_volume+0x194>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e17e      	b.n	800a9a6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a6a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d901      	bls.n	800a6b4 <find_volume+0x1a0>
 800a6b0:	230d      	movs	r3, #13
 800a6b2:	e178      	b.n	800a9a6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	3334      	adds	r3, #52	; 0x34
 800a6b8:	330b      	adds	r3, #11
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fe fc00 	bl	8008ec0 <ld_word>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6c6:	d001      	beq.n	800a6cc <find_volume+0x1b8>
 800a6c8:	230d      	movs	r3, #13
 800a6ca:	e16c      	b.n	800a9a6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	3334      	adds	r3, #52	; 0x34
 800a6d0:	3316      	adds	r3, #22
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fe fbf4 	bl	8008ec0 <ld_word>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <find_volume+0x1dc>
 800a6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e4:	3334      	adds	r3, #52	; 0x34
 800a6e6:	3324      	adds	r3, #36	; 0x24
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f7fe fc01 	bl	8008ef0 <ld_dword>
 800a6ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	789b      	ldrb	r3, [r3, #2]
 800a704:	2b01      	cmp	r3, #1
 800a706:	d005      	beq.n	800a714 <find_volume+0x200>
 800a708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70a:	789b      	ldrb	r3, [r3, #2]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d001      	beq.n	800a714 <find_volume+0x200>
 800a710:	230d      	movs	r3, #13
 800a712:	e148      	b.n	800a9a6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	789b      	ldrb	r3, [r3, #2]
 800a718:	461a      	mov	r2, r3
 800a71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a71c:	fb02 f303 	mul.w	r3, r2, r3
 800a720:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a728:	b29a      	uxth	r2, r3
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a730:	895b      	ldrh	r3, [r3, #10]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d008      	beq.n	800a748 <find_volume+0x234>
 800a736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a738:	895b      	ldrh	r3, [r3, #10]
 800a73a:	461a      	mov	r2, r3
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	895b      	ldrh	r3, [r3, #10]
 800a740:	3b01      	subs	r3, #1
 800a742:	4013      	ands	r3, r2
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <find_volume+0x238>
 800a748:	230d      	movs	r3, #13
 800a74a:	e12c      	b.n	800a9a6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74e:	3334      	adds	r3, #52	; 0x34
 800a750:	3311      	adds	r3, #17
 800a752:	4618      	mov	r0, r3
 800a754:	f7fe fbb4 	bl	8008ec0 <ld_word>
 800a758:	4603      	mov	r3, r0
 800a75a:	461a      	mov	r2, r3
 800a75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	891b      	ldrh	r3, [r3, #8]
 800a764:	f003 030f 	and.w	r3, r3, #15
 800a768:	b29b      	uxth	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <find_volume+0x25e>
 800a76e:	230d      	movs	r3, #13
 800a770:	e119      	b.n	800a9a6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a774:	3334      	adds	r3, #52	; 0x34
 800a776:	3313      	adds	r3, #19
 800a778:	4618      	mov	r0, r3
 800a77a:	f7fe fba1 	bl	8008ec0 <ld_word>
 800a77e:	4603      	mov	r3, r0
 800a780:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a782:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a784:	2b00      	cmp	r3, #0
 800a786:	d106      	bne.n	800a796 <find_volume+0x282>
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	3334      	adds	r3, #52	; 0x34
 800a78c:	3320      	adds	r3, #32
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fe fbae 	bl	8008ef0 <ld_dword>
 800a794:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a798:	3334      	adds	r3, #52	; 0x34
 800a79a:	330e      	adds	r3, #14
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fe fb8f 	bl	8008ec0 <ld_word>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a7a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d101      	bne.n	800a7b0 <find_volume+0x29c>
 800a7ac:	230d      	movs	r3, #13
 800a7ae:	e0fa      	b.n	800a9a6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a7b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a7b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7b4:	4413      	add	r3, r2
 800a7b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7b8:	8912      	ldrh	r2, [r2, #8]
 800a7ba:	0912      	lsrs	r2, r2, #4
 800a7bc:	b292      	uxth	r2, r2
 800a7be:	4413      	add	r3, r2
 800a7c0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a7c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d204      	bcs.n	800a7d4 <find_volume+0x2c0>
 800a7ca:	230d      	movs	r3, #13
 800a7cc:	e0eb      	b.n	800a9a6 <find_volume+0x492>
 800a7ce:	bf00      	nop
 800a7d0:	20001734 	.word	0x20001734
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a7d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7dc:	8952      	ldrh	r2, [r2, #10]
 800a7de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7e2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <find_volume+0x2da>
 800a7ea:	230d      	movs	r3, #13
 800a7ec:	e0db      	b.n	800a9a6 <find_volume+0x492>
		fmt = FS_FAT32;
 800a7ee:	2303      	movs	r3, #3
 800a7f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7f6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d802      	bhi.n	800a804 <find_volume+0x2f0>
 800a7fe:	2302      	movs	r3, #2
 800a800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a806:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d802      	bhi.n	800a814 <find_volume+0x300>
 800a80e:	2301      	movs	r3, #1
 800a810:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a816:	1c9a      	adds	r2, r3, #2
 800a818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a820:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a822:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a826:	441a      	add	r2, r3
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a82c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	441a      	add	r2, r3
 800a832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a834:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a836:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d11e      	bne.n	800a87c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	3334      	adds	r3, #52	; 0x34
 800a842:	332a      	adds	r3, #42	; 0x2a
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fb3b 	bl	8008ec0 <ld_word>
 800a84a:	4603      	mov	r3, r0
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d001      	beq.n	800a854 <find_volume+0x340>
 800a850:	230d      	movs	r3, #13
 800a852:	e0a8      	b.n	800a9a6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	891b      	ldrh	r3, [r3, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d001      	beq.n	800a860 <find_volume+0x34c>
 800a85c:	230d      	movs	r3, #13
 800a85e:	e0a2      	b.n	800a9a6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a862:	3334      	adds	r3, #52	; 0x34
 800a864:	332c      	adds	r3, #44	; 0x2c
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe fb42 	bl	8008ef0 <ld_dword>
 800a86c:	4602      	mov	r2, r0
 800a86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a870:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	647b      	str	r3, [r7, #68]	; 0x44
 800a87a:	e01f      	b.n	800a8bc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87e:	891b      	ldrh	r3, [r3, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d101      	bne.n	800a888 <find_volume+0x374>
 800a884:	230d      	movs	r3, #13
 800a886:	e08e      	b.n	800a9a6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a88c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a88e:	441a      	add	r2, r3
 800a890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a892:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a898:	2b02      	cmp	r3, #2
 800a89a:	d103      	bne.n	800a8a4 <find_volume+0x390>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	e00a      	b.n	800a8ba <find_volume+0x3a6>
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a6:	699a      	ldr	r2, [r3, #24]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	005b      	lsls	r3, r3, #1
 800a8ac:	4413      	add	r3, r2
 800a8ae:	085a      	lsrs	r2, r3, #1
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b2:	699b      	ldr	r3, [r3, #24]
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a8ba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	69da      	ldr	r2, [r3, #28]
 800a8c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a8c6:	0a5b      	lsrs	r3, r3, #9
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d201      	bcs.n	800a8d0 <find_volume+0x3bc>
 800a8cc:	230d      	movs	r3, #13
 800a8ce:	e06a      	b.n	800a9a6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d6:	615a      	str	r2, [r3, #20]
 800a8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8da:	695a      	ldr	r2, [r3, #20]
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e2:	2280      	movs	r2, #128	; 0x80
 800a8e4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a8e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d149      	bne.n	800a982 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f0:	3334      	adds	r3, #52	; 0x34
 800a8f2:	3330      	adds	r3, #48	; 0x30
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fe fae3 	bl	8008ec0 <ld_word>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d140      	bne.n	800a982 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a902:	3301      	adds	r3, #1
 800a904:	4619      	mov	r1, r3
 800a906:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a908:	f7fe fdbc 	bl	8009484 <move_window>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d137      	bne.n	800a982 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800a912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a914:	2200      	movs	r2, #0
 800a916:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91a:	3334      	adds	r3, #52	; 0x34
 800a91c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a920:	4618      	mov	r0, r3
 800a922:	f7fe facd 	bl	8008ec0 <ld_word>
 800a926:	4603      	mov	r3, r0
 800a928:	461a      	mov	r2, r3
 800a92a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a92e:	429a      	cmp	r2, r3
 800a930:	d127      	bne.n	800a982 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a934:	3334      	adds	r3, #52	; 0x34
 800a936:	4618      	mov	r0, r3
 800a938:	f7fe fada 	bl	8008ef0 <ld_dword>
 800a93c:	4603      	mov	r3, r0
 800a93e:	4a1c      	ldr	r2, [pc, #112]	; (800a9b0 <find_volume+0x49c>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d11e      	bne.n	800a982 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a946:	3334      	adds	r3, #52	; 0x34
 800a948:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fe facf 	bl	8008ef0 <ld_dword>
 800a952:	4603      	mov	r3, r0
 800a954:	4a17      	ldr	r2, [pc, #92]	; (800a9b4 <find_volume+0x4a0>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d113      	bne.n	800a982 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	3334      	adds	r3, #52	; 0x34
 800a95e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a962:	4618      	mov	r0, r3
 800a964:	f7fe fac4 	bl	8008ef0 <ld_dword>
 800a968:	4602      	mov	r2, r0
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a970:	3334      	adds	r3, #52	; 0x34
 800a972:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a976:	4618      	mov	r0, r3
 800a978:	f7fe faba 	bl	8008ef0 <ld_dword>
 800a97c:	4602      	mov	r2, r0
 800a97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a980:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a988:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a98a:	4b0b      	ldr	r3, [pc, #44]	; (800a9b8 <find_volume+0x4a4>)
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	3301      	adds	r3, #1
 800a990:	b29a      	uxth	r2, r3
 800a992:	4b09      	ldr	r3, [pc, #36]	; (800a9b8 <find_volume+0x4a4>)
 800a994:	801a      	strh	r2, [r3, #0]
 800a996:	4b08      	ldr	r3, [pc, #32]	; (800a9b8 <find_volume+0x4a4>)
 800a998:	881a      	ldrh	r2, [r3, #0]
 800a99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a99e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9a0:	f7fe fd08 	bl	80093b4 <clear_lock>
#endif
	return FR_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3758      	adds	r7, #88	; 0x58
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	41615252 	.word	0x41615252
 800a9b4:	61417272 	.word	0x61417272
 800a9b8:	20001738 	.word	0x20001738

0800a9bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a9c6:	2309      	movs	r3, #9
 800a9c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d02e      	beq.n	800aa2e <validate+0x72>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d02a      	beq.n	800aa2e <validate+0x72>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d025      	beq.n	800aa2e <validate+0x72>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	889a      	ldrh	r2, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	88db      	ldrh	r3, [r3, #6]
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	d11e      	bne.n	800aa2e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fb63 	bl	80090c0 <lock_fs>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d014      	beq.n	800aa2a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	785b      	ldrb	r3, [r3, #1]
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe f9bc 	bl	8008d84 <disk_status>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	f003 0301 	and.w	r3, r3, #1
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d102      	bne.n	800aa1c <validate+0x60>
				res = FR_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]
 800aa1a:	e008      	b.n	800aa2e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2100      	movs	r1, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fb62 	bl	80090ec <unlock_fs>
 800aa28:	e001      	b.n	800aa2e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800aa2a:	230f      	movs	r3, #15
 800aa2c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aa2e:	7bfb      	ldrb	r3, [r7, #15]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d102      	bne.n	800aa3a <validate+0x7e>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	e000      	b.n	800aa3c <validate+0x80>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	6013      	str	r3, [r2, #0]
	return res;
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
	...

0800aa4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b088      	sub	sp, #32
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800aa5e:	f107 0310 	add.w	r3, r7, #16
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7ff fcbb 	bl	800a3de <get_ldnumber>
 800aa68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	da01      	bge.n	800aa74 <f_mount+0x28>
 800aa70:	230b      	movs	r3, #11
 800aa72:	e048      	b.n	800ab06 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800aa74:	4a26      	ldr	r2, [pc, #152]	; (800ab10 <f_mount+0xc4>)
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00f      	beq.n	800aaa4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800aa84:	69b8      	ldr	r0, [r7, #24]
 800aa86:	f7fe fc95 	bl	80093b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f000 feb5 	bl	800b7fe <ff_del_syncobj>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <f_mount+0x52>
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	e033      	b.n	800ab06 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800aa9e:	69bb      	ldr	r3, [r7, #24]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00f      	beq.n	800aaca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	330c      	adds	r3, #12
 800aab8:	4619      	mov	r1, r3
 800aaba:	4610      	mov	r0, r2
 800aabc:	f000 fe7f 	bl	800b7be <ff_cre_syncobj>
 800aac0:	4603      	mov	r3, r0
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <f_mount+0x7e>
 800aac6:	2302      	movs	r3, #2
 800aac8:	e01d      	b.n	800ab06 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	4910      	ldr	r1, [pc, #64]	; (800ab10 <f_mount+0xc4>)
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <f_mount+0x94>
 800aada:	79fb      	ldrb	r3, [r7, #7]
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d001      	beq.n	800aae4 <f_mount+0x98>
 800aae0:	2300      	movs	r3, #0
 800aae2:	e010      	b.n	800ab06 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800aae4:	f107 010c 	add.w	r1, r7, #12
 800aae8:	f107 0308 	add.w	r3, r7, #8
 800aaec:	2200      	movs	r2, #0
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7ff fd10 	bl	800a514 <find_volume>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	7dfa      	ldrb	r2, [r7, #23]
 800aafc:	4611      	mov	r1, r2
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7fe faf4 	bl	80090ec <unlock_fs>
 800ab04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3720      	adds	r7, #32
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	20001734 	.word	0x20001734

0800ab14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b098      	sub	sp, #96	; 0x60
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d101      	bne.n	800ab2c <f_open+0x18>
 800ab28:	2309      	movs	r3, #9
 800ab2a:	e1b4      	b.n	800ae96 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ab2c:	79fb      	ldrb	r3, [r7, #7]
 800ab2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ab34:	79fa      	ldrb	r2, [r7, #7]
 800ab36:	f107 0110 	add.w	r1, r7, #16
 800ab3a:	f107 0308 	add.w	r3, r7, #8
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff fce8 	bl	800a514 <find_volume>
 800ab44:	4603      	mov	r3, r0
 800ab46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ab4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f040 8191 	bne.w	800ae76 <f_open+0x362>
		dj.obj.fs = fs;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	f107 0314 	add.w	r3, r7, #20
 800ab5e:	4611      	mov	r1, r2
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7ff fbcb 	bl	800a2fc <follow_path>
 800ab66:	4603      	mov	r3, r0
 800ab68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ab6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d11a      	bne.n	800abaa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ab74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ab78:	b25b      	sxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	da03      	bge.n	800ab86 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ab7e:	2306      	movs	r3, #6
 800ab80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab84:	e011      	b.n	800abaa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab86:	79fb      	ldrb	r3, [r7, #7]
 800ab88:	f023 0301 	bic.w	r3, r3, #1
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	bf14      	ite	ne
 800ab90:	2301      	movne	r3, #1
 800ab92:	2300      	moveq	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	461a      	mov	r2, r3
 800ab98:	f107 0314 	add.w	r3, r7, #20
 800ab9c:	4611      	mov	r1, r2
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fac0 	bl	8009124 <chk_lock>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800abaa:	79fb      	ldrb	r3, [r7, #7]
 800abac:	f003 031c 	and.w	r3, r3, #28
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d07f      	beq.n	800acb4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800abb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d017      	beq.n	800abec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800abbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d10e      	bne.n	800abe2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800abc4:	f7fe fb0a 	bl	80091dc <enq_lock>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d006      	beq.n	800abdc <f_open+0xc8>
 800abce:	f107 0314 	add.w	r3, r7, #20
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff fa4e 	bl	800a074 <dir_register>
 800abd8:	4603      	mov	r3, r0
 800abda:	e000      	b.n	800abde <f_open+0xca>
 800abdc:	2312      	movs	r3, #18
 800abde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800abe2:	79fb      	ldrb	r3, [r7, #7]
 800abe4:	f043 0308 	orr.w	r3, r3, #8
 800abe8:	71fb      	strb	r3, [r7, #7]
 800abea:	e010      	b.n	800ac0e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800abec:	7ebb      	ldrb	r3, [r7, #26]
 800abee:	f003 0311 	and.w	r3, r3, #17
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <f_open+0xea>
					res = FR_DENIED;
 800abf6:	2307      	movs	r3, #7
 800abf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800abfc:	e007      	b.n	800ac0e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800abfe:	79fb      	ldrb	r3, [r7, #7]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d002      	beq.n	800ac0e <f_open+0xfa>
 800ac08:	2308      	movs	r3, #8
 800ac0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d168      	bne.n	800ace8 <f_open+0x1d4>
 800ac16:	79fb      	ldrb	r3, [r7, #7]
 800ac18:	f003 0308 	and.w	r3, r3, #8
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d063      	beq.n	800ace8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ac20:	f7fe f852 	bl	8008cc8 <get_fattime>
 800ac24:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ac26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac28:	330e      	adds	r3, #14
 800ac2a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fe f99d 	bl	8008f6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ac32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac34:	3316      	adds	r3, #22
 800ac36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f7fe f997 	bl	8008f6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ac3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac40:	330b      	adds	r3, #11
 800ac42:	2220      	movs	r2, #32
 800ac44:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac4a:	4611      	mov	r1, r2
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7ff f920 	bl	8009e92 <ld_clust>
 800ac52:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ac58:	2200      	movs	r2, #0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff f938 	bl	8009ed0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ac60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac62:	331c      	adds	r3, #28
 800ac64:	2100      	movs	r1, #0
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe f980 	bl	8008f6c <st_dword>
					fs->wflag = 1;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ac72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d037      	beq.n	800ace8 <f_open+0x1d4>
						dw = fs->winsect;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ac7e:	f107 0314 	add.w	r3, r7, #20
 800ac82:	2200      	movs	r2, #0
 800ac84:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fe fe4b 	bl	8009922 <remove_chain>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ac92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d126      	bne.n	800ace8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe fbf0 	bl	8009484 <move_window>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800acae:	3a01      	subs	r2, #1
 800acb0:	611a      	str	r2, [r3, #16]
 800acb2:	e019      	b.n	800ace8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800acb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d115      	bne.n	800ace8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800acbc:	7ebb      	ldrb	r3, [r7, #26]
 800acbe:	f003 0310 	and.w	r3, r3, #16
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d003      	beq.n	800acce <f_open+0x1ba>
					res = FR_NO_FILE;
 800acc6:	2304      	movs	r3, #4
 800acc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800accc:	e00c      	b.n	800ace8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	f003 0302 	and.w	r3, r3, #2
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d007      	beq.n	800ace8 <f_open+0x1d4>
 800acd8:	7ebb      	ldrb	r3, [r7, #26]
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d002      	beq.n	800ace8 <f_open+0x1d4>
						res = FR_DENIED;
 800ace2:	2307      	movs	r3, #7
 800ace4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ace8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acec:	2b00      	cmp	r3, #0
 800acee:	d128      	bne.n	800ad42 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800acf0:	79fb      	ldrb	r3, [r7, #7]
 800acf2:	f003 0308 	and.w	r3, r3, #8
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad00:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ad0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad10:	79fb      	ldrb	r3, [r7, #7]
 800ad12:	f023 0301 	bic.w	r3, r3, #1
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	bf14      	ite	ne
 800ad1a:	2301      	movne	r3, #1
 800ad1c:	2300      	moveq	r3, #0
 800ad1e:	b2db      	uxtb	r3, r3
 800ad20:	461a      	mov	r2, r3
 800ad22:	f107 0314 	add.w	r3, r7, #20
 800ad26:	4611      	mov	r1, r2
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fe fa79 	bl	8009220 <inc_lock>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <f_open+0x22e>
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ad42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f040 8095 	bne.w	800ae76 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad50:	4611      	mov	r1, r2
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7ff f89d 	bl	8009e92 <ld_clust>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ad5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad60:	331c      	adds	r3, #28
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7fe f8c4 	bl	8008ef0 <ld_dword>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	88da      	ldrh	r2, [r3, #6]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	79fa      	ldrb	r2, [r7, #7]
 800ad86:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	2200      	movs	r2, #0
 800ad92:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2200      	movs	r2, #0
 800ad98:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	3330      	adds	r3, #48	; 0x30
 800ad9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ada2:	2100      	movs	r1, #0
 800ada4:	4618      	mov	r0, r3
 800ada6:	f7fe f92e 	bl	8009006 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800adaa:	79fb      	ldrb	r3, [r7, #7]
 800adac:	f003 0320 	and.w	r3, r3, #32
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d060      	beq.n	800ae76 <f_open+0x362>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d05c      	beq.n	800ae76 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	68da      	ldr	r2, [r3, #12]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	895b      	ldrh	r3, [r3, #10]
 800adc8:	025b      	lsls	r3, r3, #9
 800adca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	68db      	ldr	r3, [r3, #12]
 800add6:	657b      	str	r3, [r7, #84]	; 0x54
 800add8:	e016      	b.n	800ae08 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fe fc0b 	bl	80095fa <get_fat>
 800ade4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ade6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d802      	bhi.n	800adf2 <f_open+0x2de>
 800adec:	2302      	movs	r3, #2
 800adee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800adf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800adf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf8:	d102      	bne.n	800ae00 <f_open+0x2ec>
 800adfa:	2301      	movs	r3, #1
 800adfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae04:	1ad3      	subs	r3, r2, r3
 800ae06:	657b      	str	r3, [r7, #84]	; 0x54
 800ae08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d103      	bne.n	800ae18 <f_open+0x304>
 800ae10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d8e0      	bhi.n	800adda <f_open+0x2c6>
				}
				fp->clust = clst;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae1c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ae1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d127      	bne.n	800ae76 <f_open+0x362>
 800ae26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d022      	beq.n	800ae76 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae34:	4618      	mov	r0, r3
 800ae36:	f7fe fbc1 	bl	80095bc <clust2sect>
 800ae3a:	6478      	str	r0, [r7, #68]	; 0x44
 800ae3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d103      	bne.n	800ae4a <f_open+0x336>
						res = FR_INT_ERR;
 800ae42:	2302      	movs	r3, #2
 800ae44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ae48:	e015      	b.n	800ae76 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ae4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae4c:	0a5a      	lsrs	r2, r3, #9
 800ae4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae50:	441a      	add	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	7858      	ldrb	r0, [r3, #1]
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6a1a      	ldr	r2, [r3, #32]
 800ae64:	2301      	movs	r3, #1
 800ae66:	f7fd ffcd 	bl	8008e04 <disk_read>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d002      	beq.n	800ae76 <f_open+0x362>
 800ae70:	2301      	movs	r3, #1
 800ae72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ae76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d002      	beq.n	800ae84 <f_open+0x370>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2200      	movs	r2, #0
 800ae82:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fe f92d 	bl	80090ec <unlock_fs>
 800ae92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3760      	adds	r7, #96	; 0x60
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b08c      	sub	sp, #48	; 0x30
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	60f8      	str	r0, [r7, #12]
 800aea6:	60b9      	str	r1, [r7, #8]
 800aea8:	607a      	str	r2, [r7, #4]
 800aeaa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f107 0210 	add.w	r2, r7, #16
 800aebc:	4611      	mov	r1, r2
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7ff fd7c 	bl	800a9bc <validate>
 800aec4:	4603      	mov	r3, r0
 800aec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800aeca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d107      	bne.n	800aee2 <f_write+0x44>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	7d5b      	ldrb	r3, [r3, #21]
 800aed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aeda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d009      	beq.n	800aef6 <f_write+0x58>
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aee8:	4611      	mov	r1, r2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7fe f8fe 	bl	80090ec <unlock_fs>
 800aef0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aef4:	e173      	b.n	800b1de <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	7d1b      	ldrb	r3, [r3, #20]
 800aefa:	f003 0302 	and.w	r3, r3, #2
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <f_write+0x72>
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	2107      	movs	r1, #7
 800af06:	4618      	mov	r0, r3
 800af08:	f7fe f8f0 	bl	80090ec <unlock_fs>
 800af0c:	2307      	movs	r3, #7
 800af0e:	e166      	b.n	800b1de <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	699a      	ldr	r2, [r3, #24]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	441a      	add	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	f080 814b 	bcs.w	800b1b8 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	43db      	mvns	r3, r3
 800af28:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800af2a:	e145      	b.n	800b1b8 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 8101 	bne.w	800b13c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	699b      	ldr	r3, [r3, #24]
 800af3e:	0a5b      	lsrs	r3, r3, #9
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	8952      	ldrh	r2, [r2, #10]
 800af44:	3a01      	subs	r2, #1
 800af46:	4013      	ands	r3, r2
 800af48:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d14d      	bne.n	800afec <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d10c      	bne.n	800af72 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	2b00      	cmp	r3, #0
 800af62:	d11a      	bne.n	800af9a <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2100      	movs	r1, #0
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fe fd3f 	bl	80099ec <create_chain>
 800af6e:	62b8      	str	r0, [r7, #40]	; 0x28
 800af70:	e013      	b.n	800af9a <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d007      	beq.n	800af8a <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	4619      	mov	r1, r3
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f7fe fdcb 	bl	8009b1c <clmt_clust>
 800af86:	62b8      	str	r0, [r7, #40]	; 0x28
 800af88:	e007      	b.n	800af9a <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	69db      	ldr	r3, [r3, #28]
 800af90:	4619      	mov	r1, r3
 800af92:	4610      	mov	r0, r2
 800af94:	f7fe fd2a 	bl	80099ec <create_chain>
 800af98:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f000 8110 	beq.w	800b1c2 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d109      	bne.n	800afbc <f_write+0x11e>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2202      	movs	r2, #2
 800afac:	755a      	strb	r2, [r3, #21]
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	2102      	movs	r1, #2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fe f89a 	bl	80090ec <unlock_fs>
 800afb8:	2302      	movs	r3, #2
 800afba:	e110      	b.n	800b1de <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc2:	d109      	bne.n	800afd8 <f_write+0x13a>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2201      	movs	r2, #1
 800afc8:	755a      	strb	r2, [r3, #21]
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2101      	movs	r1, #1
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fe f88c 	bl	80090ec <unlock_fs>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e102      	b.n	800b1de <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afdc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d102      	bne.n	800afec <f_write+0x14e>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	7d1b      	ldrb	r3, [r3, #20]
 800aff0:	b25b      	sxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	da1d      	bge.n	800b032 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	7858      	ldrb	r0, [r3, #1]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a1a      	ldr	r2, [r3, #32]
 800b004:	2301      	movs	r3, #1
 800b006:	f7fd ff1d 	bl	8008e44 <disk_write>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d009      	beq.n	800b024 <f_write+0x186>
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2201      	movs	r2, #1
 800b014:	755a      	strb	r2, [r3, #21]
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	2101      	movs	r1, #1
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe f866 	bl	80090ec <unlock_fs>
 800b020:	2301      	movs	r3, #1
 800b022:	e0dc      	b.n	800b1de <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	7d1b      	ldrb	r3, [r3, #20]
 800b028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b02c:	b2da      	uxtb	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f7fe fabe 	bl	80095bc <clust2sect>
 800b040:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d109      	bne.n	800b05c <f_write+0x1be>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2202      	movs	r2, #2
 800b04c:	755a      	strb	r2, [r3, #21]
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	2102      	movs	r1, #2
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe f84a 	bl	80090ec <unlock_fs>
 800b058:	2302      	movs	r3, #2
 800b05a:	e0c0      	b.n	800b1de <f_write+0x340>
			sect += csect;
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	4413      	add	r3, r2
 800b062:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	0a5b      	lsrs	r3, r3, #9
 800b068:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d041      	beq.n	800b0f4 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b070:	69ba      	ldr	r2, [r7, #24]
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	4413      	add	r3, r2
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	8952      	ldrh	r2, [r2, #10]
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d905      	bls.n	800b08a <f_write+0x1ec>
					cc = fs->csize - csect;
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	895b      	ldrh	r3, [r3, #10]
 800b082:	461a      	mov	r2, r3
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	7858      	ldrb	r0, [r3, #1]
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	69f9      	ldr	r1, [r7, #28]
 800b094:	f7fd fed6 	bl	8008e44 <disk_write>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d009      	beq.n	800b0b2 <f_write+0x214>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	755a      	strb	r2, [r3, #21]
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	2101      	movs	r1, #1
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f7fe f81f 	bl	80090ec <unlock_fs>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e095      	b.n	800b1de <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a1a      	ldr	r2, [r3, #32]
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	6a3a      	ldr	r2, [r7, #32]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d915      	bls.n	800b0ec <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6a1a      	ldr	r2, [r3, #32]
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	025b      	lsls	r3, r3, #9
 800b0d0:	69fa      	ldr	r2, [r7, #28]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0d8:	4619      	mov	r1, r3
 800b0da:	f7fd ff73 	bl	8008fc4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	7d1b      	ldrb	r3, [r3, #20]
 800b0e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b0ec:	6a3b      	ldr	r3, [r7, #32]
 800b0ee:	025b      	lsls	r3, r3, #9
 800b0f0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b0f2:	e044      	b.n	800b17e <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6a1b      	ldr	r3, [r3, #32]
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d01b      	beq.n	800b136 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	699a      	ldr	r2, [r3, #24]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b106:	429a      	cmp	r2, r3
 800b108:	d215      	bcs.n	800b136 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	7858      	ldrb	r0, [r3, #1]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b114:	2301      	movs	r3, #1
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	f7fd fe74 	bl	8008e04 <disk_read>
 800b11c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d009      	beq.n	800b136 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2201      	movs	r2, #1
 800b126:	755a      	strb	r2, [r3, #21]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	2101      	movs	r1, #1
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7fd ffdd 	bl	80090ec <unlock_fs>
 800b132:	2301      	movs	r3, #1
 800b134:	e053      	b.n	800b1de <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	697a      	ldr	r2, [r7, #20]
 800b13a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b144:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b148:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b14a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d901      	bls.n	800b156 <f_write+0x2b8>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b164:	4413      	add	r3, r2
 800b166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b168:	69f9      	ldr	r1, [r7, #28]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fd ff2a 	bl	8008fc4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	7d1b      	ldrb	r3, [r3, #20]
 800b174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b17e:	69fa      	ldr	r2, [r7, #28]
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	4413      	add	r3, r2
 800b184:	61fb      	str	r3, [r7, #28]
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	699a      	ldr	r2, [r3, #24]
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	441a      	add	r2, r3
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	619a      	str	r2, [r3, #24]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	68da      	ldr	r2, [r3, #12]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	bf38      	it	cc
 800b19e:	461a      	movcc	r2, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	60da      	str	r2, [r3, #12]
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	441a      	add	r2, r3
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f47f aeb6 	bne.w	800af2c <f_write+0x8e>
 800b1c0:	e000      	b.n	800b1c4 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b1c2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	7d1b      	ldrb	r3, [r3, #20]
 800b1c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1cc:	b2da      	uxtb	r2, r3
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7fd ff88 	bl	80090ec <unlock_fs>
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3730      	adds	r7, #48	; 0x30
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}

0800b1e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b1e6:	b580      	push	{r7, lr}
 800b1e8:	b086      	sub	sp, #24
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f107 0208 	add.w	r2, r7, #8
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f7ff fbe0 	bl	800a9bc <validate>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b200:	7dfb      	ldrb	r3, [r7, #23]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d16d      	bne.n	800b2e2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	7d1b      	ldrb	r3, [r3, #20]
 800b20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d067      	beq.n	800b2e2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	7d1b      	ldrb	r3, [r3, #20]
 800b216:	b25b      	sxtb	r3, r3
 800b218:	2b00      	cmp	r3, #0
 800b21a:	da1a      	bge.n	800b252 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	7858      	ldrb	r0, [r3, #1]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6a1a      	ldr	r2, [r3, #32]
 800b22a:	2301      	movs	r3, #1
 800b22c:	f7fd fe0a 	bl	8008e44 <disk_write>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d006      	beq.n	800b244 <f_sync+0x5e>
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	2101      	movs	r1, #1
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7fd ff56 	bl	80090ec <unlock_fs>
 800b240:	2301      	movs	r3, #1
 800b242:	e055      	b.n	800b2f0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	7d1b      	ldrb	r3, [r3, #20]
 800b248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b252:	f7fd fd39 	bl	8008cc8 <get_fattime>
 800b256:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	4619      	mov	r1, r3
 800b260:	4610      	mov	r0, r2
 800b262:	f7fe f90f 	bl	8009484 <move_window>
 800b266:	4603      	mov	r3, r0
 800b268:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b26a:	7dfb      	ldrb	r3, [r7, #23]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d138      	bne.n	800b2e2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b274:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	330b      	adds	r3, #11
 800b27a:	781a      	ldrb	r2, [r3, #0]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	330b      	adds	r3, #11
 800b280:	f042 0220 	orr.w	r2, r2, #32
 800b284:	b2d2      	uxtb	r2, r2
 800b286:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6818      	ldr	r0, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	461a      	mov	r2, r3
 800b292:	68f9      	ldr	r1, [r7, #12]
 800b294:	f7fe fe1c 	bl	8009ed0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f103 021c 	add.w	r2, r3, #28
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f7fd fe61 	bl	8008f6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	3316      	adds	r3, #22
 800b2ae:	6939      	ldr	r1, [r7, #16]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fd fe5b 	bl	8008f6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	3312      	adds	r3, #18
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7fd fe3a 	bl	8008f36 <st_word>
					fs->wflag = 1;
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fe f908 	bl	80094e0 <sync_fs>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	7d1b      	ldrb	r3, [r3, #20]
 800b2d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2dc:	b2da      	uxtb	r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	7dfa      	ldrb	r2, [r7, #23]
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7fd feff 	bl	80090ec <unlock_fs>
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff ff70 	bl	800b1e6 <f_sync>
 800b306:	4603      	mov	r3, r0
 800b308:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b30a:	7bfb      	ldrb	r3, [r7, #15]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d11d      	bne.n	800b34c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f107 0208 	add.w	r2, r7, #8
 800b316:	4611      	mov	r1, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff fb4f 	bl	800a9bc <validate>
 800b31e:	4603      	mov	r3, r0
 800b320:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b322:	7bfb      	ldrb	r3, [r7, #15]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d111      	bne.n	800b34c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7fe f805 	bl	800933c <dec_lock>
 800b332:	4603      	mov	r3, r0
 800b334:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d102      	bne.n	800b342 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	2100      	movs	r1, #0
 800b346:	4618      	mov	r0, r3
 800b348:	f7fd fed0 	bl	80090ec <unlock_fs>
#endif
		}
	}
	return res;
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b086      	sub	sp, #24
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
 800b35e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <f_opendir+0x14>
 800b366:	2309      	movs	r3, #9
 800b368:	e06a      	b.n	800b440 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b36e:	f107 010c 	add.w	r1, r7, #12
 800b372:	463b      	mov	r3, r7
 800b374:	2200      	movs	r2, #0
 800b376:	4618      	mov	r0, r3
 800b378:	f7ff f8cc 	bl	800a514 <find_volume>
 800b37c:	4603      	mov	r3, r0
 800b37e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d14f      	bne.n	800b426 <f_opendir+0xd0>
		obj->fs = fs;
 800b386:	68fa      	ldr	r2, [r7, #12]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	4619      	mov	r1, r3
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f7fe ffb3 	bl	800a2fc <follow_path>
 800b396:	4603      	mov	r3, r0
 800b398:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b39a:	7dfb      	ldrb	r3, [r7, #23]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d13d      	bne.n	800b41c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b3a6:	b25b      	sxtb	r3, r3
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	db12      	blt.n	800b3d2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	799b      	ldrb	r3, [r3, #6]
 800b3b0:	f003 0310 	and.w	r3, r3, #16
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00a      	beq.n	800b3ce <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a1b      	ldr	r3, [r3, #32]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	f7fe fd66 	bl	8009e92 <ld_clust>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	609a      	str	r2, [r3, #8]
 800b3cc:	e001      	b.n	800b3d2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b3ce:	2305      	movs	r3, #5
 800b3d0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d121      	bne.n	800b41c <f_opendir+0xc6>
				obj->id = fs->id;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	88da      	ldrh	r2, [r3, #6]
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f7fe fbce 	bl	8009b84 <dir_sdi>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d114      	bne.n	800b41c <f_opendir+0xc6>
					if (obj->sclust) {
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00d      	beq.n	800b416 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b3fa:	2100      	movs	r1, #0
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f7fd ff0f 	bl	8009220 <inc_lock>
 800b402:	4602      	mov	r2, r0
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d105      	bne.n	800b41c <f_opendir+0xc6>
 800b410:	2312      	movs	r3, #18
 800b412:	75fb      	strb	r3, [r7, #23]
 800b414:	e002      	b.n	800b41c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2200      	movs	r2, #0
 800b41a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b41c:	7dfb      	ldrb	r3, [r7, #23]
 800b41e:	2b04      	cmp	r3, #4
 800b420:	d101      	bne.n	800b426 <f_opendir+0xd0>
 800b422:	2305      	movs	r3, #5
 800b424:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b426:	7dfb      	ldrb	r3, [r7, #23]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d002      	beq.n	800b432 <f_opendir+0xdc>
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	2200      	movs	r2, #0
 800b430:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	7dfa      	ldrb	r2, [r7, #23]
 800b436:	4611      	mov	r1, r2
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fd fe57 	bl	80090ec <unlock_fs>
 800b43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f107 0208 	add.w	r2, r7, #8
 800b456:	4611      	mov	r1, r2
 800b458:	4618      	mov	r0, r3
 800b45a:	f7ff faaf 	bl	800a9bc <validate>
 800b45e:	4603      	mov	r3, r0
 800b460:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b462:	7bfb      	ldrb	r3, [r7, #15]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d115      	bne.n	800b494 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d006      	beq.n	800b47e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	691b      	ldr	r3, [r3, #16]
 800b474:	4618      	mov	r0, r3
 800b476:	f7fd ff61 	bl	800933c <dec_lock>
 800b47a:	4603      	mov	r3, r0
 800b47c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b47e:	7bfb      	ldrb	r3, [r7, #15]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d102      	bne.n	800b48a <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	2100      	movs	r1, #0
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fd fe2c 	bl	80090ec <unlock_fs>
#endif
	}
	return res;
 800b494:	7bfb      	ldrb	r3, [r7, #15]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}

0800b49e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b084      	sub	sp, #16
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f107 0208 	add.w	r2, r7, #8
 800b4ae:	4611      	mov	r1, r2
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f7ff fa83 	bl	800a9bc <validate>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b4ba:	7bfb      	ldrb	r3, [r7, #15]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d126      	bne.n	800b50e <f_readdir+0x70>
		if (!fno) {
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d106      	bne.n	800b4d4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7fe fb5b 	bl	8009b84 <dir_sdi>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	73fb      	strb	r3, [r7, #15]
 800b4d2:	e01c      	b.n	800b50e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7fe fd1a 	bl	8009f10 <dir_read>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b4e0:	7bfb      	ldrb	r3, [r7, #15]
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d101      	bne.n	800b4ea <f_readdir+0x4c>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10e      	bne.n	800b50e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b4f0:	6839      	ldr	r1, [r7, #0]
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f7fe fe0e 	bl	800a114 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f7fe fbbd 	bl	8009c7a <dir_next>
 800b500:	4603      	mov	r3, r0
 800b502:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b504:	7bfb      	ldrb	r3, [r7, #15]
 800b506:	2b04      	cmp	r3, #4
 800b508:	d101      	bne.n	800b50e <f_readdir+0x70>
 800b50a:	2300      	movs	r3, #0
 800b50c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	7bfa      	ldrb	r2, [r7, #15]
 800b512:	4611      	mov	r1, r2
 800b514:	4618      	mov	r0, r3
 800b516:	f7fd fde9 	bl	80090ec <unlock_fs>
 800b51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b090      	sub	sp, #64	; 0x40
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b52e:	f107 010c 	add.w	r1, r7, #12
 800b532:	1d3b      	adds	r3, r7, #4
 800b534:	2200      	movs	r2, #0
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe ffec 	bl	800a514 <find_volume>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b542:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b546:	2b00      	cmp	r3, #0
 800b548:	d11f      	bne.n	800b58a <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	f107 030c 	add.w	r3, r7, #12
 800b550:	4611      	mov	r1, r2
 800b552:	4618      	mov	r0, r3
 800b554:	f7fe fed2 	bl	800a2fc <follow_path>
 800b558:	4603      	mov	r3, r0
 800b55a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b55e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b562:	2b00      	cmp	r3, #0
 800b564:	d111      	bne.n	800b58a <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b566:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b56a:	b25b      	sxtb	r3, r3
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	da03      	bge.n	800b578 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b570:	2306      	movs	r3, #6
 800b572:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b576:	e008      	b.n	800b58a <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d005      	beq.n	800b58a <f_stat+0x66>
 800b57e:	f107 030c 	add.w	r3, r7, #12
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	4618      	mov	r0, r3
 800b586:	f7fe fdc5 	bl	800a114 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b590:	4611      	mov	r1, r2
 800b592:	4618      	mov	r0, r3
 800b594:	f7fd fdaa 	bl	80090ec <unlock_fs>
 800b598:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3740      	adds	r7, #64	; 0x40
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b09e      	sub	sp, #120	; 0x78
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b5b0:	f107 010c 	add.w	r1, r7, #12
 800b5b4:	1d3b      	adds	r3, r7, #4
 800b5b6:	2202      	movs	r2, #2
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7fe ffab 	bl	800a514 <find_volume>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b5c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 808e 	bne.w	800b6ee <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b5d2:	687a      	ldr	r2, [r7, #4]
 800b5d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b5d8:	4611      	mov	r1, r2
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe fe8e 	bl	800a2fc <follow_path>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b5e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d108      	bne.n	800b600 <f_unlink+0x5c>
 800b5ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b5f2:	2102      	movs	r1, #2
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f7fd fd95 	bl	8009124 <chk_lock>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b600:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b604:	2b00      	cmp	r3, #0
 800b606:	d172      	bne.n	800b6ee <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b608:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b60c:	b25b      	sxtb	r3, r3
 800b60e:	2b00      	cmp	r3, #0
 800b610:	da03      	bge.n	800b61a <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b612:	2306      	movs	r3, #6
 800b614:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b618:	e008      	b.n	800b62c <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b61a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b61e:	f003 0301 	and.w	r3, r3, #1
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b626:	2307      	movs	r3, #7
 800b628:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b62c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b630:	2b00      	cmp	r3, #0
 800b632:	d134      	bne.n	800b69e <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b638:	4611      	mov	r1, r2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe fc29 	bl	8009e92 <ld_clust>
 800b640:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b642:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b646:	f003 0310 	and.w	r3, r3, #16
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d027      	beq.n	800b69e <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b654:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b656:	f107 0310 	add.w	r3, r7, #16
 800b65a:	2100      	movs	r1, #0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fa91 	bl	8009b84 <dir_sdi>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b668:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d116      	bne.n	800b69e <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b670:	f107 0310 	add.w	r3, r7, #16
 800b674:	2100      	movs	r1, #0
 800b676:	4618      	mov	r0, r3
 800b678:	f7fe fc4a 	bl	8009f10 <dir_read>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b682:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b686:	2b00      	cmp	r3, #0
 800b688:	d102      	bne.n	800b690 <f_unlink+0xec>
 800b68a:	2307      	movs	r3, #7
 800b68c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b690:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b694:	2b04      	cmp	r3, #4
 800b696:	d102      	bne.n	800b69e <f_unlink+0xfa>
 800b698:	2300      	movs	r3, #0
 800b69a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b69e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d123      	bne.n	800b6ee <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b6a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe fd14 	bl	800a0d8 <dir_remove>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b6b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d10c      	bne.n	800b6d8 <f_unlink+0x134>
 800b6be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d009      	beq.n	800b6d8 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b6c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe f928 	bl	8009922 <remove_chain>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b6d8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d106      	bne.n	800b6ee <f_unlink+0x14a>
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fd fefc 	bl	80094e0 <sync_fs>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fd fcf8 	bl	80090ec <unlock_fs>
 800b6fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b700:	4618      	mov	r0, r3
 800b702:	3778      	adds	r7, #120	; 0x78
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	4613      	mov	r3, r2
 800b714:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b716:	2301      	movs	r3, #1
 800b718:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b71e:	4b1f      	ldr	r3, [pc, #124]	; (800b79c <FATFS_LinkDriverEx+0x94>)
 800b720:	7a5b      	ldrb	r3, [r3, #9]
 800b722:	b2db      	uxtb	r3, r3
 800b724:	2b00      	cmp	r3, #0
 800b726:	d131      	bne.n	800b78c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b728:	4b1c      	ldr	r3, [pc, #112]	; (800b79c <FATFS_LinkDriverEx+0x94>)
 800b72a:	7a5b      	ldrb	r3, [r3, #9]
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	461a      	mov	r2, r3
 800b730:	4b1a      	ldr	r3, [pc, #104]	; (800b79c <FATFS_LinkDriverEx+0x94>)
 800b732:	2100      	movs	r1, #0
 800b734:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b736:	4b19      	ldr	r3, [pc, #100]	; (800b79c <FATFS_LinkDriverEx+0x94>)
 800b738:	7a5b      	ldrb	r3, [r3, #9]
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	4a17      	ldr	r2, [pc, #92]	; (800b79c <FATFS_LinkDriverEx+0x94>)
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	4413      	add	r3, r2
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b746:	4b15      	ldr	r3, [pc, #84]	; (800b79c <FATFS_LinkDriverEx+0x94>)
 800b748:	7a5b      	ldrb	r3, [r3, #9]
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	461a      	mov	r2, r3
 800b74e:	4b13      	ldr	r3, [pc, #76]	; (800b79c <FATFS_LinkDriverEx+0x94>)
 800b750:	4413      	add	r3, r2
 800b752:	79fa      	ldrb	r2, [r7, #7]
 800b754:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b756:	4b11      	ldr	r3, [pc, #68]	; (800b79c <FATFS_LinkDriverEx+0x94>)
 800b758:	7a5b      	ldrb	r3, [r3, #9]
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	1c5a      	adds	r2, r3, #1
 800b75e:	b2d1      	uxtb	r1, r2
 800b760:	4a0e      	ldr	r2, [pc, #56]	; (800b79c <FATFS_LinkDriverEx+0x94>)
 800b762:	7251      	strb	r1, [r2, #9]
 800b764:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b766:	7dbb      	ldrb	r3, [r7, #22]
 800b768:	3330      	adds	r3, #48	; 0x30
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	3301      	adds	r3, #1
 800b774:	223a      	movs	r2, #58	; 0x3a
 800b776:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	3302      	adds	r3, #2
 800b77c:	222f      	movs	r2, #47	; 0x2f
 800b77e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	3303      	adds	r3, #3
 800b784:	2200      	movs	r2, #0
 800b786:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b788:	2300      	movs	r3, #0
 800b78a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b78e:	4618      	mov	r0, r3
 800b790:	371c      	adds	r7, #28
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	2000175c 	.word	0x2000175c

0800b7a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	6839      	ldr	r1, [r7, #0]
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff ffaa 	bl	800b708 <FATFS_LinkDriverEx>
 800b7b4:	4603      	mov	r3, r0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3708      	adds	r7, #8
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b086      	sub	sp, #24
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	6039      	str	r1, [r7, #0]
 800b7c8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	60fb      	str	r3, [r7, #12]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b7d2:	f107 030c 	add.w	r3, r7, #12
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 f84e 	bl	800b87a <osSemaphoreCreate>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	bf14      	ite	ne
 800b7ec:	2301      	movne	r3, #1
 800b7ee:	2300      	moveq	r3, #0
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	617b      	str	r3, [r7, #20]

    return ret;
 800b7f4:	697b      	ldr	r3, [r7, #20]
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3718      	adds	r7, #24
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b082      	sub	sp, #8
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f8ee 	bl	800b9e8 <osSemaphoreDelete>
#endif
    return 1;
 800b80c:	2301      	movs	r3, #1
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b816:	b580      	push	{r7, lr}
 800b818:	b084      	sub	sp, #16
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800b822:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f85a 	bl	800b8e0 <osSemaphoreWait>
 800b82c:	4603      	mov	r3, r0
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d101      	bne.n	800b836 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800b832:	2301      	movs	r3, #1
 800b834:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b836:	68fb      	ldr	r3, [r7, #12]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3710      	adds	r7, #16
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 f897 	bl	800b97c <osSemaphoreRelease>
#endif
}
 800b84e:	bf00      	nop
 800b850:	3708      	adds	r7, #8
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}

0800b856 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b856:	b480      	push	{r7}
 800b858:	b083      	sub	sp, #12
 800b85a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b85c:	f3ef 8305 	mrs	r3, IPSR
 800b860:	607b      	str	r3, [r7, #4]
  return(result);
 800b862:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b864:	2b00      	cmp	r3, #0
 800b866:	bf14      	ite	ne
 800b868:	2301      	movne	r3, #1
 800b86a:	2300      	moveq	r3, #0
 800b86c:	b2db      	uxtb	r3, r3
}
 800b86e:	4618      	mov	r0, r3
 800b870:	370c      	adds	r7, #12
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr

0800b87a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b086      	sub	sp, #24
 800b87e:	af02      	add	r7, sp, #8
 800b880:	6078      	str	r0, [r7, #4]
 800b882:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00f      	beq.n	800b8ac <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	2b01      	cmp	r3, #1
 800b890:	d10a      	bne.n	800b8a8 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	2203      	movs	r2, #3
 800b898:	9200      	str	r2, [sp, #0]
 800b89a:	2200      	movs	r2, #0
 800b89c:	2100      	movs	r1, #0
 800b89e:	2001      	movs	r0, #1
 800b8a0:	f000 f9d2 	bl	800bc48 <xQueueGenericCreateStatic>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	e016      	b.n	800b8d6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	e014      	b.n	800b8d6 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d110      	bne.n	800b8d4 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b8b2:	2203      	movs	r2, #3
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	f000 fa3e 	bl	800bd38 <xQueueGenericCreate>
 800b8bc:	60f8      	str	r0, [r7, #12]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d005      	beq.n	800b8d0 <osSemaphoreCreate+0x56>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	f000 fac0 	bl	800be50 <xQueueGenericSend>
      return sema;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	e000      	b.n	800b8d6 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b8d4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
	...

0800b8e0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d101      	bne.n	800b8f8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b8f4:	2380      	movs	r3, #128	; 0x80
 800b8f6:	e03a      	b.n	800b96e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b902:	d103      	bne.n	800b90c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b904:	f04f 33ff 	mov.w	r3, #4294967295
 800b908:	60fb      	str	r3, [r7, #12]
 800b90a:	e009      	b.n	800b920 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d006      	beq.n	800b920 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <osSemaphoreWait+0x40>
      ticks = 1;
 800b91c:	2301      	movs	r3, #1
 800b91e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b920:	f7ff ff99 	bl	800b856 <inHandlerMode>
 800b924:	4603      	mov	r3, r0
 800b926:	2b00      	cmp	r3, #0
 800b928:	d017      	beq.n	800b95a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b92a:	f107 0308 	add.w	r3, r7, #8
 800b92e:	461a      	mov	r2, r3
 800b930:	2100      	movs	r1, #0
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fe04 	bl	800c540 <xQueueReceiveFromISR>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d001      	beq.n	800b942 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b93e:	23ff      	movs	r3, #255	; 0xff
 800b940:	e015      	b.n	800b96e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d011      	beq.n	800b96c <osSemaphoreWait+0x8c>
 800b948:	4b0b      	ldr	r3, [pc, #44]	; (800b978 <osSemaphoreWait+0x98>)
 800b94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	e008      	b.n	800b96c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b95a:	68f9      	ldr	r1, [r7, #12]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fce3 	bl	800c328 <xQueueSemaphoreTake>
 800b962:	4603      	mov	r3, r0
 800b964:	2b01      	cmp	r3, #1
 800b966:	d001      	beq.n	800b96c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b968:	23ff      	movs	r3, #255	; 0xff
 800b96a:	e000      	b.n	800b96e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b96c:	2300      	movs	r3, #0
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3710      	adds	r7, #16
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop
 800b978:	e000ed04 	.word	0xe000ed04

0800b97c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b084      	sub	sp, #16
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b988:	2300      	movs	r3, #0
 800b98a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b98c:	f7ff ff63 	bl	800b856 <inHandlerMode>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d016      	beq.n	800b9c4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b996:	f107 0308 	add.w	r3, r7, #8
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fb55 	bl	800c04c <xQueueGiveFromISR>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d001      	beq.n	800b9ac <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b9a8:	23ff      	movs	r3, #255	; 0xff
 800b9aa:	e017      	b.n	800b9dc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d013      	beq.n	800b9da <osSemaphoreRelease+0x5e>
 800b9b2:	4b0c      	ldr	r3, [pc, #48]	; (800b9e4 <osSemaphoreRelease+0x68>)
 800b9b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	f3bf 8f6f 	isb	sy
 800b9c2:	e00a      	b.n	800b9da <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fa40 	bl	800be50 <xQueueGenericSend>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d001      	beq.n	800b9da <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b9d6:	23ff      	movs	r3, #255	; 0xff
 800b9d8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b9da:	68fb      	ldr	r3, [r7, #12]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	e000ed04 	.word	0xe000ed04

0800b9e8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b9f0:	f7ff ff31 	bl	800b856 <inHandlerMode>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b9fa:	2382      	movs	r3, #130	; 0x82
 800b9fc:	e003      	b.n	800ba06 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fe1e 	bl	800c640 <vQueueDelete>

  return osOK; 
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b083      	sub	sp, #12
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f103 0208 	add.w	r2, r3, #8
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f04f 32ff 	mov.w	r2, #4294967295
 800ba26:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f103 0208 	add.w	r2, r3, #8
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f103 0208 	add.w	r2, r3, #8
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ba42:	bf00      	nop
 800ba44:	370c      	adds	r7, #12
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba5c:	bf00      	nop
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	689a      	ldr	r2, [r3, #8]
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	601a      	str	r2, [r3, #0]
}
 800baa4:	bf00      	nop
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac6:	d103      	bne.n	800bad0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	691b      	ldr	r3, [r3, #16]
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	e00c      	b.n	800baea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3308      	adds	r3, #8
 800bad4:	60fb      	str	r3, [r7, #12]
 800bad6:	e002      	b.n	800bade <vListInsert+0x2e>
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	685b      	ldr	r3, [r3, #4]
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d2f6      	bcs.n	800bad8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	685a      	ldr	r2, [r3, #4]
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	1c5a      	adds	r2, r3, #1
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	601a      	str	r2, [r3, #0]
}
 800bb16:	bf00      	nop
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bb22:	b480      	push	{r7}
 800bb24:	b085      	sub	sp, #20
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	6892      	ldr	r2, [r2, #8]
 800bb38:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	689b      	ldr	r3, [r3, #8]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	6852      	ldr	r2, [r2, #4]
 800bb42:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	685b      	ldr	r3, [r3, #4]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d103      	bne.n	800bb56 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	689a      	ldr	r2, [r3, #8]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	1e5a      	subs	r2, r3, #1
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
	...

0800bb78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10a      	bne.n	800bba2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb9e:	bf00      	nop
 800bba0:	e7fe      	b.n	800bba0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bba2:	f001 ffd7 	bl	800db54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbae:	68f9      	ldr	r1, [r7, #12]
 800bbb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbb2:	fb01 f303 	mul.w	r3, r1, r3
 800bbb6:	441a      	add	r2, r3
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681a      	ldr	r2, [r3, #0]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	68f9      	ldr	r1, [r7, #12]
 800bbd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bbd8:	fb01 f303 	mul.w	r3, r1, r3
 800bbdc:	441a      	add	r2, r3
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	22ff      	movs	r2, #255	; 0xff
 800bbe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	22ff      	movs	r2, #255	; 0xff
 800bbee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d114      	bne.n	800bc22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d01a      	beq.n	800bc36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	3310      	adds	r3, #16
 800bc04:	4618      	mov	r0, r3
 800bc06:	f001 fa9b 	bl	800d140 <xTaskRemoveFromEventList>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d012      	beq.n	800bc36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bc10:	4b0c      	ldr	r3, [pc, #48]	; (800bc44 <xQueueGenericReset+0xcc>)
 800bc12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	e009      	b.n	800bc36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3310      	adds	r3, #16
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff fef1 	bl	800ba0e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	3324      	adds	r3, #36	; 0x24
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff feec 	bl	800ba0e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bc36:	f001 ffbd 	bl	800dbb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bc3a:	2301      	movs	r3, #1
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	e000ed04 	.word	0xe000ed04

0800bc48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08e      	sub	sp, #56	; 0x38
 800bc4c:	af02      	add	r7, sp, #8
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10a      	bne.n	800bc72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc6e:	bf00      	nop
 800bc70:	e7fe      	b.n	800bc70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10a      	bne.n	800bc8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d002      	beq.n	800bc9a <xQueueGenericCreateStatic+0x52>
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d001      	beq.n	800bc9e <xQueueGenericCreateStatic+0x56>
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e000      	b.n	800bca0 <xQueueGenericCreateStatic+0x58>
 800bc9e:	2300      	movs	r3, #0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d10a      	bne.n	800bcba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	623b      	str	r3, [r7, #32]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d102      	bne.n	800bcc6 <xQueueGenericCreateStatic+0x7e>
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <xQueueGenericCreateStatic+0x82>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <xQueueGenericCreateStatic+0x84>
 800bcca:	2300      	movs	r3, #0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	61fb      	str	r3, [r7, #28]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bce6:	2348      	movs	r3, #72	; 0x48
 800bce8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bcea:	697b      	ldr	r3, [r7, #20]
 800bcec:	2b48      	cmp	r3, #72	; 0x48
 800bcee:	d00a      	beq.n	800bd06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	61bb      	str	r3, [r7, #24]
}
 800bd02:	bf00      	nop
 800bd04:	e7fe      	b.n	800bd04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bd06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d00d      	beq.n	800bd2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd14:	2201      	movs	r2, #1
 800bd16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	4613      	mov	r3, r2
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	68b9      	ldr	r1, [r7, #8]
 800bd28:	68f8      	ldr	r0, [r7, #12]
 800bd2a:	f000 f83f 	bl	800bdac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3730      	adds	r7, #48	; 0x30
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08a      	sub	sp, #40	; 0x28
 800bd3c:	af02      	add	r7, sp, #8
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	4613      	mov	r3, r2
 800bd44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10a      	bne.n	800bd62 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	613b      	str	r3, [r7, #16]
}
 800bd5e:	bf00      	nop
 800bd60:	e7fe      	b.n	800bd60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	fb02 f303 	mul.w	r3, r2, r3
 800bd6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	3348      	adds	r3, #72	; 0x48
 800bd70:	4618      	mov	r0, r3
 800bd72:	f002 f811 	bl	800dd98 <pvPortMalloc>
 800bd76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d011      	beq.n	800bda2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	3348      	adds	r3, #72	; 0x48
 800bd86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd90:	79fa      	ldrb	r2, [r7, #7]
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	4613      	mov	r3, r2
 800bd98:	697a      	ldr	r2, [r7, #20]
 800bd9a:	68b9      	ldr	r1, [r7, #8]
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f000 f805 	bl	800bdac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bda2:	69bb      	ldr	r3, [r7, #24]
	}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	60b9      	str	r1, [r7, #8]
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d103      	bne.n	800bdc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdc0:	69bb      	ldr	r3, [r7, #24]
 800bdc2:	69ba      	ldr	r2, [r7, #24]
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	e002      	b.n	800bdce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	68fa      	ldr	r2, [r7, #12]
 800bdd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdda:	2101      	movs	r1, #1
 800bddc:	69b8      	ldr	r0, [r7, #24]
 800bdde:	f7ff fecb 	bl	800bb78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bde2:	bf00      	nop
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b082      	sub	sp, #8
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00e      	beq.n	800be16 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2200      	movs	r2, #0
 800be02:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800be0a:	2300      	movs	r3, #0
 800be0c:	2200      	movs	r2, #0
 800be0e:	2100      	movs	r1, #0
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f81d 	bl	800be50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800be16:	bf00      	nop
 800be18:	3708      	adds	r7, #8
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b086      	sub	sp, #24
 800be22:	af00      	add	r7, sp, #0
 800be24:	4603      	mov	r3, r0
 800be26:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800be28:	2301      	movs	r3, #1
 800be2a:	617b      	str	r3, [r7, #20]
 800be2c:	2300      	movs	r3, #0
 800be2e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800be30:	79fb      	ldrb	r3, [r7, #7]
 800be32:	461a      	mov	r2, r3
 800be34:	6939      	ldr	r1, [r7, #16]
 800be36:	6978      	ldr	r0, [r7, #20]
 800be38:	f7ff ff7e 	bl	800bd38 <xQueueGenericCreate>
 800be3c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800be3e:	68f8      	ldr	r0, [r7, #12]
 800be40:	f7ff ffd3 	bl	800bdea <prvInitialiseMutex>

		return xNewQueue;
 800be44:	68fb      	ldr	r3, [r7, #12]
	}
 800be46:	4618      	mov	r0, r3
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
	...

0800be50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b08e      	sub	sp, #56	; 0x38
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
 800be5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800be5e:	2300      	movs	r3, #0
 800be60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800be66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10a      	bne.n	800be82 <xQueueGenericSend+0x32>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be7e:	bf00      	nop
 800be80:	e7fe      	b.n	800be80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d103      	bne.n	800be90 <xQueueGenericSend+0x40>
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d101      	bne.n	800be94 <xQueueGenericSend+0x44>
 800be90:	2301      	movs	r3, #1
 800be92:	e000      	b.n	800be96 <xQueueGenericSend+0x46>
 800be94:	2300      	movs	r3, #0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10a      	bne.n	800beb0 <xQueueGenericSend+0x60>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800beac:	bf00      	nop
 800beae:	e7fe      	b.n	800beae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2b02      	cmp	r3, #2
 800beb4:	d103      	bne.n	800bebe <xQueueGenericSend+0x6e>
 800beb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <xQueueGenericSend+0x72>
 800bebe:	2301      	movs	r3, #1
 800bec0:	e000      	b.n	800bec4 <xQueueGenericSend+0x74>
 800bec2:	2300      	movs	r3, #0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10a      	bne.n	800bede <xQueueGenericSend+0x8e>
	__asm volatile
 800bec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	623b      	str	r3, [r7, #32]
}
 800beda:	bf00      	nop
 800bedc:	e7fe      	b.n	800bedc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bede:	f001 faeb 	bl	800d4b8 <xTaskGetSchedulerState>
 800bee2:	4603      	mov	r3, r0
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d102      	bne.n	800beee <xQueueGenericSend+0x9e>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d101      	bne.n	800bef2 <xQueueGenericSend+0xa2>
 800beee:	2301      	movs	r3, #1
 800bef0:	e000      	b.n	800bef4 <xQueueGenericSend+0xa4>
 800bef2:	2300      	movs	r3, #0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <xQueueGenericSend+0xbe>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	61fb      	str	r3, [r7, #28]
}
 800bf0a:	bf00      	nop
 800bf0c:	e7fe      	b.n	800bf0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf0e:	f001 fe21 	bl	800db54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d302      	bcc.n	800bf24 <xQueueGenericSend+0xd4>
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	2b02      	cmp	r3, #2
 800bf22:	d129      	bne.n	800bf78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf24:	683a      	ldr	r2, [r7, #0]
 800bf26:	68b9      	ldr	r1, [r7, #8]
 800bf28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf2a:	f000 fbc4 	bl	800c6b6 <prvCopyDataToQueue>
 800bf2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d010      	beq.n	800bf5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3a:	3324      	adds	r3, #36	; 0x24
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f001 f8ff 	bl	800d140 <xTaskRemoveFromEventList>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d013      	beq.n	800bf70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bf48:	4b3f      	ldr	r3, [pc, #252]	; (800c048 <xQueueGenericSend+0x1f8>)
 800bf4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	e00a      	b.n	800bf70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bf5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d007      	beq.n	800bf70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bf60:	4b39      	ldr	r3, [pc, #228]	; (800c048 <xQueueGenericSend+0x1f8>)
 800bf62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bf70:	f001 fe20 	bl	800dbb4 <vPortExitCritical>
				return pdPASS;
 800bf74:	2301      	movs	r3, #1
 800bf76:	e063      	b.n	800c040 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d103      	bne.n	800bf86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bf7e:	f001 fe19 	bl	800dbb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bf82:	2300      	movs	r3, #0
 800bf84:	e05c      	b.n	800c040 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d106      	bne.n	800bf9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf8c:	f107 0314 	add.w	r3, r7, #20
 800bf90:	4618      	mov	r0, r3
 800bf92:	f001 f937 	bl	800d204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf96:	2301      	movs	r3, #1
 800bf98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf9a:	f001 fe0b 	bl	800dbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf9e:	f000 feed 	bl	800cd7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfa2:	f001 fdd7 	bl	800db54 <vPortEnterCritical>
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bfac:	b25b      	sxtb	r3, r3
 800bfae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb2:	d103      	bne.n	800bfbc <xQueueGenericSend+0x16c>
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfc2:	b25b      	sxtb	r3, r3
 800bfc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfc8:	d103      	bne.n	800bfd2 <xQueueGenericSend+0x182>
 800bfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfd2:	f001 fdef 	bl	800dbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bfd6:	1d3a      	adds	r2, r7, #4
 800bfd8:	f107 0314 	add.w	r3, r7, #20
 800bfdc:	4611      	mov	r1, r2
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f001 f926 	bl	800d230 <xTaskCheckForTimeOut>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d124      	bne.n	800c034 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bfea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bfec:	f000 fc5b 	bl	800c8a6 <prvIsQueueFull>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d018      	beq.n	800c028 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	3310      	adds	r3, #16
 800bffa:	687a      	ldr	r2, [r7, #4]
 800bffc:	4611      	mov	r1, r2
 800bffe:	4618      	mov	r0, r3
 800c000:	f001 f87a 	bl	800d0f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c006:	f000 fbe6 	bl	800c7d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c00a:	f000 fec5 	bl	800cd98 <xTaskResumeAll>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	f47f af7c 	bne.w	800bf0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c016:	4b0c      	ldr	r3, [pc, #48]	; (800c048 <xQueueGenericSend+0x1f8>)
 800c018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01c:	601a      	str	r2, [r3, #0]
 800c01e:	f3bf 8f4f 	dsb	sy
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	e772      	b.n	800bf0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c02a:	f000 fbd4 	bl	800c7d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c02e:	f000 feb3 	bl	800cd98 <xTaskResumeAll>
 800c032:	e76c      	b.n	800bf0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c036:	f000 fbce 	bl	800c7d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c03a:	f000 fead 	bl	800cd98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c03e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c040:	4618      	mov	r0, r3
 800c042:	3738      	adds	r7, #56	; 0x38
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b08e      	sub	sp, #56	; 0x38
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	623b      	str	r3, [r7, #32]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d00a      	beq.n	800c094 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	61fb      	str	r3, [r7, #28]
}
 800c090:	bf00      	nop
 800c092:	e7fe      	b.n	800c092 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d103      	bne.n	800c0a4 <xQueueGiveFromISR+0x58>
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d101      	bne.n	800c0a8 <xQueueGiveFromISR+0x5c>
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e000      	b.n	800c0aa <xQueueGiveFromISR+0x5e>
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d10a      	bne.n	800c0c4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b2:	f383 8811 	msr	BASEPRI, r3
 800c0b6:	f3bf 8f6f 	isb	sy
 800c0ba:	f3bf 8f4f 	dsb	sy
 800c0be:	61bb      	str	r3, [r7, #24]
}
 800c0c0:	bf00      	nop
 800c0c2:	e7fe      	b.n	800c0c2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0c4:	f001 fe28 	bl	800dd18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c0c8:	f3ef 8211 	mrs	r2, BASEPRI
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	617a      	str	r2, [r7, #20]
 800c0de:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c0e0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d22b      	bcs.n	800c14c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c100:	1c5a      	adds	r2, r3, #1
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c106:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c10a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10e:	d112      	bne.n	800c136 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c114:	2b00      	cmp	r3, #0
 800c116:	d016      	beq.n	800c146 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11a:	3324      	adds	r3, #36	; 0x24
 800c11c:	4618      	mov	r0, r3
 800c11e:	f001 f80f 	bl	800d140 <xTaskRemoveFromEventList>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d00e      	beq.n	800c146 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00b      	beq.n	800c146 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	2201      	movs	r2, #1
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	e007      	b.n	800c146 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c13a:	3301      	adds	r3, #1
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	b25a      	sxtb	r2, r3
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c146:	2301      	movs	r3, #1
 800c148:	637b      	str	r3, [r7, #52]	; 0x34
 800c14a:	e001      	b.n	800c150 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c14c:	2300      	movs	r3, #0
 800c14e:	637b      	str	r3, [r7, #52]	; 0x34
 800c150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c152:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c15a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3738      	adds	r7, #56	; 0x38
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
	...

0800c168 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08c      	sub	sp, #48	; 0x30
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c174:	2300      	movs	r3, #0
 800c176:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10a      	bne.n	800c198 <xQueueReceive+0x30>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	623b      	str	r3, [r7, #32]
}
 800c194:	bf00      	nop
 800c196:	e7fe      	b.n	800c196 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d103      	bne.n	800c1a6 <xQueueReceive+0x3e>
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d101      	bne.n	800c1aa <xQueueReceive+0x42>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e000      	b.n	800c1ac <xQueueReceive+0x44>
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d10a      	bne.n	800c1c6 <xQueueReceive+0x5e>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	61fb      	str	r3, [r7, #28]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1c6:	f001 f977 	bl	800d4b8 <xTaskGetSchedulerState>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <xQueueReceive+0x6e>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d101      	bne.n	800c1da <xQueueReceive+0x72>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e000      	b.n	800c1dc <xQueueReceive+0x74>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10a      	bne.n	800c1f6 <xQueueReceive+0x8e>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	61bb      	str	r3, [r7, #24]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1f6:	f001 fcad 	bl	800db54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c202:	2b00      	cmp	r3, #0
 800c204:	d01f      	beq.n	800c246 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c206:	68b9      	ldr	r1, [r7, #8]
 800c208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c20a:	f000 fabe 	bl	800c78a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	1e5a      	subs	r2, r3, #1
 800c212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c214:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00f      	beq.n	800c23e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	3310      	adds	r3, #16
 800c222:	4618      	mov	r0, r3
 800c224:	f000 ff8c 	bl	800d140 <xTaskRemoveFromEventList>
 800c228:	4603      	mov	r3, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d007      	beq.n	800c23e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c22e:	4b3d      	ldr	r3, [pc, #244]	; (800c324 <xQueueReceive+0x1bc>)
 800c230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	f3bf 8f4f 	dsb	sy
 800c23a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c23e:	f001 fcb9 	bl	800dbb4 <vPortExitCritical>
				return pdPASS;
 800c242:	2301      	movs	r3, #1
 800c244:	e069      	b.n	800c31a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d103      	bne.n	800c254 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c24c:	f001 fcb2 	bl	800dbb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c250:	2300      	movs	r3, #0
 800c252:	e062      	b.n	800c31a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c256:	2b00      	cmp	r3, #0
 800c258:	d106      	bne.n	800c268 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c25a:	f107 0310 	add.w	r3, r7, #16
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 ffd0 	bl	800d204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c264:	2301      	movs	r3, #1
 800c266:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c268:	f001 fca4 	bl	800dbb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c26c:	f000 fd86 	bl	800cd7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c270:	f001 fc70 	bl	800db54 <vPortEnterCritical>
 800c274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c27a:	b25b      	sxtb	r3, r3
 800c27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c280:	d103      	bne.n	800c28a <xQueueReceive+0x122>
 800c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c290:	b25b      	sxtb	r3, r3
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c296:	d103      	bne.n	800c2a0 <xQueueReceive+0x138>
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2a0:	f001 fc88 	bl	800dbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2a4:	1d3a      	adds	r2, r7, #4
 800c2a6:	f107 0310 	add.w	r3, r7, #16
 800c2aa:	4611      	mov	r1, r2
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f000 ffbf 	bl	800d230 <xTaskCheckForTimeOut>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d123      	bne.n	800c300 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2ba:	f000 fade 	bl	800c87a <prvIsQueueEmpty>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d017      	beq.n	800c2f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c6:	3324      	adds	r3, #36	; 0x24
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 ff13 	bl	800d0f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d4:	f000 fa7f 	bl	800c7d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2d8:	f000 fd5e 	bl	800cd98 <xTaskResumeAll>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d189      	bne.n	800c1f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2e2:	4b10      	ldr	r3, [pc, #64]	; (800c324 <xQueueReceive+0x1bc>)
 800c2e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2e8:	601a      	str	r2, [r3, #0]
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	e780      	b.n	800c1f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f6:	f000 fa6e 	bl	800c7d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2fa:	f000 fd4d 	bl	800cd98 <xTaskResumeAll>
 800c2fe:	e77a      	b.n	800c1f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c302:	f000 fa68 	bl	800c7d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c306:	f000 fd47 	bl	800cd98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c30a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c30c:	f000 fab5 	bl	800c87a <prvIsQueueEmpty>
 800c310:	4603      	mov	r3, r0
 800c312:	2b00      	cmp	r3, #0
 800c314:	f43f af6f 	beq.w	800c1f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c318:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3730      	adds	r7, #48	; 0x30
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	e000ed04 	.word	0xe000ed04

0800c328 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08e      	sub	sp, #56	; 0x38
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c332:	2300      	movs	r3, #0
 800c334:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c33a:	2300      	movs	r3, #0
 800c33c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10a      	bne.n	800c35a <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	623b      	str	r3, [r7, #32]
}
 800c356:	bf00      	nop
 800c358:	e7fe      	b.n	800c358 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00a      	beq.n	800c378 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	61fb      	str	r3, [r7, #28]
}
 800c374:	bf00      	nop
 800c376:	e7fe      	b.n	800c376 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c378:	f001 f89e 	bl	800d4b8 <xTaskGetSchedulerState>
 800c37c:	4603      	mov	r3, r0
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d102      	bne.n	800c388 <xQueueSemaphoreTake+0x60>
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d101      	bne.n	800c38c <xQueueSemaphoreTake+0x64>
 800c388:	2301      	movs	r3, #1
 800c38a:	e000      	b.n	800c38e <xQueueSemaphoreTake+0x66>
 800c38c:	2300      	movs	r3, #0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10a      	bne.n	800c3a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	61bb      	str	r3, [r7, #24]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3a8:	f001 fbd4 	bl	800db54 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d024      	beq.n	800c402 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ba:	1e5a      	subs	r2, r3, #1
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d104      	bne.n	800c3d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3c8:	f001 fa1e 	bl	800d808 <pvTaskIncrementMutexHeldCount>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d00f      	beq.n	800c3fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	3310      	adds	r3, #16
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 feae 	bl	800d140 <xTaskRemoveFromEventList>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d007      	beq.n	800c3fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3ea:	4b54      	ldr	r3, [pc, #336]	; (800c53c <xQueueSemaphoreTake+0x214>)
 800c3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3fa:	f001 fbdb 	bl	800dbb4 <vPortExitCritical>
				return pdPASS;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e097      	b.n	800c532 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d111      	bne.n	800c42c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00a      	beq.n	800c424 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	617b      	str	r3, [r7, #20]
}
 800c420:	bf00      	nop
 800c422:	e7fe      	b.n	800c422 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c424:	f001 fbc6 	bl	800dbb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c428:	2300      	movs	r3, #0
 800c42a:	e082      	b.n	800c532 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d106      	bne.n	800c440 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c432:	f107 030c 	add.w	r3, r7, #12
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fee4 	bl	800d204 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c43c:	2301      	movs	r3, #1
 800c43e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c440:	f001 fbb8 	bl	800dbb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c444:	f000 fc9a 	bl	800cd7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c448:	f001 fb84 	bl	800db54 <vPortEnterCritical>
 800c44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c452:	b25b      	sxtb	r3, r3
 800c454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c458:	d103      	bne.n	800c462 <xQueueSemaphoreTake+0x13a>
 800c45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c464:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c468:	b25b      	sxtb	r3, r3
 800c46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c46e:	d103      	bne.n	800c478 <xQueueSemaphoreTake+0x150>
 800c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c472:	2200      	movs	r2, #0
 800c474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c478:	f001 fb9c 	bl	800dbb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c47c:	463a      	mov	r2, r7
 800c47e:	f107 030c 	add.w	r3, r7, #12
 800c482:	4611      	mov	r1, r2
 800c484:	4618      	mov	r0, r3
 800c486:	f000 fed3 	bl	800d230 <xTaskCheckForTimeOut>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d132      	bne.n	800c4f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c490:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c492:	f000 f9f2 	bl	800c87a <prvIsQueueEmpty>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d026      	beq.n	800c4ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d109      	bne.n	800c4b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c4a4:	f001 fb56 	bl	800db54 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f001 f821 	bl	800d4f4 <xTaskPriorityInherit>
 800c4b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c4b4:	f001 fb7e 	bl	800dbb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	3324      	adds	r3, #36	; 0x24
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	4611      	mov	r1, r2
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 fe19 	bl	800d0f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4c8:	f000 f985 	bl	800c7d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4cc:	f000 fc64 	bl	800cd98 <xTaskResumeAll>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f47f af68 	bne.w	800c3a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c4d8:	4b18      	ldr	r3, [pc, #96]	; (800c53c <xQueueSemaphoreTake+0x214>)
 800c4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4de:	601a      	str	r2, [r3, #0]
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	f3bf 8f6f 	isb	sy
 800c4e8:	e75e      	b.n	800c3a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4ec:	f000 f973 	bl	800c7d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4f0:	f000 fc52 	bl	800cd98 <xTaskResumeAll>
 800c4f4:	e758      	b.n	800c3a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c4f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4f8:	f000 f96d 	bl	800c7d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c4fc:	f000 fc4c 	bl	800cd98 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c500:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c502:	f000 f9ba 	bl	800c87a <prvIsQueueEmpty>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f43f af4d 	beq.w	800c3a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00d      	beq.n	800c530 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c514:	f001 fb1e 	bl	800db54 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c51a:	f000 f8b4 	bl	800c686 <prvGetDisinheritPriorityAfterTimeout>
 800c51e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c526:	4618      	mov	r0, r3
 800c528:	f001 f8e0 	bl	800d6ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c52c:	f001 fb42 	bl	800dbb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c530:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c532:	4618      	mov	r0, r3
 800c534:	3738      	adds	r7, #56	; 0x38
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	e000ed04 	.word	0xe000ed04

0800c540 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b08e      	sub	sp, #56	; 0x38
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	60b9      	str	r1, [r7, #8]
 800c54a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	2b00      	cmp	r3, #0
 800c554:	d10a      	bne.n	800c56c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	623b      	str	r3, [r7, #32]
}
 800c568:	bf00      	nop
 800c56a:	e7fe      	b.n	800c56a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d103      	bne.n	800c57a <xQueueReceiveFromISR+0x3a>
 800c572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <xQueueReceiveFromISR+0x3e>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e000      	b.n	800c580 <xQueueReceiveFromISR+0x40>
 800c57e:	2300      	movs	r3, #0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10a      	bne.n	800c59a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c588:	f383 8811 	msr	BASEPRI, r3
 800c58c:	f3bf 8f6f 	isb	sy
 800c590:	f3bf 8f4f 	dsb	sy
 800c594:	61fb      	str	r3, [r7, #28]
}
 800c596:	bf00      	nop
 800c598:	e7fe      	b.n	800c598 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c59a:	f001 fbbd 	bl	800dd18 <vPortValidateInterruptPriority>
	__asm volatile
 800c59e:	f3ef 8211 	mrs	r2, BASEPRI
 800c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	61ba      	str	r2, [r7, #24]
 800c5b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c5b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d02f      	beq.n	800c626 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5d0:	68b9      	ldr	r1, [r7, #8]
 800c5d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5d4:	f000 f8d9 	bl	800c78a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5da:	1e5a      	subs	r2, r3, #1
 800c5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e8:	d112      	bne.n	800c610 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d016      	beq.n	800c620 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	3310      	adds	r3, #16
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f000 fda2 	bl	800d140 <xTaskRemoveFromEventList>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d00e      	beq.n	800c620 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d00b      	beq.n	800c620 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	e007      	b.n	800c620 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c614:	3301      	adds	r3, #1
 800c616:	b2db      	uxtb	r3, r3
 800c618:	b25a      	sxtb	r2, r3
 800c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c620:	2301      	movs	r3, #1
 800c622:	637b      	str	r3, [r7, #52]	; 0x34
 800c624:	e001      	b.n	800c62a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c626:	2300      	movs	r3, #0
 800c628:	637b      	str	r3, [r7, #52]	; 0x34
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	f383 8811 	msr	BASEPRI, r3
}
 800c634:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c638:	4618      	mov	r0, r3
 800c63a:	3738      	adds	r7, #56	; 0x38
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <vQueueDelete+0x28>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	60bb      	str	r3, [r7, #8]
}
 800c664:	bf00      	nop
 800c666:	e7fe      	b.n	800c666 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f000 f935 	bl	800c8d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c674:	2b00      	cmp	r3, #0
 800c676:	d102      	bne.n	800c67e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f001 fc59 	bl	800df30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c67e:	bf00      	nop
 800c680:	3710      	adds	r7, #16
 800c682:	46bd      	mov	sp, r7
 800c684:	bd80      	pop	{r7, pc}

0800c686 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c686:	b480      	push	{r7}
 800c688:	b085      	sub	sp, #20
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c692:	2b00      	cmp	r3, #0
 800c694:	d006      	beq.n	800c6a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f1c3 0307 	rsb	r3, r3, #7
 800c6a0:	60fb      	str	r3, [r7, #12]
 800c6a2:	e001      	b.n	800c6a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
	}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr

0800c6b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b086      	sub	sp, #24
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	60f8      	str	r0, [r7, #12]
 800c6be:	60b9      	str	r1, [r7, #8]
 800c6c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10d      	bne.n	800c6f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d14d      	bne.n	800c778 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f000 ff7d 	bl	800d5e0 <xTaskPriorityDisinherit>
 800c6e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	609a      	str	r2, [r3, #8]
 800c6ee:	e043      	b.n	800c778 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d119      	bne.n	800c72a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	6858      	ldr	r0, [r3, #4]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fe:	461a      	mov	r2, r3
 800c700:	68b9      	ldr	r1, [r7, #8]
 800c702:	f001 fd5d 	bl	800e1c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	685a      	ldr	r2, [r3, #4]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c70e:	441a      	add	r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	685a      	ldr	r2, [r3, #4]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d32b      	bcc.n	800c778 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	605a      	str	r2, [r3, #4]
 800c728:	e026      	b.n	800c778 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	68d8      	ldr	r0, [r3, #12]
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c732:	461a      	mov	r2, r3
 800c734:	68b9      	ldr	r1, [r7, #8]
 800c736:	f001 fd43 	bl	800e1c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	68da      	ldr	r2, [r3, #12]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c742:	425b      	negs	r3, r3
 800c744:	441a      	add	r2, r3
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	68da      	ldr	r2, [r3, #12]
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	429a      	cmp	r2, r3
 800c754:	d207      	bcs.n	800c766 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	689a      	ldr	r2, [r3, #8]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c75e:	425b      	negs	r3, r3
 800c760:	441a      	add	r2, r3
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2b02      	cmp	r3, #2
 800c76a:	d105      	bne.n	800c778 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d002      	beq.n	800c778 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	3b01      	subs	r3, #1
 800c776:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	1c5a      	adds	r2, r3, #1
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c780:	697b      	ldr	r3, [r7, #20]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3718      	adds	r7, #24
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d018      	beq.n	800c7ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	68da      	ldr	r2, [r3, #12]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a4:	441a      	add	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68da      	ldr	r2, [r3, #12]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d303      	bcc.n	800c7be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	68d9      	ldr	r1, [r3, #12]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	6838      	ldr	r0, [r7, #0]
 800c7ca:	f001 fcf9 	bl	800e1c0 <memcpy>
	}
}
 800c7ce:	bf00      	nop
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7d6:	b580      	push	{r7, lr}
 800c7d8:	b084      	sub	sp, #16
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7de:	f001 f9b9 	bl	800db54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7ea:	e011      	b.n	800c810 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d012      	beq.n	800c81a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3324      	adds	r3, #36	; 0x24
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f000 fca1 	bl	800d140 <xTaskRemoveFromEventList>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d001      	beq.n	800c808 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c804:	f000 fd76 	bl	800d2f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c808:	7bfb      	ldrb	r3, [r7, #15]
 800c80a:	3b01      	subs	r3, #1
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c814:	2b00      	cmp	r3, #0
 800c816:	dce9      	bgt.n	800c7ec <prvUnlockQueue+0x16>
 800c818:	e000      	b.n	800c81c <prvUnlockQueue+0x46>
					break;
 800c81a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	22ff      	movs	r2, #255	; 0xff
 800c820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c824:	f001 f9c6 	bl	800dbb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c828:	f001 f994 	bl	800db54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c832:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c834:	e011      	b.n	800c85a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d012      	beq.n	800c864 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	3310      	adds	r3, #16
 800c842:	4618      	mov	r0, r3
 800c844:	f000 fc7c 	bl	800d140 <xTaskRemoveFromEventList>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d001      	beq.n	800c852 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c84e:	f000 fd51 	bl	800d2f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c852:	7bbb      	ldrb	r3, [r7, #14]
 800c854:	3b01      	subs	r3, #1
 800c856:	b2db      	uxtb	r3, r3
 800c858:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c85a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	dce9      	bgt.n	800c836 <prvUnlockQueue+0x60>
 800c862:	e000      	b.n	800c866 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c864:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	22ff      	movs	r2, #255	; 0xff
 800c86a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c86e:	f001 f9a1 	bl	800dbb4 <vPortExitCritical>
}
 800c872:	bf00      	nop
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c882:	f001 f967 	bl	800db54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d102      	bne.n	800c894 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c88e:	2301      	movs	r3, #1
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	e001      	b.n	800c898 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c898:	f001 f98c 	bl	800dbb4 <vPortExitCritical>

	return xReturn;
 800c89c:	68fb      	ldr	r3, [r7, #12]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8ae:	f001 f951 	bl	800db54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d102      	bne.n	800c8c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	60fb      	str	r3, [r7, #12]
 800c8c2:	e001      	b.n	800c8c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8c8:	f001 f974 	bl	800dbb4 <vPortExitCritical>

	return xReturn;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	3710      	adds	r7, #16
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
	...

0800c8d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c8d8:	b480      	push	{r7}
 800c8da:	b085      	sub	sp, #20
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	60fb      	str	r3, [r7, #12]
 800c8e4:	e016      	b.n	800c914 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c8e6:	4a10      	ldr	r2, [pc, #64]	; (800c928 <vQueueUnregisterQueue+0x50>)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	00db      	lsls	r3, r3, #3
 800c8ec:	4413      	add	r3, r2
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d10b      	bne.n	800c90e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c8f6:	4a0c      	ldr	r2, [pc, #48]	; (800c928 <vQueueUnregisterQueue+0x50>)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c900:	4a09      	ldr	r2, [pc, #36]	; (800c928 <vQueueUnregisterQueue+0x50>)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	00db      	lsls	r3, r3, #3
 800c906:	4413      	add	r3, r2
 800c908:	2200      	movs	r2, #0
 800c90a:	605a      	str	r2, [r3, #4]
				break;
 800c90c:	e006      	b.n	800c91c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3301      	adds	r3, #1
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b07      	cmp	r3, #7
 800c918:	d9e5      	bls.n	800c8e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c91a:	bf00      	nop
 800c91c:	bf00      	nop
 800c91e:	3714      	adds	r7, #20
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr
 800c928:	20001768 	.word	0x20001768

0800c92c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08e      	sub	sp, #56	; 0x38
 800c930:	af04      	add	r7, sp, #16
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10a      	bne.n	800c956 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c944:	f383 8811 	msr	BASEPRI, r3
 800c948:	f3bf 8f6f 	isb	sy
 800c94c:	f3bf 8f4f 	dsb	sy
 800c950:	623b      	str	r3, [r7, #32]
}
 800c952:	bf00      	nop
 800c954:	e7fe      	b.n	800c954 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10a      	bne.n	800c972 <xTaskCreateStatic+0x46>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	61fb      	str	r3, [r7, #28]
}
 800c96e:	bf00      	nop
 800c970:	e7fe      	b.n	800c970 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c972:	2354      	movs	r3, #84	; 0x54
 800c974:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	2b54      	cmp	r3, #84	; 0x54
 800c97a:	d00a      	beq.n	800c992 <xTaskCreateStatic+0x66>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	61bb      	str	r3, [r7, #24]
}
 800c98e:	bf00      	nop
 800c990:	e7fe      	b.n	800c990 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c992:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	2b00      	cmp	r3, #0
 800c998:	d01e      	beq.n	800c9d8 <xTaskCreateStatic+0xac>
 800c99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d01b      	beq.n	800c9d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	2202      	movs	r2, #2
 800c9ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	9303      	str	r3, [sp, #12]
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	9302      	str	r3, [sp, #8]
 800c9ba:	f107 0314 	add.w	r3, r7, #20
 800c9be:	9301      	str	r3, [sp, #4]
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c2:	9300      	str	r3, [sp, #0]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	68b9      	ldr	r1, [r7, #8]
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f000 f850 	bl	800ca70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c9d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c9d2:	f000 f8d5 	bl	800cb80 <prvAddNewTaskToReadyList>
 800c9d6:	e001      	b.n	800c9dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c9dc:	697b      	ldr	r3, [r7, #20]
	}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3728      	adds	r7, #40	; 0x28
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b08c      	sub	sp, #48	; 0x30
 800c9ea:	af04      	add	r7, sp, #16
 800c9ec:	60f8      	str	r0, [r7, #12]
 800c9ee:	60b9      	str	r1, [r7, #8]
 800c9f0:	603b      	str	r3, [r7, #0]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c9f6:	88fb      	ldrh	r3, [r7, #6]
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f001 f9cc 	bl	800dd98 <pvPortMalloc>
 800ca00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00e      	beq.n	800ca26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ca08:	2054      	movs	r0, #84	; 0x54
 800ca0a:	f001 f9c5 	bl	800dd98 <pvPortMalloc>
 800ca0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d003      	beq.n	800ca1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	697a      	ldr	r2, [r7, #20]
 800ca1a:	631a      	str	r2, [r3, #48]	; 0x30
 800ca1c:	e005      	b.n	800ca2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ca1e:	6978      	ldr	r0, [r7, #20]
 800ca20:	f001 fa86 	bl	800df30 <vPortFree>
 800ca24:	e001      	b.n	800ca2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ca26:	2300      	movs	r3, #0
 800ca28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d017      	beq.n	800ca60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	2200      	movs	r2, #0
 800ca34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ca38:	88fa      	ldrh	r2, [r7, #6]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	9303      	str	r3, [sp, #12]
 800ca3e:	69fb      	ldr	r3, [r7, #28]
 800ca40:	9302      	str	r3, [sp, #8]
 800ca42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca44:	9301      	str	r3, [sp, #4]
 800ca46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca48:	9300      	str	r3, [sp, #0]
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	68b9      	ldr	r1, [r7, #8]
 800ca4e:	68f8      	ldr	r0, [r7, #12]
 800ca50:	f000 f80e 	bl	800ca70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca54:	69f8      	ldr	r0, [r7, #28]
 800ca56:	f000 f893 	bl	800cb80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	61bb      	str	r3, [r7, #24]
 800ca5e:	e002      	b.n	800ca66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ca60:	f04f 33ff 	mov.w	r3, #4294967295
 800ca64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ca66:	69bb      	ldr	r3, [r7, #24]
	}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3720      	adds	r7, #32
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	60f8      	str	r0, [r7, #12]
 800ca78:	60b9      	str	r1, [r7, #8]
 800ca7a:	607a      	str	r2, [r7, #4]
 800ca7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ca7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	009b      	lsls	r3, r3, #2
 800ca8c:	4413      	add	r3, r2
 800ca8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	f023 0307 	bic.w	r3, r3, #7
 800ca96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	f003 0307 	and.w	r3, r3, #7
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00a      	beq.n	800cab8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	617b      	str	r3, [r7, #20]
}
 800cab4:	bf00      	nop
 800cab6:	e7fe      	b.n	800cab6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d01f      	beq.n	800cafe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cabe:	2300      	movs	r3, #0
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	e012      	b.n	800caea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cac4:	68ba      	ldr	r2, [r7, #8]
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	4413      	add	r3, r2
 800caca:	7819      	ldrb	r1, [r3, #0]
 800cacc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	4413      	add	r3, r2
 800cad2:	3334      	adds	r3, #52	; 0x34
 800cad4:	460a      	mov	r2, r1
 800cad6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	4413      	add	r3, r2
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d006      	beq.n	800caf2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	3301      	adds	r3, #1
 800cae8:	61fb      	str	r3, [r7, #28]
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	2b0f      	cmp	r3, #15
 800caee:	d9e9      	bls.n	800cac4 <prvInitialiseNewTask+0x54>
 800caf0:	e000      	b.n	800caf4 <prvInitialiseNewTask+0x84>
			{
				break;
 800caf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800caf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf6:	2200      	movs	r2, #0
 800caf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cafc:	e003      	b.n	800cb06 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb08:	2b06      	cmp	r3, #6
 800cb0a:	d901      	bls.n	800cb10 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb0c:	2306      	movs	r3, #6
 800cb0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb1a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1e:	2200      	movs	r2, #0
 800cb20:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb24:	3304      	adds	r3, #4
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fe ff91 	bl	800ba4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2e:	3318      	adds	r3, #24
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7fe ff8c 	bl	800ba4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3e:	f1c3 0207 	rsb	r2, r3, #7
 800cb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4e:	2200      	movs	r2, #0
 800cb50:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	68f9      	ldr	r1, [r7, #12]
 800cb5e:	69b8      	ldr	r0, [r7, #24]
 800cb60:	f000 fecc 	bl	800d8fc <pxPortInitialiseStack>
 800cb64:	4602      	mov	r2, r0
 800cb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d002      	beq.n	800cb76 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb76:	bf00      	nop
 800cb78:	3720      	adds	r7, #32
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cb88:	f000 ffe4 	bl	800db54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cb8c:	4b2a      	ldr	r3, [pc, #168]	; (800cc38 <prvAddNewTaskToReadyList+0xb8>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	3301      	adds	r3, #1
 800cb92:	4a29      	ldr	r2, [pc, #164]	; (800cc38 <prvAddNewTaskToReadyList+0xb8>)
 800cb94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cb96:	4b29      	ldr	r3, [pc, #164]	; (800cc3c <prvAddNewTaskToReadyList+0xbc>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d109      	bne.n	800cbb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cb9e:	4a27      	ldr	r2, [pc, #156]	; (800cc3c <prvAddNewTaskToReadyList+0xbc>)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cba4:	4b24      	ldr	r3, [pc, #144]	; (800cc38 <prvAddNewTaskToReadyList+0xb8>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	2b01      	cmp	r3, #1
 800cbaa:	d110      	bne.n	800cbce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cbac:	f000 fbc6 	bl	800d33c <prvInitialiseTaskLists>
 800cbb0:	e00d      	b.n	800cbce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cbb2:	4b23      	ldr	r3, [pc, #140]	; (800cc40 <prvAddNewTaskToReadyList+0xc0>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d109      	bne.n	800cbce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cbba:	4b20      	ldr	r3, [pc, #128]	; (800cc3c <prvAddNewTaskToReadyList+0xbc>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d802      	bhi.n	800cbce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cbc8:	4a1c      	ldr	r2, [pc, #112]	; (800cc3c <prvAddNewTaskToReadyList+0xbc>)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cbce:	4b1d      	ldr	r3, [pc, #116]	; (800cc44 <prvAddNewTaskToReadyList+0xc4>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3301      	adds	r3, #1
 800cbd4:	4a1b      	ldr	r2, [pc, #108]	; (800cc44 <prvAddNewTaskToReadyList+0xc4>)
 800cbd6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbdc:	2201      	movs	r2, #1
 800cbde:	409a      	lsls	r2, r3
 800cbe0:	4b19      	ldr	r3, [pc, #100]	; (800cc48 <prvAddNewTaskToReadyList+0xc8>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	4a18      	ldr	r2, [pc, #96]	; (800cc48 <prvAddNewTaskToReadyList+0xc8>)
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbee:	4613      	mov	r3, r2
 800cbf0:	009b      	lsls	r3, r3, #2
 800cbf2:	4413      	add	r3, r2
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	4a15      	ldr	r2, [pc, #84]	; (800cc4c <prvAddNewTaskToReadyList+0xcc>)
 800cbf8:	441a      	add	r2, r3
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	3304      	adds	r3, #4
 800cbfe:	4619      	mov	r1, r3
 800cc00:	4610      	mov	r0, r2
 800cc02:	f7fe ff31 	bl	800ba68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc06:	f000 ffd5 	bl	800dbb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc0a:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <prvAddNewTaskToReadyList+0xc0>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00e      	beq.n	800cc30 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc12:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <prvAddNewTaskToReadyList+0xbc>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d207      	bcs.n	800cc30 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cc20:	4b0b      	ldr	r3, [pc, #44]	; (800cc50 <prvAddNewTaskToReadyList+0xd0>)
 800cc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	f3bf 8f4f 	dsb	sy
 800cc2c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	200018a8 	.word	0x200018a8
 800cc3c:	200017a8 	.word	0x200017a8
 800cc40:	200018b4 	.word	0x200018b4
 800cc44:	200018c4 	.word	0x200018c4
 800cc48:	200018b0 	.word	0x200018b0
 800cc4c:	200017ac 	.word	0x200017ac
 800cc50:	e000ed04 	.word	0xe000ed04

0800cc54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d017      	beq.n	800cc96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cc66:	4b13      	ldr	r3, [pc, #76]	; (800ccb4 <vTaskDelay+0x60>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00a      	beq.n	800cc84 <vTaskDelay+0x30>
	__asm volatile
 800cc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	60bb      	str	r3, [r7, #8]
}
 800cc80:	bf00      	nop
 800cc82:	e7fe      	b.n	800cc82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cc84:	f000 f87a 	bl	800cd7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cc88:	2100      	movs	r1, #0
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fdd0 	bl	800d830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cc90:	f000 f882 	bl	800cd98 <xTaskResumeAll>
 800cc94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d107      	bne.n	800ccac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cc9c:	4b06      	ldr	r3, [pc, #24]	; (800ccb8 <vTaskDelay+0x64>)
 800cc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cca2:	601a      	str	r2, [r3, #0]
 800cca4:	f3bf 8f4f 	dsb	sy
 800cca8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccac:	bf00      	nop
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	200018d0 	.word	0x200018d0
 800ccb8:	e000ed04 	.word	0xe000ed04

0800ccbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b08a      	sub	sp, #40	; 0x28
 800ccc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ccca:	463a      	mov	r2, r7
 800cccc:	1d39      	adds	r1, r7, #4
 800ccce:	f107 0308 	add.w	r3, r7, #8
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f7f5 f9c6 	bl	8002064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ccd8:	6839      	ldr	r1, [r7, #0]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	9202      	str	r2, [sp, #8]
 800cce0:	9301      	str	r3, [sp, #4]
 800cce2:	2300      	movs	r3, #0
 800cce4:	9300      	str	r3, [sp, #0]
 800cce6:	2300      	movs	r3, #0
 800cce8:	460a      	mov	r2, r1
 800ccea:	491e      	ldr	r1, [pc, #120]	; (800cd64 <vTaskStartScheduler+0xa8>)
 800ccec:	481e      	ldr	r0, [pc, #120]	; (800cd68 <vTaskStartScheduler+0xac>)
 800ccee:	f7ff fe1d 	bl	800c92c <xTaskCreateStatic>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	4a1d      	ldr	r2, [pc, #116]	; (800cd6c <vTaskStartScheduler+0xb0>)
 800ccf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ccf8:	4b1c      	ldr	r3, [pc, #112]	; (800cd6c <vTaskStartScheduler+0xb0>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd00:	2301      	movs	r3, #1
 800cd02:	617b      	str	r3, [r7, #20]
 800cd04:	e001      	b.n	800cd0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd06:	2300      	movs	r3, #0
 800cd08:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d116      	bne.n	800cd3e <vTaskStartScheduler+0x82>
	__asm volatile
 800cd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd14:	f383 8811 	msr	BASEPRI, r3
 800cd18:	f3bf 8f6f 	isb	sy
 800cd1c:	f3bf 8f4f 	dsb	sy
 800cd20:	613b      	str	r3, [r7, #16]
}
 800cd22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cd24:	4b12      	ldr	r3, [pc, #72]	; (800cd70 <vTaskStartScheduler+0xb4>)
 800cd26:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd2c:	4b11      	ldr	r3, [pc, #68]	; (800cd74 <vTaskStartScheduler+0xb8>)
 800cd2e:	2201      	movs	r2, #1
 800cd30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd32:	4b11      	ldr	r3, [pc, #68]	; (800cd78 <vTaskStartScheduler+0xbc>)
 800cd34:	2200      	movs	r2, #0
 800cd36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd38:	f000 fe6a 	bl	800da10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd3c:	e00e      	b.n	800cd5c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd44:	d10a      	bne.n	800cd5c <vTaskStartScheduler+0xa0>
	__asm volatile
 800cd46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4a:	f383 8811 	msr	BASEPRI, r3
 800cd4e:	f3bf 8f6f 	isb	sy
 800cd52:	f3bf 8f4f 	dsb	sy
 800cd56:	60fb      	str	r3, [r7, #12]
}
 800cd58:	bf00      	nop
 800cd5a:	e7fe      	b.n	800cd5a <vTaskStartScheduler+0x9e>
}
 800cd5c:	bf00      	nop
 800cd5e:	3718      	adds	r7, #24
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	08010594 	.word	0x08010594
 800cd68:	0800d30d 	.word	0x0800d30d
 800cd6c:	200018cc 	.word	0x200018cc
 800cd70:	200018c8 	.word	0x200018c8
 800cd74:	200018b4 	.word	0x200018b4
 800cd78:	200018ac 	.word	0x200018ac

0800cd7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd80:	4b04      	ldr	r3, [pc, #16]	; (800cd94 <vTaskSuspendAll+0x18>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	3301      	adds	r3, #1
 800cd86:	4a03      	ldr	r2, [pc, #12]	; (800cd94 <vTaskSuspendAll+0x18>)
 800cd88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd8a:	bf00      	nop
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr
 800cd94:	200018d0 	.word	0x200018d0

0800cd98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cda2:	2300      	movs	r3, #0
 800cda4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cda6:	4b41      	ldr	r3, [pc, #260]	; (800ceac <xTaskResumeAll+0x114>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10a      	bne.n	800cdc4 <xTaskResumeAll+0x2c>
	__asm volatile
 800cdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	603b      	str	r3, [r7, #0]
}
 800cdc0:	bf00      	nop
 800cdc2:	e7fe      	b.n	800cdc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cdc4:	f000 fec6 	bl	800db54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cdc8:	4b38      	ldr	r3, [pc, #224]	; (800ceac <xTaskResumeAll+0x114>)
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	4a37      	ldr	r2, [pc, #220]	; (800ceac <xTaskResumeAll+0x114>)
 800cdd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdd2:	4b36      	ldr	r3, [pc, #216]	; (800ceac <xTaskResumeAll+0x114>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d161      	bne.n	800ce9e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cdda:	4b35      	ldr	r3, [pc, #212]	; (800ceb0 <xTaskResumeAll+0x118>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d05d      	beq.n	800ce9e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cde2:	e02e      	b.n	800ce42 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cde4:	4b33      	ldr	r3, [pc, #204]	; (800ceb4 <xTaskResumeAll+0x11c>)
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	68db      	ldr	r3, [r3, #12]
 800cdea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	3318      	adds	r3, #24
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f7fe fe96 	bl	800bb22 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fe fe91 	bl	800bb22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce04:	2201      	movs	r2, #1
 800ce06:	409a      	lsls	r2, r3
 800ce08:	4b2b      	ldr	r3, [pc, #172]	; (800ceb8 <xTaskResumeAll+0x120>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4313      	orrs	r3, r2
 800ce0e:	4a2a      	ldr	r2, [pc, #168]	; (800ceb8 <xTaskResumeAll+0x120>)
 800ce10:	6013      	str	r3, [r2, #0]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce16:	4613      	mov	r3, r2
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	4413      	add	r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4a27      	ldr	r2, [pc, #156]	; (800cebc <xTaskResumeAll+0x124>)
 800ce20:	441a      	add	r2, r3
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	3304      	adds	r3, #4
 800ce26:	4619      	mov	r1, r3
 800ce28:	4610      	mov	r0, r2
 800ce2a:	f7fe fe1d 	bl	800ba68 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce32:	4b23      	ldr	r3, [pc, #140]	; (800cec0 <xTaskResumeAll+0x128>)
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d302      	bcc.n	800ce42 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800ce3c:	4b21      	ldr	r3, [pc, #132]	; (800cec4 <xTaskResumeAll+0x12c>)
 800ce3e:	2201      	movs	r2, #1
 800ce40:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce42:	4b1c      	ldr	r3, [pc, #112]	; (800ceb4 <xTaskResumeAll+0x11c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1cc      	bne.n	800cde4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d001      	beq.n	800ce54 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce50:	f000 fb12 	bl	800d478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce54:	4b1c      	ldr	r3, [pc, #112]	; (800cec8 <xTaskResumeAll+0x130>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d010      	beq.n	800ce82 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce60:	f000 f836 	bl	800ced0 <xTaskIncrementTick>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800ce6a:	4b16      	ldr	r3, [pc, #88]	; (800cec4 <xTaskResumeAll+0x12c>)
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3b01      	subs	r3, #1
 800ce74:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d1f1      	bne.n	800ce60 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800ce7c:	4b12      	ldr	r3, [pc, #72]	; (800cec8 <xTaskResumeAll+0x130>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce82:	4b10      	ldr	r3, [pc, #64]	; (800cec4 <xTaskResumeAll+0x12c>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d009      	beq.n	800ce9e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce8e:	4b0f      	ldr	r3, [pc, #60]	; (800cecc <xTaskResumeAll+0x134>)
 800ce90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	f3bf 8f4f 	dsb	sy
 800ce9a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce9e:	f000 fe89 	bl	800dbb4 <vPortExitCritical>

	return xAlreadyYielded;
 800cea2:	68bb      	ldr	r3, [r7, #8]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}
 800ceac:	200018d0 	.word	0x200018d0
 800ceb0:	200018a8 	.word	0x200018a8
 800ceb4:	20001868 	.word	0x20001868
 800ceb8:	200018b0 	.word	0x200018b0
 800cebc:	200017ac 	.word	0x200017ac
 800cec0:	200017a8 	.word	0x200017a8
 800cec4:	200018bc 	.word	0x200018bc
 800cec8:	200018b8 	.word	0x200018b8
 800cecc:	e000ed04 	.word	0xe000ed04

0800ced0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b086      	sub	sp, #24
 800ced4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ced6:	2300      	movs	r3, #0
 800ced8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ceda:	4b4e      	ldr	r3, [pc, #312]	; (800d014 <xTaskIncrementTick+0x144>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f040 808e 	bne.w	800d000 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cee4:	4b4c      	ldr	r3, [pc, #304]	; (800d018 <xTaskIncrementTick+0x148>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	3301      	adds	r3, #1
 800ceea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ceec:	4a4a      	ldr	r2, [pc, #296]	; (800d018 <xTaskIncrementTick+0x148>)
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cef2:	693b      	ldr	r3, [r7, #16]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d120      	bne.n	800cf3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cef8:	4b48      	ldr	r3, [pc, #288]	; (800d01c <xTaskIncrementTick+0x14c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00a      	beq.n	800cf18 <xTaskIncrementTick+0x48>
	__asm volatile
 800cf02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf06:	f383 8811 	msr	BASEPRI, r3
 800cf0a:	f3bf 8f6f 	isb	sy
 800cf0e:	f3bf 8f4f 	dsb	sy
 800cf12:	603b      	str	r3, [r7, #0]
}
 800cf14:	bf00      	nop
 800cf16:	e7fe      	b.n	800cf16 <xTaskIncrementTick+0x46>
 800cf18:	4b40      	ldr	r3, [pc, #256]	; (800d01c <xTaskIncrementTick+0x14c>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	60fb      	str	r3, [r7, #12]
 800cf1e:	4b40      	ldr	r3, [pc, #256]	; (800d020 <xTaskIncrementTick+0x150>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	4a3e      	ldr	r2, [pc, #248]	; (800d01c <xTaskIncrementTick+0x14c>)
 800cf24:	6013      	str	r3, [r2, #0]
 800cf26:	4a3e      	ldr	r2, [pc, #248]	; (800d020 <xTaskIncrementTick+0x150>)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	6013      	str	r3, [r2, #0]
 800cf2c:	4b3d      	ldr	r3, [pc, #244]	; (800d024 <xTaskIncrementTick+0x154>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	3301      	adds	r3, #1
 800cf32:	4a3c      	ldr	r2, [pc, #240]	; (800d024 <xTaskIncrementTick+0x154>)
 800cf34:	6013      	str	r3, [r2, #0]
 800cf36:	f000 fa9f 	bl	800d478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf3a:	4b3b      	ldr	r3, [pc, #236]	; (800d028 <xTaskIncrementTick+0x158>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	693a      	ldr	r2, [r7, #16]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d348      	bcc.n	800cfd6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf44:	4b35      	ldr	r3, [pc, #212]	; (800d01c <xTaskIncrementTick+0x14c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d104      	bne.n	800cf58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf4e:	4b36      	ldr	r3, [pc, #216]	; (800d028 <xTaskIncrementTick+0x158>)
 800cf50:	f04f 32ff 	mov.w	r2, #4294967295
 800cf54:	601a      	str	r2, [r3, #0]
					break;
 800cf56:	e03e      	b.n	800cfd6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf58:	4b30      	ldr	r3, [pc, #192]	; (800d01c <xTaskIncrementTick+0x14c>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf68:	693a      	ldr	r2, [r7, #16]
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d203      	bcs.n	800cf78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf70:	4a2d      	ldr	r2, [pc, #180]	; (800d028 <xTaskIncrementTick+0x158>)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf76:	e02e      	b.n	800cfd6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	3304      	adds	r3, #4
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7fe fdd0 	bl	800bb22 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d004      	beq.n	800cf94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	3318      	adds	r3, #24
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe fdc7 	bl	800bb22 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf98:	2201      	movs	r2, #1
 800cf9a:	409a      	lsls	r2, r3
 800cf9c:	4b23      	ldr	r3, [pc, #140]	; (800d02c <xTaskIncrementTick+0x15c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	4a22      	ldr	r2, [pc, #136]	; (800d02c <xTaskIncrementTick+0x15c>)
 800cfa4:	6013      	str	r3, [r2, #0]
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfaa:	4613      	mov	r3, r2
 800cfac:	009b      	lsls	r3, r3, #2
 800cfae:	4413      	add	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4a1f      	ldr	r2, [pc, #124]	; (800d030 <xTaskIncrementTick+0x160>)
 800cfb4:	441a      	add	r2, r3
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	3304      	adds	r3, #4
 800cfba:	4619      	mov	r1, r3
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	f7fe fd53 	bl	800ba68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc6:	4b1b      	ldr	r3, [pc, #108]	; (800d034 <xTaskIncrementTick+0x164>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d3b9      	bcc.n	800cf44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfd4:	e7b6      	b.n	800cf44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cfd6:	4b17      	ldr	r3, [pc, #92]	; (800d034 <xTaskIncrementTick+0x164>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfdc:	4914      	ldr	r1, [pc, #80]	; (800d030 <xTaskIncrementTick+0x160>)
 800cfde:	4613      	mov	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	440b      	add	r3, r1
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d901      	bls.n	800cff2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cfee:	2301      	movs	r3, #1
 800cff0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cff2:	4b11      	ldr	r3, [pc, #68]	; (800d038 <xTaskIncrementTick+0x168>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d007      	beq.n	800d00a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cffa:	2301      	movs	r3, #1
 800cffc:	617b      	str	r3, [r7, #20]
 800cffe:	e004      	b.n	800d00a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d000:	4b0e      	ldr	r3, [pc, #56]	; (800d03c <xTaskIncrementTick+0x16c>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	3301      	adds	r3, #1
 800d006:	4a0d      	ldr	r2, [pc, #52]	; (800d03c <xTaskIncrementTick+0x16c>)
 800d008:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d00a:	697b      	ldr	r3, [r7, #20]
}
 800d00c:	4618      	mov	r0, r3
 800d00e:	3718      	adds	r7, #24
 800d010:	46bd      	mov	sp, r7
 800d012:	bd80      	pop	{r7, pc}
 800d014:	200018d0 	.word	0x200018d0
 800d018:	200018ac 	.word	0x200018ac
 800d01c:	20001860 	.word	0x20001860
 800d020:	20001864 	.word	0x20001864
 800d024:	200018c0 	.word	0x200018c0
 800d028:	200018c8 	.word	0x200018c8
 800d02c:	200018b0 	.word	0x200018b0
 800d030:	200017ac 	.word	0x200017ac
 800d034:	200017a8 	.word	0x200017a8
 800d038:	200018bc 	.word	0x200018bc
 800d03c:	200018b8 	.word	0x200018b8

0800d040 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d040:	b480      	push	{r7}
 800d042:	b087      	sub	sp, #28
 800d044:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d046:	4b27      	ldr	r3, [pc, #156]	; (800d0e4 <vTaskSwitchContext+0xa4>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d003      	beq.n	800d056 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d04e:	4b26      	ldr	r3, [pc, #152]	; (800d0e8 <vTaskSwitchContext+0xa8>)
 800d050:	2201      	movs	r2, #1
 800d052:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d054:	e03f      	b.n	800d0d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d056:	4b24      	ldr	r3, [pc, #144]	; (800d0e8 <vTaskSwitchContext+0xa8>)
 800d058:	2200      	movs	r2, #0
 800d05a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d05c:	4b23      	ldr	r3, [pc, #140]	; (800d0ec <vTaskSwitchContext+0xac>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	fab3 f383 	clz	r3, r3
 800d068:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d06a:	7afb      	ldrb	r3, [r7, #11]
 800d06c:	f1c3 031f 	rsb	r3, r3, #31
 800d070:	617b      	str	r3, [r7, #20]
 800d072:	491f      	ldr	r1, [pc, #124]	; (800d0f0 <vTaskSwitchContext+0xb0>)
 800d074:	697a      	ldr	r2, [r7, #20]
 800d076:	4613      	mov	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4413      	add	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	440b      	add	r3, r1
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10a      	bne.n	800d09c <vTaskSwitchContext+0x5c>
	__asm volatile
 800d086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08a:	f383 8811 	msr	BASEPRI, r3
 800d08e:	f3bf 8f6f 	isb	sy
 800d092:	f3bf 8f4f 	dsb	sy
 800d096:	607b      	str	r3, [r7, #4]
}
 800d098:	bf00      	nop
 800d09a:	e7fe      	b.n	800d09a <vTaskSwitchContext+0x5a>
 800d09c:	697a      	ldr	r2, [r7, #20]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	4a12      	ldr	r2, [pc, #72]	; (800d0f0 <vTaskSwitchContext+0xb0>)
 800d0a8:	4413      	add	r3, r2
 800d0aa:	613b      	str	r3, [r7, #16]
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	685a      	ldr	r2, [r3, #4]
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	605a      	str	r2, [r3, #4]
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	685a      	ldr	r2, [r3, #4]
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	3308      	adds	r3, #8
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d104      	bne.n	800d0cc <vTaskSwitchContext+0x8c>
 800d0c2:	693b      	ldr	r3, [r7, #16]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	685a      	ldr	r2, [r3, #4]
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	605a      	str	r2, [r3, #4]
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	4a08      	ldr	r2, [pc, #32]	; (800d0f4 <vTaskSwitchContext+0xb4>)
 800d0d4:	6013      	str	r3, [r2, #0]
}
 800d0d6:	bf00      	nop
 800d0d8:	371c      	adds	r7, #28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	200018d0 	.word	0x200018d0
 800d0e8:	200018bc 	.word	0x200018bc
 800d0ec:	200018b0 	.word	0x200018b0
 800d0f0:	200017ac 	.word	0x200017ac
 800d0f4:	200017a8 	.word	0x200017a8

0800d0f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10a      	bne.n	800d11e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d10c:	f383 8811 	msr	BASEPRI, r3
 800d110:	f3bf 8f6f 	isb	sy
 800d114:	f3bf 8f4f 	dsb	sy
 800d118:	60fb      	str	r3, [r7, #12]
}
 800d11a:	bf00      	nop
 800d11c:	e7fe      	b.n	800d11c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d11e:	4b07      	ldr	r3, [pc, #28]	; (800d13c <vTaskPlaceOnEventList+0x44>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	3318      	adds	r3, #24
 800d124:	4619      	mov	r1, r3
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7fe fcc2 	bl	800bab0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d12c:	2101      	movs	r1, #1
 800d12e:	6838      	ldr	r0, [r7, #0]
 800d130:	f000 fb7e 	bl	800d830 <prvAddCurrentTaskToDelayedList>
}
 800d134:	bf00      	nop
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	200017a8 	.word	0x200017a8

0800d140 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b086      	sub	sp, #24
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	68db      	ldr	r3, [r3, #12]
 800d14c:	68db      	ldr	r3, [r3, #12]
 800d14e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10a      	bne.n	800d16c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d15a:	f383 8811 	msr	BASEPRI, r3
 800d15e:	f3bf 8f6f 	isb	sy
 800d162:	f3bf 8f4f 	dsb	sy
 800d166:	60fb      	str	r3, [r7, #12]
}
 800d168:	bf00      	nop
 800d16a:	e7fe      	b.n	800d16a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	3318      	adds	r3, #24
 800d170:	4618      	mov	r0, r3
 800d172:	f7fe fcd6 	bl	800bb22 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d176:	4b1d      	ldr	r3, [pc, #116]	; (800d1ec <xTaskRemoveFromEventList+0xac>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d11c      	bne.n	800d1b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	3304      	adds	r3, #4
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe fccd 	bl	800bb22 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18c:	2201      	movs	r2, #1
 800d18e:	409a      	lsls	r2, r3
 800d190:	4b17      	ldr	r3, [pc, #92]	; (800d1f0 <xTaskRemoveFromEventList+0xb0>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4313      	orrs	r3, r2
 800d196:	4a16      	ldr	r2, [pc, #88]	; (800d1f0 <xTaskRemoveFromEventList+0xb0>)
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d19e:	4613      	mov	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	4a13      	ldr	r2, [pc, #76]	; (800d1f4 <xTaskRemoveFromEventList+0xb4>)
 800d1a8:	441a      	add	r2, r3
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	f7fe fc59 	bl	800ba68 <vListInsertEnd>
 800d1b6:	e005      	b.n	800d1c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	3318      	adds	r3, #24
 800d1bc:	4619      	mov	r1, r3
 800d1be:	480e      	ldr	r0, [pc, #56]	; (800d1f8 <xTaskRemoveFromEventList+0xb8>)
 800d1c0:	f7fe fc52 	bl	800ba68 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c8:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <xTaskRemoveFromEventList+0xbc>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d905      	bls.n	800d1de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d1d6:	4b0a      	ldr	r3, [pc, #40]	; (800d200 <xTaskRemoveFromEventList+0xc0>)
 800d1d8:	2201      	movs	r2, #1
 800d1da:	601a      	str	r2, [r3, #0]
 800d1dc:	e001      	b.n	800d1e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d1e2:	697b      	ldr	r3, [r7, #20]
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3718      	adds	r7, #24
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}
 800d1ec:	200018d0 	.word	0x200018d0
 800d1f0:	200018b0 	.word	0x200018b0
 800d1f4:	200017ac 	.word	0x200017ac
 800d1f8:	20001868 	.word	0x20001868
 800d1fc:	200017a8 	.word	0x200017a8
 800d200:	200018bc 	.word	0x200018bc

0800d204 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d20c:	4b06      	ldr	r3, [pc, #24]	; (800d228 <vTaskInternalSetTimeOutState+0x24>)
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d214:	4b05      	ldr	r3, [pc, #20]	; (800d22c <vTaskInternalSetTimeOutState+0x28>)
 800d216:	681a      	ldr	r2, [r3, #0]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	605a      	str	r2, [r3, #4]
}
 800d21c:	bf00      	nop
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr
 800d228:	200018c0 	.word	0x200018c0
 800d22c:	200018ac 	.word	0x200018ac

0800d230 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b088      	sub	sp, #32
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10a      	bne.n	800d256 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d244:	f383 8811 	msr	BASEPRI, r3
 800d248:	f3bf 8f6f 	isb	sy
 800d24c:	f3bf 8f4f 	dsb	sy
 800d250:	613b      	str	r3, [r7, #16]
}
 800d252:	bf00      	nop
 800d254:	e7fe      	b.n	800d254 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10a      	bne.n	800d272 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d25c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d260:	f383 8811 	msr	BASEPRI, r3
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	f3bf 8f4f 	dsb	sy
 800d26c:	60fb      	str	r3, [r7, #12]
}
 800d26e:	bf00      	nop
 800d270:	e7fe      	b.n	800d270 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d272:	f000 fc6f 	bl	800db54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d276:	4b1d      	ldr	r3, [pc, #116]	; (800d2ec <xTaskCheckForTimeOut+0xbc>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	69ba      	ldr	r2, [r7, #24]
 800d282:	1ad3      	subs	r3, r2, r3
 800d284:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28e:	d102      	bne.n	800d296 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d290:	2300      	movs	r3, #0
 800d292:	61fb      	str	r3, [r7, #28]
 800d294:	e023      	b.n	800d2de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	4b15      	ldr	r3, [pc, #84]	; (800d2f0 <xTaskCheckForTimeOut+0xc0>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d007      	beq.n	800d2b2 <xTaskCheckForTimeOut+0x82>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	69ba      	ldr	r2, [r7, #24]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d302      	bcc.n	800d2b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	61fb      	str	r3, [r7, #28]
 800d2b0:	e015      	b.n	800d2de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	697a      	ldr	r2, [r7, #20]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d20b      	bcs.n	800d2d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	1ad2      	subs	r2, r2, r3
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f7ff ff9b 	bl	800d204 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	61fb      	str	r3, [r7, #28]
 800d2d2:	e004      	b.n	800d2de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d2de:	f000 fc69 	bl	800dbb4 <vPortExitCritical>

	return xReturn;
 800d2e2:	69fb      	ldr	r3, [r7, #28]
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	3720      	adds	r7, #32
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	200018ac 	.word	0x200018ac
 800d2f0:	200018c0 	.word	0x200018c0

0800d2f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d2f8:	4b03      	ldr	r3, [pc, #12]	; (800d308 <vTaskMissedYield+0x14>)
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	601a      	str	r2, [r3, #0]
}
 800d2fe:	bf00      	nop
 800d300:	46bd      	mov	sp, r7
 800d302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d306:	4770      	bx	lr
 800d308:	200018bc 	.word	0x200018bc

0800d30c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d314:	f000 f852 	bl	800d3bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d318:	4b06      	ldr	r3, [pc, #24]	; (800d334 <prvIdleTask+0x28>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d9f9      	bls.n	800d314 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d320:	4b05      	ldr	r3, [pc, #20]	; (800d338 <prvIdleTask+0x2c>)
 800d322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d326:	601a      	str	r2, [r3, #0]
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d330:	e7f0      	b.n	800d314 <prvIdleTask+0x8>
 800d332:	bf00      	nop
 800d334:	200017ac 	.word	0x200017ac
 800d338:	e000ed04 	.word	0xe000ed04

0800d33c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d342:	2300      	movs	r3, #0
 800d344:	607b      	str	r3, [r7, #4]
 800d346:	e00c      	b.n	800d362 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	4613      	mov	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4413      	add	r3, r2
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4a12      	ldr	r2, [pc, #72]	; (800d39c <prvInitialiseTaskLists+0x60>)
 800d354:	4413      	add	r3, r2
 800d356:	4618      	mov	r0, r3
 800d358:	f7fe fb59 	bl	800ba0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	3301      	adds	r3, #1
 800d360:	607b      	str	r3, [r7, #4]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b06      	cmp	r3, #6
 800d366:	d9ef      	bls.n	800d348 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d368:	480d      	ldr	r0, [pc, #52]	; (800d3a0 <prvInitialiseTaskLists+0x64>)
 800d36a:	f7fe fb50 	bl	800ba0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d36e:	480d      	ldr	r0, [pc, #52]	; (800d3a4 <prvInitialiseTaskLists+0x68>)
 800d370:	f7fe fb4d 	bl	800ba0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d374:	480c      	ldr	r0, [pc, #48]	; (800d3a8 <prvInitialiseTaskLists+0x6c>)
 800d376:	f7fe fb4a 	bl	800ba0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d37a:	480c      	ldr	r0, [pc, #48]	; (800d3ac <prvInitialiseTaskLists+0x70>)
 800d37c:	f7fe fb47 	bl	800ba0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d380:	480b      	ldr	r0, [pc, #44]	; (800d3b0 <prvInitialiseTaskLists+0x74>)
 800d382:	f7fe fb44 	bl	800ba0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d386:	4b0b      	ldr	r3, [pc, #44]	; (800d3b4 <prvInitialiseTaskLists+0x78>)
 800d388:	4a05      	ldr	r2, [pc, #20]	; (800d3a0 <prvInitialiseTaskLists+0x64>)
 800d38a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d38c:	4b0a      	ldr	r3, [pc, #40]	; (800d3b8 <prvInitialiseTaskLists+0x7c>)
 800d38e:	4a05      	ldr	r2, [pc, #20]	; (800d3a4 <prvInitialiseTaskLists+0x68>)
 800d390:	601a      	str	r2, [r3, #0]
}
 800d392:	bf00      	nop
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	200017ac 	.word	0x200017ac
 800d3a0:	20001838 	.word	0x20001838
 800d3a4:	2000184c 	.word	0x2000184c
 800d3a8:	20001868 	.word	0x20001868
 800d3ac:	2000187c 	.word	0x2000187c
 800d3b0:	20001894 	.word	0x20001894
 800d3b4:	20001860 	.word	0x20001860
 800d3b8:	20001864 	.word	0x20001864

0800d3bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3c2:	e019      	b.n	800d3f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d3c4:	f000 fbc6 	bl	800db54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3c8:	4b10      	ldr	r3, [pc, #64]	; (800d40c <prvCheckTasksWaitingTermination+0x50>)
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fe fba4 	bl	800bb22 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d3da:	4b0d      	ldr	r3, [pc, #52]	; (800d410 <prvCheckTasksWaitingTermination+0x54>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	4a0b      	ldr	r2, [pc, #44]	; (800d410 <prvCheckTasksWaitingTermination+0x54>)
 800d3e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d3e4:	4b0b      	ldr	r3, [pc, #44]	; (800d414 <prvCheckTasksWaitingTermination+0x58>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	4a0a      	ldr	r2, [pc, #40]	; (800d414 <prvCheckTasksWaitingTermination+0x58>)
 800d3ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d3ee:	f000 fbe1 	bl	800dbb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 f810 	bl	800d418 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d3f8:	4b06      	ldr	r3, [pc, #24]	; (800d414 <prvCheckTasksWaitingTermination+0x58>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1e1      	bne.n	800d3c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d400:	bf00      	nop
 800d402:	bf00      	nop
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	2000187c 	.word	0x2000187c
 800d410:	200018a8 	.word	0x200018a8
 800d414:	20001890 	.word	0x20001890

0800d418 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d426:	2b00      	cmp	r3, #0
 800d428:	d108      	bne.n	800d43c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d42e:	4618      	mov	r0, r3
 800d430:	f000 fd7e 	bl	800df30 <vPortFree>
				vPortFree( pxTCB );
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 fd7b 	bl	800df30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d43a:	e018      	b.n	800d46e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d442:	2b01      	cmp	r3, #1
 800d444:	d103      	bne.n	800d44e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fd72 	bl	800df30 <vPortFree>
	}
 800d44c:	e00f      	b.n	800d46e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d454:	2b02      	cmp	r3, #2
 800d456:	d00a      	beq.n	800d46e <prvDeleteTCB+0x56>
	__asm volatile
 800d458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45c:	f383 8811 	msr	BASEPRI, r3
 800d460:	f3bf 8f6f 	isb	sy
 800d464:	f3bf 8f4f 	dsb	sy
 800d468:	60fb      	str	r3, [r7, #12]
}
 800d46a:	bf00      	nop
 800d46c:	e7fe      	b.n	800d46c <prvDeleteTCB+0x54>
	}
 800d46e:	bf00      	nop
 800d470:	3710      	adds	r7, #16
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
	...

0800d478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d478:	b480      	push	{r7}
 800d47a:	b083      	sub	sp, #12
 800d47c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d47e:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <prvResetNextTaskUnblockTime+0x38>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d104      	bne.n	800d492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d488:	4b0a      	ldr	r3, [pc, #40]	; (800d4b4 <prvResetNextTaskUnblockTime+0x3c>)
 800d48a:	f04f 32ff 	mov.w	r2, #4294967295
 800d48e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d490:	e008      	b.n	800d4a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d492:	4b07      	ldr	r3, [pc, #28]	; (800d4b0 <prvResetNextTaskUnblockTime+0x38>)
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	4a04      	ldr	r2, [pc, #16]	; (800d4b4 <prvResetNextTaskUnblockTime+0x3c>)
 800d4a2:	6013      	str	r3, [r2, #0]
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr
 800d4b0:	20001860 	.word	0x20001860
 800d4b4:	200018c8 	.word	0x200018c8

0800d4b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d4b8:	b480      	push	{r7}
 800d4ba:	b083      	sub	sp, #12
 800d4bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d4be:	4b0b      	ldr	r3, [pc, #44]	; (800d4ec <xTaskGetSchedulerState+0x34>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d102      	bne.n	800d4cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	607b      	str	r3, [r7, #4]
 800d4ca:	e008      	b.n	800d4de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4cc:	4b08      	ldr	r3, [pc, #32]	; (800d4f0 <xTaskGetSchedulerState+0x38>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d102      	bne.n	800d4da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d4d4:	2302      	movs	r3, #2
 800d4d6:	607b      	str	r3, [r7, #4]
 800d4d8:	e001      	b.n	800d4de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d4de:	687b      	ldr	r3, [r7, #4]
	}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	200018b4 	.word	0x200018b4
 800d4f0:	200018d0 	.word	0x200018d0

0800d4f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d500:	2300      	movs	r3, #0
 800d502:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d05e      	beq.n	800d5c8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d50e:	4b31      	ldr	r3, [pc, #196]	; (800d5d4 <xTaskPriorityInherit+0xe0>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d514:	429a      	cmp	r2, r3
 800d516:	d24e      	bcs.n	800d5b6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	699b      	ldr	r3, [r3, #24]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	db06      	blt.n	800d52e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d520:	4b2c      	ldr	r3, [pc, #176]	; (800d5d4 <xTaskPriorityInherit+0xe0>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d526:	f1c3 0207 	rsb	r2, r3, #7
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	6959      	ldr	r1, [r3, #20]
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d536:	4613      	mov	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	4413      	add	r3, r2
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	4a26      	ldr	r2, [pc, #152]	; (800d5d8 <xTaskPriorityInherit+0xe4>)
 800d540:	4413      	add	r3, r2
 800d542:	4299      	cmp	r1, r3
 800d544:	d12f      	bne.n	800d5a6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	3304      	adds	r3, #4
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fe fae9 	bl	800bb22 <uxListRemove>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10a      	bne.n	800d56c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55a:	2201      	movs	r2, #1
 800d55c:	fa02 f303 	lsl.w	r3, r2, r3
 800d560:	43da      	mvns	r2, r3
 800d562:	4b1e      	ldr	r3, [pc, #120]	; (800d5dc <xTaskPriorityInherit+0xe8>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4013      	ands	r3, r2
 800d568:	4a1c      	ldr	r2, [pc, #112]	; (800d5dc <xTaskPriorityInherit+0xe8>)
 800d56a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d56c:	4b19      	ldr	r3, [pc, #100]	; (800d5d4 <xTaskPriorityInherit+0xe0>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57a:	2201      	movs	r2, #1
 800d57c:	409a      	lsls	r2, r3
 800d57e:	4b17      	ldr	r3, [pc, #92]	; (800d5dc <xTaskPriorityInherit+0xe8>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4313      	orrs	r3, r2
 800d584:	4a15      	ldr	r2, [pc, #84]	; (800d5dc <xTaskPriorityInherit+0xe8>)
 800d586:	6013      	str	r3, [r2, #0]
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d58c:	4613      	mov	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	4a10      	ldr	r2, [pc, #64]	; (800d5d8 <xTaskPriorityInherit+0xe4>)
 800d596:	441a      	add	r2, r3
 800d598:	68bb      	ldr	r3, [r7, #8]
 800d59a:	3304      	adds	r3, #4
 800d59c:	4619      	mov	r1, r3
 800d59e:	4610      	mov	r0, r2
 800d5a0:	f7fe fa62 	bl	800ba68 <vListInsertEnd>
 800d5a4:	e004      	b.n	800d5b0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d5a6:	4b0b      	ldr	r3, [pc, #44]	; (800d5d4 <xTaskPriorityInherit+0xe0>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	e008      	b.n	800d5c8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ba:	4b06      	ldr	r3, [pc, #24]	; (800d5d4 <xTaskPriorityInherit+0xe0>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d201      	bcs.n	800d5c8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
	}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3710      	adds	r7, #16
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	200017a8 	.word	0x200017a8
 800d5d8:	200017ac 	.word	0x200017ac
 800d5dc:	200018b0 	.word	0x200018b0

0800d5e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d06e      	beq.n	800d6d4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d5f6:	4b3a      	ldr	r3, [pc, #232]	; (800d6e0 <xTaskPriorityDisinherit+0x100>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	693a      	ldr	r2, [r7, #16]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d00a      	beq.n	800d616 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d604:	f383 8811 	msr	BASEPRI, r3
 800d608:	f3bf 8f6f 	isb	sy
 800d60c:	f3bf 8f4f 	dsb	sy
 800d610:	60fb      	str	r3, [r7, #12]
}
 800d612:	bf00      	nop
 800d614:	e7fe      	b.n	800d614 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d10a      	bne.n	800d634 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	60bb      	str	r3, [r7, #8]
}
 800d630:	bf00      	nop
 800d632:	e7fe      	b.n	800d632 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d634:	693b      	ldr	r3, [r7, #16]
 800d636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d638:	1e5a      	subs	r2, r3, #1
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d646:	429a      	cmp	r2, r3
 800d648:	d044      	beq.n	800d6d4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d140      	bne.n	800d6d4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	3304      	adds	r3, #4
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe fa63 	bl	800bb22 <uxListRemove>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d115      	bne.n	800d68e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d666:	491f      	ldr	r1, [pc, #124]	; (800d6e4 <xTaskPriorityDisinherit+0x104>)
 800d668:	4613      	mov	r3, r2
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	4413      	add	r3, r2
 800d66e:	009b      	lsls	r3, r3, #2
 800d670:	440b      	add	r3, r1
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10a      	bne.n	800d68e <xTaskPriorityDisinherit+0xae>
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d67c:	2201      	movs	r2, #1
 800d67e:	fa02 f303 	lsl.w	r3, r2, r3
 800d682:	43da      	mvns	r2, r3
 800d684:	4b18      	ldr	r3, [pc, #96]	; (800d6e8 <xTaskPriorityDisinherit+0x108>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4013      	ands	r3, r2
 800d68a:	4a17      	ldr	r2, [pc, #92]	; (800d6e8 <xTaskPriorityDisinherit+0x108>)
 800d68c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d69a:	f1c3 0207 	rsb	r2, r3, #7
 800d69e:	693b      	ldr	r3, [r7, #16]
 800d6a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	409a      	lsls	r2, r3
 800d6aa:	4b0f      	ldr	r3, [pc, #60]	; (800d6e8 <xTaskPriorityDisinherit+0x108>)
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	4a0d      	ldr	r2, [pc, #52]	; (800d6e8 <xTaskPriorityDisinherit+0x108>)
 800d6b2:	6013      	str	r3, [r2, #0]
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	4413      	add	r3, r2
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	4a08      	ldr	r2, [pc, #32]	; (800d6e4 <xTaskPriorityDisinherit+0x104>)
 800d6c2:	441a      	add	r2, r3
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	3304      	adds	r3, #4
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	4610      	mov	r0, r2
 800d6cc:	f7fe f9cc 	bl	800ba68 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6d4:	697b      	ldr	r3, [r7, #20]
	}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3718      	adds	r7, #24
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	200017a8 	.word	0x200017a8
 800d6e4:	200017ac 	.word	0x200017ac
 800d6e8:	200018b0 	.word	0x200018b0

0800d6ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b088      	sub	sp, #32
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d077      	beq.n	800d7f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10a      	bne.n	800d722 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d710:	f383 8811 	msr	BASEPRI, r3
 800d714:	f3bf 8f6f 	isb	sy
 800d718:	f3bf 8f4f 	dsb	sy
 800d71c:	60fb      	str	r3, [r7, #12]
}
 800d71e:	bf00      	nop
 800d720:	e7fe      	b.n	800d720 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d722:	69bb      	ldr	r3, [r7, #24]
 800d724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d726:	683a      	ldr	r2, [r7, #0]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d902      	bls.n	800d732 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	61fb      	str	r3, [r7, #28]
 800d730:	e002      	b.n	800d738 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d736:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d73c:	69fa      	ldr	r2, [r7, #28]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d058      	beq.n	800d7f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d746:	697a      	ldr	r2, [r7, #20]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d153      	bne.n	800d7f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d74c:	4b2b      	ldr	r3, [pc, #172]	; (800d7fc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	69ba      	ldr	r2, [r7, #24]
 800d752:	429a      	cmp	r2, r3
 800d754:	d10a      	bne.n	800d76c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	60bb      	str	r3, [r7, #8]
}
 800d768:	bf00      	nop
 800d76a:	e7fe      	b.n	800d76a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d770:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	69fa      	ldr	r2, [r7, #28]
 800d776:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	699b      	ldr	r3, [r3, #24]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	db04      	blt.n	800d78a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	f1c3 0207 	rsb	r2, r3, #7
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	6959      	ldr	r1, [r3, #20]
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	4613      	mov	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	4413      	add	r3, r2
 800d796:	009b      	lsls	r3, r3, #2
 800d798:	4a19      	ldr	r2, [pc, #100]	; (800d800 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d79a:	4413      	add	r3, r2
 800d79c:	4299      	cmp	r1, r3
 800d79e:	d129      	bne.n	800d7f4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f7fe f9bc 	bl	800bb22 <uxListRemove>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10a      	bne.n	800d7c6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	2201      	movs	r2, #1
 800d7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ba:	43da      	mvns	r2, r3
 800d7bc:	4b11      	ldr	r3, [pc, #68]	; (800d804 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	4a10      	ldr	r2, [pc, #64]	; (800d804 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d7c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d7c6:	69bb      	ldr	r3, [r7, #24]
 800d7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	409a      	lsls	r2, r3
 800d7ce:	4b0d      	ldr	r3, [pc, #52]	; (800d804 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	4313      	orrs	r3, r2
 800d7d4:	4a0b      	ldr	r2, [pc, #44]	; (800d804 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d7d6:	6013      	str	r3, [r2, #0]
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7dc:	4613      	mov	r3, r2
 800d7de:	009b      	lsls	r3, r3, #2
 800d7e0:	4413      	add	r3, r2
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4a06      	ldr	r2, [pc, #24]	; (800d800 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d7e6:	441a      	add	r2, r3
 800d7e8:	69bb      	ldr	r3, [r7, #24]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	4610      	mov	r0, r2
 800d7f0:	f7fe f93a 	bl	800ba68 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d7f4:	bf00      	nop
 800d7f6:	3720      	adds	r7, #32
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}
 800d7fc:	200017a8 	.word	0x200017a8
 800d800:	200017ac 	.word	0x200017ac
 800d804:	200018b0 	.word	0x200018b0

0800d808 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d808:	b480      	push	{r7}
 800d80a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d80c:	4b07      	ldr	r3, [pc, #28]	; (800d82c <pvTaskIncrementMutexHeldCount+0x24>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d004      	beq.n	800d81e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d814:	4b05      	ldr	r3, [pc, #20]	; (800d82c <pvTaskIncrementMutexHeldCount+0x24>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d81a:	3201      	adds	r2, #1
 800d81c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d81e:	4b03      	ldr	r3, [pc, #12]	; (800d82c <pvTaskIncrementMutexHeldCount+0x24>)
 800d820:	681b      	ldr	r3, [r3, #0]
	}
 800d822:	4618      	mov	r0, r3
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	200017a8 	.word	0x200017a8

0800d830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b084      	sub	sp, #16
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d83a:	4b29      	ldr	r3, [pc, #164]	; (800d8e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d840:	4b28      	ldr	r3, [pc, #160]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	3304      	adds	r3, #4
 800d846:	4618      	mov	r0, r3
 800d848:	f7fe f96b 	bl	800bb22 <uxListRemove>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d10b      	bne.n	800d86a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d852:	4b24      	ldr	r3, [pc, #144]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d858:	2201      	movs	r2, #1
 800d85a:	fa02 f303 	lsl.w	r3, r2, r3
 800d85e:	43da      	mvns	r2, r3
 800d860:	4b21      	ldr	r3, [pc, #132]	; (800d8e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4013      	ands	r3, r2
 800d866:	4a20      	ldr	r2, [pc, #128]	; (800d8e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d868:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d870:	d10a      	bne.n	800d888 <prvAddCurrentTaskToDelayedList+0x58>
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d007      	beq.n	800d888 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d878:	4b1a      	ldr	r3, [pc, #104]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	3304      	adds	r3, #4
 800d87e:	4619      	mov	r1, r3
 800d880:	481a      	ldr	r0, [pc, #104]	; (800d8ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800d882:	f7fe f8f1 	bl	800ba68 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d886:	e026      	b.n	800d8d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d888:	68fa      	ldr	r2, [r7, #12]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4413      	add	r3, r2
 800d88e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d890:	4b14      	ldr	r3, [pc, #80]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d209      	bcs.n	800d8b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8a0:	4b13      	ldr	r3, [pc, #76]	; (800d8f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	4b0f      	ldr	r3, [pc, #60]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	4610      	mov	r0, r2
 800d8ae:	f7fe f8ff 	bl	800bab0 <vListInsert>
}
 800d8b2:	e010      	b.n	800d8d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8b4:	4b0f      	ldr	r3, [pc, #60]	; (800d8f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	4b0a      	ldr	r3, [pc, #40]	; (800d8e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	3304      	adds	r3, #4
 800d8be:	4619      	mov	r1, r3
 800d8c0:	4610      	mov	r0, r2
 800d8c2:	f7fe f8f5 	bl	800bab0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d8c6:	4b0c      	ldr	r3, [pc, #48]	; (800d8f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	68ba      	ldr	r2, [r7, #8]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d202      	bcs.n	800d8d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d8d0:	4a09      	ldr	r2, [pc, #36]	; (800d8f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6013      	str	r3, [r2, #0]
}
 800d8d6:	bf00      	nop
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	200018ac 	.word	0x200018ac
 800d8e4:	200017a8 	.word	0x200017a8
 800d8e8:	200018b0 	.word	0x200018b0
 800d8ec:	20001894 	.word	0x20001894
 800d8f0:	20001864 	.word	0x20001864
 800d8f4:	20001860 	.word	0x20001860
 800d8f8:	200018c8 	.word	0x200018c8

0800d8fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	3b04      	subs	r3, #4
 800d90c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	3b04      	subs	r3, #4
 800d91a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	f023 0201 	bic.w	r2, r3, #1
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3b04      	subs	r3, #4
 800d92a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d92c:	4a0c      	ldr	r2, [pc, #48]	; (800d960 <pxPortInitialiseStack+0x64>)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	3b14      	subs	r3, #20
 800d936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d938:	687a      	ldr	r2, [r7, #4]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3b04      	subs	r3, #4
 800d942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	f06f 0202 	mvn.w	r2, #2
 800d94a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	3b20      	subs	r3, #32
 800d950:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d952:	68fb      	ldr	r3, [r7, #12]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3714      	adds	r7, #20
 800d958:	46bd      	mov	sp, r7
 800d95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95e:	4770      	bx	lr
 800d960:	0800d965 	.word	0x0800d965

0800d964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d96a:	2300      	movs	r3, #0
 800d96c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d96e:	4b12      	ldr	r3, [pc, #72]	; (800d9b8 <prvTaskExitError+0x54>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d976:	d00a      	beq.n	800d98e <prvTaskExitError+0x2a>
	__asm volatile
 800d978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97c:	f383 8811 	msr	BASEPRI, r3
 800d980:	f3bf 8f6f 	isb	sy
 800d984:	f3bf 8f4f 	dsb	sy
 800d988:	60fb      	str	r3, [r7, #12]
}
 800d98a:	bf00      	nop
 800d98c:	e7fe      	b.n	800d98c <prvTaskExitError+0x28>
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	f383 8811 	msr	BASEPRI, r3
 800d996:	f3bf 8f6f 	isb	sy
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	60bb      	str	r3, [r7, #8]
}
 800d9a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d9a2:	bf00      	nop
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d0fc      	beq.n	800d9a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d9aa:	bf00      	nop
 800d9ac:	bf00      	nop
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr
 800d9b8:	2000003c 	.word	0x2000003c
 800d9bc:	00000000 	.word	0x00000000

0800d9c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d9c0:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <pxCurrentTCBConst2>)
 800d9c2:	6819      	ldr	r1, [r3, #0]
 800d9c4:	6808      	ldr	r0, [r1, #0]
 800d9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ca:	f380 8809 	msr	PSP, r0
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f04f 0000 	mov.w	r0, #0
 800d9d6:	f380 8811 	msr	BASEPRI, r0
 800d9da:	4770      	bx	lr
 800d9dc:	f3af 8000 	nop.w

0800d9e0 <pxCurrentTCBConst2>:
 800d9e0:	200017a8 	.word	0x200017a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d9e4:	bf00      	nop
 800d9e6:	bf00      	nop

0800d9e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d9e8:	4808      	ldr	r0, [pc, #32]	; (800da0c <prvPortStartFirstTask+0x24>)
 800d9ea:	6800      	ldr	r0, [r0, #0]
 800d9ec:	6800      	ldr	r0, [r0, #0]
 800d9ee:	f380 8808 	msr	MSP, r0
 800d9f2:	f04f 0000 	mov.w	r0, #0
 800d9f6:	f380 8814 	msr	CONTROL, r0
 800d9fa:	b662      	cpsie	i
 800d9fc:	b661      	cpsie	f
 800d9fe:	f3bf 8f4f 	dsb	sy
 800da02:	f3bf 8f6f 	isb	sy
 800da06:	df00      	svc	0
 800da08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da0a:	bf00      	nop
 800da0c:	e000ed08 	.word	0xe000ed08

0800da10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800da16:	4b46      	ldr	r3, [pc, #280]	; (800db30 <xPortStartScheduler+0x120>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a46      	ldr	r2, [pc, #280]	; (800db34 <xPortStartScheduler+0x124>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d10a      	bne.n	800da36 <xPortStartScheduler+0x26>
	__asm volatile
 800da20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da24:	f383 8811 	msr	BASEPRI, r3
 800da28:	f3bf 8f6f 	isb	sy
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	613b      	str	r3, [r7, #16]
}
 800da32:	bf00      	nop
 800da34:	e7fe      	b.n	800da34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800da36:	4b3e      	ldr	r3, [pc, #248]	; (800db30 <xPortStartScheduler+0x120>)
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	4a3f      	ldr	r2, [pc, #252]	; (800db38 <xPortStartScheduler+0x128>)
 800da3c:	4293      	cmp	r3, r2
 800da3e:	d10a      	bne.n	800da56 <xPortStartScheduler+0x46>
	__asm volatile
 800da40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da44:	f383 8811 	msr	BASEPRI, r3
 800da48:	f3bf 8f6f 	isb	sy
 800da4c:	f3bf 8f4f 	dsb	sy
 800da50:	60fb      	str	r3, [r7, #12]
}
 800da52:	bf00      	nop
 800da54:	e7fe      	b.n	800da54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800da56:	4b39      	ldr	r3, [pc, #228]	; (800db3c <xPortStartScheduler+0x12c>)
 800da58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	22ff      	movs	r2, #255	; 0xff
 800da66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800da70:	78fb      	ldrb	r3, [r7, #3]
 800da72:	b2db      	uxtb	r3, r3
 800da74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800da78:	b2da      	uxtb	r2, r3
 800da7a:	4b31      	ldr	r3, [pc, #196]	; (800db40 <xPortStartScheduler+0x130>)
 800da7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800da7e:	4b31      	ldr	r3, [pc, #196]	; (800db44 <xPortStartScheduler+0x134>)
 800da80:	2207      	movs	r2, #7
 800da82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da84:	e009      	b.n	800da9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800da86:	4b2f      	ldr	r3, [pc, #188]	; (800db44 <xPortStartScheduler+0x134>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	4a2d      	ldr	r2, [pc, #180]	; (800db44 <xPortStartScheduler+0x134>)
 800da8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800da90:	78fb      	ldrb	r3, [r7, #3]
 800da92:	b2db      	uxtb	r3, r3
 800da94:	005b      	lsls	r3, r3, #1
 800da96:	b2db      	uxtb	r3, r3
 800da98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800da9a:	78fb      	ldrb	r3, [r7, #3]
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daa2:	2b80      	cmp	r3, #128	; 0x80
 800daa4:	d0ef      	beq.n	800da86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800daa6:	4b27      	ldr	r3, [pc, #156]	; (800db44 <xPortStartScheduler+0x134>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f1c3 0307 	rsb	r3, r3, #7
 800daae:	2b04      	cmp	r3, #4
 800dab0:	d00a      	beq.n	800dac8 <xPortStartScheduler+0xb8>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60bb      	str	r3, [r7, #8]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dac8:	4b1e      	ldr	r3, [pc, #120]	; (800db44 <xPortStartScheduler+0x134>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	021b      	lsls	r3, r3, #8
 800dace:	4a1d      	ldr	r2, [pc, #116]	; (800db44 <xPortStartScheduler+0x134>)
 800dad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dad2:	4b1c      	ldr	r3, [pc, #112]	; (800db44 <xPortStartScheduler+0x134>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dada:	4a1a      	ldr	r2, [pc, #104]	; (800db44 <xPortStartScheduler+0x134>)
 800dadc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dae6:	4b18      	ldr	r3, [pc, #96]	; (800db48 <xPortStartScheduler+0x138>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	4a17      	ldr	r2, [pc, #92]	; (800db48 <xPortStartScheduler+0x138>)
 800daec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800daf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800daf2:	4b15      	ldr	r3, [pc, #84]	; (800db48 <xPortStartScheduler+0x138>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a14      	ldr	r2, [pc, #80]	; (800db48 <xPortStartScheduler+0x138>)
 800daf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dafc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dafe:	f000 f8dd 	bl	800dcbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db02:	4b12      	ldr	r3, [pc, #72]	; (800db4c <xPortStartScheduler+0x13c>)
 800db04:	2200      	movs	r2, #0
 800db06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db08:	f000 f8fc 	bl	800dd04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db0c:	4b10      	ldr	r3, [pc, #64]	; (800db50 <xPortStartScheduler+0x140>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	4a0f      	ldr	r2, [pc, #60]	; (800db50 <xPortStartScheduler+0x140>)
 800db12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db18:	f7ff ff66 	bl	800d9e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db1c:	f7ff fa90 	bl	800d040 <vTaskSwitchContext>
	prvTaskExitError();
 800db20:	f7ff ff20 	bl	800d964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3718      	adds	r7, #24
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	e000ed00 	.word	0xe000ed00
 800db34:	410fc271 	.word	0x410fc271
 800db38:	410fc270 	.word	0x410fc270
 800db3c:	e000e400 	.word	0xe000e400
 800db40:	200018d4 	.word	0x200018d4
 800db44:	200018d8 	.word	0x200018d8
 800db48:	e000ed20 	.word	0xe000ed20
 800db4c:	2000003c 	.word	0x2000003c
 800db50:	e000ef34 	.word	0xe000ef34

0800db54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db54:	b480      	push	{r7}
 800db56:	b083      	sub	sp, #12
 800db58:	af00      	add	r7, sp, #0
	__asm volatile
 800db5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5e:	f383 8811 	msr	BASEPRI, r3
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	607b      	str	r3, [r7, #4]
}
 800db6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800db6e:	4b0f      	ldr	r3, [pc, #60]	; (800dbac <vPortEnterCritical+0x58>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	3301      	adds	r3, #1
 800db74:	4a0d      	ldr	r2, [pc, #52]	; (800dbac <vPortEnterCritical+0x58>)
 800db76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800db78:	4b0c      	ldr	r3, [pc, #48]	; (800dbac <vPortEnterCritical+0x58>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d10f      	bne.n	800dba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800db80:	4b0b      	ldr	r3, [pc, #44]	; (800dbb0 <vPortEnterCritical+0x5c>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00a      	beq.n	800dba0 <vPortEnterCritical+0x4c>
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	603b      	str	r3, [r7, #0]
}
 800db9c:	bf00      	nop
 800db9e:	e7fe      	b.n	800db9e <vPortEnterCritical+0x4a>
	}
}
 800dba0:	bf00      	nop
 800dba2:	370c      	adds	r7, #12
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	2000003c 	.word	0x2000003c
 800dbb0:	e000ed04 	.word	0xe000ed04

0800dbb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b083      	sub	sp, #12
 800dbb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dbba:	4b12      	ldr	r3, [pc, #72]	; (800dc04 <vPortExitCritical+0x50>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d10a      	bne.n	800dbd8 <vPortExitCritical+0x24>
	__asm volatile
 800dbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	607b      	str	r3, [r7, #4]
}
 800dbd4:	bf00      	nop
 800dbd6:	e7fe      	b.n	800dbd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800dbd8:	4b0a      	ldr	r3, [pc, #40]	; (800dc04 <vPortExitCritical+0x50>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	3b01      	subs	r3, #1
 800dbde:	4a09      	ldr	r2, [pc, #36]	; (800dc04 <vPortExitCritical+0x50>)
 800dbe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dbe2:	4b08      	ldr	r3, [pc, #32]	; (800dc04 <vPortExitCritical+0x50>)
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d105      	bne.n	800dbf6 <vPortExitCritical+0x42>
 800dbea:	2300      	movs	r3, #0
 800dbec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	f383 8811 	msr	BASEPRI, r3
}
 800dbf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dbf6:	bf00      	nop
 800dbf8:	370c      	adds	r7, #12
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc00:	4770      	bx	lr
 800dc02:	bf00      	nop
 800dc04:	2000003c 	.word	0x2000003c
	...

0800dc10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc10:	f3ef 8009 	mrs	r0, PSP
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	4b15      	ldr	r3, [pc, #84]	; (800dc70 <pxCurrentTCBConst>)
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	f01e 0f10 	tst.w	lr, #16
 800dc20:	bf08      	it	eq
 800dc22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc2a:	6010      	str	r0, [r2, #0]
 800dc2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc34:	f380 8811 	msr	BASEPRI, r0
 800dc38:	f3bf 8f4f 	dsb	sy
 800dc3c:	f3bf 8f6f 	isb	sy
 800dc40:	f7ff f9fe 	bl	800d040 <vTaskSwitchContext>
 800dc44:	f04f 0000 	mov.w	r0, #0
 800dc48:	f380 8811 	msr	BASEPRI, r0
 800dc4c:	bc09      	pop	{r0, r3}
 800dc4e:	6819      	ldr	r1, [r3, #0]
 800dc50:	6808      	ldr	r0, [r1, #0]
 800dc52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc56:	f01e 0f10 	tst.w	lr, #16
 800dc5a:	bf08      	it	eq
 800dc5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dc60:	f380 8809 	msr	PSP, r0
 800dc64:	f3bf 8f6f 	isb	sy
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	f3af 8000 	nop.w

0800dc70 <pxCurrentTCBConst>:
 800dc70:	200017a8 	.word	0x200017a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop

0800dc78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
	__asm volatile
 800dc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc82:	f383 8811 	msr	BASEPRI, r3
 800dc86:	f3bf 8f6f 	isb	sy
 800dc8a:	f3bf 8f4f 	dsb	sy
 800dc8e:	607b      	str	r3, [r7, #4]
}
 800dc90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dc92:	f7ff f91d 	bl	800ced0 <xTaskIncrementTick>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d003      	beq.n	800dca4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dc9c:	4b06      	ldr	r3, [pc, #24]	; (800dcb8 <SysTick_Handler+0x40>)
 800dc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dca2:	601a      	str	r2, [r3, #0]
 800dca4:	2300      	movs	r3, #0
 800dca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	f383 8811 	msr	BASEPRI, r3
}
 800dcae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	e000ed04 	.word	0xe000ed04

0800dcbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dcc0:	4b0b      	ldr	r3, [pc, #44]	; (800dcf0 <vPortSetupTimerInterrupt+0x34>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dcc6:	4b0b      	ldr	r3, [pc, #44]	; (800dcf4 <vPortSetupTimerInterrupt+0x38>)
 800dcc8:	2200      	movs	r2, #0
 800dcca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dccc:	4b0a      	ldr	r3, [pc, #40]	; (800dcf8 <vPortSetupTimerInterrupt+0x3c>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a0a      	ldr	r2, [pc, #40]	; (800dcfc <vPortSetupTimerInterrupt+0x40>)
 800dcd2:	fba2 2303 	umull	r2, r3, r2, r3
 800dcd6:	099b      	lsrs	r3, r3, #6
 800dcd8:	4a09      	ldr	r2, [pc, #36]	; (800dd00 <vPortSetupTimerInterrupt+0x44>)
 800dcda:	3b01      	subs	r3, #1
 800dcdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dcde:	4b04      	ldr	r3, [pc, #16]	; (800dcf0 <vPortSetupTimerInterrupt+0x34>)
 800dce0:	2207      	movs	r2, #7
 800dce2:	601a      	str	r2, [r3, #0]
}
 800dce4:	bf00      	nop
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
 800dcee:	bf00      	nop
 800dcf0:	e000e010 	.word	0xe000e010
 800dcf4:	e000e018 	.word	0xe000e018
 800dcf8:	2000001c 	.word	0x2000001c
 800dcfc:	10624dd3 	.word	0x10624dd3
 800dd00:	e000e014 	.word	0xe000e014

0800dd04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd14 <vPortEnableVFP+0x10>
 800dd08:	6801      	ldr	r1, [r0, #0]
 800dd0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd0e:	6001      	str	r1, [r0, #0]
 800dd10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd12:	bf00      	nop
 800dd14:	e000ed88 	.word	0xe000ed88

0800dd18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dd18:	b480      	push	{r7}
 800dd1a:	b085      	sub	sp, #20
 800dd1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dd1e:	f3ef 8305 	mrs	r3, IPSR
 800dd22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2b0f      	cmp	r3, #15
 800dd28:	d914      	bls.n	800dd54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dd2a:	4a17      	ldr	r2, [pc, #92]	; (800dd88 <vPortValidateInterruptPriority+0x70>)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4413      	add	r3, r2
 800dd30:	781b      	ldrb	r3, [r3, #0]
 800dd32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dd34:	4b15      	ldr	r3, [pc, #84]	; (800dd8c <vPortValidateInterruptPriority+0x74>)
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	7afa      	ldrb	r2, [r7, #11]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d20a      	bcs.n	800dd54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	607b      	str	r3, [r7, #4]
}
 800dd50:	bf00      	nop
 800dd52:	e7fe      	b.n	800dd52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dd54:	4b0e      	ldr	r3, [pc, #56]	; (800dd90 <vPortValidateInterruptPriority+0x78>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dd5c:	4b0d      	ldr	r3, [pc, #52]	; (800dd94 <vPortValidateInterruptPriority+0x7c>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d90a      	bls.n	800dd7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800dd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd68:	f383 8811 	msr	BASEPRI, r3
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	f3bf 8f4f 	dsb	sy
 800dd74:	603b      	str	r3, [r7, #0]
}
 800dd76:	bf00      	nop
 800dd78:	e7fe      	b.n	800dd78 <vPortValidateInterruptPriority+0x60>
	}
 800dd7a:	bf00      	nop
 800dd7c:	3714      	adds	r7, #20
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	e000e3f0 	.word	0xe000e3f0
 800dd8c:	200018d4 	.word	0x200018d4
 800dd90:	e000ed0c 	.word	0xe000ed0c
 800dd94:	200018d8 	.word	0x200018d8

0800dd98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b08a      	sub	sp, #40	; 0x28
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dda0:	2300      	movs	r3, #0
 800dda2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dda4:	f7fe ffea 	bl	800cd7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dda8:	4b5b      	ldr	r3, [pc, #364]	; (800df18 <pvPortMalloc+0x180>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d101      	bne.n	800ddb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ddb0:	f000 f920 	bl	800dff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ddb4:	4b59      	ldr	r3, [pc, #356]	; (800df1c <pvPortMalloc+0x184>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4013      	ands	r3, r2
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f040 8093 	bne.w	800dee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d01d      	beq.n	800de04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ddc8:	2208      	movs	r2, #8
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	4413      	add	r3, r2
 800ddce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f003 0307 	and.w	r3, r3, #7
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d014      	beq.n	800de04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f023 0307 	bic.w	r3, r3, #7
 800dde0:	3308      	adds	r3, #8
 800dde2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f003 0307 	and.w	r3, r3, #7
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00a      	beq.n	800de04 <pvPortMalloc+0x6c>
	__asm volatile
 800ddee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf2:	f383 8811 	msr	BASEPRI, r3
 800ddf6:	f3bf 8f6f 	isb	sy
 800ddfa:	f3bf 8f4f 	dsb	sy
 800ddfe:	617b      	str	r3, [r7, #20]
}
 800de00:	bf00      	nop
 800de02:	e7fe      	b.n	800de02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d06e      	beq.n	800dee8 <pvPortMalloc+0x150>
 800de0a:	4b45      	ldr	r3, [pc, #276]	; (800df20 <pvPortMalloc+0x188>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	429a      	cmp	r2, r3
 800de12:	d869      	bhi.n	800dee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de14:	4b43      	ldr	r3, [pc, #268]	; (800df24 <pvPortMalloc+0x18c>)
 800de16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de18:	4b42      	ldr	r3, [pc, #264]	; (800df24 <pvPortMalloc+0x18c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de1e:	e004      	b.n	800de2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800de20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	429a      	cmp	r2, r3
 800de32:	d903      	bls.n	800de3c <pvPortMalloc+0xa4>
 800de34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d1f1      	bne.n	800de20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800de3c:	4b36      	ldr	r3, [pc, #216]	; (800df18 <pvPortMalloc+0x180>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de42:	429a      	cmp	r2, r3
 800de44:	d050      	beq.n	800dee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2208      	movs	r2, #8
 800de4c:	4413      	add	r3, r2
 800de4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	6a3b      	ldr	r3, [r7, #32]
 800de56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5a:	685a      	ldr	r2, [r3, #4]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	1ad2      	subs	r2, r2, r3
 800de60:	2308      	movs	r3, #8
 800de62:	005b      	lsls	r3, r3, #1
 800de64:	429a      	cmp	r2, r3
 800de66:	d91f      	bls.n	800dea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	4413      	add	r3, r2
 800de6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	f003 0307 	and.w	r3, r3, #7
 800de76:	2b00      	cmp	r3, #0
 800de78:	d00a      	beq.n	800de90 <pvPortMalloc+0xf8>
	__asm volatile
 800de7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de7e:	f383 8811 	msr	BASEPRI, r3
 800de82:	f3bf 8f6f 	isb	sy
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	613b      	str	r3, [r7, #16]
}
 800de8c:	bf00      	nop
 800de8e:	e7fe      	b.n	800de8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de92:	685a      	ldr	r2, [r3, #4]
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	1ad2      	subs	r2, r2, r3
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dea2:	69b8      	ldr	r0, [r7, #24]
 800dea4:	f000 f908 	bl	800e0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dea8:	4b1d      	ldr	r3, [pc, #116]	; (800df20 <pvPortMalloc+0x188>)
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	4a1b      	ldr	r2, [pc, #108]	; (800df20 <pvPortMalloc+0x188>)
 800deb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800deb6:	4b1a      	ldr	r3, [pc, #104]	; (800df20 <pvPortMalloc+0x188>)
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	4b1b      	ldr	r3, [pc, #108]	; (800df28 <pvPortMalloc+0x190>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d203      	bcs.n	800deca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dec2:	4b17      	ldr	r3, [pc, #92]	; (800df20 <pvPortMalloc+0x188>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a18      	ldr	r2, [pc, #96]	; (800df28 <pvPortMalloc+0x190>)
 800dec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800deca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	4b13      	ldr	r3, [pc, #76]	; (800df1c <pvPortMalloc+0x184>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	431a      	orrs	r2, r3
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ded8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deda:	2200      	movs	r2, #0
 800dedc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dede:	4b13      	ldr	r3, [pc, #76]	; (800df2c <pvPortMalloc+0x194>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	3301      	adds	r3, #1
 800dee4:	4a11      	ldr	r2, [pc, #68]	; (800df2c <pvPortMalloc+0x194>)
 800dee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dee8:	f7fe ff56 	bl	800cd98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	f003 0307 	and.w	r3, r3, #7
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00a      	beq.n	800df0c <pvPortMalloc+0x174>
	__asm volatile
 800def6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800defa:	f383 8811 	msr	BASEPRI, r3
 800defe:	f3bf 8f6f 	isb	sy
 800df02:	f3bf 8f4f 	dsb	sy
 800df06:	60fb      	str	r3, [r7, #12]
}
 800df08:	bf00      	nop
 800df0a:	e7fe      	b.n	800df0a <pvPortMalloc+0x172>
	return pvReturn;
 800df0c:	69fb      	ldr	r3, [r7, #28]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3728      	adds	r7, #40	; 0x28
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	200054e4 	.word	0x200054e4
 800df1c:	200054f8 	.word	0x200054f8
 800df20:	200054e8 	.word	0x200054e8
 800df24:	200054dc 	.word	0x200054dc
 800df28:	200054ec 	.word	0x200054ec
 800df2c:	200054f0 	.word	0x200054f0

0800df30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b086      	sub	sp, #24
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d04d      	beq.n	800dfde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df42:	2308      	movs	r3, #8
 800df44:	425b      	negs	r3, r3
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	4413      	add	r3, r2
 800df4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	685a      	ldr	r2, [r3, #4]
 800df54:	4b24      	ldr	r3, [pc, #144]	; (800dfe8 <vPortFree+0xb8>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4013      	ands	r3, r2
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10a      	bne.n	800df74 <vPortFree+0x44>
	__asm volatile
 800df5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df62:	f383 8811 	msr	BASEPRI, r3
 800df66:	f3bf 8f6f 	isb	sy
 800df6a:	f3bf 8f4f 	dsb	sy
 800df6e:	60fb      	str	r3, [r7, #12]
}
 800df70:	bf00      	nop
 800df72:	e7fe      	b.n	800df72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00a      	beq.n	800df92 <vPortFree+0x62>
	__asm volatile
 800df7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df80:	f383 8811 	msr	BASEPRI, r3
 800df84:	f3bf 8f6f 	isb	sy
 800df88:	f3bf 8f4f 	dsb	sy
 800df8c:	60bb      	str	r3, [r7, #8]
}
 800df8e:	bf00      	nop
 800df90:	e7fe      	b.n	800df90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	685a      	ldr	r2, [r3, #4]
 800df96:	4b14      	ldr	r3, [pc, #80]	; (800dfe8 <vPortFree+0xb8>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4013      	ands	r3, r2
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d01e      	beq.n	800dfde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dfa0:	693b      	ldr	r3, [r7, #16]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d11a      	bne.n	800dfde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	685a      	ldr	r2, [r3, #4]
 800dfac:	4b0e      	ldr	r3, [pc, #56]	; (800dfe8 <vPortFree+0xb8>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	43db      	mvns	r3, r3
 800dfb2:	401a      	ands	r2, r3
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dfb8:	f7fe fee0 	bl	800cd7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dfbc:	693b      	ldr	r3, [r7, #16]
 800dfbe:	685a      	ldr	r2, [r3, #4]
 800dfc0:	4b0a      	ldr	r3, [pc, #40]	; (800dfec <vPortFree+0xbc>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	4413      	add	r3, r2
 800dfc6:	4a09      	ldr	r2, [pc, #36]	; (800dfec <vPortFree+0xbc>)
 800dfc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dfca:	6938      	ldr	r0, [r7, #16]
 800dfcc:	f000 f874 	bl	800e0b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dfd0:	4b07      	ldr	r3, [pc, #28]	; (800dff0 <vPortFree+0xc0>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	4a06      	ldr	r2, [pc, #24]	; (800dff0 <vPortFree+0xc0>)
 800dfd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dfda:	f7fe fedd 	bl	800cd98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dfde:	bf00      	nop
 800dfe0:	3718      	adds	r7, #24
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	200054f8 	.word	0x200054f8
 800dfec:	200054e8 	.word	0x200054e8
 800dff0:	200054f4 	.word	0x200054f4

0800dff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e000:	4b27      	ldr	r3, [pc, #156]	; (800e0a0 <prvHeapInit+0xac>)
 800e002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f003 0307 	and.w	r3, r3, #7
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00c      	beq.n	800e028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	3307      	adds	r3, #7
 800e012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	f023 0307 	bic.w	r3, r3, #7
 800e01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e01c:	68ba      	ldr	r2, [r7, #8]
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	4a1f      	ldr	r2, [pc, #124]	; (800e0a0 <prvHeapInit+0xac>)
 800e024:	4413      	add	r3, r2
 800e026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e02c:	4a1d      	ldr	r2, [pc, #116]	; (800e0a4 <prvHeapInit+0xb0>)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e032:	4b1c      	ldr	r3, [pc, #112]	; (800e0a4 <prvHeapInit+0xb0>)
 800e034:	2200      	movs	r2, #0
 800e036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	68ba      	ldr	r2, [r7, #8]
 800e03c:	4413      	add	r3, r2
 800e03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e040:	2208      	movs	r2, #8
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	1a9b      	subs	r3, r3, r2
 800e046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	f023 0307 	bic.w	r3, r3, #7
 800e04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	4a15      	ldr	r2, [pc, #84]	; (800e0a8 <prvHeapInit+0xb4>)
 800e054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e056:	4b14      	ldr	r3, [pc, #80]	; (800e0a8 <prvHeapInit+0xb4>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2200      	movs	r2, #0
 800e05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e05e:	4b12      	ldr	r3, [pc, #72]	; (800e0a8 <prvHeapInit+0xb4>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	1ad2      	subs	r2, r2, r3
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e074:	4b0c      	ldr	r3, [pc, #48]	; (800e0a8 <prvHeapInit+0xb4>)
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	4a0a      	ldr	r2, [pc, #40]	; (800e0ac <prvHeapInit+0xb8>)
 800e082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e084:	683b      	ldr	r3, [r7, #0]
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	4a09      	ldr	r2, [pc, #36]	; (800e0b0 <prvHeapInit+0xbc>)
 800e08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e08c:	4b09      	ldr	r3, [pc, #36]	; (800e0b4 <prvHeapInit+0xc0>)
 800e08e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e092:	601a      	str	r2, [r3, #0]
}
 800e094:	bf00      	nop
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	200018dc 	.word	0x200018dc
 800e0a4:	200054dc 	.word	0x200054dc
 800e0a8:	200054e4 	.word	0x200054e4
 800e0ac:	200054ec 	.word	0x200054ec
 800e0b0:	200054e8 	.word	0x200054e8
 800e0b4:	200054f8 	.word	0x200054f8

0800e0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e0b8:	b480      	push	{r7}
 800e0ba:	b085      	sub	sp, #20
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e0c0:	4b28      	ldr	r3, [pc, #160]	; (800e164 <prvInsertBlockIntoFreeList+0xac>)
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	e002      	b.n	800e0cc <prvInsertBlockIntoFreeList+0x14>
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	60fb      	str	r3, [r7, #12]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d8f7      	bhi.n	800e0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	68ba      	ldr	r2, [r7, #8]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	687a      	ldr	r2, [r7, #4]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d108      	bne.n	800e0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	685a      	ldr	r2, [r3, #4]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	685b      	ldr	r3, [r3, #4]
 800e0f0:	441a      	add	r2, r3
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	68ba      	ldr	r2, [r7, #8]
 800e104:	441a      	add	r2, r3
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d118      	bne.n	800e140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	681a      	ldr	r2, [r3, #0]
 800e112:	4b15      	ldr	r3, [pc, #84]	; (800e168 <prvInsertBlockIntoFreeList+0xb0>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	429a      	cmp	r2, r3
 800e118:	d00d      	beq.n	800e136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	685a      	ldr	r2, [r3, #4]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	441a      	add	r2, r3
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	601a      	str	r2, [r3, #0]
 800e134:	e008      	b.n	800e148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e136:	4b0c      	ldr	r3, [pc, #48]	; (800e168 <prvInsertBlockIntoFreeList+0xb0>)
 800e138:	681a      	ldr	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	e003      	b.n	800e148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d002      	beq.n	800e156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	687a      	ldr	r2, [r7, #4]
 800e154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e156:	bf00      	nop
 800e158:	3714      	adds	r7, #20
 800e15a:	46bd      	mov	sp, r7
 800e15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop
 800e164:	200054dc 	.word	0x200054dc
 800e168:	200054e4 	.word	0x200054e4

0800e16c <__errno>:
 800e16c:	4b01      	ldr	r3, [pc, #4]	; (800e174 <__errno+0x8>)
 800e16e:	6818      	ldr	r0, [r3, #0]
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
 800e174:	20000040 	.word	0x20000040

0800e178 <__libc_init_array>:
 800e178:	b570      	push	{r4, r5, r6, lr}
 800e17a:	4d0d      	ldr	r5, [pc, #52]	; (800e1b0 <__libc_init_array+0x38>)
 800e17c:	4c0d      	ldr	r4, [pc, #52]	; (800e1b4 <__libc_init_array+0x3c>)
 800e17e:	1b64      	subs	r4, r4, r5
 800e180:	10a4      	asrs	r4, r4, #2
 800e182:	2600      	movs	r6, #0
 800e184:	42a6      	cmp	r6, r4
 800e186:	d109      	bne.n	800e19c <__libc_init_array+0x24>
 800e188:	4d0b      	ldr	r5, [pc, #44]	; (800e1b8 <__libc_init_array+0x40>)
 800e18a:	4c0c      	ldr	r4, [pc, #48]	; (800e1bc <__libc_init_array+0x44>)
 800e18c:	f001 ff6e 	bl	801006c <_init>
 800e190:	1b64      	subs	r4, r4, r5
 800e192:	10a4      	asrs	r4, r4, #2
 800e194:	2600      	movs	r6, #0
 800e196:	42a6      	cmp	r6, r4
 800e198:	d105      	bne.n	800e1a6 <__libc_init_array+0x2e>
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1a0:	4798      	blx	r3
 800e1a2:	3601      	adds	r6, #1
 800e1a4:	e7ee      	b.n	800e184 <__libc_init_array+0xc>
 800e1a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1aa:	4798      	blx	r3
 800e1ac:	3601      	adds	r6, #1
 800e1ae:	e7f2      	b.n	800e196 <__libc_init_array+0x1e>
 800e1b0:	080108c0 	.word	0x080108c0
 800e1b4:	080108c0 	.word	0x080108c0
 800e1b8:	080108c0 	.word	0x080108c0
 800e1bc:	080108c4 	.word	0x080108c4

0800e1c0 <memcpy>:
 800e1c0:	440a      	add	r2, r1
 800e1c2:	4291      	cmp	r1, r2
 800e1c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e1c8:	d100      	bne.n	800e1cc <memcpy+0xc>
 800e1ca:	4770      	bx	lr
 800e1cc:	b510      	push	{r4, lr}
 800e1ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1d6:	4291      	cmp	r1, r2
 800e1d8:	d1f9      	bne.n	800e1ce <memcpy+0xe>
 800e1da:	bd10      	pop	{r4, pc}

0800e1dc <memset>:
 800e1dc:	4402      	add	r2, r0
 800e1de:	4603      	mov	r3, r0
 800e1e0:	4293      	cmp	r3, r2
 800e1e2:	d100      	bne.n	800e1e6 <memset+0xa>
 800e1e4:	4770      	bx	lr
 800e1e6:	f803 1b01 	strb.w	r1, [r3], #1
 800e1ea:	e7f9      	b.n	800e1e0 <memset+0x4>

0800e1ec <siprintf>:
 800e1ec:	b40e      	push	{r1, r2, r3}
 800e1ee:	b500      	push	{lr}
 800e1f0:	b09c      	sub	sp, #112	; 0x70
 800e1f2:	ab1d      	add	r3, sp, #116	; 0x74
 800e1f4:	9002      	str	r0, [sp, #8]
 800e1f6:	9006      	str	r0, [sp, #24]
 800e1f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1fc:	4809      	ldr	r0, [pc, #36]	; (800e224 <siprintf+0x38>)
 800e1fe:	9107      	str	r1, [sp, #28]
 800e200:	9104      	str	r1, [sp, #16]
 800e202:	4909      	ldr	r1, [pc, #36]	; (800e228 <siprintf+0x3c>)
 800e204:	f853 2b04 	ldr.w	r2, [r3], #4
 800e208:	9105      	str	r1, [sp, #20]
 800e20a:	6800      	ldr	r0, [r0, #0]
 800e20c:	9301      	str	r3, [sp, #4]
 800e20e:	a902      	add	r1, sp, #8
 800e210:	f000 f868 	bl	800e2e4 <_svfiprintf_r>
 800e214:	9b02      	ldr	r3, [sp, #8]
 800e216:	2200      	movs	r2, #0
 800e218:	701a      	strb	r2, [r3, #0]
 800e21a:	b01c      	add	sp, #112	; 0x70
 800e21c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e220:	b003      	add	sp, #12
 800e222:	4770      	bx	lr
 800e224:	20000040 	.word	0x20000040
 800e228:	ffff0208 	.word	0xffff0208

0800e22c <__ssputs_r>:
 800e22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	688e      	ldr	r6, [r1, #8]
 800e232:	429e      	cmp	r6, r3
 800e234:	4682      	mov	sl, r0
 800e236:	460c      	mov	r4, r1
 800e238:	4690      	mov	r8, r2
 800e23a:	461f      	mov	r7, r3
 800e23c:	d838      	bhi.n	800e2b0 <__ssputs_r+0x84>
 800e23e:	898a      	ldrh	r2, [r1, #12]
 800e240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e244:	d032      	beq.n	800e2ac <__ssputs_r+0x80>
 800e246:	6825      	ldr	r5, [r4, #0]
 800e248:	6909      	ldr	r1, [r1, #16]
 800e24a:	eba5 0901 	sub.w	r9, r5, r1
 800e24e:	6965      	ldr	r5, [r4, #20]
 800e250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e258:	3301      	adds	r3, #1
 800e25a:	444b      	add	r3, r9
 800e25c:	106d      	asrs	r5, r5, #1
 800e25e:	429d      	cmp	r5, r3
 800e260:	bf38      	it	cc
 800e262:	461d      	movcc	r5, r3
 800e264:	0553      	lsls	r3, r2, #21
 800e266:	d531      	bpl.n	800e2cc <__ssputs_r+0xa0>
 800e268:	4629      	mov	r1, r5
 800e26a:	f000 fb55 	bl	800e918 <_malloc_r>
 800e26e:	4606      	mov	r6, r0
 800e270:	b950      	cbnz	r0, 800e288 <__ssputs_r+0x5c>
 800e272:	230c      	movs	r3, #12
 800e274:	f8ca 3000 	str.w	r3, [sl]
 800e278:	89a3      	ldrh	r3, [r4, #12]
 800e27a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e27e:	81a3      	strh	r3, [r4, #12]
 800e280:	f04f 30ff 	mov.w	r0, #4294967295
 800e284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e288:	6921      	ldr	r1, [r4, #16]
 800e28a:	464a      	mov	r2, r9
 800e28c:	f7ff ff98 	bl	800e1c0 <memcpy>
 800e290:	89a3      	ldrh	r3, [r4, #12]
 800e292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e29a:	81a3      	strh	r3, [r4, #12]
 800e29c:	6126      	str	r6, [r4, #16]
 800e29e:	6165      	str	r5, [r4, #20]
 800e2a0:	444e      	add	r6, r9
 800e2a2:	eba5 0509 	sub.w	r5, r5, r9
 800e2a6:	6026      	str	r6, [r4, #0]
 800e2a8:	60a5      	str	r5, [r4, #8]
 800e2aa:	463e      	mov	r6, r7
 800e2ac:	42be      	cmp	r6, r7
 800e2ae:	d900      	bls.n	800e2b2 <__ssputs_r+0x86>
 800e2b0:	463e      	mov	r6, r7
 800e2b2:	6820      	ldr	r0, [r4, #0]
 800e2b4:	4632      	mov	r2, r6
 800e2b6:	4641      	mov	r1, r8
 800e2b8:	f000 faa8 	bl	800e80c <memmove>
 800e2bc:	68a3      	ldr	r3, [r4, #8]
 800e2be:	1b9b      	subs	r3, r3, r6
 800e2c0:	60a3      	str	r3, [r4, #8]
 800e2c2:	6823      	ldr	r3, [r4, #0]
 800e2c4:	4433      	add	r3, r6
 800e2c6:	6023      	str	r3, [r4, #0]
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	e7db      	b.n	800e284 <__ssputs_r+0x58>
 800e2cc:	462a      	mov	r2, r5
 800e2ce:	f000 fb97 	bl	800ea00 <_realloc_r>
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	d1e1      	bne.n	800e29c <__ssputs_r+0x70>
 800e2d8:	6921      	ldr	r1, [r4, #16]
 800e2da:	4650      	mov	r0, sl
 800e2dc:	f000 fab0 	bl	800e840 <_free_r>
 800e2e0:	e7c7      	b.n	800e272 <__ssputs_r+0x46>
	...

0800e2e4 <_svfiprintf_r>:
 800e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e8:	4698      	mov	r8, r3
 800e2ea:	898b      	ldrh	r3, [r1, #12]
 800e2ec:	061b      	lsls	r3, r3, #24
 800e2ee:	b09d      	sub	sp, #116	; 0x74
 800e2f0:	4607      	mov	r7, r0
 800e2f2:	460d      	mov	r5, r1
 800e2f4:	4614      	mov	r4, r2
 800e2f6:	d50e      	bpl.n	800e316 <_svfiprintf_r+0x32>
 800e2f8:	690b      	ldr	r3, [r1, #16]
 800e2fa:	b963      	cbnz	r3, 800e316 <_svfiprintf_r+0x32>
 800e2fc:	2140      	movs	r1, #64	; 0x40
 800e2fe:	f000 fb0b 	bl	800e918 <_malloc_r>
 800e302:	6028      	str	r0, [r5, #0]
 800e304:	6128      	str	r0, [r5, #16]
 800e306:	b920      	cbnz	r0, 800e312 <_svfiprintf_r+0x2e>
 800e308:	230c      	movs	r3, #12
 800e30a:	603b      	str	r3, [r7, #0]
 800e30c:	f04f 30ff 	mov.w	r0, #4294967295
 800e310:	e0d1      	b.n	800e4b6 <_svfiprintf_r+0x1d2>
 800e312:	2340      	movs	r3, #64	; 0x40
 800e314:	616b      	str	r3, [r5, #20]
 800e316:	2300      	movs	r3, #0
 800e318:	9309      	str	r3, [sp, #36]	; 0x24
 800e31a:	2320      	movs	r3, #32
 800e31c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e320:	f8cd 800c 	str.w	r8, [sp, #12]
 800e324:	2330      	movs	r3, #48	; 0x30
 800e326:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4d0 <_svfiprintf_r+0x1ec>
 800e32a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e32e:	f04f 0901 	mov.w	r9, #1
 800e332:	4623      	mov	r3, r4
 800e334:	469a      	mov	sl, r3
 800e336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e33a:	b10a      	cbz	r2, 800e340 <_svfiprintf_r+0x5c>
 800e33c:	2a25      	cmp	r2, #37	; 0x25
 800e33e:	d1f9      	bne.n	800e334 <_svfiprintf_r+0x50>
 800e340:	ebba 0b04 	subs.w	fp, sl, r4
 800e344:	d00b      	beq.n	800e35e <_svfiprintf_r+0x7a>
 800e346:	465b      	mov	r3, fp
 800e348:	4622      	mov	r2, r4
 800e34a:	4629      	mov	r1, r5
 800e34c:	4638      	mov	r0, r7
 800e34e:	f7ff ff6d 	bl	800e22c <__ssputs_r>
 800e352:	3001      	adds	r0, #1
 800e354:	f000 80aa 	beq.w	800e4ac <_svfiprintf_r+0x1c8>
 800e358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e35a:	445a      	add	r2, fp
 800e35c:	9209      	str	r2, [sp, #36]	; 0x24
 800e35e:	f89a 3000 	ldrb.w	r3, [sl]
 800e362:	2b00      	cmp	r3, #0
 800e364:	f000 80a2 	beq.w	800e4ac <_svfiprintf_r+0x1c8>
 800e368:	2300      	movs	r3, #0
 800e36a:	f04f 32ff 	mov.w	r2, #4294967295
 800e36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e372:	f10a 0a01 	add.w	sl, sl, #1
 800e376:	9304      	str	r3, [sp, #16]
 800e378:	9307      	str	r3, [sp, #28]
 800e37a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e37e:	931a      	str	r3, [sp, #104]	; 0x68
 800e380:	4654      	mov	r4, sl
 800e382:	2205      	movs	r2, #5
 800e384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e388:	4851      	ldr	r0, [pc, #324]	; (800e4d0 <_svfiprintf_r+0x1ec>)
 800e38a:	f7f2 f8b9 	bl	8000500 <memchr>
 800e38e:	9a04      	ldr	r2, [sp, #16]
 800e390:	b9d8      	cbnz	r0, 800e3ca <_svfiprintf_r+0xe6>
 800e392:	06d0      	lsls	r0, r2, #27
 800e394:	bf44      	itt	mi
 800e396:	2320      	movmi	r3, #32
 800e398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e39c:	0711      	lsls	r1, r2, #28
 800e39e:	bf44      	itt	mi
 800e3a0:	232b      	movmi	r3, #43	; 0x2b
 800e3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800e3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e3ac:	d015      	beq.n	800e3da <_svfiprintf_r+0xf6>
 800e3ae:	9a07      	ldr	r2, [sp, #28]
 800e3b0:	4654      	mov	r4, sl
 800e3b2:	2000      	movs	r0, #0
 800e3b4:	f04f 0c0a 	mov.w	ip, #10
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3be:	3b30      	subs	r3, #48	; 0x30
 800e3c0:	2b09      	cmp	r3, #9
 800e3c2:	d94e      	bls.n	800e462 <_svfiprintf_r+0x17e>
 800e3c4:	b1b0      	cbz	r0, 800e3f4 <_svfiprintf_r+0x110>
 800e3c6:	9207      	str	r2, [sp, #28]
 800e3c8:	e014      	b.n	800e3f4 <_svfiprintf_r+0x110>
 800e3ca:	eba0 0308 	sub.w	r3, r0, r8
 800e3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	9304      	str	r3, [sp, #16]
 800e3d6:	46a2      	mov	sl, r4
 800e3d8:	e7d2      	b.n	800e380 <_svfiprintf_r+0x9c>
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	1d19      	adds	r1, r3, #4
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	9103      	str	r1, [sp, #12]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	bfbb      	ittet	lt
 800e3e6:	425b      	neglt	r3, r3
 800e3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800e3ec:	9307      	strge	r3, [sp, #28]
 800e3ee:	9307      	strlt	r3, [sp, #28]
 800e3f0:	bfb8      	it	lt
 800e3f2:	9204      	strlt	r2, [sp, #16]
 800e3f4:	7823      	ldrb	r3, [r4, #0]
 800e3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3f8:	d10c      	bne.n	800e414 <_svfiprintf_r+0x130>
 800e3fa:	7863      	ldrb	r3, [r4, #1]
 800e3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e3fe:	d135      	bne.n	800e46c <_svfiprintf_r+0x188>
 800e400:	9b03      	ldr	r3, [sp, #12]
 800e402:	1d1a      	adds	r2, r3, #4
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	9203      	str	r2, [sp, #12]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	bfb8      	it	lt
 800e40c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e410:	3402      	adds	r4, #2
 800e412:	9305      	str	r3, [sp, #20]
 800e414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4e0 <_svfiprintf_r+0x1fc>
 800e418:	7821      	ldrb	r1, [r4, #0]
 800e41a:	2203      	movs	r2, #3
 800e41c:	4650      	mov	r0, sl
 800e41e:	f7f2 f86f 	bl	8000500 <memchr>
 800e422:	b140      	cbz	r0, 800e436 <_svfiprintf_r+0x152>
 800e424:	2340      	movs	r3, #64	; 0x40
 800e426:	eba0 000a 	sub.w	r0, r0, sl
 800e42a:	fa03 f000 	lsl.w	r0, r3, r0
 800e42e:	9b04      	ldr	r3, [sp, #16]
 800e430:	4303      	orrs	r3, r0
 800e432:	3401      	adds	r4, #1
 800e434:	9304      	str	r3, [sp, #16]
 800e436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e43a:	4826      	ldr	r0, [pc, #152]	; (800e4d4 <_svfiprintf_r+0x1f0>)
 800e43c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e440:	2206      	movs	r2, #6
 800e442:	f7f2 f85d 	bl	8000500 <memchr>
 800e446:	2800      	cmp	r0, #0
 800e448:	d038      	beq.n	800e4bc <_svfiprintf_r+0x1d8>
 800e44a:	4b23      	ldr	r3, [pc, #140]	; (800e4d8 <_svfiprintf_r+0x1f4>)
 800e44c:	bb1b      	cbnz	r3, 800e496 <_svfiprintf_r+0x1b2>
 800e44e:	9b03      	ldr	r3, [sp, #12]
 800e450:	3307      	adds	r3, #7
 800e452:	f023 0307 	bic.w	r3, r3, #7
 800e456:	3308      	adds	r3, #8
 800e458:	9303      	str	r3, [sp, #12]
 800e45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e45c:	4433      	add	r3, r6
 800e45e:	9309      	str	r3, [sp, #36]	; 0x24
 800e460:	e767      	b.n	800e332 <_svfiprintf_r+0x4e>
 800e462:	fb0c 3202 	mla	r2, ip, r2, r3
 800e466:	460c      	mov	r4, r1
 800e468:	2001      	movs	r0, #1
 800e46a:	e7a5      	b.n	800e3b8 <_svfiprintf_r+0xd4>
 800e46c:	2300      	movs	r3, #0
 800e46e:	3401      	adds	r4, #1
 800e470:	9305      	str	r3, [sp, #20]
 800e472:	4619      	mov	r1, r3
 800e474:	f04f 0c0a 	mov.w	ip, #10
 800e478:	4620      	mov	r0, r4
 800e47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e47e:	3a30      	subs	r2, #48	; 0x30
 800e480:	2a09      	cmp	r2, #9
 800e482:	d903      	bls.n	800e48c <_svfiprintf_r+0x1a8>
 800e484:	2b00      	cmp	r3, #0
 800e486:	d0c5      	beq.n	800e414 <_svfiprintf_r+0x130>
 800e488:	9105      	str	r1, [sp, #20]
 800e48a:	e7c3      	b.n	800e414 <_svfiprintf_r+0x130>
 800e48c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e490:	4604      	mov	r4, r0
 800e492:	2301      	movs	r3, #1
 800e494:	e7f0      	b.n	800e478 <_svfiprintf_r+0x194>
 800e496:	ab03      	add	r3, sp, #12
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	462a      	mov	r2, r5
 800e49c:	4b0f      	ldr	r3, [pc, #60]	; (800e4dc <_svfiprintf_r+0x1f8>)
 800e49e:	a904      	add	r1, sp, #16
 800e4a0:	4638      	mov	r0, r7
 800e4a2:	f3af 8000 	nop.w
 800e4a6:	1c42      	adds	r2, r0, #1
 800e4a8:	4606      	mov	r6, r0
 800e4aa:	d1d6      	bne.n	800e45a <_svfiprintf_r+0x176>
 800e4ac:	89ab      	ldrh	r3, [r5, #12]
 800e4ae:	065b      	lsls	r3, r3, #25
 800e4b0:	f53f af2c 	bmi.w	800e30c <_svfiprintf_r+0x28>
 800e4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4b6:	b01d      	add	sp, #116	; 0x74
 800e4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4bc:	ab03      	add	r3, sp, #12
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	462a      	mov	r2, r5
 800e4c2:	4b06      	ldr	r3, [pc, #24]	; (800e4dc <_svfiprintf_r+0x1f8>)
 800e4c4:	a904      	add	r1, sp, #16
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	f000 f87a 	bl	800e5c0 <_printf_i>
 800e4cc:	e7eb      	b.n	800e4a6 <_svfiprintf_r+0x1c2>
 800e4ce:	bf00      	nop
 800e4d0:	0801063c 	.word	0x0801063c
 800e4d4:	08010646 	.word	0x08010646
 800e4d8:	00000000 	.word	0x00000000
 800e4dc:	0800e22d 	.word	0x0800e22d
 800e4e0:	08010642 	.word	0x08010642

0800e4e4 <_printf_common>:
 800e4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e8:	4616      	mov	r6, r2
 800e4ea:	4699      	mov	r9, r3
 800e4ec:	688a      	ldr	r2, [r1, #8]
 800e4ee:	690b      	ldr	r3, [r1, #16]
 800e4f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	bfb8      	it	lt
 800e4f8:	4613      	movlt	r3, r2
 800e4fa:	6033      	str	r3, [r6, #0]
 800e4fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e500:	4607      	mov	r7, r0
 800e502:	460c      	mov	r4, r1
 800e504:	b10a      	cbz	r2, 800e50a <_printf_common+0x26>
 800e506:	3301      	adds	r3, #1
 800e508:	6033      	str	r3, [r6, #0]
 800e50a:	6823      	ldr	r3, [r4, #0]
 800e50c:	0699      	lsls	r1, r3, #26
 800e50e:	bf42      	ittt	mi
 800e510:	6833      	ldrmi	r3, [r6, #0]
 800e512:	3302      	addmi	r3, #2
 800e514:	6033      	strmi	r3, [r6, #0]
 800e516:	6825      	ldr	r5, [r4, #0]
 800e518:	f015 0506 	ands.w	r5, r5, #6
 800e51c:	d106      	bne.n	800e52c <_printf_common+0x48>
 800e51e:	f104 0a19 	add.w	sl, r4, #25
 800e522:	68e3      	ldr	r3, [r4, #12]
 800e524:	6832      	ldr	r2, [r6, #0]
 800e526:	1a9b      	subs	r3, r3, r2
 800e528:	42ab      	cmp	r3, r5
 800e52a:	dc26      	bgt.n	800e57a <_printf_common+0x96>
 800e52c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e530:	1e13      	subs	r3, r2, #0
 800e532:	6822      	ldr	r2, [r4, #0]
 800e534:	bf18      	it	ne
 800e536:	2301      	movne	r3, #1
 800e538:	0692      	lsls	r2, r2, #26
 800e53a:	d42b      	bmi.n	800e594 <_printf_common+0xb0>
 800e53c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e540:	4649      	mov	r1, r9
 800e542:	4638      	mov	r0, r7
 800e544:	47c0      	blx	r8
 800e546:	3001      	adds	r0, #1
 800e548:	d01e      	beq.n	800e588 <_printf_common+0xa4>
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	68e5      	ldr	r5, [r4, #12]
 800e54e:	6832      	ldr	r2, [r6, #0]
 800e550:	f003 0306 	and.w	r3, r3, #6
 800e554:	2b04      	cmp	r3, #4
 800e556:	bf08      	it	eq
 800e558:	1aad      	subeq	r5, r5, r2
 800e55a:	68a3      	ldr	r3, [r4, #8]
 800e55c:	6922      	ldr	r2, [r4, #16]
 800e55e:	bf0c      	ite	eq
 800e560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e564:	2500      	movne	r5, #0
 800e566:	4293      	cmp	r3, r2
 800e568:	bfc4      	itt	gt
 800e56a:	1a9b      	subgt	r3, r3, r2
 800e56c:	18ed      	addgt	r5, r5, r3
 800e56e:	2600      	movs	r6, #0
 800e570:	341a      	adds	r4, #26
 800e572:	42b5      	cmp	r5, r6
 800e574:	d11a      	bne.n	800e5ac <_printf_common+0xc8>
 800e576:	2000      	movs	r0, #0
 800e578:	e008      	b.n	800e58c <_printf_common+0xa8>
 800e57a:	2301      	movs	r3, #1
 800e57c:	4652      	mov	r2, sl
 800e57e:	4649      	mov	r1, r9
 800e580:	4638      	mov	r0, r7
 800e582:	47c0      	blx	r8
 800e584:	3001      	adds	r0, #1
 800e586:	d103      	bne.n	800e590 <_printf_common+0xac>
 800e588:	f04f 30ff 	mov.w	r0, #4294967295
 800e58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e590:	3501      	adds	r5, #1
 800e592:	e7c6      	b.n	800e522 <_printf_common+0x3e>
 800e594:	18e1      	adds	r1, r4, r3
 800e596:	1c5a      	adds	r2, r3, #1
 800e598:	2030      	movs	r0, #48	; 0x30
 800e59a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e59e:	4422      	add	r2, r4
 800e5a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e5a8:	3302      	adds	r3, #2
 800e5aa:	e7c7      	b.n	800e53c <_printf_common+0x58>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	4622      	mov	r2, r4
 800e5b0:	4649      	mov	r1, r9
 800e5b2:	4638      	mov	r0, r7
 800e5b4:	47c0      	blx	r8
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	d0e6      	beq.n	800e588 <_printf_common+0xa4>
 800e5ba:	3601      	adds	r6, #1
 800e5bc:	e7d9      	b.n	800e572 <_printf_common+0x8e>
	...

0800e5c0 <_printf_i>:
 800e5c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c4:	7e0f      	ldrb	r7, [r1, #24]
 800e5c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5c8:	2f78      	cmp	r7, #120	; 0x78
 800e5ca:	4691      	mov	r9, r2
 800e5cc:	4680      	mov	r8, r0
 800e5ce:	460c      	mov	r4, r1
 800e5d0:	469a      	mov	sl, r3
 800e5d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5d6:	d807      	bhi.n	800e5e8 <_printf_i+0x28>
 800e5d8:	2f62      	cmp	r7, #98	; 0x62
 800e5da:	d80a      	bhi.n	800e5f2 <_printf_i+0x32>
 800e5dc:	2f00      	cmp	r7, #0
 800e5de:	f000 80d8 	beq.w	800e792 <_printf_i+0x1d2>
 800e5e2:	2f58      	cmp	r7, #88	; 0x58
 800e5e4:	f000 80a3 	beq.w	800e72e <_printf_i+0x16e>
 800e5e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5f0:	e03a      	b.n	800e668 <_printf_i+0xa8>
 800e5f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5f6:	2b15      	cmp	r3, #21
 800e5f8:	d8f6      	bhi.n	800e5e8 <_printf_i+0x28>
 800e5fa:	a101      	add	r1, pc, #4	; (adr r1, 800e600 <_printf_i+0x40>)
 800e5fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e600:	0800e659 	.word	0x0800e659
 800e604:	0800e66d 	.word	0x0800e66d
 800e608:	0800e5e9 	.word	0x0800e5e9
 800e60c:	0800e5e9 	.word	0x0800e5e9
 800e610:	0800e5e9 	.word	0x0800e5e9
 800e614:	0800e5e9 	.word	0x0800e5e9
 800e618:	0800e66d 	.word	0x0800e66d
 800e61c:	0800e5e9 	.word	0x0800e5e9
 800e620:	0800e5e9 	.word	0x0800e5e9
 800e624:	0800e5e9 	.word	0x0800e5e9
 800e628:	0800e5e9 	.word	0x0800e5e9
 800e62c:	0800e779 	.word	0x0800e779
 800e630:	0800e69d 	.word	0x0800e69d
 800e634:	0800e75b 	.word	0x0800e75b
 800e638:	0800e5e9 	.word	0x0800e5e9
 800e63c:	0800e5e9 	.word	0x0800e5e9
 800e640:	0800e79b 	.word	0x0800e79b
 800e644:	0800e5e9 	.word	0x0800e5e9
 800e648:	0800e69d 	.word	0x0800e69d
 800e64c:	0800e5e9 	.word	0x0800e5e9
 800e650:	0800e5e9 	.word	0x0800e5e9
 800e654:	0800e763 	.word	0x0800e763
 800e658:	682b      	ldr	r3, [r5, #0]
 800e65a:	1d1a      	adds	r2, r3, #4
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	602a      	str	r2, [r5, #0]
 800e660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e664:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e668:	2301      	movs	r3, #1
 800e66a:	e0a3      	b.n	800e7b4 <_printf_i+0x1f4>
 800e66c:	6820      	ldr	r0, [r4, #0]
 800e66e:	6829      	ldr	r1, [r5, #0]
 800e670:	0606      	lsls	r6, r0, #24
 800e672:	f101 0304 	add.w	r3, r1, #4
 800e676:	d50a      	bpl.n	800e68e <_printf_i+0xce>
 800e678:	680e      	ldr	r6, [r1, #0]
 800e67a:	602b      	str	r3, [r5, #0]
 800e67c:	2e00      	cmp	r6, #0
 800e67e:	da03      	bge.n	800e688 <_printf_i+0xc8>
 800e680:	232d      	movs	r3, #45	; 0x2d
 800e682:	4276      	negs	r6, r6
 800e684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e688:	485e      	ldr	r0, [pc, #376]	; (800e804 <_printf_i+0x244>)
 800e68a:	230a      	movs	r3, #10
 800e68c:	e019      	b.n	800e6c2 <_printf_i+0x102>
 800e68e:	680e      	ldr	r6, [r1, #0]
 800e690:	602b      	str	r3, [r5, #0]
 800e692:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e696:	bf18      	it	ne
 800e698:	b236      	sxthne	r6, r6
 800e69a:	e7ef      	b.n	800e67c <_printf_i+0xbc>
 800e69c:	682b      	ldr	r3, [r5, #0]
 800e69e:	6820      	ldr	r0, [r4, #0]
 800e6a0:	1d19      	adds	r1, r3, #4
 800e6a2:	6029      	str	r1, [r5, #0]
 800e6a4:	0601      	lsls	r1, r0, #24
 800e6a6:	d501      	bpl.n	800e6ac <_printf_i+0xec>
 800e6a8:	681e      	ldr	r6, [r3, #0]
 800e6aa:	e002      	b.n	800e6b2 <_printf_i+0xf2>
 800e6ac:	0646      	lsls	r6, r0, #25
 800e6ae:	d5fb      	bpl.n	800e6a8 <_printf_i+0xe8>
 800e6b0:	881e      	ldrh	r6, [r3, #0]
 800e6b2:	4854      	ldr	r0, [pc, #336]	; (800e804 <_printf_i+0x244>)
 800e6b4:	2f6f      	cmp	r7, #111	; 0x6f
 800e6b6:	bf0c      	ite	eq
 800e6b8:	2308      	moveq	r3, #8
 800e6ba:	230a      	movne	r3, #10
 800e6bc:	2100      	movs	r1, #0
 800e6be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6c2:	6865      	ldr	r5, [r4, #4]
 800e6c4:	60a5      	str	r5, [r4, #8]
 800e6c6:	2d00      	cmp	r5, #0
 800e6c8:	bfa2      	ittt	ge
 800e6ca:	6821      	ldrge	r1, [r4, #0]
 800e6cc:	f021 0104 	bicge.w	r1, r1, #4
 800e6d0:	6021      	strge	r1, [r4, #0]
 800e6d2:	b90e      	cbnz	r6, 800e6d8 <_printf_i+0x118>
 800e6d4:	2d00      	cmp	r5, #0
 800e6d6:	d04d      	beq.n	800e774 <_printf_i+0x1b4>
 800e6d8:	4615      	mov	r5, r2
 800e6da:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6de:	fb03 6711 	mls	r7, r3, r1, r6
 800e6e2:	5dc7      	ldrb	r7, [r0, r7]
 800e6e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6e8:	4637      	mov	r7, r6
 800e6ea:	42bb      	cmp	r3, r7
 800e6ec:	460e      	mov	r6, r1
 800e6ee:	d9f4      	bls.n	800e6da <_printf_i+0x11a>
 800e6f0:	2b08      	cmp	r3, #8
 800e6f2:	d10b      	bne.n	800e70c <_printf_i+0x14c>
 800e6f4:	6823      	ldr	r3, [r4, #0]
 800e6f6:	07de      	lsls	r6, r3, #31
 800e6f8:	d508      	bpl.n	800e70c <_printf_i+0x14c>
 800e6fa:	6923      	ldr	r3, [r4, #16]
 800e6fc:	6861      	ldr	r1, [r4, #4]
 800e6fe:	4299      	cmp	r1, r3
 800e700:	bfde      	ittt	le
 800e702:	2330      	movle	r3, #48	; 0x30
 800e704:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e708:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e70c:	1b52      	subs	r2, r2, r5
 800e70e:	6122      	str	r2, [r4, #16]
 800e710:	f8cd a000 	str.w	sl, [sp]
 800e714:	464b      	mov	r3, r9
 800e716:	aa03      	add	r2, sp, #12
 800e718:	4621      	mov	r1, r4
 800e71a:	4640      	mov	r0, r8
 800e71c:	f7ff fee2 	bl	800e4e4 <_printf_common>
 800e720:	3001      	adds	r0, #1
 800e722:	d14c      	bne.n	800e7be <_printf_i+0x1fe>
 800e724:	f04f 30ff 	mov.w	r0, #4294967295
 800e728:	b004      	add	sp, #16
 800e72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e72e:	4835      	ldr	r0, [pc, #212]	; (800e804 <_printf_i+0x244>)
 800e730:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e734:	6829      	ldr	r1, [r5, #0]
 800e736:	6823      	ldr	r3, [r4, #0]
 800e738:	f851 6b04 	ldr.w	r6, [r1], #4
 800e73c:	6029      	str	r1, [r5, #0]
 800e73e:	061d      	lsls	r5, r3, #24
 800e740:	d514      	bpl.n	800e76c <_printf_i+0x1ac>
 800e742:	07df      	lsls	r7, r3, #31
 800e744:	bf44      	itt	mi
 800e746:	f043 0320 	orrmi.w	r3, r3, #32
 800e74a:	6023      	strmi	r3, [r4, #0]
 800e74c:	b91e      	cbnz	r6, 800e756 <_printf_i+0x196>
 800e74e:	6823      	ldr	r3, [r4, #0]
 800e750:	f023 0320 	bic.w	r3, r3, #32
 800e754:	6023      	str	r3, [r4, #0]
 800e756:	2310      	movs	r3, #16
 800e758:	e7b0      	b.n	800e6bc <_printf_i+0xfc>
 800e75a:	6823      	ldr	r3, [r4, #0]
 800e75c:	f043 0320 	orr.w	r3, r3, #32
 800e760:	6023      	str	r3, [r4, #0]
 800e762:	2378      	movs	r3, #120	; 0x78
 800e764:	4828      	ldr	r0, [pc, #160]	; (800e808 <_printf_i+0x248>)
 800e766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e76a:	e7e3      	b.n	800e734 <_printf_i+0x174>
 800e76c:	0659      	lsls	r1, r3, #25
 800e76e:	bf48      	it	mi
 800e770:	b2b6      	uxthmi	r6, r6
 800e772:	e7e6      	b.n	800e742 <_printf_i+0x182>
 800e774:	4615      	mov	r5, r2
 800e776:	e7bb      	b.n	800e6f0 <_printf_i+0x130>
 800e778:	682b      	ldr	r3, [r5, #0]
 800e77a:	6826      	ldr	r6, [r4, #0]
 800e77c:	6961      	ldr	r1, [r4, #20]
 800e77e:	1d18      	adds	r0, r3, #4
 800e780:	6028      	str	r0, [r5, #0]
 800e782:	0635      	lsls	r5, r6, #24
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	d501      	bpl.n	800e78c <_printf_i+0x1cc>
 800e788:	6019      	str	r1, [r3, #0]
 800e78a:	e002      	b.n	800e792 <_printf_i+0x1d2>
 800e78c:	0670      	lsls	r0, r6, #25
 800e78e:	d5fb      	bpl.n	800e788 <_printf_i+0x1c8>
 800e790:	8019      	strh	r1, [r3, #0]
 800e792:	2300      	movs	r3, #0
 800e794:	6123      	str	r3, [r4, #16]
 800e796:	4615      	mov	r5, r2
 800e798:	e7ba      	b.n	800e710 <_printf_i+0x150>
 800e79a:	682b      	ldr	r3, [r5, #0]
 800e79c:	1d1a      	adds	r2, r3, #4
 800e79e:	602a      	str	r2, [r5, #0]
 800e7a0:	681d      	ldr	r5, [r3, #0]
 800e7a2:	6862      	ldr	r2, [r4, #4]
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	f7f1 feaa 	bl	8000500 <memchr>
 800e7ac:	b108      	cbz	r0, 800e7b2 <_printf_i+0x1f2>
 800e7ae:	1b40      	subs	r0, r0, r5
 800e7b0:	6060      	str	r0, [r4, #4]
 800e7b2:	6863      	ldr	r3, [r4, #4]
 800e7b4:	6123      	str	r3, [r4, #16]
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7bc:	e7a8      	b.n	800e710 <_printf_i+0x150>
 800e7be:	6923      	ldr	r3, [r4, #16]
 800e7c0:	462a      	mov	r2, r5
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	47d0      	blx	sl
 800e7c8:	3001      	adds	r0, #1
 800e7ca:	d0ab      	beq.n	800e724 <_printf_i+0x164>
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	079b      	lsls	r3, r3, #30
 800e7d0:	d413      	bmi.n	800e7fa <_printf_i+0x23a>
 800e7d2:	68e0      	ldr	r0, [r4, #12]
 800e7d4:	9b03      	ldr	r3, [sp, #12]
 800e7d6:	4298      	cmp	r0, r3
 800e7d8:	bfb8      	it	lt
 800e7da:	4618      	movlt	r0, r3
 800e7dc:	e7a4      	b.n	800e728 <_printf_i+0x168>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	4632      	mov	r2, r6
 800e7e2:	4649      	mov	r1, r9
 800e7e4:	4640      	mov	r0, r8
 800e7e6:	47d0      	blx	sl
 800e7e8:	3001      	adds	r0, #1
 800e7ea:	d09b      	beq.n	800e724 <_printf_i+0x164>
 800e7ec:	3501      	adds	r5, #1
 800e7ee:	68e3      	ldr	r3, [r4, #12]
 800e7f0:	9903      	ldr	r1, [sp, #12]
 800e7f2:	1a5b      	subs	r3, r3, r1
 800e7f4:	42ab      	cmp	r3, r5
 800e7f6:	dcf2      	bgt.n	800e7de <_printf_i+0x21e>
 800e7f8:	e7eb      	b.n	800e7d2 <_printf_i+0x212>
 800e7fa:	2500      	movs	r5, #0
 800e7fc:	f104 0619 	add.w	r6, r4, #25
 800e800:	e7f5      	b.n	800e7ee <_printf_i+0x22e>
 800e802:	bf00      	nop
 800e804:	0801064d 	.word	0x0801064d
 800e808:	0801065e 	.word	0x0801065e

0800e80c <memmove>:
 800e80c:	4288      	cmp	r0, r1
 800e80e:	b510      	push	{r4, lr}
 800e810:	eb01 0402 	add.w	r4, r1, r2
 800e814:	d902      	bls.n	800e81c <memmove+0x10>
 800e816:	4284      	cmp	r4, r0
 800e818:	4623      	mov	r3, r4
 800e81a:	d807      	bhi.n	800e82c <memmove+0x20>
 800e81c:	1e43      	subs	r3, r0, #1
 800e81e:	42a1      	cmp	r1, r4
 800e820:	d008      	beq.n	800e834 <memmove+0x28>
 800e822:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e82a:	e7f8      	b.n	800e81e <memmove+0x12>
 800e82c:	4402      	add	r2, r0
 800e82e:	4601      	mov	r1, r0
 800e830:	428a      	cmp	r2, r1
 800e832:	d100      	bne.n	800e836 <memmove+0x2a>
 800e834:	bd10      	pop	{r4, pc}
 800e836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e83a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e83e:	e7f7      	b.n	800e830 <memmove+0x24>

0800e840 <_free_r>:
 800e840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e842:	2900      	cmp	r1, #0
 800e844:	d044      	beq.n	800e8d0 <_free_r+0x90>
 800e846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e84a:	9001      	str	r0, [sp, #4]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f1a1 0404 	sub.w	r4, r1, #4
 800e852:	bfb8      	it	lt
 800e854:	18e4      	addlt	r4, r4, r3
 800e856:	f000 f913 	bl	800ea80 <__malloc_lock>
 800e85a:	4a1e      	ldr	r2, [pc, #120]	; (800e8d4 <_free_r+0x94>)
 800e85c:	9801      	ldr	r0, [sp, #4]
 800e85e:	6813      	ldr	r3, [r2, #0]
 800e860:	b933      	cbnz	r3, 800e870 <_free_r+0x30>
 800e862:	6063      	str	r3, [r4, #4]
 800e864:	6014      	str	r4, [r2, #0]
 800e866:	b003      	add	sp, #12
 800e868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e86c:	f000 b90e 	b.w	800ea8c <__malloc_unlock>
 800e870:	42a3      	cmp	r3, r4
 800e872:	d908      	bls.n	800e886 <_free_r+0x46>
 800e874:	6825      	ldr	r5, [r4, #0]
 800e876:	1961      	adds	r1, r4, r5
 800e878:	428b      	cmp	r3, r1
 800e87a:	bf01      	itttt	eq
 800e87c:	6819      	ldreq	r1, [r3, #0]
 800e87e:	685b      	ldreq	r3, [r3, #4]
 800e880:	1949      	addeq	r1, r1, r5
 800e882:	6021      	streq	r1, [r4, #0]
 800e884:	e7ed      	b.n	800e862 <_free_r+0x22>
 800e886:	461a      	mov	r2, r3
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	b10b      	cbz	r3, 800e890 <_free_r+0x50>
 800e88c:	42a3      	cmp	r3, r4
 800e88e:	d9fa      	bls.n	800e886 <_free_r+0x46>
 800e890:	6811      	ldr	r1, [r2, #0]
 800e892:	1855      	adds	r5, r2, r1
 800e894:	42a5      	cmp	r5, r4
 800e896:	d10b      	bne.n	800e8b0 <_free_r+0x70>
 800e898:	6824      	ldr	r4, [r4, #0]
 800e89a:	4421      	add	r1, r4
 800e89c:	1854      	adds	r4, r2, r1
 800e89e:	42a3      	cmp	r3, r4
 800e8a0:	6011      	str	r1, [r2, #0]
 800e8a2:	d1e0      	bne.n	800e866 <_free_r+0x26>
 800e8a4:	681c      	ldr	r4, [r3, #0]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	6053      	str	r3, [r2, #4]
 800e8aa:	4421      	add	r1, r4
 800e8ac:	6011      	str	r1, [r2, #0]
 800e8ae:	e7da      	b.n	800e866 <_free_r+0x26>
 800e8b0:	d902      	bls.n	800e8b8 <_free_r+0x78>
 800e8b2:	230c      	movs	r3, #12
 800e8b4:	6003      	str	r3, [r0, #0]
 800e8b6:	e7d6      	b.n	800e866 <_free_r+0x26>
 800e8b8:	6825      	ldr	r5, [r4, #0]
 800e8ba:	1961      	adds	r1, r4, r5
 800e8bc:	428b      	cmp	r3, r1
 800e8be:	bf04      	itt	eq
 800e8c0:	6819      	ldreq	r1, [r3, #0]
 800e8c2:	685b      	ldreq	r3, [r3, #4]
 800e8c4:	6063      	str	r3, [r4, #4]
 800e8c6:	bf04      	itt	eq
 800e8c8:	1949      	addeq	r1, r1, r5
 800e8ca:	6021      	streq	r1, [r4, #0]
 800e8cc:	6054      	str	r4, [r2, #4]
 800e8ce:	e7ca      	b.n	800e866 <_free_r+0x26>
 800e8d0:	b003      	add	sp, #12
 800e8d2:	bd30      	pop	{r4, r5, pc}
 800e8d4:	200054fc 	.word	0x200054fc

0800e8d8 <sbrk_aligned>:
 800e8d8:	b570      	push	{r4, r5, r6, lr}
 800e8da:	4e0e      	ldr	r6, [pc, #56]	; (800e914 <sbrk_aligned+0x3c>)
 800e8dc:	460c      	mov	r4, r1
 800e8de:	6831      	ldr	r1, [r6, #0]
 800e8e0:	4605      	mov	r5, r0
 800e8e2:	b911      	cbnz	r1, 800e8ea <sbrk_aligned+0x12>
 800e8e4:	f000 f8bc 	bl	800ea60 <_sbrk_r>
 800e8e8:	6030      	str	r0, [r6, #0]
 800e8ea:	4621      	mov	r1, r4
 800e8ec:	4628      	mov	r0, r5
 800e8ee:	f000 f8b7 	bl	800ea60 <_sbrk_r>
 800e8f2:	1c43      	adds	r3, r0, #1
 800e8f4:	d00a      	beq.n	800e90c <sbrk_aligned+0x34>
 800e8f6:	1cc4      	adds	r4, r0, #3
 800e8f8:	f024 0403 	bic.w	r4, r4, #3
 800e8fc:	42a0      	cmp	r0, r4
 800e8fe:	d007      	beq.n	800e910 <sbrk_aligned+0x38>
 800e900:	1a21      	subs	r1, r4, r0
 800e902:	4628      	mov	r0, r5
 800e904:	f000 f8ac 	bl	800ea60 <_sbrk_r>
 800e908:	3001      	adds	r0, #1
 800e90a:	d101      	bne.n	800e910 <sbrk_aligned+0x38>
 800e90c:	f04f 34ff 	mov.w	r4, #4294967295
 800e910:	4620      	mov	r0, r4
 800e912:	bd70      	pop	{r4, r5, r6, pc}
 800e914:	20005500 	.word	0x20005500

0800e918 <_malloc_r>:
 800e918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e91c:	1ccd      	adds	r5, r1, #3
 800e91e:	f025 0503 	bic.w	r5, r5, #3
 800e922:	3508      	adds	r5, #8
 800e924:	2d0c      	cmp	r5, #12
 800e926:	bf38      	it	cc
 800e928:	250c      	movcc	r5, #12
 800e92a:	2d00      	cmp	r5, #0
 800e92c:	4607      	mov	r7, r0
 800e92e:	db01      	blt.n	800e934 <_malloc_r+0x1c>
 800e930:	42a9      	cmp	r1, r5
 800e932:	d905      	bls.n	800e940 <_malloc_r+0x28>
 800e934:	230c      	movs	r3, #12
 800e936:	603b      	str	r3, [r7, #0]
 800e938:	2600      	movs	r6, #0
 800e93a:	4630      	mov	r0, r6
 800e93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e940:	4e2e      	ldr	r6, [pc, #184]	; (800e9fc <_malloc_r+0xe4>)
 800e942:	f000 f89d 	bl	800ea80 <__malloc_lock>
 800e946:	6833      	ldr	r3, [r6, #0]
 800e948:	461c      	mov	r4, r3
 800e94a:	bb34      	cbnz	r4, 800e99a <_malloc_r+0x82>
 800e94c:	4629      	mov	r1, r5
 800e94e:	4638      	mov	r0, r7
 800e950:	f7ff ffc2 	bl	800e8d8 <sbrk_aligned>
 800e954:	1c43      	adds	r3, r0, #1
 800e956:	4604      	mov	r4, r0
 800e958:	d14d      	bne.n	800e9f6 <_malloc_r+0xde>
 800e95a:	6834      	ldr	r4, [r6, #0]
 800e95c:	4626      	mov	r6, r4
 800e95e:	2e00      	cmp	r6, #0
 800e960:	d140      	bne.n	800e9e4 <_malloc_r+0xcc>
 800e962:	6823      	ldr	r3, [r4, #0]
 800e964:	4631      	mov	r1, r6
 800e966:	4638      	mov	r0, r7
 800e968:	eb04 0803 	add.w	r8, r4, r3
 800e96c:	f000 f878 	bl	800ea60 <_sbrk_r>
 800e970:	4580      	cmp	r8, r0
 800e972:	d13a      	bne.n	800e9ea <_malloc_r+0xd2>
 800e974:	6821      	ldr	r1, [r4, #0]
 800e976:	3503      	adds	r5, #3
 800e978:	1a6d      	subs	r5, r5, r1
 800e97a:	f025 0503 	bic.w	r5, r5, #3
 800e97e:	3508      	adds	r5, #8
 800e980:	2d0c      	cmp	r5, #12
 800e982:	bf38      	it	cc
 800e984:	250c      	movcc	r5, #12
 800e986:	4629      	mov	r1, r5
 800e988:	4638      	mov	r0, r7
 800e98a:	f7ff ffa5 	bl	800e8d8 <sbrk_aligned>
 800e98e:	3001      	adds	r0, #1
 800e990:	d02b      	beq.n	800e9ea <_malloc_r+0xd2>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	442b      	add	r3, r5
 800e996:	6023      	str	r3, [r4, #0]
 800e998:	e00e      	b.n	800e9b8 <_malloc_r+0xa0>
 800e99a:	6822      	ldr	r2, [r4, #0]
 800e99c:	1b52      	subs	r2, r2, r5
 800e99e:	d41e      	bmi.n	800e9de <_malloc_r+0xc6>
 800e9a0:	2a0b      	cmp	r2, #11
 800e9a2:	d916      	bls.n	800e9d2 <_malloc_r+0xba>
 800e9a4:	1961      	adds	r1, r4, r5
 800e9a6:	42a3      	cmp	r3, r4
 800e9a8:	6025      	str	r5, [r4, #0]
 800e9aa:	bf18      	it	ne
 800e9ac:	6059      	strne	r1, [r3, #4]
 800e9ae:	6863      	ldr	r3, [r4, #4]
 800e9b0:	bf08      	it	eq
 800e9b2:	6031      	streq	r1, [r6, #0]
 800e9b4:	5162      	str	r2, [r4, r5]
 800e9b6:	604b      	str	r3, [r1, #4]
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	f104 060b 	add.w	r6, r4, #11
 800e9be:	f000 f865 	bl	800ea8c <__malloc_unlock>
 800e9c2:	f026 0607 	bic.w	r6, r6, #7
 800e9c6:	1d23      	adds	r3, r4, #4
 800e9c8:	1af2      	subs	r2, r6, r3
 800e9ca:	d0b6      	beq.n	800e93a <_malloc_r+0x22>
 800e9cc:	1b9b      	subs	r3, r3, r6
 800e9ce:	50a3      	str	r3, [r4, r2]
 800e9d0:	e7b3      	b.n	800e93a <_malloc_r+0x22>
 800e9d2:	6862      	ldr	r2, [r4, #4]
 800e9d4:	42a3      	cmp	r3, r4
 800e9d6:	bf0c      	ite	eq
 800e9d8:	6032      	streq	r2, [r6, #0]
 800e9da:	605a      	strne	r2, [r3, #4]
 800e9dc:	e7ec      	b.n	800e9b8 <_malloc_r+0xa0>
 800e9de:	4623      	mov	r3, r4
 800e9e0:	6864      	ldr	r4, [r4, #4]
 800e9e2:	e7b2      	b.n	800e94a <_malloc_r+0x32>
 800e9e4:	4634      	mov	r4, r6
 800e9e6:	6876      	ldr	r6, [r6, #4]
 800e9e8:	e7b9      	b.n	800e95e <_malloc_r+0x46>
 800e9ea:	230c      	movs	r3, #12
 800e9ec:	603b      	str	r3, [r7, #0]
 800e9ee:	4638      	mov	r0, r7
 800e9f0:	f000 f84c 	bl	800ea8c <__malloc_unlock>
 800e9f4:	e7a1      	b.n	800e93a <_malloc_r+0x22>
 800e9f6:	6025      	str	r5, [r4, #0]
 800e9f8:	e7de      	b.n	800e9b8 <_malloc_r+0xa0>
 800e9fa:	bf00      	nop
 800e9fc:	200054fc 	.word	0x200054fc

0800ea00 <_realloc_r>:
 800ea00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea04:	4680      	mov	r8, r0
 800ea06:	4614      	mov	r4, r2
 800ea08:	460e      	mov	r6, r1
 800ea0a:	b921      	cbnz	r1, 800ea16 <_realloc_r+0x16>
 800ea0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea10:	4611      	mov	r1, r2
 800ea12:	f7ff bf81 	b.w	800e918 <_malloc_r>
 800ea16:	b92a      	cbnz	r2, 800ea24 <_realloc_r+0x24>
 800ea18:	f7ff ff12 	bl	800e840 <_free_r>
 800ea1c:	4625      	mov	r5, r4
 800ea1e:	4628      	mov	r0, r5
 800ea20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea24:	f000 f838 	bl	800ea98 <_malloc_usable_size_r>
 800ea28:	4284      	cmp	r4, r0
 800ea2a:	4607      	mov	r7, r0
 800ea2c:	d802      	bhi.n	800ea34 <_realloc_r+0x34>
 800ea2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea32:	d812      	bhi.n	800ea5a <_realloc_r+0x5a>
 800ea34:	4621      	mov	r1, r4
 800ea36:	4640      	mov	r0, r8
 800ea38:	f7ff ff6e 	bl	800e918 <_malloc_r>
 800ea3c:	4605      	mov	r5, r0
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d0ed      	beq.n	800ea1e <_realloc_r+0x1e>
 800ea42:	42bc      	cmp	r4, r7
 800ea44:	4622      	mov	r2, r4
 800ea46:	4631      	mov	r1, r6
 800ea48:	bf28      	it	cs
 800ea4a:	463a      	movcs	r2, r7
 800ea4c:	f7ff fbb8 	bl	800e1c0 <memcpy>
 800ea50:	4631      	mov	r1, r6
 800ea52:	4640      	mov	r0, r8
 800ea54:	f7ff fef4 	bl	800e840 <_free_r>
 800ea58:	e7e1      	b.n	800ea1e <_realloc_r+0x1e>
 800ea5a:	4635      	mov	r5, r6
 800ea5c:	e7df      	b.n	800ea1e <_realloc_r+0x1e>
	...

0800ea60 <_sbrk_r>:
 800ea60:	b538      	push	{r3, r4, r5, lr}
 800ea62:	4d06      	ldr	r5, [pc, #24]	; (800ea7c <_sbrk_r+0x1c>)
 800ea64:	2300      	movs	r3, #0
 800ea66:	4604      	mov	r4, r0
 800ea68:	4608      	mov	r0, r1
 800ea6a:	602b      	str	r3, [r5, #0]
 800ea6c:	f7f5 f8be 	bl	8003bec <_sbrk>
 800ea70:	1c43      	adds	r3, r0, #1
 800ea72:	d102      	bne.n	800ea7a <_sbrk_r+0x1a>
 800ea74:	682b      	ldr	r3, [r5, #0]
 800ea76:	b103      	cbz	r3, 800ea7a <_sbrk_r+0x1a>
 800ea78:	6023      	str	r3, [r4, #0]
 800ea7a:	bd38      	pop	{r3, r4, r5, pc}
 800ea7c:	20005504 	.word	0x20005504

0800ea80 <__malloc_lock>:
 800ea80:	4801      	ldr	r0, [pc, #4]	; (800ea88 <__malloc_lock+0x8>)
 800ea82:	f000 b811 	b.w	800eaa8 <__retarget_lock_acquire_recursive>
 800ea86:	bf00      	nop
 800ea88:	20005508 	.word	0x20005508

0800ea8c <__malloc_unlock>:
 800ea8c:	4801      	ldr	r0, [pc, #4]	; (800ea94 <__malloc_unlock+0x8>)
 800ea8e:	f000 b80c 	b.w	800eaaa <__retarget_lock_release_recursive>
 800ea92:	bf00      	nop
 800ea94:	20005508 	.word	0x20005508

0800ea98 <_malloc_usable_size_r>:
 800ea98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea9c:	1f18      	subs	r0, r3, #4
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	bfbc      	itt	lt
 800eaa2:	580b      	ldrlt	r3, [r1, r0]
 800eaa4:	18c0      	addlt	r0, r0, r3
 800eaa6:	4770      	bx	lr

0800eaa8 <__retarget_lock_acquire_recursive>:
 800eaa8:	4770      	bx	lr

0800eaaa <__retarget_lock_release_recursive>:
 800eaaa:	4770      	bx	lr
 800eaac:	0000      	movs	r0, r0
	...

0800eab0 <sin>:
 800eab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eab2:	ec53 2b10 	vmov	r2, r3, d0
 800eab6:	4828      	ldr	r0, [pc, #160]	; (800eb58 <sin+0xa8>)
 800eab8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eabc:	4281      	cmp	r1, r0
 800eabe:	dc07      	bgt.n	800ead0 <sin+0x20>
 800eac0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800eb50 <sin+0xa0>
 800eac4:	2000      	movs	r0, #0
 800eac6:	b005      	add	sp, #20
 800eac8:	f85d eb04 	ldr.w	lr, [sp], #4
 800eacc:	f000 bf5c 	b.w	800f988 <__kernel_sin>
 800ead0:	4822      	ldr	r0, [pc, #136]	; (800eb5c <sin+0xac>)
 800ead2:	4281      	cmp	r1, r0
 800ead4:	dd09      	ble.n	800eaea <sin+0x3a>
 800ead6:	ee10 0a10 	vmov	r0, s0
 800eada:	4619      	mov	r1, r3
 800eadc:	f7f1 fd64 	bl	80005a8 <__aeabi_dsub>
 800eae0:	ec41 0b10 	vmov	d0, r0, r1
 800eae4:	b005      	add	sp, #20
 800eae6:	f85d fb04 	ldr.w	pc, [sp], #4
 800eaea:	4668      	mov	r0, sp
 800eaec:	f000 f924 	bl	800ed38 <__ieee754_rem_pio2>
 800eaf0:	f000 0003 	and.w	r0, r0, #3
 800eaf4:	2801      	cmp	r0, #1
 800eaf6:	d00c      	beq.n	800eb12 <sin+0x62>
 800eaf8:	2802      	cmp	r0, #2
 800eafa:	d011      	beq.n	800eb20 <sin+0x70>
 800eafc:	b9f0      	cbnz	r0, 800eb3c <sin+0x8c>
 800eafe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb02:	ed9d 0b00 	vldr	d0, [sp]
 800eb06:	2001      	movs	r0, #1
 800eb08:	f000 ff3e 	bl	800f988 <__kernel_sin>
 800eb0c:	ec51 0b10 	vmov	r0, r1, d0
 800eb10:	e7e6      	b.n	800eae0 <sin+0x30>
 800eb12:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb16:	ed9d 0b00 	vldr	d0, [sp]
 800eb1a:	f000 fb1d 	bl	800f158 <__kernel_cos>
 800eb1e:	e7f5      	b.n	800eb0c <sin+0x5c>
 800eb20:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb24:	ed9d 0b00 	vldr	d0, [sp]
 800eb28:	2001      	movs	r0, #1
 800eb2a:	f000 ff2d 	bl	800f988 <__kernel_sin>
 800eb2e:	ec53 2b10 	vmov	r2, r3, d0
 800eb32:	ee10 0a10 	vmov	r0, s0
 800eb36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800eb3a:	e7d1      	b.n	800eae0 <sin+0x30>
 800eb3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eb40:	ed9d 0b00 	vldr	d0, [sp]
 800eb44:	f000 fb08 	bl	800f158 <__kernel_cos>
 800eb48:	e7f1      	b.n	800eb2e <sin+0x7e>
 800eb4a:	bf00      	nop
 800eb4c:	f3af 8000 	nop.w
	...
 800eb58:	3fe921fb 	.word	0x3fe921fb
 800eb5c:	7fefffff 	.word	0x7fefffff

0800eb60 <atan2>:
 800eb60:	f000 b81e 	b.w	800eba0 <__ieee754_atan2>

0800eb64 <sqrtf>:
 800eb64:	b508      	push	{r3, lr}
 800eb66:	ed2d 8b02 	vpush	{d8}
 800eb6a:	eeb0 8a40 	vmov.f32	s16, s0
 800eb6e:	f000 faef 	bl	800f150 <__ieee754_sqrtf>
 800eb72:	eeb4 8a48 	vcmp.f32	s16, s16
 800eb76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7a:	d60c      	bvs.n	800eb96 <sqrtf+0x32>
 800eb7c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800eb9c <sqrtf+0x38>
 800eb80:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800eb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb88:	d505      	bpl.n	800eb96 <sqrtf+0x32>
 800eb8a:	f7ff faef 	bl	800e16c <__errno>
 800eb8e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800eb92:	2321      	movs	r3, #33	; 0x21
 800eb94:	6003      	str	r3, [r0, #0]
 800eb96:	ecbd 8b02 	vpop	{d8}
 800eb9a:	bd08      	pop	{r3, pc}
 800eb9c:	00000000 	.word	0x00000000

0800eba0 <__ieee754_atan2>:
 800eba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eba4:	ec57 6b11 	vmov	r6, r7, d1
 800eba8:	4273      	negs	r3, r6
 800ebaa:	f8df e184 	ldr.w	lr, [pc, #388]	; 800ed30 <__ieee754_atan2+0x190>
 800ebae:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800ebb2:	4333      	orrs	r3, r6
 800ebb4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ebb8:	4573      	cmp	r3, lr
 800ebba:	ec51 0b10 	vmov	r0, r1, d0
 800ebbe:	ee11 8a10 	vmov	r8, s2
 800ebc2:	d80a      	bhi.n	800ebda <__ieee754_atan2+0x3a>
 800ebc4:	4244      	negs	r4, r0
 800ebc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ebca:	4304      	orrs	r4, r0
 800ebcc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ebd0:	4574      	cmp	r4, lr
 800ebd2:	ee10 9a10 	vmov	r9, s0
 800ebd6:	468c      	mov	ip, r1
 800ebd8:	d907      	bls.n	800ebea <__ieee754_atan2+0x4a>
 800ebda:	4632      	mov	r2, r6
 800ebdc:	463b      	mov	r3, r7
 800ebde:	f7f1 fce5 	bl	80005ac <__adddf3>
 800ebe2:	ec41 0b10 	vmov	d0, r0, r1
 800ebe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800ebee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ebf2:	4334      	orrs	r4, r6
 800ebf4:	d103      	bne.n	800ebfe <__ieee754_atan2+0x5e>
 800ebf6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebfa:	f000 bf85 	b.w	800fb08 <atan>
 800ebfe:	17bc      	asrs	r4, r7, #30
 800ec00:	f004 0402 	and.w	r4, r4, #2
 800ec04:	ea53 0909 	orrs.w	r9, r3, r9
 800ec08:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ec0c:	d107      	bne.n	800ec1e <__ieee754_atan2+0x7e>
 800ec0e:	2c02      	cmp	r4, #2
 800ec10:	d060      	beq.n	800ecd4 <__ieee754_atan2+0x134>
 800ec12:	2c03      	cmp	r4, #3
 800ec14:	d1e5      	bne.n	800ebe2 <__ieee754_atan2+0x42>
 800ec16:	a142      	add	r1, pc, #264	; (adr r1, 800ed20 <__ieee754_atan2+0x180>)
 800ec18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec1c:	e7e1      	b.n	800ebe2 <__ieee754_atan2+0x42>
 800ec1e:	ea52 0808 	orrs.w	r8, r2, r8
 800ec22:	d106      	bne.n	800ec32 <__ieee754_atan2+0x92>
 800ec24:	f1bc 0f00 	cmp.w	ip, #0
 800ec28:	da5f      	bge.n	800ecea <__ieee754_atan2+0x14a>
 800ec2a:	a13f      	add	r1, pc, #252	; (adr r1, 800ed28 <__ieee754_atan2+0x188>)
 800ec2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec30:	e7d7      	b.n	800ebe2 <__ieee754_atan2+0x42>
 800ec32:	4572      	cmp	r2, lr
 800ec34:	d10f      	bne.n	800ec56 <__ieee754_atan2+0xb6>
 800ec36:	4293      	cmp	r3, r2
 800ec38:	f104 34ff 	add.w	r4, r4, #4294967295
 800ec3c:	d107      	bne.n	800ec4e <__ieee754_atan2+0xae>
 800ec3e:	2c02      	cmp	r4, #2
 800ec40:	d84c      	bhi.n	800ecdc <__ieee754_atan2+0x13c>
 800ec42:	4b35      	ldr	r3, [pc, #212]	; (800ed18 <__ieee754_atan2+0x178>)
 800ec44:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800ec48:	e9d4 0100 	ldrd	r0, r1, [r4]
 800ec4c:	e7c9      	b.n	800ebe2 <__ieee754_atan2+0x42>
 800ec4e:	2c02      	cmp	r4, #2
 800ec50:	d848      	bhi.n	800ece4 <__ieee754_atan2+0x144>
 800ec52:	4b32      	ldr	r3, [pc, #200]	; (800ed1c <__ieee754_atan2+0x17c>)
 800ec54:	e7f6      	b.n	800ec44 <__ieee754_atan2+0xa4>
 800ec56:	4573      	cmp	r3, lr
 800ec58:	d0e4      	beq.n	800ec24 <__ieee754_atan2+0x84>
 800ec5a:	1a9b      	subs	r3, r3, r2
 800ec5c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ec60:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ec64:	da1e      	bge.n	800eca4 <__ieee754_atan2+0x104>
 800ec66:	2f00      	cmp	r7, #0
 800ec68:	da01      	bge.n	800ec6e <__ieee754_atan2+0xce>
 800ec6a:	323c      	adds	r2, #60	; 0x3c
 800ec6c:	db1e      	blt.n	800ecac <__ieee754_atan2+0x10c>
 800ec6e:	4632      	mov	r2, r6
 800ec70:	463b      	mov	r3, r7
 800ec72:	f7f1 ff7b 	bl	8000b6c <__aeabi_ddiv>
 800ec76:	ec41 0b10 	vmov	d0, r0, r1
 800ec7a:	f001 f8e5 	bl	800fe48 <fabs>
 800ec7e:	f000 ff43 	bl	800fb08 <atan>
 800ec82:	ec51 0b10 	vmov	r0, r1, d0
 800ec86:	2c01      	cmp	r4, #1
 800ec88:	d013      	beq.n	800ecb2 <__ieee754_atan2+0x112>
 800ec8a:	2c02      	cmp	r4, #2
 800ec8c:	d015      	beq.n	800ecba <__ieee754_atan2+0x11a>
 800ec8e:	2c00      	cmp	r4, #0
 800ec90:	d0a7      	beq.n	800ebe2 <__ieee754_atan2+0x42>
 800ec92:	a319      	add	r3, pc, #100	; (adr r3, 800ecf8 <__ieee754_atan2+0x158>)
 800ec94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec98:	f7f1 fc86 	bl	80005a8 <__aeabi_dsub>
 800ec9c:	a318      	add	r3, pc, #96	; (adr r3, 800ed00 <__ieee754_atan2+0x160>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	e014      	b.n	800ecce <__ieee754_atan2+0x12e>
 800eca4:	a118      	add	r1, pc, #96	; (adr r1, 800ed08 <__ieee754_atan2+0x168>)
 800eca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecaa:	e7ec      	b.n	800ec86 <__ieee754_atan2+0xe6>
 800ecac:	2000      	movs	r0, #0
 800ecae:	2100      	movs	r1, #0
 800ecb0:	e7e9      	b.n	800ec86 <__ieee754_atan2+0xe6>
 800ecb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	e793      	b.n	800ebe2 <__ieee754_atan2+0x42>
 800ecba:	a30f      	add	r3, pc, #60	; (adr r3, 800ecf8 <__ieee754_atan2+0x158>)
 800ecbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc0:	f7f1 fc72 	bl	80005a8 <__aeabi_dsub>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	a10d      	add	r1, pc, #52	; (adr r1, 800ed00 <__ieee754_atan2+0x160>)
 800ecca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecce:	f7f1 fc6b 	bl	80005a8 <__aeabi_dsub>
 800ecd2:	e786      	b.n	800ebe2 <__ieee754_atan2+0x42>
 800ecd4:	a10a      	add	r1, pc, #40	; (adr r1, 800ed00 <__ieee754_atan2+0x160>)
 800ecd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecda:	e782      	b.n	800ebe2 <__ieee754_atan2+0x42>
 800ecdc:	a10c      	add	r1, pc, #48	; (adr r1, 800ed10 <__ieee754_atan2+0x170>)
 800ecde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ece2:	e77e      	b.n	800ebe2 <__ieee754_atan2+0x42>
 800ece4:	2000      	movs	r0, #0
 800ece6:	2100      	movs	r1, #0
 800ece8:	e77b      	b.n	800ebe2 <__ieee754_atan2+0x42>
 800ecea:	a107      	add	r1, pc, #28	; (adr r1, 800ed08 <__ieee754_atan2+0x168>)
 800ecec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecf0:	e777      	b.n	800ebe2 <__ieee754_atan2+0x42>
 800ecf2:	bf00      	nop
 800ecf4:	f3af 8000 	nop.w
 800ecf8:	33145c07 	.word	0x33145c07
 800ecfc:	3ca1a626 	.word	0x3ca1a626
 800ed00:	54442d18 	.word	0x54442d18
 800ed04:	400921fb 	.word	0x400921fb
 800ed08:	54442d18 	.word	0x54442d18
 800ed0c:	3ff921fb 	.word	0x3ff921fb
 800ed10:	54442d18 	.word	0x54442d18
 800ed14:	3fe921fb 	.word	0x3fe921fb
 800ed18:	08010670 	.word	0x08010670
 800ed1c:	08010688 	.word	0x08010688
 800ed20:	54442d18 	.word	0x54442d18
 800ed24:	c00921fb 	.word	0xc00921fb
 800ed28:	54442d18 	.word	0x54442d18
 800ed2c:	bff921fb 	.word	0xbff921fb
 800ed30:	7ff00000 	.word	0x7ff00000
 800ed34:	00000000 	.word	0x00000000

0800ed38 <__ieee754_rem_pio2>:
 800ed38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed3c:	ed2d 8b02 	vpush	{d8}
 800ed40:	ec55 4b10 	vmov	r4, r5, d0
 800ed44:	4bca      	ldr	r3, [pc, #808]	; (800f070 <__ieee754_rem_pio2+0x338>)
 800ed46:	b08b      	sub	sp, #44	; 0x2c
 800ed48:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800ed4c:	4598      	cmp	r8, r3
 800ed4e:	4682      	mov	sl, r0
 800ed50:	9502      	str	r5, [sp, #8]
 800ed52:	dc08      	bgt.n	800ed66 <__ieee754_rem_pio2+0x2e>
 800ed54:	2200      	movs	r2, #0
 800ed56:	2300      	movs	r3, #0
 800ed58:	ed80 0b00 	vstr	d0, [r0]
 800ed5c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ed60:	f04f 0b00 	mov.w	fp, #0
 800ed64:	e028      	b.n	800edb8 <__ieee754_rem_pio2+0x80>
 800ed66:	4bc3      	ldr	r3, [pc, #780]	; (800f074 <__ieee754_rem_pio2+0x33c>)
 800ed68:	4598      	cmp	r8, r3
 800ed6a:	dc78      	bgt.n	800ee5e <__ieee754_rem_pio2+0x126>
 800ed6c:	9b02      	ldr	r3, [sp, #8]
 800ed6e:	4ec2      	ldr	r6, [pc, #776]	; (800f078 <__ieee754_rem_pio2+0x340>)
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	ee10 0a10 	vmov	r0, s0
 800ed76:	a3b0      	add	r3, pc, #704	; (adr r3, 800f038 <__ieee754_rem_pio2+0x300>)
 800ed78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7c:	4629      	mov	r1, r5
 800ed7e:	dd39      	ble.n	800edf4 <__ieee754_rem_pio2+0xbc>
 800ed80:	f7f1 fc12 	bl	80005a8 <__aeabi_dsub>
 800ed84:	45b0      	cmp	r8, r6
 800ed86:	4604      	mov	r4, r0
 800ed88:	460d      	mov	r5, r1
 800ed8a:	d01b      	beq.n	800edc4 <__ieee754_rem_pio2+0x8c>
 800ed8c:	a3ac      	add	r3, pc, #688	; (adr r3, 800f040 <__ieee754_rem_pio2+0x308>)
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	f7f1 fc09 	bl	80005a8 <__aeabi_dsub>
 800ed96:	4602      	mov	r2, r0
 800ed98:	460b      	mov	r3, r1
 800ed9a:	e9ca 2300 	strd	r2, r3, [sl]
 800ed9e:	4620      	mov	r0, r4
 800eda0:	4629      	mov	r1, r5
 800eda2:	f7f1 fc01 	bl	80005a8 <__aeabi_dsub>
 800eda6:	a3a6      	add	r3, pc, #664	; (adr r3, 800f040 <__ieee754_rem_pio2+0x308>)
 800eda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edac:	f7f1 fbfc 	bl	80005a8 <__aeabi_dsub>
 800edb0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800edb4:	f04f 0b01 	mov.w	fp, #1
 800edb8:	4658      	mov	r0, fp
 800edba:	b00b      	add	sp, #44	; 0x2c
 800edbc:	ecbd 8b02 	vpop	{d8}
 800edc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc4:	a3a0      	add	r3, pc, #640	; (adr r3, 800f048 <__ieee754_rem_pio2+0x310>)
 800edc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edca:	f7f1 fbed 	bl	80005a8 <__aeabi_dsub>
 800edce:	a3a0      	add	r3, pc, #640	; (adr r3, 800f050 <__ieee754_rem_pio2+0x318>)
 800edd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd4:	4604      	mov	r4, r0
 800edd6:	460d      	mov	r5, r1
 800edd8:	f7f1 fbe6 	bl	80005a8 <__aeabi_dsub>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	e9ca 2300 	strd	r2, r3, [sl]
 800ede4:	4620      	mov	r0, r4
 800ede6:	4629      	mov	r1, r5
 800ede8:	f7f1 fbde 	bl	80005a8 <__aeabi_dsub>
 800edec:	a398      	add	r3, pc, #608	; (adr r3, 800f050 <__ieee754_rem_pio2+0x318>)
 800edee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf2:	e7db      	b.n	800edac <__ieee754_rem_pio2+0x74>
 800edf4:	f7f1 fbda 	bl	80005ac <__adddf3>
 800edf8:	45b0      	cmp	r8, r6
 800edfa:	4604      	mov	r4, r0
 800edfc:	460d      	mov	r5, r1
 800edfe:	d016      	beq.n	800ee2e <__ieee754_rem_pio2+0xf6>
 800ee00:	a38f      	add	r3, pc, #572	; (adr r3, 800f040 <__ieee754_rem_pio2+0x308>)
 800ee02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee06:	f7f1 fbd1 	bl	80005ac <__adddf3>
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	e9ca 2300 	strd	r2, r3, [sl]
 800ee12:	4620      	mov	r0, r4
 800ee14:	4629      	mov	r1, r5
 800ee16:	f7f1 fbc7 	bl	80005a8 <__aeabi_dsub>
 800ee1a:	a389      	add	r3, pc, #548	; (adr r3, 800f040 <__ieee754_rem_pio2+0x308>)
 800ee1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee20:	f7f1 fbc4 	bl	80005ac <__adddf3>
 800ee24:	f04f 3bff 	mov.w	fp, #4294967295
 800ee28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ee2c:	e7c4      	b.n	800edb8 <__ieee754_rem_pio2+0x80>
 800ee2e:	a386      	add	r3, pc, #536	; (adr r3, 800f048 <__ieee754_rem_pio2+0x310>)
 800ee30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee34:	f7f1 fbba 	bl	80005ac <__adddf3>
 800ee38:	a385      	add	r3, pc, #532	; (adr r3, 800f050 <__ieee754_rem_pio2+0x318>)
 800ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3e:	4604      	mov	r4, r0
 800ee40:	460d      	mov	r5, r1
 800ee42:	f7f1 fbb3 	bl	80005ac <__adddf3>
 800ee46:	4602      	mov	r2, r0
 800ee48:	460b      	mov	r3, r1
 800ee4a:	e9ca 2300 	strd	r2, r3, [sl]
 800ee4e:	4620      	mov	r0, r4
 800ee50:	4629      	mov	r1, r5
 800ee52:	f7f1 fba9 	bl	80005a8 <__aeabi_dsub>
 800ee56:	a37e      	add	r3, pc, #504	; (adr r3, 800f050 <__ieee754_rem_pio2+0x318>)
 800ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5c:	e7e0      	b.n	800ee20 <__ieee754_rem_pio2+0xe8>
 800ee5e:	4b87      	ldr	r3, [pc, #540]	; (800f07c <__ieee754_rem_pio2+0x344>)
 800ee60:	4598      	cmp	r8, r3
 800ee62:	f300 80d9 	bgt.w	800f018 <__ieee754_rem_pio2+0x2e0>
 800ee66:	f000 ffef 	bl	800fe48 <fabs>
 800ee6a:	ec55 4b10 	vmov	r4, r5, d0
 800ee6e:	ee10 0a10 	vmov	r0, s0
 800ee72:	a379      	add	r3, pc, #484	; (adr r3, 800f058 <__ieee754_rem_pio2+0x320>)
 800ee74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee78:	4629      	mov	r1, r5
 800ee7a:	f7f1 fd4d 	bl	8000918 <__aeabi_dmul>
 800ee7e:	4b80      	ldr	r3, [pc, #512]	; (800f080 <__ieee754_rem_pio2+0x348>)
 800ee80:	2200      	movs	r2, #0
 800ee82:	f7f1 fb93 	bl	80005ac <__adddf3>
 800ee86:	f7f1 ffe1 	bl	8000e4c <__aeabi_d2iz>
 800ee8a:	4683      	mov	fp, r0
 800ee8c:	f7f1 fcda 	bl	8000844 <__aeabi_i2d>
 800ee90:	4602      	mov	r2, r0
 800ee92:	460b      	mov	r3, r1
 800ee94:	ec43 2b18 	vmov	d8, r2, r3
 800ee98:	a367      	add	r3, pc, #412	; (adr r3, 800f038 <__ieee754_rem_pio2+0x300>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 fd3b 	bl	8000918 <__aeabi_dmul>
 800eea2:	4602      	mov	r2, r0
 800eea4:	460b      	mov	r3, r1
 800eea6:	4620      	mov	r0, r4
 800eea8:	4629      	mov	r1, r5
 800eeaa:	f7f1 fb7d 	bl	80005a8 <__aeabi_dsub>
 800eeae:	a364      	add	r3, pc, #400	; (adr r3, 800f040 <__ieee754_rem_pio2+0x308>)
 800eeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb4:	4606      	mov	r6, r0
 800eeb6:	460f      	mov	r7, r1
 800eeb8:	ec51 0b18 	vmov	r0, r1, d8
 800eebc:	f7f1 fd2c 	bl	8000918 <__aeabi_dmul>
 800eec0:	f1bb 0f1f 	cmp.w	fp, #31
 800eec4:	4604      	mov	r4, r0
 800eec6:	460d      	mov	r5, r1
 800eec8:	dc0d      	bgt.n	800eee6 <__ieee754_rem_pio2+0x1ae>
 800eeca:	4b6e      	ldr	r3, [pc, #440]	; (800f084 <__ieee754_rem_pio2+0x34c>)
 800eecc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800eed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eed4:	4543      	cmp	r3, r8
 800eed6:	d006      	beq.n	800eee6 <__ieee754_rem_pio2+0x1ae>
 800eed8:	4622      	mov	r2, r4
 800eeda:	462b      	mov	r3, r5
 800eedc:	4630      	mov	r0, r6
 800eede:	4639      	mov	r1, r7
 800eee0:	f7f1 fb62 	bl	80005a8 <__aeabi_dsub>
 800eee4:	e00f      	b.n	800ef06 <__ieee754_rem_pio2+0x1ce>
 800eee6:	462b      	mov	r3, r5
 800eee8:	4622      	mov	r2, r4
 800eeea:	4630      	mov	r0, r6
 800eeec:	4639      	mov	r1, r7
 800eeee:	f7f1 fb5b 	bl	80005a8 <__aeabi_dsub>
 800eef2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eef6:	9303      	str	r3, [sp, #12]
 800eef8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eefc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800ef00:	f1b8 0f10 	cmp.w	r8, #16
 800ef04:	dc02      	bgt.n	800ef0c <__ieee754_rem_pio2+0x1d4>
 800ef06:	e9ca 0100 	strd	r0, r1, [sl]
 800ef0a:	e039      	b.n	800ef80 <__ieee754_rem_pio2+0x248>
 800ef0c:	a34e      	add	r3, pc, #312	; (adr r3, 800f048 <__ieee754_rem_pio2+0x310>)
 800ef0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef12:	ec51 0b18 	vmov	r0, r1, d8
 800ef16:	f7f1 fcff 	bl	8000918 <__aeabi_dmul>
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	460d      	mov	r5, r1
 800ef1e:	4602      	mov	r2, r0
 800ef20:	460b      	mov	r3, r1
 800ef22:	4630      	mov	r0, r6
 800ef24:	4639      	mov	r1, r7
 800ef26:	f7f1 fb3f 	bl	80005a8 <__aeabi_dsub>
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	4680      	mov	r8, r0
 800ef30:	4689      	mov	r9, r1
 800ef32:	4630      	mov	r0, r6
 800ef34:	4639      	mov	r1, r7
 800ef36:	f7f1 fb37 	bl	80005a8 <__aeabi_dsub>
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	462b      	mov	r3, r5
 800ef3e:	f7f1 fb33 	bl	80005a8 <__aeabi_dsub>
 800ef42:	a343      	add	r3, pc, #268	; (adr r3, 800f050 <__ieee754_rem_pio2+0x318>)
 800ef44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef48:	4604      	mov	r4, r0
 800ef4a:	460d      	mov	r5, r1
 800ef4c:	ec51 0b18 	vmov	r0, r1, d8
 800ef50:	f7f1 fce2 	bl	8000918 <__aeabi_dmul>
 800ef54:	4622      	mov	r2, r4
 800ef56:	462b      	mov	r3, r5
 800ef58:	f7f1 fb26 	bl	80005a8 <__aeabi_dsub>
 800ef5c:	4602      	mov	r2, r0
 800ef5e:	460b      	mov	r3, r1
 800ef60:	4604      	mov	r4, r0
 800ef62:	460d      	mov	r5, r1
 800ef64:	4640      	mov	r0, r8
 800ef66:	4649      	mov	r1, r9
 800ef68:	f7f1 fb1e 	bl	80005a8 <__aeabi_dsub>
 800ef6c:	9a03      	ldr	r2, [sp, #12]
 800ef6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ef72:	1ad3      	subs	r3, r2, r3
 800ef74:	2b31      	cmp	r3, #49	; 0x31
 800ef76:	dc24      	bgt.n	800efc2 <__ieee754_rem_pio2+0x28a>
 800ef78:	e9ca 0100 	strd	r0, r1, [sl]
 800ef7c:	4646      	mov	r6, r8
 800ef7e:	464f      	mov	r7, r9
 800ef80:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef84:	4630      	mov	r0, r6
 800ef86:	4642      	mov	r2, r8
 800ef88:	464b      	mov	r3, r9
 800ef8a:	4639      	mov	r1, r7
 800ef8c:	f7f1 fb0c 	bl	80005a8 <__aeabi_dsub>
 800ef90:	462b      	mov	r3, r5
 800ef92:	4622      	mov	r2, r4
 800ef94:	f7f1 fb08 	bl	80005a8 <__aeabi_dsub>
 800ef98:	9b02      	ldr	r3, [sp, #8]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800efa0:	f6bf af0a 	bge.w	800edb8 <__ieee754_rem_pio2+0x80>
 800efa4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800efa8:	f8ca 3004 	str.w	r3, [sl, #4]
 800efac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efb0:	f8ca 8000 	str.w	r8, [sl]
 800efb4:	f8ca 0008 	str.w	r0, [sl, #8]
 800efb8:	f8ca 300c 	str.w	r3, [sl, #12]
 800efbc:	f1cb 0b00 	rsb	fp, fp, #0
 800efc0:	e6fa      	b.n	800edb8 <__ieee754_rem_pio2+0x80>
 800efc2:	a327      	add	r3, pc, #156	; (adr r3, 800f060 <__ieee754_rem_pio2+0x328>)
 800efc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc8:	ec51 0b18 	vmov	r0, r1, d8
 800efcc:	f7f1 fca4 	bl	8000918 <__aeabi_dmul>
 800efd0:	4604      	mov	r4, r0
 800efd2:	460d      	mov	r5, r1
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	4640      	mov	r0, r8
 800efda:	4649      	mov	r1, r9
 800efdc:	f7f1 fae4 	bl	80005a8 <__aeabi_dsub>
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	4606      	mov	r6, r0
 800efe6:	460f      	mov	r7, r1
 800efe8:	4640      	mov	r0, r8
 800efea:	4649      	mov	r1, r9
 800efec:	f7f1 fadc 	bl	80005a8 <__aeabi_dsub>
 800eff0:	4622      	mov	r2, r4
 800eff2:	462b      	mov	r3, r5
 800eff4:	f7f1 fad8 	bl	80005a8 <__aeabi_dsub>
 800eff8:	a31b      	add	r3, pc, #108	; (adr r3, 800f068 <__ieee754_rem_pio2+0x330>)
 800effa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effe:	4604      	mov	r4, r0
 800f000:	460d      	mov	r5, r1
 800f002:	ec51 0b18 	vmov	r0, r1, d8
 800f006:	f7f1 fc87 	bl	8000918 <__aeabi_dmul>
 800f00a:	4622      	mov	r2, r4
 800f00c:	462b      	mov	r3, r5
 800f00e:	f7f1 facb 	bl	80005a8 <__aeabi_dsub>
 800f012:	4604      	mov	r4, r0
 800f014:	460d      	mov	r5, r1
 800f016:	e75f      	b.n	800eed8 <__ieee754_rem_pio2+0x1a0>
 800f018:	4b1b      	ldr	r3, [pc, #108]	; (800f088 <__ieee754_rem_pio2+0x350>)
 800f01a:	4598      	cmp	r8, r3
 800f01c:	dd36      	ble.n	800f08c <__ieee754_rem_pio2+0x354>
 800f01e:	ee10 2a10 	vmov	r2, s0
 800f022:	462b      	mov	r3, r5
 800f024:	4620      	mov	r0, r4
 800f026:	4629      	mov	r1, r5
 800f028:	f7f1 fabe 	bl	80005a8 <__aeabi_dsub>
 800f02c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f030:	e9ca 0100 	strd	r0, r1, [sl]
 800f034:	e694      	b.n	800ed60 <__ieee754_rem_pio2+0x28>
 800f036:	bf00      	nop
 800f038:	54400000 	.word	0x54400000
 800f03c:	3ff921fb 	.word	0x3ff921fb
 800f040:	1a626331 	.word	0x1a626331
 800f044:	3dd0b461 	.word	0x3dd0b461
 800f048:	1a600000 	.word	0x1a600000
 800f04c:	3dd0b461 	.word	0x3dd0b461
 800f050:	2e037073 	.word	0x2e037073
 800f054:	3ba3198a 	.word	0x3ba3198a
 800f058:	6dc9c883 	.word	0x6dc9c883
 800f05c:	3fe45f30 	.word	0x3fe45f30
 800f060:	2e000000 	.word	0x2e000000
 800f064:	3ba3198a 	.word	0x3ba3198a
 800f068:	252049c1 	.word	0x252049c1
 800f06c:	397b839a 	.word	0x397b839a
 800f070:	3fe921fb 	.word	0x3fe921fb
 800f074:	4002d97b 	.word	0x4002d97b
 800f078:	3ff921fb 	.word	0x3ff921fb
 800f07c:	413921fb 	.word	0x413921fb
 800f080:	3fe00000 	.word	0x3fe00000
 800f084:	080106a0 	.word	0x080106a0
 800f088:	7fefffff 	.word	0x7fefffff
 800f08c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f090:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f094:	ee10 0a10 	vmov	r0, s0
 800f098:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f09c:	ee10 6a10 	vmov	r6, s0
 800f0a0:	460f      	mov	r7, r1
 800f0a2:	f7f1 fed3 	bl	8000e4c <__aeabi_d2iz>
 800f0a6:	f7f1 fbcd 	bl	8000844 <__aeabi_i2d>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	4630      	mov	r0, r6
 800f0b0:	4639      	mov	r1, r7
 800f0b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f0b6:	f7f1 fa77 	bl	80005a8 <__aeabi_dsub>
 800f0ba:	4b23      	ldr	r3, [pc, #140]	; (800f148 <__ieee754_rem_pio2+0x410>)
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f7f1 fc2b 	bl	8000918 <__aeabi_dmul>
 800f0c2:	460f      	mov	r7, r1
 800f0c4:	4606      	mov	r6, r0
 800f0c6:	f7f1 fec1 	bl	8000e4c <__aeabi_d2iz>
 800f0ca:	f7f1 fbbb 	bl	8000844 <__aeabi_i2d>
 800f0ce:	4602      	mov	r2, r0
 800f0d0:	460b      	mov	r3, r1
 800f0d2:	4630      	mov	r0, r6
 800f0d4:	4639      	mov	r1, r7
 800f0d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f0da:	f7f1 fa65 	bl	80005a8 <__aeabi_dsub>
 800f0de:	4b1a      	ldr	r3, [pc, #104]	; (800f148 <__ieee754_rem_pio2+0x410>)
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	f7f1 fc19 	bl	8000918 <__aeabi_dmul>
 800f0e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f0ea:	ad04      	add	r5, sp, #16
 800f0ec:	f04f 0803 	mov.w	r8, #3
 800f0f0:	46a9      	mov	r9, r5
 800f0f2:	2600      	movs	r6, #0
 800f0f4:	2700      	movs	r7, #0
 800f0f6:	4632      	mov	r2, r6
 800f0f8:	463b      	mov	r3, r7
 800f0fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f0fe:	46c3      	mov	fp, r8
 800f100:	3d08      	subs	r5, #8
 800f102:	f108 38ff 	add.w	r8, r8, #4294967295
 800f106:	f7f1 fe6f 	bl	8000de8 <__aeabi_dcmpeq>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	d1f3      	bne.n	800f0f6 <__ieee754_rem_pio2+0x3be>
 800f10e:	4b0f      	ldr	r3, [pc, #60]	; (800f14c <__ieee754_rem_pio2+0x414>)
 800f110:	9301      	str	r3, [sp, #4]
 800f112:	2302      	movs	r3, #2
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	4622      	mov	r2, r4
 800f118:	465b      	mov	r3, fp
 800f11a:	4651      	mov	r1, sl
 800f11c:	4648      	mov	r0, r9
 800f11e:	f000 f8e3 	bl	800f2e8 <__kernel_rem_pio2>
 800f122:	9b02      	ldr	r3, [sp, #8]
 800f124:	2b00      	cmp	r3, #0
 800f126:	4683      	mov	fp, r0
 800f128:	f6bf ae46 	bge.w	800edb8 <__ieee754_rem_pio2+0x80>
 800f12c:	e9da 2100 	ldrd	r2, r1, [sl]
 800f130:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f134:	e9ca 2300 	strd	r2, r3, [sl]
 800f138:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f13c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f140:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f144:	e73a      	b.n	800efbc <__ieee754_rem_pio2+0x284>
 800f146:	bf00      	nop
 800f148:	41700000 	.word	0x41700000
 800f14c:	08010720 	.word	0x08010720

0800f150 <__ieee754_sqrtf>:
 800f150:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f154:	4770      	bx	lr
	...

0800f158 <__kernel_cos>:
 800f158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f15c:	ec57 6b10 	vmov	r6, r7, d0
 800f160:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f164:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f168:	ed8d 1b00 	vstr	d1, [sp]
 800f16c:	da07      	bge.n	800f17e <__kernel_cos+0x26>
 800f16e:	ee10 0a10 	vmov	r0, s0
 800f172:	4639      	mov	r1, r7
 800f174:	f7f1 fe6a 	bl	8000e4c <__aeabi_d2iz>
 800f178:	2800      	cmp	r0, #0
 800f17a:	f000 8088 	beq.w	800f28e <__kernel_cos+0x136>
 800f17e:	4632      	mov	r2, r6
 800f180:	463b      	mov	r3, r7
 800f182:	4630      	mov	r0, r6
 800f184:	4639      	mov	r1, r7
 800f186:	f7f1 fbc7 	bl	8000918 <__aeabi_dmul>
 800f18a:	4b51      	ldr	r3, [pc, #324]	; (800f2d0 <__kernel_cos+0x178>)
 800f18c:	2200      	movs	r2, #0
 800f18e:	4604      	mov	r4, r0
 800f190:	460d      	mov	r5, r1
 800f192:	f7f1 fbc1 	bl	8000918 <__aeabi_dmul>
 800f196:	a340      	add	r3, pc, #256	; (adr r3, 800f298 <__kernel_cos+0x140>)
 800f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19c:	4682      	mov	sl, r0
 800f19e:	468b      	mov	fp, r1
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	4629      	mov	r1, r5
 800f1a4:	f7f1 fbb8 	bl	8000918 <__aeabi_dmul>
 800f1a8:	a33d      	add	r3, pc, #244	; (adr r3, 800f2a0 <__kernel_cos+0x148>)
 800f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ae:	f7f1 f9fd 	bl	80005ac <__adddf3>
 800f1b2:	4622      	mov	r2, r4
 800f1b4:	462b      	mov	r3, r5
 800f1b6:	f7f1 fbaf 	bl	8000918 <__aeabi_dmul>
 800f1ba:	a33b      	add	r3, pc, #236	; (adr r3, 800f2a8 <__kernel_cos+0x150>)
 800f1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c0:	f7f1 f9f2 	bl	80005a8 <__aeabi_dsub>
 800f1c4:	4622      	mov	r2, r4
 800f1c6:	462b      	mov	r3, r5
 800f1c8:	f7f1 fba6 	bl	8000918 <__aeabi_dmul>
 800f1cc:	a338      	add	r3, pc, #224	; (adr r3, 800f2b0 <__kernel_cos+0x158>)
 800f1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d2:	f7f1 f9eb 	bl	80005ac <__adddf3>
 800f1d6:	4622      	mov	r2, r4
 800f1d8:	462b      	mov	r3, r5
 800f1da:	f7f1 fb9d 	bl	8000918 <__aeabi_dmul>
 800f1de:	a336      	add	r3, pc, #216	; (adr r3, 800f2b8 <__kernel_cos+0x160>)
 800f1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e4:	f7f1 f9e0 	bl	80005a8 <__aeabi_dsub>
 800f1e8:	4622      	mov	r2, r4
 800f1ea:	462b      	mov	r3, r5
 800f1ec:	f7f1 fb94 	bl	8000918 <__aeabi_dmul>
 800f1f0:	a333      	add	r3, pc, #204	; (adr r3, 800f2c0 <__kernel_cos+0x168>)
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	f7f1 f9d9 	bl	80005ac <__adddf3>
 800f1fa:	4622      	mov	r2, r4
 800f1fc:	462b      	mov	r3, r5
 800f1fe:	f7f1 fb8b 	bl	8000918 <__aeabi_dmul>
 800f202:	4622      	mov	r2, r4
 800f204:	462b      	mov	r3, r5
 800f206:	f7f1 fb87 	bl	8000918 <__aeabi_dmul>
 800f20a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f20e:	4604      	mov	r4, r0
 800f210:	460d      	mov	r5, r1
 800f212:	4630      	mov	r0, r6
 800f214:	4639      	mov	r1, r7
 800f216:	f7f1 fb7f 	bl	8000918 <__aeabi_dmul>
 800f21a:	460b      	mov	r3, r1
 800f21c:	4602      	mov	r2, r0
 800f21e:	4629      	mov	r1, r5
 800f220:	4620      	mov	r0, r4
 800f222:	f7f1 f9c1 	bl	80005a8 <__aeabi_dsub>
 800f226:	4b2b      	ldr	r3, [pc, #172]	; (800f2d4 <__kernel_cos+0x17c>)
 800f228:	4598      	cmp	r8, r3
 800f22a:	4606      	mov	r6, r0
 800f22c:	460f      	mov	r7, r1
 800f22e:	dc10      	bgt.n	800f252 <__kernel_cos+0xfa>
 800f230:	4602      	mov	r2, r0
 800f232:	460b      	mov	r3, r1
 800f234:	4650      	mov	r0, sl
 800f236:	4659      	mov	r1, fp
 800f238:	f7f1 f9b6 	bl	80005a8 <__aeabi_dsub>
 800f23c:	460b      	mov	r3, r1
 800f23e:	4926      	ldr	r1, [pc, #152]	; (800f2d8 <__kernel_cos+0x180>)
 800f240:	4602      	mov	r2, r0
 800f242:	2000      	movs	r0, #0
 800f244:	f7f1 f9b0 	bl	80005a8 <__aeabi_dsub>
 800f248:	ec41 0b10 	vmov	d0, r0, r1
 800f24c:	b003      	add	sp, #12
 800f24e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f252:	4b22      	ldr	r3, [pc, #136]	; (800f2dc <__kernel_cos+0x184>)
 800f254:	4920      	ldr	r1, [pc, #128]	; (800f2d8 <__kernel_cos+0x180>)
 800f256:	4598      	cmp	r8, r3
 800f258:	bfcc      	ite	gt
 800f25a:	4d21      	ldrgt	r5, [pc, #132]	; (800f2e0 <__kernel_cos+0x188>)
 800f25c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800f260:	2400      	movs	r4, #0
 800f262:	4622      	mov	r2, r4
 800f264:	462b      	mov	r3, r5
 800f266:	2000      	movs	r0, #0
 800f268:	f7f1 f99e 	bl	80005a8 <__aeabi_dsub>
 800f26c:	4622      	mov	r2, r4
 800f26e:	4680      	mov	r8, r0
 800f270:	4689      	mov	r9, r1
 800f272:	462b      	mov	r3, r5
 800f274:	4650      	mov	r0, sl
 800f276:	4659      	mov	r1, fp
 800f278:	f7f1 f996 	bl	80005a8 <__aeabi_dsub>
 800f27c:	4632      	mov	r2, r6
 800f27e:	463b      	mov	r3, r7
 800f280:	f7f1 f992 	bl	80005a8 <__aeabi_dsub>
 800f284:	4602      	mov	r2, r0
 800f286:	460b      	mov	r3, r1
 800f288:	4640      	mov	r0, r8
 800f28a:	4649      	mov	r1, r9
 800f28c:	e7da      	b.n	800f244 <__kernel_cos+0xec>
 800f28e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800f2c8 <__kernel_cos+0x170>
 800f292:	e7db      	b.n	800f24c <__kernel_cos+0xf4>
 800f294:	f3af 8000 	nop.w
 800f298:	be8838d4 	.word	0xbe8838d4
 800f29c:	bda8fae9 	.word	0xbda8fae9
 800f2a0:	bdb4b1c4 	.word	0xbdb4b1c4
 800f2a4:	3e21ee9e 	.word	0x3e21ee9e
 800f2a8:	809c52ad 	.word	0x809c52ad
 800f2ac:	3e927e4f 	.word	0x3e927e4f
 800f2b0:	19cb1590 	.word	0x19cb1590
 800f2b4:	3efa01a0 	.word	0x3efa01a0
 800f2b8:	16c15177 	.word	0x16c15177
 800f2bc:	3f56c16c 	.word	0x3f56c16c
 800f2c0:	5555554c 	.word	0x5555554c
 800f2c4:	3fa55555 	.word	0x3fa55555
 800f2c8:	00000000 	.word	0x00000000
 800f2cc:	3ff00000 	.word	0x3ff00000
 800f2d0:	3fe00000 	.word	0x3fe00000
 800f2d4:	3fd33332 	.word	0x3fd33332
 800f2d8:	3ff00000 	.word	0x3ff00000
 800f2dc:	3fe90000 	.word	0x3fe90000
 800f2e0:	3fd20000 	.word	0x3fd20000
 800f2e4:	00000000 	.word	0x00000000

0800f2e8 <__kernel_rem_pio2>:
 800f2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2ec:	ed2d 8b02 	vpush	{d8}
 800f2f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800f2f4:	f112 0f14 	cmn.w	r2, #20
 800f2f8:	9308      	str	r3, [sp, #32]
 800f2fa:	9101      	str	r1, [sp, #4]
 800f2fc:	4bc4      	ldr	r3, [pc, #784]	; (800f610 <__kernel_rem_pio2+0x328>)
 800f2fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800f300:	900b      	str	r0, [sp, #44]	; 0x2c
 800f302:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f306:	9302      	str	r3, [sp, #8]
 800f308:	9b08      	ldr	r3, [sp, #32]
 800f30a:	f103 33ff 	add.w	r3, r3, #4294967295
 800f30e:	bfa8      	it	ge
 800f310:	1ed4      	subge	r4, r2, #3
 800f312:	9306      	str	r3, [sp, #24]
 800f314:	bfb2      	itee	lt
 800f316:	2400      	movlt	r4, #0
 800f318:	2318      	movge	r3, #24
 800f31a:	fb94 f4f3 	sdivge	r4, r4, r3
 800f31e:	f06f 0317 	mvn.w	r3, #23
 800f322:	fb04 3303 	mla	r3, r4, r3, r3
 800f326:	eb03 0a02 	add.w	sl, r3, r2
 800f32a:	9b02      	ldr	r3, [sp, #8]
 800f32c:	9a06      	ldr	r2, [sp, #24]
 800f32e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800f600 <__kernel_rem_pio2+0x318>
 800f332:	eb03 0802 	add.w	r8, r3, r2
 800f336:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f338:	1aa7      	subs	r7, r4, r2
 800f33a:	ae22      	add	r6, sp, #136	; 0x88
 800f33c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f340:	2500      	movs	r5, #0
 800f342:	4545      	cmp	r5, r8
 800f344:	dd13      	ble.n	800f36e <__kernel_rem_pio2+0x86>
 800f346:	9b08      	ldr	r3, [sp, #32]
 800f348:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800f600 <__kernel_rem_pio2+0x318>
 800f34c:	aa22      	add	r2, sp, #136	; 0x88
 800f34e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f352:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800f356:	f04f 0800 	mov.w	r8, #0
 800f35a:	9b02      	ldr	r3, [sp, #8]
 800f35c:	4598      	cmp	r8, r3
 800f35e:	dc2f      	bgt.n	800f3c0 <__kernel_rem_pio2+0xd8>
 800f360:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f364:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800f368:	462f      	mov	r7, r5
 800f36a:	2600      	movs	r6, #0
 800f36c:	e01b      	b.n	800f3a6 <__kernel_rem_pio2+0xbe>
 800f36e:	42ef      	cmn	r7, r5
 800f370:	d407      	bmi.n	800f382 <__kernel_rem_pio2+0x9a>
 800f372:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f376:	f7f1 fa65 	bl	8000844 <__aeabi_i2d>
 800f37a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f37e:	3501      	adds	r5, #1
 800f380:	e7df      	b.n	800f342 <__kernel_rem_pio2+0x5a>
 800f382:	ec51 0b18 	vmov	r0, r1, d8
 800f386:	e7f8      	b.n	800f37a <__kernel_rem_pio2+0x92>
 800f388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f38c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f390:	f7f1 fac2 	bl	8000918 <__aeabi_dmul>
 800f394:	4602      	mov	r2, r0
 800f396:	460b      	mov	r3, r1
 800f398:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f39c:	f7f1 f906 	bl	80005ac <__adddf3>
 800f3a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3a4:	3601      	adds	r6, #1
 800f3a6:	9b06      	ldr	r3, [sp, #24]
 800f3a8:	429e      	cmp	r6, r3
 800f3aa:	f1a7 0708 	sub.w	r7, r7, #8
 800f3ae:	ddeb      	ble.n	800f388 <__kernel_rem_pio2+0xa0>
 800f3b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f3b4:	f108 0801 	add.w	r8, r8, #1
 800f3b8:	ecab 7b02 	vstmia	fp!, {d7}
 800f3bc:	3508      	adds	r5, #8
 800f3be:	e7cc      	b.n	800f35a <__kernel_rem_pio2+0x72>
 800f3c0:	9b02      	ldr	r3, [sp, #8]
 800f3c2:	aa0e      	add	r2, sp, #56	; 0x38
 800f3c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f3c8:	930d      	str	r3, [sp, #52]	; 0x34
 800f3ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800f3cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f3d0:	9c02      	ldr	r4, [sp, #8]
 800f3d2:	930c      	str	r3, [sp, #48]	; 0x30
 800f3d4:	00e3      	lsls	r3, r4, #3
 800f3d6:	930a      	str	r3, [sp, #40]	; 0x28
 800f3d8:	ab9a      	add	r3, sp, #616	; 0x268
 800f3da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f3de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800f3e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f3e6:	ab72      	add	r3, sp, #456	; 0x1c8
 800f3e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800f3ec:	46c3      	mov	fp, r8
 800f3ee:	46a1      	mov	r9, r4
 800f3f0:	f1b9 0f00 	cmp.w	r9, #0
 800f3f4:	f1a5 0508 	sub.w	r5, r5, #8
 800f3f8:	dc77      	bgt.n	800f4ea <__kernel_rem_pio2+0x202>
 800f3fa:	ec47 6b10 	vmov	d0, r6, r7
 800f3fe:	4650      	mov	r0, sl
 800f400:	f000 fdae 	bl	800ff60 <scalbn>
 800f404:	ec57 6b10 	vmov	r6, r7, d0
 800f408:	2200      	movs	r2, #0
 800f40a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800f40e:	ee10 0a10 	vmov	r0, s0
 800f412:	4639      	mov	r1, r7
 800f414:	f7f1 fa80 	bl	8000918 <__aeabi_dmul>
 800f418:	ec41 0b10 	vmov	d0, r0, r1
 800f41c:	f000 fd20 	bl	800fe60 <floor>
 800f420:	4b7c      	ldr	r3, [pc, #496]	; (800f614 <__kernel_rem_pio2+0x32c>)
 800f422:	ec51 0b10 	vmov	r0, r1, d0
 800f426:	2200      	movs	r2, #0
 800f428:	f7f1 fa76 	bl	8000918 <__aeabi_dmul>
 800f42c:	4602      	mov	r2, r0
 800f42e:	460b      	mov	r3, r1
 800f430:	4630      	mov	r0, r6
 800f432:	4639      	mov	r1, r7
 800f434:	f7f1 f8b8 	bl	80005a8 <__aeabi_dsub>
 800f438:	460f      	mov	r7, r1
 800f43a:	4606      	mov	r6, r0
 800f43c:	f7f1 fd06 	bl	8000e4c <__aeabi_d2iz>
 800f440:	9004      	str	r0, [sp, #16]
 800f442:	f7f1 f9ff 	bl	8000844 <__aeabi_i2d>
 800f446:	4602      	mov	r2, r0
 800f448:	460b      	mov	r3, r1
 800f44a:	4630      	mov	r0, r6
 800f44c:	4639      	mov	r1, r7
 800f44e:	f7f1 f8ab 	bl	80005a8 <__aeabi_dsub>
 800f452:	f1ba 0f00 	cmp.w	sl, #0
 800f456:	4606      	mov	r6, r0
 800f458:	460f      	mov	r7, r1
 800f45a:	dd6d      	ble.n	800f538 <__kernel_rem_pio2+0x250>
 800f45c:	1e62      	subs	r2, r4, #1
 800f45e:	ab0e      	add	r3, sp, #56	; 0x38
 800f460:	9d04      	ldr	r5, [sp, #16]
 800f462:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f466:	f1ca 0118 	rsb	r1, sl, #24
 800f46a:	fa40 f301 	asr.w	r3, r0, r1
 800f46e:	441d      	add	r5, r3
 800f470:	408b      	lsls	r3, r1
 800f472:	1ac0      	subs	r0, r0, r3
 800f474:	ab0e      	add	r3, sp, #56	; 0x38
 800f476:	9504      	str	r5, [sp, #16]
 800f478:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f47c:	f1ca 0317 	rsb	r3, sl, #23
 800f480:	fa40 fb03 	asr.w	fp, r0, r3
 800f484:	f1bb 0f00 	cmp.w	fp, #0
 800f488:	dd65      	ble.n	800f556 <__kernel_rem_pio2+0x26e>
 800f48a:	9b04      	ldr	r3, [sp, #16]
 800f48c:	2200      	movs	r2, #0
 800f48e:	3301      	adds	r3, #1
 800f490:	9304      	str	r3, [sp, #16]
 800f492:	4615      	mov	r5, r2
 800f494:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f498:	4294      	cmp	r4, r2
 800f49a:	f300 809c 	bgt.w	800f5d6 <__kernel_rem_pio2+0x2ee>
 800f49e:	f1ba 0f00 	cmp.w	sl, #0
 800f4a2:	dd07      	ble.n	800f4b4 <__kernel_rem_pio2+0x1cc>
 800f4a4:	f1ba 0f01 	cmp.w	sl, #1
 800f4a8:	f000 80c0 	beq.w	800f62c <__kernel_rem_pio2+0x344>
 800f4ac:	f1ba 0f02 	cmp.w	sl, #2
 800f4b0:	f000 80c6 	beq.w	800f640 <__kernel_rem_pio2+0x358>
 800f4b4:	f1bb 0f02 	cmp.w	fp, #2
 800f4b8:	d14d      	bne.n	800f556 <__kernel_rem_pio2+0x26e>
 800f4ba:	4632      	mov	r2, r6
 800f4bc:	463b      	mov	r3, r7
 800f4be:	4956      	ldr	r1, [pc, #344]	; (800f618 <__kernel_rem_pio2+0x330>)
 800f4c0:	2000      	movs	r0, #0
 800f4c2:	f7f1 f871 	bl	80005a8 <__aeabi_dsub>
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	460f      	mov	r7, r1
 800f4ca:	2d00      	cmp	r5, #0
 800f4cc:	d043      	beq.n	800f556 <__kernel_rem_pio2+0x26e>
 800f4ce:	4650      	mov	r0, sl
 800f4d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f608 <__kernel_rem_pio2+0x320>
 800f4d4:	f000 fd44 	bl	800ff60 <scalbn>
 800f4d8:	4630      	mov	r0, r6
 800f4da:	4639      	mov	r1, r7
 800f4dc:	ec53 2b10 	vmov	r2, r3, d0
 800f4e0:	f7f1 f862 	bl	80005a8 <__aeabi_dsub>
 800f4e4:	4606      	mov	r6, r0
 800f4e6:	460f      	mov	r7, r1
 800f4e8:	e035      	b.n	800f556 <__kernel_rem_pio2+0x26e>
 800f4ea:	4b4c      	ldr	r3, [pc, #304]	; (800f61c <__kernel_rem_pio2+0x334>)
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	4639      	mov	r1, r7
 800f4f2:	f7f1 fa11 	bl	8000918 <__aeabi_dmul>
 800f4f6:	f7f1 fca9 	bl	8000e4c <__aeabi_d2iz>
 800f4fa:	f7f1 f9a3 	bl	8000844 <__aeabi_i2d>
 800f4fe:	4602      	mov	r2, r0
 800f500:	460b      	mov	r3, r1
 800f502:	ec43 2b18 	vmov	d8, r2, r3
 800f506:	4b46      	ldr	r3, [pc, #280]	; (800f620 <__kernel_rem_pio2+0x338>)
 800f508:	2200      	movs	r2, #0
 800f50a:	f7f1 fa05 	bl	8000918 <__aeabi_dmul>
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	4630      	mov	r0, r6
 800f514:	4639      	mov	r1, r7
 800f516:	f7f1 f847 	bl	80005a8 <__aeabi_dsub>
 800f51a:	f7f1 fc97 	bl	8000e4c <__aeabi_d2iz>
 800f51e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f522:	f84b 0b04 	str.w	r0, [fp], #4
 800f526:	ec51 0b18 	vmov	r0, r1, d8
 800f52a:	f7f1 f83f 	bl	80005ac <__adddf3>
 800f52e:	f109 39ff 	add.w	r9, r9, #4294967295
 800f532:	4606      	mov	r6, r0
 800f534:	460f      	mov	r7, r1
 800f536:	e75b      	b.n	800f3f0 <__kernel_rem_pio2+0x108>
 800f538:	d106      	bne.n	800f548 <__kernel_rem_pio2+0x260>
 800f53a:	1e63      	subs	r3, r4, #1
 800f53c:	aa0e      	add	r2, sp, #56	; 0x38
 800f53e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f542:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f546:	e79d      	b.n	800f484 <__kernel_rem_pio2+0x19c>
 800f548:	4b36      	ldr	r3, [pc, #216]	; (800f624 <__kernel_rem_pio2+0x33c>)
 800f54a:	2200      	movs	r2, #0
 800f54c:	f7f1 fc6a 	bl	8000e24 <__aeabi_dcmpge>
 800f550:	2800      	cmp	r0, #0
 800f552:	d13d      	bne.n	800f5d0 <__kernel_rem_pio2+0x2e8>
 800f554:	4683      	mov	fp, r0
 800f556:	2200      	movs	r2, #0
 800f558:	2300      	movs	r3, #0
 800f55a:	4630      	mov	r0, r6
 800f55c:	4639      	mov	r1, r7
 800f55e:	f7f1 fc43 	bl	8000de8 <__aeabi_dcmpeq>
 800f562:	2800      	cmp	r0, #0
 800f564:	f000 80c0 	beq.w	800f6e8 <__kernel_rem_pio2+0x400>
 800f568:	1e65      	subs	r5, r4, #1
 800f56a:	462b      	mov	r3, r5
 800f56c:	2200      	movs	r2, #0
 800f56e:	9902      	ldr	r1, [sp, #8]
 800f570:	428b      	cmp	r3, r1
 800f572:	da6c      	bge.n	800f64e <__kernel_rem_pio2+0x366>
 800f574:	2a00      	cmp	r2, #0
 800f576:	f000 8089 	beq.w	800f68c <__kernel_rem_pio2+0x3a4>
 800f57a:	ab0e      	add	r3, sp, #56	; 0x38
 800f57c:	f1aa 0a18 	sub.w	sl, sl, #24
 800f580:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f584:	2b00      	cmp	r3, #0
 800f586:	f000 80ad 	beq.w	800f6e4 <__kernel_rem_pio2+0x3fc>
 800f58a:	4650      	mov	r0, sl
 800f58c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800f608 <__kernel_rem_pio2+0x320>
 800f590:	f000 fce6 	bl	800ff60 <scalbn>
 800f594:	ab9a      	add	r3, sp, #616	; 0x268
 800f596:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f59a:	ec57 6b10 	vmov	r6, r7, d0
 800f59e:	00ec      	lsls	r4, r5, #3
 800f5a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f5a4:	46aa      	mov	sl, r5
 800f5a6:	f1ba 0f00 	cmp.w	sl, #0
 800f5aa:	f280 80d6 	bge.w	800f75a <__kernel_rem_pio2+0x472>
 800f5ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800f600 <__kernel_rem_pio2+0x318>
 800f5b2:	462e      	mov	r6, r5
 800f5b4:	2e00      	cmp	r6, #0
 800f5b6:	f2c0 8104 	blt.w	800f7c2 <__kernel_rem_pio2+0x4da>
 800f5ba:	ab72      	add	r3, sp, #456	; 0x1c8
 800f5bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f5c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f628 <__kernel_rem_pio2+0x340>
 800f5c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f5c8:	f04f 0800 	mov.w	r8, #0
 800f5cc:	1baf      	subs	r7, r5, r6
 800f5ce:	e0ea      	b.n	800f7a6 <__kernel_rem_pio2+0x4be>
 800f5d0:	f04f 0b02 	mov.w	fp, #2
 800f5d4:	e759      	b.n	800f48a <__kernel_rem_pio2+0x1a2>
 800f5d6:	f8d8 3000 	ldr.w	r3, [r8]
 800f5da:	b955      	cbnz	r5, 800f5f2 <__kernel_rem_pio2+0x30a>
 800f5dc:	b123      	cbz	r3, 800f5e8 <__kernel_rem_pio2+0x300>
 800f5de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f5e2:	f8c8 3000 	str.w	r3, [r8]
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	3201      	adds	r2, #1
 800f5ea:	f108 0804 	add.w	r8, r8, #4
 800f5ee:	461d      	mov	r5, r3
 800f5f0:	e752      	b.n	800f498 <__kernel_rem_pio2+0x1b0>
 800f5f2:	1acb      	subs	r3, r1, r3
 800f5f4:	f8c8 3000 	str.w	r3, [r8]
 800f5f8:	462b      	mov	r3, r5
 800f5fa:	e7f5      	b.n	800f5e8 <__kernel_rem_pio2+0x300>
 800f5fc:	f3af 8000 	nop.w
	...
 800f60c:	3ff00000 	.word	0x3ff00000
 800f610:	08010868 	.word	0x08010868
 800f614:	40200000 	.word	0x40200000
 800f618:	3ff00000 	.word	0x3ff00000
 800f61c:	3e700000 	.word	0x3e700000
 800f620:	41700000 	.word	0x41700000
 800f624:	3fe00000 	.word	0x3fe00000
 800f628:	08010828 	.word	0x08010828
 800f62c:	1e62      	subs	r2, r4, #1
 800f62e:	ab0e      	add	r3, sp, #56	; 0x38
 800f630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f634:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f638:	a90e      	add	r1, sp, #56	; 0x38
 800f63a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f63e:	e739      	b.n	800f4b4 <__kernel_rem_pio2+0x1cc>
 800f640:	1e62      	subs	r2, r4, #1
 800f642:	ab0e      	add	r3, sp, #56	; 0x38
 800f644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f648:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f64c:	e7f4      	b.n	800f638 <__kernel_rem_pio2+0x350>
 800f64e:	a90e      	add	r1, sp, #56	; 0x38
 800f650:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f654:	3b01      	subs	r3, #1
 800f656:	430a      	orrs	r2, r1
 800f658:	e789      	b.n	800f56e <__kernel_rem_pio2+0x286>
 800f65a:	3301      	adds	r3, #1
 800f65c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f660:	2900      	cmp	r1, #0
 800f662:	d0fa      	beq.n	800f65a <__kernel_rem_pio2+0x372>
 800f664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f666:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f66a:	446a      	add	r2, sp
 800f66c:	3a98      	subs	r2, #152	; 0x98
 800f66e:	920a      	str	r2, [sp, #40]	; 0x28
 800f670:	9a08      	ldr	r2, [sp, #32]
 800f672:	18e3      	adds	r3, r4, r3
 800f674:	18a5      	adds	r5, r4, r2
 800f676:	aa22      	add	r2, sp, #136	; 0x88
 800f678:	f104 0801 	add.w	r8, r4, #1
 800f67c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f680:	9304      	str	r3, [sp, #16]
 800f682:	9b04      	ldr	r3, [sp, #16]
 800f684:	4543      	cmp	r3, r8
 800f686:	da04      	bge.n	800f692 <__kernel_rem_pio2+0x3aa>
 800f688:	461c      	mov	r4, r3
 800f68a:	e6a3      	b.n	800f3d4 <__kernel_rem_pio2+0xec>
 800f68c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f68e:	2301      	movs	r3, #1
 800f690:	e7e4      	b.n	800f65c <__kernel_rem_pio2+0x374>
 800f692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f694:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f698:	f7f1 f8d4 	bl	8000844 <__aeabi_i2d>
 800f69c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6a2:	46ab      	mov	fp, r5
 800f6a4:	461c      	mov	r4, r3
 800f6a6:	f04f 0900 	mov.w	r9, #0
 800f6aa:	2600      	movs	r6, #0
 800f6ac:	2700      	movs	r7, #0
 800f6ae:	9b06      	ldr	r3, [sp, #24]
 800f6b0:	4599      	cmp	r9, r3
 800f6b2:	dd06      	ble.n	800f6c2 <__kernel_rem_pio2+0x3da>
 800f6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f6ba:	f108 0801 	add.w	r8, r8, #1
 800f6be:	930a      	str	r3, [sp, #40]	; 0x28
 800f6c0:	e7df      	b.n	800f682 <__kernel_rem_pio2+0x39a>
 800f6c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f6c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f6ca:	f7f1 f925 	bl	8000918 <__aeabi_dmul>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	4639      	mov	r1, r7
 800f6d6:	f7f0 ff69 	bl	80005ac <__adddf3>
 800f6da:	f109 0901 	add.w	r9, r9, #1
 800f6de:	4606      	mov	r6, r0
 800f6e0:	460f      	mov	r7, r1
 800f6e2:	e7e4      	b.n	800f6ae <__kernel_rem_pio2+0x3c6>
 800f6e4:	3d01      	subs	r5, #1
 800f6e6:	e748      	b.n	800f57a <__kernel_rem_pio2+0x292>
 800f6e8:	ec47 6b10 	vmov	d0, r6, r7
 800f6ec:	f1ca 0000 	rsb	r0, sl, #0
 800f6f0:	f000 fc36 	bl	800ff60 <scalbn>
 800f6f4:	ec57 6b10 	vmov	r6, r7, d0
 800f6f8:	4ba0      	ldr	r3, [pc, #640]	; (800f97c <__kernel_rem_pio2+0x694>)
 800f6fa:	ee10 0a10 	vmov	r0, s0
 800f6fe:	2200      	movs	r2, #0
 800f700:	4639      	mov	r1, r7
 800f702:	f7f1 fb8f 	bl	8000e24 <__aeabi_dcmpge>
 800f706:	b1f8      	cbz	r0, 800f748 <__kernel_rem_pio2+0x460>
 800f708:	4b9d      	ldr	r3, [pc, #628]	; (800f980 <__kernel_rem_pio2+0x698>)
 800f70a:	2200      	movs	r2, #0
 800f70c:	4630      	mov	r0, r6
 800f70e:	4639      	mov	r1, r7
 800f710:	f7f1 f902 	bl	8000918 <__aeabi_dmul>
 800f714:	f7f1 fb9a 	bl	8000e4c <__aeabi_d2iz>
 800f718:	4680      	mov	r8, r0
 800f71a:	f7f1 f893 	bl	8000844 <__aeabi_i2d>
 800f71e:	4b97      	ldr	r3, [pc, #604]	; (800f97c <__kernel_rem_pio2+0x694>)
 800f720:	2200      	movs	r2, #0
 800f722:	f7f1 f8f9 	bl	8000918 <__aeabi_dmul>
 800f726:	460b      	mov	r3, r1
 800f728:	4602      	mov	r2, r0
 800f72a:	4639      	mov	r1, r7
 800f72c:	4630      	mov	r0, r6
 800f72e:	f7f0 ff3b 	bl	80005a8 <__aeabi_dsub>
 800f732:	f7f1 fb8b 	bl	8000e4c <__aeabi_d2iz>
 800f736:	1c65      	adds	r5, r4, #1
 800f738:	ab0e      	add	r3, sp, #56	; 0x38
 800f73a:	f10a 0a18 	add.w	sl, sl, #24
 800f73e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f742:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f746:	e720      	b.n	800f58a <__kernel_rem_pio2+0x2a2>
 800f748:	4630      	mov	r0, r6
 800f74a:	4639      	mov	r1, r7
 800f74c:	f7f1 fb7e 	bl	8000e4c <__aeabi_d2iz>
 800f750:	ab0e      	add	r3, sp, #56	; 0x38
 800f752:	4625      	mov	r5, r4
 800f754:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f758:	e717      	b.n	800f58a <__kernel_rem_pio2+0x2a2>
 800f75a:	ab0e      	add	r3, sp, #56	; 0x38
 800f75c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f760:	f7f1 f870 	bl	8000844 <__aeabi_i2d>
 800f764:	4632      	mov	r2, r6
 800f766:	463b      	mov	r3, r7
 800f768:	f7f1 f8d6 	bl	8000918 <__aeabi_dmul>
 800f76c:	4b84      	ldr	r3, [pc, #528]	; (800f980 <__kernel_rem_pio2+0x698>)
 800f76e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f772:	2200      	movs	r2, #0
 800f774:	4630      	mov	r0, r6
 800f776:	4639      	mov	r1, r7
 800f778:	f7f1 f8ce 	bl	8000918 <__aeabi_dmul>
 800f77c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f780:	4606      	mov	r6, r0
 800f782:	460f      	mov	r7, r1
 800f784:	e70f      	b.n	800f5a6 <__kernel_rem_pio2+0x2be>
 800f786:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f78a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f78e:	f7f1 f8c3 	bl	8000918 <__aeabi_dmul>
 800f792:	4602      	mov	r2, r0
 800f794:	460b      	mov	r3, r1
 800f796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f79a:	f7f0 ff07 	bl	80005ac <__adddf3>
 800f79e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f7a2:	f108 0801 	add.w	r8, r8, #1
 800f7a6:	9b02      	ldr	r3, [sp, #8]
 800f7a8:	4598      	cmp	r8, r3
 800f7aa:	dc01      	bgt.n	800f7b0 <__kernel_rem_pio2+0x4c8>
 800f7ac:	45b8      	cmp	r8, r7
 800f7ae:	ddea      	ble.n	800f786 <__kernel_rem_pio2+0x49e>
 800f7b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f7b4:	ab4a      	add	r3, sp, #296	; 0x128
 800f7b6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f7ba:	ed87 7b00 	vstr	d7, [r7]
 800f7be:	3e01      	subs	r6, #1
 800f7c0:	e6f8      	b.n	800f5b4 <__kernel_rem_pio2+0x2cc>
 800f7c2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	dc0b      	bgt.n	800f7e0 <__kernel_rem_pio2+0x4f8>
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	dc35      	bgt.n	800f838 <__kernel_rem_pio2+0x550>
 800f7cc:	d059      	beq.n	800f882 <__kernel_rem_pio2+0x59a>
 800f7ce:	9b04      	ldr	r3, [sp, #16]
 800f7d0:	f003 0007 	and.w	r0, r3, #7
 800f7d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f7d8:	ecbd 8b02 	vpop	{d8}
 800f7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f7e2:	2b03      	cmp	r3, #3
 800f7e4:	d1f3      	bne.n	800f7ce <__kernel_rem_pio2+0x4e6>
 800f7e6:	ab4a      	add	r3, sp, #296	; 0x128
 800f7e8:	4423      	add	r3, r4
 800f7ea:	9306      	str	r3, [sp, #24]
 800f7ec:	461c      	mov	r4, r3
 800f7ee:	469a      	mov	sl, r3
 800f7f0:	9502      	str	r5, [sp, #8]
 800f7f2:	9b02      	ldr	r3, [sp, #8]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	f1aa 0a08 	sub.w	sl, sl, #8
 800f7fa:	dc6b      	bgt.n	800f8d4 <__kernel_rem_pio2+0x5ec>
 800f7fc:	46aa      	mov	sl, r5
 800f7fe:	f1ba 0f01 	cmp.w	sl, #1
 800f802:	f1a4 0408 	sub.w	r4, r4, #8
 800f806:	f300 8085 	bgt.w	800f914 <__kernel_rem_pio2+0x62c>
 800f80a:	9c06      	ldr	r4, [sp, #24]
 800f80c:	2000      	movs	r0, #0
 800f80e:	3408      	adds	r4, #8
 800f810:	2100      	movs	r1, #0
 800f812:	2d01      	cmp	r5, #1
 800f814:	f300 809d 	bgt.w	800f952 <__kernel_rem_pio2+0x66a>
 800f818:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f81c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f820:	f1bb 0f00 	cmp.w	fp, #0
 800f824:	f040 809b 	bne.w	800f95e <__kernel_rem_pio2+0x676>
 800f828:	9b01      	ldr	r3, [sp, #4]
 800f82a:	e9c3 5600 	strd	r5, r6, [r3]
 800f82e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f832:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f836:	e7ca      	b.n	800f7ce <__kernel_rem_pio2+0x4e6>
 800f838:	3408      	adds	r4, #8
 800f83a:	ab4a      	add	r3, sp, #296	; 0x128
 800f83c:	441c      	add	r4, r3
 800f83e:	462e      	mov	r6, r5
 800f840:	2000      	movs	r0, #0
 800f842:	2100      	movs	r1, #0
 800f844:	2e00      	cmp	r6, #0
 800f846:	da36      	bge.n	800f8b6 <__kernel_rem_pio2+0x5ce>
 800f848:	f1bb 0f00 	cmp.w	fp, #0
 800f84c:	d039      	beq.n	800f8c2 <__kernel_rem_pio2+0x5da>
 800f84e:	4602      	mov	r2, r0
 800f850:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f854:	9c01      	ldr	r4, [sp, #4]
 800f856:	e9c4 2300 	strd	r2, r3, [r4]
 800f85a:	4602      	mov	r2, r0
 800f85c:	460b      	mov	r3, r1
 800f85e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f862:	f7f0 fea1 	bl	80005a8 <__aeabi_dsub>
 800f866:	ae4c      	add	r6, sp, #304	; 0x130
 800f868:	2401      	movs	r4, #1
 800f86a:	42a5      	cmp	r5, r4
 800f86c:	da2c      	bge.n	800f8c8 <__kernel_rem_pio2+0x5e0>
 800f86e:	f1bb 0f00 	cmp.w	fp, #0
 800f872:	d002      	beq.n	800f87a <__kernel_rem_pio2+0x592>
 800f874:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f878:	4619      	mov	r1, r3
 800f87a:	9b01      	ldr	r3, [sp, #4]
 800f87c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f880:	e7a5      	b.n	800f7ce <__kernel_rem_pio2+0x4e6>
 800f882:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f886:	eb0d 0403 	add.w	r4, sp, r3
 800f88a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f88e:	2000      	movs	r0, #0
 800f890:	2100      	movs	r1, #0
 800f892:	2d00      	cmp	r5, #0
 800f894:	da09      	bge.n	800f8aa <__kernel_rem_pio2+0x5c2>
 800f896:	f1bb 0f00 	cmp.w	fp, #0
 800f89a:	d002      	beq.n	800f8a2 <__kernel_rem_pio2+0x5ba>
 800f89c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	9b01      	ldr	r3, [sp, #4]
 800f8a4:	e9c3 0100 	strd	r0, r1, [r3]
 800f8a8:	e791      	b.n	800f7ce <__kernel_rem_pio2+0x4e6>
 800f8aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f8ae:	f7f0 fe7d 	bl	80005ac <__adddf3>
 800f8b2:	3d01      	subs	r5, #1
 800f8b4:	e7ed      	b.n	800f892 <__kernel_rem_pio2+0x5aa>
 800f8b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f8ba:	f7f0 fe77 	bl	80005ac <__adddf3>
 800f8be:	3e01      	subs	r6, #1
 800f8c0:	e7c0      	b.n	800f844 <__kernel_rem_pio2+0x55c>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	e7c5      	b.n	800f854 <__kernel_rem_pio2+0x56c>
 800f8c8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f8cc:	f7f0 fe6e 	bl	80005ac <__adddf3>
 800f8d0:	3401      	adds	r4, #1
 800f8d2:	e7ca      	b.n	800f86a <__kernel_rem_pio2+0x582>
 800f8d4:	e9da 8900 	ldrd	r8, r9, [sl]
 800f8d8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f8dc:	9b02      	ldr	r3, [sp, #8]
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	9302      	str	r3, [sp, #8]
 800f8e2:	4632      	mov	r2, r6
 800f8e4:	463b      	mov	r3, r7
 800f8e6:	4640      	mov	r0, r8
 800f8e8:	4649      	mov	r1, r9
 800f8ea:	f7f0 fe5f 	bl	80005ac <__adddf3>
 800f8ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	4640      	mov	r0, r8
 800f8f8:	4649      	mov	r1, r9
 800f8fa:	f7f0 fe55 	bl	80005a8 <__aeabi_dsub>
 800f8fe:	4632      	mov	r2, r6
 800f900:	463b      	mov	r3, r7
 800f902:	f7f0 fe53 	bl	80005ac <__adddf3>
 800f906:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f90a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f90e:	ed8a 7b00 	vstr	d7, [sl]
 800f912:	e76e      	b.n	800f7f2 <__kernel_rem_pio2+0x50a>
 800f914:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f918:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f91c:	4640      	mov	r0, r8
 800f91e:	4632      	mov	r2, r6
 800f920:	463b      	mov	r3, r7
 800f922:	4649      	mov	r1, r9
 800f924:	f7f0 fe42 	bl	80005ac <__adddf3>
 800f928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f92c:	4602      	mov	r2, r0
 800f92e:	460b      	mov	r3, r1
 800f930:	4640      	mov	r0, r8
 800f932:	4649      	mov	r1, r9
 800f934:	f7f0 fe38 	bl	80005a8 <__aeabi_dsub>
 800f938:	4632      	mov	r2, r6
 800f93a:	463b      	mov	r3, r7
 800f93c:	f7f0 fe36 	bl	80005ac <__adddf3>
 800f940:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f944:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f948:	ed84 7b00 	vstr	d7, [r4]
 800f94c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f950:	e755      	b.n	800f7fe <__kernel_rem_pio2+0x516>
 800f952:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f956:	f7f0 fe29 	bl	80005ac <__adddf3>
 800f95a:	3d01      	subs	r5, #1
 800f95c:	e759      	b.n	800f812 <__kernel_rem_pio2+0x52a>
 800f95e:	9b01      	ldr	r3, [sp, #4]
 800f960:	9a01      	ldr	r2, [sp, #4]
 800f962:	601d      	str	r5, [r3, #0]
 800f964:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f968:	605c      	str	r4, [r3, #4]
 800f96a:	609f      	str	r7, [r3, #8]
 800f96c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f970:	60d3      	str	r3, [r2, #12]
 800f972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f976:	6110      	str	r0, [r2, #16]
 800f978:	6153      	str	r3, [r2, #20]
 800f97a:	e728      	b.n	800f7ce <__kernel_rem_pio2+0x4e6>
 800f97c:	41700000 	.word	0x41700000
 800f980:	3e700000 	.word	0x3e700000
 800f984:	00000000 	.word	0x00000000

0800f988 <__kernel_sin>:
 800f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98c:	ed2d 8b04 	vpush	{d8-d9}
 800f990:	eeb0 8a41 	vmov.f32	s16, s2
 800f994:	eef0 8a61 	vmov.f32	s17, s3
 800f998:	ec55 4b10 	vmov	r4, r5, d0
 800f99c:	b083      	sub	sp, #12
 800f99e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f9a2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f9a6:	9001      	str	r0, [sp, #4]
 800f9a8:	da06      	bge.n	800f9b8 <__kernel_sin+0x30>
 800f9aa:	ee10 0a10 	vmov	r0, s0
 800f9ae:	4629      	mov	r1, r5
 800f9b0:	f7f1 fa4c 	bl	8000e4c <__aeabi_d2iz>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d051      	beq.n	800fa5c <__kernel_sin+0xd4>
 800f9b8:	4622      	mov	r2, r4
 800f9ba:	462b      	mov	r3, r5
 800f9bc:	4620      	mov	r0, r4
 800f9be:	4629      	mov	r1, r5
 800f9c0:	f7f0 ffaa 	bl	8000918 <__aeabi_dmul>
 800f9c4:	4682      	mov	sl, r0
 800f9c6:	468b      	mov	fp, r1
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	460b      	mov	r3, r1
 800f9cc:	4620      	mov	r0, r4
 800f9ce:	4629      	mov	r1, r5
 800f9d0:	f7f0 ffa2 	bl	8000918 <__aeabi_dmul>
 800f9d4:	a341      	add	r3, pc, #260	; (adr r3, 800fadc <__kernel_sin+0x154>)
 800f9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9da:	4680      	mov	r8, r0
 800f9dc:	4689      	mov	r9, r1
 800f9de:	4650      	mov	r0, sl
 800f9e0:	4659      	mov	r1, fp
 800f9e2:	f7f0 ff99 	bl	8000918 <__aeabi_dmul>
 800f9e6:	a33f      	add	r3, pc, #252	; (adr r3, 800fae4 <__kernel_sin+0x15c>)
 800f9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9ec:	f7f0 fddc 	bl	80005a8 <__aeabi_dsub>
 800f9f0:	4652      	mov	r2, sl
 800f9f2:	465b      	mov	r3, fp
 800f9f4:	f7f0 ff90 	bl	8000918 <__aeabi_dmul>
 800f9f8:	a33c      	add	r3, pc, #240	; (adr r3, 800faec <__kernel_sin+0x164>)
 800f9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9fe:	f7f0 fdd5 	bl	80005ac <__adddf3>
 800fa02:	4652      	mov	r2, sl
 800fa04:	465b      	mov	r3, fp
 800fa06:	f7f0 ff87 	bl	8000918 <__aeabi_dmul>
 800fa0a:	a33a      	add	r3, pc, #232	; (adr r3, 800faf4 <__kernel_sin+0x16c>)
 800fa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa10:	f7f0 fdca 	bl	80005a8 <__aeabi_dsub>
 800fa14:	4652      	mov	r2, sl
 800fa16:	465b      	mov	r3, fp
 800fa18:	f7f0 ff7e 	bl	8000918 <__aeabi_dmul>
 800fa1c:	a337      	add	r3, pc, #220	; (adr r3, 800fafc <__kernel_sin+0x174>)
 800fa1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa22:	f7f0 fdc3 	bl	80005ac <__adddf3>
 800fa26:	9b01      	ldr	r3, [sp, #4]
 800fa28:	4606      	mov	r6, r0
 800fa2a:	460f      	mov	r7, r1
 800fa2c:	b9eb      	cbnz	r3, 800fa6a <__kernel_sin+0xe2>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	4650      	mov	r0, sl
 800fa34:	4659      	mov	r1, fp
 800fa36:	f7f0 ff6f 	bl	8000918 <__aeabi_dmul>
 800fa3a:	a325      	add	r3, pc, #148	; (adr r3, 800fad0 <__kernel_sin+0x148>)
 800fa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa40:	f7f0 fdb2 	bl	80005a8 <__aeabi_dsub>
 800fa44:	4642      	mov	r2, r8
 800fa46:	464b      	mov	r3, r9
 800fa48:	f7f0 ff66 	bl	8000918 <__aeabi_dmul>
 800fa4c:	4602      	mov	r2, r0
 800fa4e:	460b      	mov	r3, r1
 800fa50:	4620      	mov	r0, r4
 800fa52:	4629      	mov	r1, r5
 800fa54:	f7f0 fdaa 	bl	80005ac <__adddf3>
 800fa58:	4604      	mov	r4, r0
 800fa5a:	460d      	mov	r5, r1
 800fa5c:	ec45 4b10 	vmov	d0, r4, r5
 800fa60:	b003      	add	sp, #12
 800fa62:	ecbd 8b04 	vpop	{d8-d9}
 800fa66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6a:	4b1b      	ldr	r3, [pc, #108]	; (800fad8 <__kernel_sin+0x150>)
 800fa6c:	ec51 0b18 	vmov	r0, r1, d8
 800fa70:	2200      	movs	r2, #0
 800fa72:	f7f0 ff51 	bl	8000918 <__aeabi_dmul>
 800fa76:	4632      	mov	r2, r6
 800fa78:	ec41 0b19 	vmov	d9, r0, r1
 800fa7c:	463b      	mov	r3, r7
 800fa7e:	4640      	mov	r0, r8
 800fa80:	4649      	mov	r1, r9
 800fa82:	f7f0 ff49 	bl	8000918 <__aeabi_dmul>
 800fa86:	4602      	mov	r2, r0
 800fa88:	460b      	mov	r3, r1
 800fa8a:	ec51 0b19 	vmov	r0, r1, d9
 800fa8e:	f7f0 fd8b 	bl	80005a8 <__aeabi_dsub>
 800fa92:	4652      	mov	r2, sl
 800fa94:	465b      	mov	r3, fp
 800fa96:	f7f0 ff3f 	bl	8000918 <__aeabi_dmul>
 800fa9a:	ec53 2b18 	vmov	r2, r3, d8
 800fa9e:	f7f0 fd83 	bl	80005a8 <__aeabi_dsub>
 800faa2:	a30b      	add	r3, pc, #44	; (adr r3, 800fad0 <__kernel_sin+0x148>)
 800faa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faa8:	4606      	mov	r6, r0
 800faaa:	460f      	mov	r7, r1
 800faac:	4640      	mov	r0, r8
 800faae:	4649      	mov	r1, r9
 800fab0:	f7f0 ff32 	bl	8000918 <__aeabi_dmul>
 800fab4:	4602      	mov	r2, r0
 800fab6:	460b      	mov	r3, r1
 800fab8:	4630      	mov	r0, r6
 800faba:	4639      	mov	r1, r7
 800fabc:	f7f0 fd76 	bl	80005ac <__adddf3>
 800fac0:	4602      	mov	r2, r0
 800fac2:	460b      	mov	r3, r1
 800fac4:	4620      	mov	r0, r4
 800fac6:	4629      	mov	r1, r5
 800fac8:	f7f0 fd6e 	bl	80005a8 <__aeabi_dsub>
 800facc:	e7c4      	b.n	800fa58 <__kernel_sin+0xd0>
 800face:	bf00      	nop
 800fad0:	55555549 	.word	0x55555549
 800fad4:	3fc55555 	.word	0x3fc55555
 800fad8:	3fe00000 	.word	0x3fe00000
 800fadc:	5acfd57c 	.word	0x5acfd57c
 800fae0:	3de5d93a 	.word	0x3de5d93a
 800fae4:	8a2b9ceb 	.word	0x8a2b9ceb
 800fae8:	3e5ae5e6 	.word	0x3e5ae5e6
 800faec:	57b1fe7d 	.word	0x57b1fe7d
 800faf0:	3ec71de3 	.word	0x3ec71de3
 800faf4:	19c161d5 	.word	0x19c161d5
 800faf8:	3f2a01a0 	.word	0x3f2a01a0
 800fafc:	1110f8a6 	.word	0x1110f8a6
 800fb00:	3f811111 	.word	0x3f811111
 800fb04:	00000000 	.word	0x00000000

0800fb08 <atan>:
 800fb08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb0c:	ec55 4b10 	vmov	r4, r5, d0
 800fb10:	4bc3      	ldr	r3, [pc, #780]	; (800fe20 <atan+0x318>)
 800fb12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fb16:	429e      	cmp	r6, r3
 800fb18:	46ab      	mov	fp, r5
 800fb1a:	dd18      	ble.n	800fb4e <atan+0x46>
 800fb1c:	4bc1      	ldr	r3, [pc, #772]	; (800fe24 <atan+0x31c>)
 800fb1e:	429e      	cmp	r6, r3
 800fb20:	dc01      	bgt.n	800fb26 <atan+0x1e>
 800fb22:	d109      	bne.n	800fb38 <atan+0x30>
 800fb24:	b144      	cbz	r4, 800fb38 <atan+0x30>
 800fb26:	4622      	mov	r2, r4
 800fb28:	462b      	mov	r3, r5
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	4629      	mov	r1, r5
 800fb2e:	f7f0 fd3d 	bl	80005ac <__adddf3>
 800fb32:	4604      	mov	r4, r0
 800fb34:	460d      	mov	r5, r1
 800fb36:	e006      	b.n	800fb46 <atan+0x3e>
 800fb38:	f1bb 0f00 	cmp.w	fp, #0
 800fb3c:	f300 8131 	bgt.w	800fda2 <atan+0x29a>
 800fb40:	a59b      	add	r5, pc, #620	; (adr r5, 800fdb0 <atan+0x2a8>)
 800fb42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fb46:	ec45 4b10 	vmov	d0, r4, r5
 800fb4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4e:	4bb6      	ldr	r3, [pc, #728]	; (800fe28 <atan+0x320>)
 800fb50:	429e      	cmp	r6, r3
 800fb52:	dc14      	bgt.n	800fb7e <atan+0x76>
 800fb54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800fb58:	429e      	cmp	r6, r3
 800fb5a:	dc0d      	bgt.n	800fb78 <atan+0x70>
 800fb5c:	a396      	add	r3, pc, #600	; (adr r3, 800fdb8 <atan+0x2b0>)
 800fb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb62:	ee10 0a10 	vmov	r0, s0
 800fb66:	4629      	mov	r1, r5
 800fb68:	f7f0 fd20 	bl	80005ac <__adddf3>
 800fb6c:	4baf      	ldr	r3, [pc, #700]	; (800fe2c <atan+0x324>)
 800fb6e:	2200      	movs	r2, #0
 800fb70:	f7f1 f962 	bl	8000e38 <__aeabi_dcmpgt>
 800fb74:	2800      	cmp	r0, #0
 800fb76:	d1e6      	bne.n	800fb46 <atan+0x3e>
 800fb78:	f04f 3aff 	mov.w	sl, #4294967295
 800fb7c:	e02b      	b.n	800fbd6 <atan+0xce>
 800fb7e:	f000 f963 	bl	800fe48 <fabs>
 800fb82:	4bab      	ldr	r3, [pc, #684]	; (800fe30 <atan+0x328>)
 800fb84:	429e      	cmp	r6, r3
 800fb86:	ec55 4b10 	vmov	r4, r5, d0
 800fb8a:	f300 80bf 	bgt.w	800fd0c <atan+0x204>
 800fb8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800fb92:	429e      	cmp	r6, r3
 800fb94:	f300 80a0 	bgt.w	800fcd8 <atan+0x1d0>
 800fb98:	ee10 2a10 	vmov	r2, s0
 800fb9c:	ee10 0a10 	vmov	r0, s0
 800fba0:	462b      	mov	r3, r5
 800fba2:	4629      	mov	r1, r5
 800fba4:	f7f0 fd02 	bl	80005ac <__adddf3>
 800fba8:	4ba0      	ldr	r3, [pc, #640]	; (800fe2c <atan+0x324>)
 800fbaa:	2200      	movs	r2, #0
 800fbac:	f7f0 fcfc 	bl	80005a8 <__aeabi_dsub>
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	460f      	mov	r7, r1
 800fbb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fbba:	4620      	mov	r0, r4
 800fbbc:	4629      	mov	r1, r5
 800fbbe:	f7f0 fcf5 	bl	80005ac <__adddf3>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	460b      	mov	r3, r1
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	4639      	mov	r1, r7
 800fbca:	f7f0 ffcf 	bl	8000b6c <__aeabi_ddiv>
 800fbce:	f04f 0a00 	mov.w	sl, #0
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	460d      	mov	r5, r1
 800fbd6:	4622      	mov	r2, r4
 800fbd8:	462b      	mov	r3, r5
 800fbda:	4620      	mov	r0, r4
 800fbdc:	4629      	mov	r1, r5
 800fbde:	f7f0 fe9b 	bl	8000918 <__aeabi_dmul>
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	460b      	mov	r3, r1
 800fbe6:	4680      	mov	r8, r0
 800fbe8:	4689      	mov	r9, r1
 800fbea:	f7f0 fe95 	bl	8000918 <__aeabi_dmul>
 800fbee:	a374      	add	r3, pc, #464	; (adr r3, 800fdc0 <atan+0x2b8>)
 800fbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf4:	4606      	mov	r6, r0
 800fbf6:	460f      	mov	r7, r1
 800fbf8:	f7f0 fe8e 	bl	8000918 <__aeabi_dmul>
 800fbfc:	a372      	add	r3, pc, #456	; (adr r3, 800fdc8 <atan+0x2c0>)
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	f7f0 fcd3 	bl	80005ac <__adddf3>
 800fc06:	4632      	mov	r2, r6
 800fc08:	463b      	mov	r3, r7
 800fc0a:	f7f0 fe85 	bl	8000918 <__aeabi_dmul>
 800fc0e:	a370      	add	r3, pc, #448	; (adr r3, 800fdd0 <atan+0x2c8>)
 800fc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc14:	f7f0 fcca 	bl	80005ac <__adddf3>
 800fc18:	4632      	mov	r2, r6
 800fc1a:	463b      	mov	r3, r7
 800fc1c:	f7f0 fe7c 	bl	8000918 <__aeabi_dmul>
 800fc20:	a36d      	add	r3, pc, #436	; (adr r3, 800fdd8 <atan+0x2d0>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	f7f0 fcc1 	bl	80005ac <__adddf3>
 800fc2a:	4632      	mov	r2, r6
 800fc2c:	463b      	mov	r3, r7
 800fc2e:	f7f0 fe73 	bl	8000918 <__aeabi_dmul>
 800fc32:	a36b      	add	r3, pc, #428	; (adr r3, 800fde0 <atan+0x2d8>)
 800fc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc38:	f7f0 fcb8 	bl	80005ac <__adddf3>
 800fc3c:	4632      	mov	r2, r6
 800fc3e:	463b      	mov	r3, r7
 800fc40:	f7f0 fe6a 	bl	8000918 <__aeabi_dmul>
 800fc44:	a368      	add	r3, pc, #416	; (adr r3, 800fde8 <atan+0x2e0>)
 800fc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc4a:	f7f0 fcaf 	bl	80005ac <__adddf3>
 800fc4e:	4642      	mov	r2, r8
 800fc50:	464b      	mov	r3, r9
 800fc52:	f7f0 fe61 	bl	8000918 <__aeabi_dmul>
 800fc56:	a366      	add	r3, pc, #408	; (adr r3, 800fdf0 <atan+0x2e8>)
 800fc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc5c:	4680      	mov	r8, r0
 800fc5e:	4689      	mov	r9, r1
 800fc60:	4630      	mov	r0, r6
 800fc62:	4639      	mov	r1, r7
 800fc64:	f7f0 fe58 	bl	8000918 <__aeabi_dmul>
 800fc68:	a363      	add	r3, pc, #396	; (adr r3, 800fdf8 <atan+0x2f0>)
 800fc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6e:	f7f0 fc9b 	bl	80005a8 <__aeabi_dsub>
 800fc72:	4632      	mov	r2, r6
 800fc74:	463b      	mov	r3, r7
 800fc76:	f7f0 fe4f 	bl	8000918 <__aeabi_dmul>
 800fc7a:	a361      	add	r3, pc, #388	; (adr r3, 800fe00 <atan+0x2f8>)
 800fc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc80:	f7f0 fc92 	bl	80005a8 <__aeabi_dsub>
 800fc84:	4632      	mov	r2, r6
 800fc86:	463b      	mov	r3, r7
 800fc88:	f7f0 fe46 	bl	8000918 <__aeabi_dmul>
 800fc8c:	a35e      	add	r3, pc, #376	; (adr r3, 800fe08 <atan+0x300>)
 800fc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc92:	f7f0 fc89 	bl	80005a8 <__aeabi_dsub>
 800fc96:	4632      	mov	r2, r6
 800fc98:	463b      	mov	r3, r7
 800fc9a:	f7f0 fe3d 	bl	8000918 <__aeabi_dmul>
 800fc9e:	a35c      	add	r3, pc, #368	; (adr r3, 800fe10 <atan+0x308>)
 800fca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fca4:	f7f0 fc80 	bl	80005a8 <__aeabi_dsub>
 800fca8:	4632      	mov	r2, r6
 800fcaa:	463b      	mov	r3, r7
 800fcac:	f7f0 fe34 	bl	8000918 <__aeabi_dmul>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	4640      	mov	r0, r8
 800fcb6:	4649      	mov	r1, r9
 800fcb8:	f7f0 fc78 	bl	80005ac <__adddf3>
 800fcbc:	4622      	mov	r2, r4
 800fcbe:	462b      	mov	r3, r5
 800fcc0:	f7f0 fe2a 	bl	8000918 <__aeabi_dmul>
 800fcc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800fcc8:	4602      	mov	r2, r0
 800fcca:	460b      	mov	r3, r1
 800fccc:	d14b      	bne.n	800fd66 <atan+0x25e>
 800fcce:	4620      	mov	r0, r4
 800fcd0:	4629      	mov	r1, r5
 800fcd2:	f7f0 fc69 	bl	80005a8 <__aeabi_dsub>
 800fcd6:	e72c      	b.n	800fb32 <atan+0x2a>
 800fcd8:	ee10 0a10 	vmov	r0, s0
 800fcdc:	4b53      	ldr	r3, [pc, #332]	; (800fe2c <atan+0x324>)
 800fcde:	2200      	movs	r2, #0
 800fce0:	4629      	mov	r1, r5
 800fce2:	f7f0 fc61 	bl	80005a8 <__aeabi_dsub>
 800fce6:	4b51      	ldr	r3, [pc, #324]	; (800fe2c <atan+0x324>)
 800fce8:	4606      	mov	r6, r0
 800fcea:	460f      	mov	r7, r1
 800fcec:	2200      	movs	r2, #0
 800fcee:	4620      	mov	r0, r4
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	f7f0 fc5b 	bl	80005ac <__adddf3>
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	4639      	mov	r1, r7
 800fcfe:	f7f0 ff35 	bl	8000b6c <__aeabi_ddiv>
 800fd02:	f04f 0a01 	mov.w	sl, #1
 800fd06:	4604      	mov	r4, r0
 800fd08:	460d      	mov	r5, r1
 800fd0a:	e764      	b.n	800fbd6 <atan+0xce>
 800fd0c:	4b49      	ldr	r3, [pc, #292]	; (800fe34 <atan+0x32c>)
 800fd0e:	429e      	cmp	r6, r3
 800fd10:	da1d      	bge.n	800fd4e <atan+0x246>
 800fd12:	ee10 0a10 	vmov	r0, s0
 800fd16:	4b48      	ldr	r3, [pc, #288]	; (800fe38 <atan+0x330>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	4629      	mov	r1, r5
 800fd1c:	f7f0 fc44 	bl	80005a8 <__aeabi_dsub>
 800fd20:	4b45      	ldr	r3, [pc, #276]	; (800fe38 <atan+0x330>)
 800fd22:	4606      	mov	r6, r0
 800fd24:	460f      	mov	r7, r1
 800fd26:	2200      	movs	r2, #0
 800fd28:	4620      	mov	r0, r4
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	f7f0 fdf4 	bl	8000918 <__aeabi_dmul>
 800fd30:	4b3e      	ldr	r3, [pc, #248]	; (800fe2c <atan+0x324>)
 800fd32:	2200      	movs	r2, #0
 800fd34:	f7f0 fc3a 	bl	80005ac <__adddf3>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	460b      	mov	r3, r1
 800fd3c:	4630      	mov	r0, r6
 800fd3e:	4639      	mov	r1, r7
 800fd40:	f7f0 ff14 	bl	8000b6c <__aeabi_ddiv>
 800fd44:	f04f 0a02 	mov.w	sl, #2
 800fd48:	4604      	mov	r4, r0
 800fd4a:	460d      	mov	r5, r1
 800fd4c:	e743      	b.n	800fbd6 <atan+0xce>
 800fd4e:	462b      	mov	r3, r5
 800fd50:	ee10 2a10 	vmov	r2, s0
 800fd54:	4939      	ldr	r1, [pc, #228]	; (800fe3c <atan+0x334>)
 800fd56:	2000      	movs	r0, #0
 800fd58:	f7f0 ff08 	bl	8000b6c <__aeabi_ddiv>
 800fd5c:	f04f 0a03 	mov.w	sl, #3
 800fd60:	4604      	mov	r4, r0
 800fd62:	460d      	mov	r5, r1
 800fd64:	e737      	b.n	800fbd6 <atan+0xce>
 800fd66:	4b36      	ldr	r3, [pc, #216]	; (800fe40 <atan+0x338>)
 800fd68:	4e36      	ldr	r6, [pc, #216]	; (800fe44 <atan+0x33c>)
 800fd6a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fd6e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800fd72:	e9da 2300 	ldrd	r2, r3, [sl]
 800fd76:	f7f0 fc17 	bl	80005a8 <__aeabi_dsub>
 800fd7a:	4622      	mov	r2, r4
 800fd7c:	462b      	mov	r3, r5
 800fd7e:	f7f0 fc13 	bl	80005a8 <__aeabi_dsub>
 800fd82:	4602      	mov	r2, r0
 800fd84:	460b      	mov	r3, r1
 800fd86:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fd8a:	f7f0 fc0d 	bl	80005a8 <__aeabi_dsub>
 800fd8e:	f1bb 0f00 	cmp.w	fp, #0
 800fd92:	4604      	mov	r4, r0
 800fd94:	460d      	mov	r5, r1
 800fd96:	f6bf aed6 	bge.w	800fb46 <atan+0x3e>
 800fd9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd9e:	461d      	mov	r5, r3
 800fda0:	e6d1      	b.n	800fb46 <atan+0x3e>
 800fda2:	a51d      	add	r5, pc, #116	; (adr r5, 800fe18 <atan+0x310>)
 800fda4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fda8:	e6cd      	b.n	800fb46 <atan+0x3e>
 800fdaa:	bf00      	nop
 800fdac:	f3af 8000 	nop.w
 800fdb0:	54442d18 	.word	0x54442d18
 800fdb4:	bff921fb 	.word	0xbff921fb
 800fdb8:	8800759c 	.word	0x8800759c
 800fdbc:	7e37e43c 	.word	0x7e37e43c
 800fdc0:	e322da11 	.word	0xe322da11
 800fdc4:	3f90ad3a 	.word	0x3f90ad3a
 800fdc8:	24760deb 	.word	0x24760deb
 800fdcc:	3fa97b4b 	.word	0x3fa97b4b
 800fdd0:	a0d03d51 	.word	0xa0d03d51
 800fdd4:	3fb10d66 	.word	0x3fb10d66
 800fdd8:	c54c206e 	.word	0xc54c206e
 800fddc:	3fb745cd 	.word	0x3fb745cd
 800fde0:	920083ff 	.word	0x920083ff
 800fde4:	3fc24924 	.word	0x3fc24924
 800fde8:	5555550d 	.word	0x5555550d
 800fdec:	3fd55555 	.word	0x3fd55555
 800fdf0:	2c6a6c2f 	.word	0x2c6a6c2f
 800fdf4:	bfa2b444 	.word	0xbfa2b444
 800fdf8:	52defd9a 	.word	0x52defd9a
 800fdfc:	3fadde2d 	.word	0x3fadde2d
 800fe00:	af749a6d 	.word	0xaf749a6d
 800fe04:	3fb3b0f2 	.word	0x3fb3b0f2
 800fe08:	fe231671 	.word	0xfe231671
 800fe0c:	3fbc71c6 	.word	0x3fbc71c6
 800fe10:	9998ebc4 	.word	0x9998ebc4
 800fe14:	3fc99999 	.word	0x3fc99999
 800fe18:	54442d18 	.word	0x54442d18
 800fe1c:	3ff921fb 	.word	0x3ff921fb
 800fe20:	440fffff 	.word	0x440fffff
 800fe24:	7ff00000 	.word	0x7ff00000
 800fe28:	3fdbffff 	.word	0x3fdbffff
 800fe2c:	3ff00000 	.word	0x3ff00000
 800fe30:	3ff2ffff 	.word	0x3ff2ffff
 800fe34:	40038000 	.word	0x40038000
 800fe38:	3ff80000 	.word	0x3ff80000
 800fe3c:	bff00000 	.word	0xbff00000
 800fe40:	08010898 	.word	0x08010898
 800fe44:	08010878 	.word	0x08010878

0800fe48 <fabs>:
 800fe48:	ec51 0b10 	vmov	r0, r1, d0
 800fe4c:	ee10 2a10 	vmov	r2, s0
 800fe50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fe54:	ec43 2b10 	vmov	d0, r2, r3
 800fe58:	4770      	bx	lr
 800fe5a:	0000      	movs	r0, r0
 800fe5c:	0000      	movs	r0, r0
	...

0800fe60 <floor>:
 800fe60:	ec51 0b10 	vmov	r0, r1, d0
 800fe64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800fe6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800fe70:	2e13      	cmp	r6, #19
 800fe72:	ee10 5a10 	vmov	r5, s0
 800fe76:	ee10 8a10 	vmov	r8, s0
 800fe7a:	460c      	mov	r4, r1
 800fe7c:	dc32      	bgt.n	800fee4 <floor+0x84>
 800fe7e:	2e00      	cmp	r6, #0
 800fe80:	da14      	bge.n	800feac <floor+0x4c>
 800fe82:	a333      	add	r3, pc, #204	; (adr r3, 800ff50 <floor+0xf0>)
 800fe84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe88:	f7f0 fb90 	bl	80005ac <__adddf3>
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	2300      	movs	r3, #0
 800fe90:	f7f0 ffd2 	bl	8000e38 <__aeabi_dcmpgt>
 800fe94:	b138      	cbz	r0, 800fea6 <floor+0x46>
 800fe96:	2c00      	cmp	r4, #0
 800fe98:	da57      	bge.n	800ff4a <floor+0xea>
 800fe9a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800fe9e:	431d      	orrs	r5, r3
 800fea0:	d001      	beq.n	800fea6 <floor+0x46>
 800fea2:	4c2d      	ldr	r4, [pc, #180]	; (800ff58 <floor+0xf8>)
 800fea4:	2500      	movs	r5, #0
 800fea6:	4621      	mov	r1, r4
 800fea8:	4628      	mov	r0, r5
 800feaa:	e025      	b.n	800fef8 <floor+0x98>
 800feac:	4f2b      	ldr	r7, [pc, #172]	; (800ff5c <floor+0xfc>)
 800feae:	4137      	asrs	r7, r6
 800feb0:	ea01 0307 	and.w	r3, r1, r7
 800feb4:	4303      	orrs	r3, r0
 800feb6:	d01f      	beq.n	800fef8 <floor+0x98>
 800feb8:	a325      	add	r3, pc, #148	; (adr r3, 800ff50 <floor+0xf0>)
 800feba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800febe:	f7f0 fb75 	bl	80005ac <__adddf3>
 800fec2:	2200      	movs	r2, #0
 800fec4:	2300      	movs	r3, #0
 800fec6:	f7f0 ffb7 	bl	8000e38 <__aeabi_dcmpgt>
 800feca:	2800      	cmp	r0, #0
 800fecc:	d0eb      	beq.n	800fea6 <floor+0x46>
 800fece:	2c00      	cmp	r4, #0
 800fed0:	bfbe      	ittt	lt
 800fed2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800fed6:	fa43 f606 	asrlt.w	r6, r3, r6
 800feda:	19a4      	addlt	r4, r4, r6
 800fedc:	ea24 0407 	bic.w	r4, r4, r7
 800fee0:	2500      	movs	r5, #0
 800fee2:	e7e0      	b.n	800fea6 <floor+0x46>
 800fee4:	2e33      	cmp	r6, #51	; 0x33
 800fee6:	dd0b      	ble.n	800ff00 <floor+0xa0>
 800fee8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800feec:	d104      	bne.n	800fef8 <floor+0x98>
 800feee:	ee10 2a10 	vmov	r2, s0
 800fef2:	460b      	mov	r3, r1
 800fef4:	f7f0 fb5a 	bl	80005ac <__adddf3>
 800fef8:	ec41 0b10 	vmov	d0, r0, r1
 800fefc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff00:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ff04:	f04f 33ff 	mov.w	r3, #4294967295
 800ff08:	fa23 f707 	lsr.w	r7, r3, r7
 800ff0c:	4207      	tst	r7, r0
 800ff0e:	d0f3      	beq.n	800fef8 <floor+0x98>
 800ff10:	a30f      	add	r3, pc, #60	; (adr r3, 800ff50 <floor+0xf0>)
 800ff12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff16:	f7f0 fb49 	bl	80005ac <__adddf3>
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f7f0 ff8b 	bl	8000e38 <__aeabi_dcmpgt>
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d0bf      	beq.n	800fea6 <floor+0x46>
 800ff26:	2c00      	cmp	r4, #0
 800ff28:	da02      	bge.n	800ff30 <floor+0xd0>
 800ff2a:	2e14      	cmp	r6, #20
 800ff2c:	d103      	bne.n	800ff36 <floor+0xd6>
 800ff2e:	3401      	adds	r4, #1
 800ff30:	ea25 0507 	bic.w	r5, r5, r7
 800ff34:	e7b7      	b.n	800fea6 <floor+0x46>
 800ff36:	2301      	movs	r3, #1
 800ff38:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ff3c:	fa03 f606 	lsl.w	r6, r3, r6
 800ff40:	4435      	add	r5, r6
 800ff42:	4545      	cmp	r5, r8
 800ff44:	bf38      	it	cc
 800ff46:	18e4      	addcc	r4, r4, r3
 800ff48:	e7f2      	b.n	800ff30 <floor+0xd0>
 800ff4a:	2500      	movs	r5, #0
 800ff4c:	462c      	mov	r4, r5
 800ff4e:	e7aa      	b.n	800fea6 <floor+0x46>
 800ff50:	8800759c 	.word	0x8800759c
 800ff54:	7e37e43c 	.word	0x7e37e43c
 800ff58:	bff00000 	.word	0xbff00000
 800ff5c:	000fffff 	.word	0x000fffff

0800ff60 <scalbn>:
 800ff60:	b570      	push	{r4, r5, r6, lr}
 800ff62:	ec55 4b10 	vmov	r4, r5, d0
 800ff66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	462b      	mov	r3, r5
 800ff6e:	b99a      	cbnz	r2, 800ff98 <scalbn+0x38>
 800ff70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ff74:	4323      	orrs	r3, r4
 800ff76:	d036      	beq.n	800ffe6 <scalbn+0x86>
 800ff78:	4b39      	ldr	r3, [pc, #228]	; (8010060 <scalbn+0x100>)
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	ee10 0a10 	vmov	r0, s0
 800ff80:	2200      	movs	r2, #0
 800ff82:	f7f0 fcc9 	bl	8000918 <__aeabi_dmul>
 800ff86:	4b37      	ldr	r3, [pc, #220]	; (8010064 <scalbn+0x104>)
 800ff88:	429e      	cmp	r6, r3
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	460d      	mov	r5, r1
 800ff8e:	da10      	bge.n	800ffb2 <scalbn+0x52>
 800ff90:	a32b      	add	r3, pc, #172	; (adr r3, 8010040 <scalbn+0xe0>)
 800ff92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff96:	e03a      	b.n	801000e <scalbn+0xae>
 800ff98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ff9c:	428a      	cmp	r2, r1
 800ff9e:	d10c      	bne.n	800ffba <scalbn+0x5a>
 800ffa0:	ee10 2a10 	vmov	r2, s0
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	4629      	mov	r1, r5
 800ffa8:	f7f0 fb00 	bl	80005ac <__adddf3>
 800ffac:	4604      	mov	r4, r0
 800ffae:	460d      	mov	r5, r1
 800ffb0:	e019      	b.n	800ffe6 <scalbn+0x86>
 800ffb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	3a36      	subs	r2, #54	; 0x36
 800ffba:	4432      	add	r2, r6
 800ffbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ffc0:	428a      	cmp	r2, r1
 800ffc2:	dd08      	ble.n	800ffd6 <scalbn+0x76>
 800ffc4:	2d00      	cmp	r5, #0
 800ffc6:	a120      	add	r1, pc, #128	; (adr r1, 8010048 <scalbn+0xe8>)
 800ffc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffcc:	da1c      	bge.n	8010008 <scalbn+0xa8>
 800ffce:	a120      	add	r1, pc, #128	; (adr r1, 8010050 <scalbn+0xf0>)
 800ffd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ffd4:	e018      	b.n	8010008 <scalbn+0xa8>
 800ffd6:	2a00      	cmp	r2, #0
 800ffd8:	dd08      	ble.n	800ffec <scalbn+0x8c>
 800ffda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ffde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ffe2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ffe6:	ec45 4b10 	vmov	d0, r4, r5
 800ffea:	bd70      	pop	{r4, r5, r6, pc}
 800ffec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fff0:	da19      	bge.n	8010026 <scalbn+0xc6>
 800fff2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fff6:	429e      	cmp	r6, r3
 800fff8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800fffc:	dd0a      	ble.n	8010014 <scalbn+0xb4>
 800fffe:	a112      	add	r1, pc, #72	; (adr r1, 8010048 <scalbn+0xe8>)
 8010000:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d1e2      	bne.n	800ffce <scalbn+0x6e>
 8010008:	a30f      	add	r3, pc, #60	; (adr r3, 8010048 <scalbn+0xe8>)
 801000a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801000e:	f7f0 fc83 	bl	8000918 <__aeabi_dmul>
 8010012:	e7cb      	b.n	800ffac <scalbn+0x4c>
 8010014:	a10a      	add	r1, pc, #40	; (adr r1, 8010040 <scalbn+0xe0>)
 8010016:	e9d1 0100 	ldrd	r0, r1, [r1]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d0b8      	beq.n	800ff90 <scalbn+0x30>
 801001e:	a10e      	add	r1, pc, #56	; (adr r1, 8010058 <scalbn+0xf8>)
 8010020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010024:	e7b4      	b.n	800ff90 <scalbn+0x30>
 8010026:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801002a:	3236      	adds	r2, #54	; 0x36
 801002c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010030:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010034:	4620      	mov	r0, r4
 8010036:	4b0c      	ldr	r3, [pc, #48]	; (8010068 <scalbn+0x108>)
 8010038:	2200      	movs	r2, #0
 801003a:	e7e8      	b.n	801000e <scalbn+0xae>
 801003c:	f3af 8000 	nop.w
 8010040:	c2f8f359 	.word	0xc2f8f359
 8010044:	01a56e1f 	.word	0x01a56e1f
 8010048:	8800759c 	.word	0x8800759c
 801004c:	7e37e43c 	.word	0x7e37e43c
 8010050:	8800759c 	.word	0x8800759c
 8010054:	fe37e43c 	.word	0xfe37e43c
 8010058:	c2f8f359 	.word	0xc2f8f359
 801005c:	81a56e1f 	.word	0x81a56e1f
 8010060:	43500000 	.word	0x43500000
 8010064:	ffff3cb0 	.word	0xffff3cb0
 8010068:	3c900000 	.word	0x3c900000

0801006c <_init>:
 801006c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006e:	bf00      	nop
 8010070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010072:	bc08      	pop	{r3}
 8010074:	469e      	mov	lr, r3
 8010076:	4770      	bx	lr

08010078 <_fini>:
 8010078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007a:	bf00      	nop
 801007c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801007e:	bc08      	pop	{r3}
 8010080:	469e      	mov	lr, r3
 8010082:	4770      	bx	lr
