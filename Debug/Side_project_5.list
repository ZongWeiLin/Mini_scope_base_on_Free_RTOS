
Side_project_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010934  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08010b08  08010b08  00020b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011358  08011358  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  08011358  08011358  00021358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011360  08011360  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011360  08011360  00021360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011364  08011364  00021364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08011368  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000059c4  200000a4  0801140c  000300a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005a68  0801140c  00035a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021af8  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d92  00000000  00000000  00051bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d00  00000000  00000000  00056960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  00058660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002891e  00000000  00000000  0005a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024342  00000000  00000000  00082a76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed4b4  00000000  00000000  000a6db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019426c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000813c  00000000  00000000  001942bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010aec 	.word	0x08010aec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	08010aec 	.word	0x08010aec

08000210 <cr4_fft_64_stm32>:
 8000210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000214:	f04f 0c00 	mov.w	ip, #0
 8000218:	4603      	mov	r3, r0
 800021a:	f04f 0000 	mov.w	r0, #0

0800021e <preloop_v7>:
 800021e:	eb01 6e9c 	add.w	lr, r1, ip, lsr #26
 8000222:	f9be 5002 	ldrsh.w	r5, [lr, #2]
 8000226:	f93e 4b40 	ldrsh.w	r4, [lr], #64
 800022a:	f9be 9002 	ldrsh.w	r9, [lr, #2]
 800022e:	f93e 8b40 	ldrsh.w	r8, [lr], #64
 8000232:	f9be 7002 	ldrsh.w	r7, [lr, #2]
 8000236:	f93e 6b40 	ldrsh.w	r6, [lr], #64
 800023a:	f9be b002 	ldrsh.w	fp, [lr, #2]
 800023e:	f93e ab40 	ldrsh.w	sl, [lr], #64
 8000242:	44d0      	add	r8, sl
 8000244:	44d9      	add	r9, fp
 8000246:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 800024a:	eba9 0b4b 	sub.w	fp, r9, fp, lsl #1
 800024e:	ea4f 04a4 	mov.w	r4, r4, asr #2
 8000252:	ea4f 05a5 	mov.w	r5, r5, asr #2
 8000256:	eb04 04a6 	add.w	r4, r4, r6, asr #2
 800025a:	eb05 05a7 	add.w	r5, r5, r7, asr #2
 800025e:	eba4 0666 	sub.w	r6, r4, r6, asr #1
 8000262:	eba5 0767 	sub.w	r7, r5, r7, asr #1
 8000266:	eb04 04a8 	add.w	r4, r4, r8, asr #2
 800026a:	eb05 05a9 	add.w	r5, r5, r9, asr #2
 800026e:	eba4 0868 	sub.w	r8, r4, r8, asr #1
 8000272:	eba5 0969 	sub.w	r9, r5, r9, asr #1
 8000276:	eb06 06ab 	add.w	r6, r6, fp, asr #2
 800027a:	eba7 07aa 	sub.w	r7, r7, sl, asr #2
 800027e:	eba6 0b6b 	sub.w	fp, r6, fp, asr #1
 8000282:	eb07 0a6a 	add.w	sl, r7, sl, asr #1
 8000286:	805d      	strh	r5, [r3, #2]
 8000288:	f823 4b04 	strh.w	r4, [r3], #4
 800028c:	805f      	strh	r7, [r3, #2]
 800028e:	f823 6b04 	strh.w	r6, [r3], #4
 8000292:	f8a3 9002 	strh.w	r9, [r3, #2]
 8000296:	f823 8b04 	strh.w	r8, [r3], #4
 800029a:	f8a3 a002 	strh.w	sl, [r3, #2]
 800029e:	f823 bb04 	strh.w	fp, [r3], #4
 80002a2:	f100 0001 	add.w	r0, r0, #1
 80002a6:	fa90 fca0 	rbit	ip, r0
 80002aa:	2810      	cmp	r0, #16
 80002ac:	d1b7      	bne.n	800021e <preloop_v7>
 80002ae:	eba3 0182 	sub.w	r1, r3, r2, lsl #2
 80002b2:	f04f 0010 	mov.w	r0, #16
 80002b6:	0912      	lsrs	r2, r2, #4
 80002b8:	f20f 132e 	addw	r3, pc, #302	; 0x12e

080002bc <passloop_v7>:
 80002bc:	e92d 0006 	stmdb	sp!, {r1, r2}
 80002c0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80002c4:	4461      	add	r1, ip
 80002c6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000

080002ca <grouploop_v7>:
 80002ca:	eb02 3280 	add.w	r2, r2, r0, lsl #14

080002ce <butterloop_v7>:
 80002ce:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80002d2:	f9b1 4000 	ldrsh.w	r4, [r1]
 80002d6:	eba1 0100 	sub.w	r1, r1, r0
 80002da:	f9b3 b002 	ldrsh.w	fp, [r3, #2]
 80002de:	f9b3 a000 	ldrsh.w	sl, [r3]
 80002e2:	f103 0304 	add.w	r3, r3, #4
 80002e6:	eba5 0e04 	sub.w	lr, r5, r4
 80002ea:	fb0e fc0b 	mul.w	ip, lr, fp
 80002ee:	eb0a 0e4b 	add.w	lr, sl, fp, lsl #1
 80002f2:	fb05 cb0a 	mla	fp, r5, sl, ip
 80002f6:	fb04 ca0e 	mla	sl, r4, lr, ip
 80002fa:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80002fe:	f9b1 4000 	ldrsh.w	r4, [r1]
 8000302:	eba1 0100 	sub.w	r1, r1, r0
 8000306:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 800030a:	f9b3 8000 	ldrsh.w	r8, [r3]
 800030e:	f103 0304 	add.w	r3, r3, #4
 8000312:	eba5 0e04 	sub.w	lr, r5, r4
 8000316:	fb0e fc09 	mul.w	ip, lr, r9
 800031a:	eb08 0e49 	add.w	lr, r8, r9, lsl #1
 800031e:	fb05 c908 	mla	r9, r5, r8, ip
 8000322:	fb04 c80e 	mla	r8, r4, lr, ip
 8000326:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800032a:	f9b1 4000 	ldrsh.w	r4, [r1]
 800032e:	eba1 0100 	sub.w	r1, r1, r0
 8000332:	f9b3 7002 	ldrsh.w	r7, [r3, #2]
 8000336:	f9b3 6000 	ldrsh.w	r6, [r3]
 800033a:	f103 0304 	add.w	r3, r3, #4
 800033e:	eba5 0e04 	sub.w	lr, r5, r4
 8000342:	fb0e fc07 	mul.w	ip, lr, r7
 8000346:	eb06 0e47 	add.w	lr, r6, r7, lsl #1
 800034a:	fb05 c706 	mla	r7, r5, r6, ip
 800034e:	fb04 c60e 	mla	r6, r4, lr, ip
 8000352:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8000356:	f9b1 4000 	ldrsh.w	r4, [r1]
 800035a:	44d0      	add	r8, sl
 800035c:	44d9      	add	r9, fp
 800035e:	eba8 0a4a 	sub.w	sl, r8, sl, lsl #1
 8000362:	eba9 0b4b 	sub.w	fp, r9, fp, lsl #1
 8000366:	ea4f 04a4 	mov.w	r4, r4, asr #2
 800036a:	ea4f 05a5 	mov.w	r5, r5, asr #2
 800036e:	eb04 4426 	add.w	r4, r4, r6, asr #16
 8000372:	eb05 4527 	add.w	r5, r5, r7, asr #16
 8000376:	eba4 36e6 	sub.w	r6, r4, r6, asr #15
 800037a:	eba5 37e7 	sub.w	r7, r5, r7, asr #15
 800037e:	eb04 4428 	add.w	r4, r4, r8, asr #16
 8000382:	eb05 4529 	add.w	r5, r5, r9, asr #16
 8000386:	eba4 38e8 	sub.w	r8, r4, r8, asr #15
 800038a:	eba5 39e9 	sub.w	r9, r5, r9, asr #15
 800038e:	eb06 462b 	add.w	r6, r6, fp, asr #16
 8000392:	eba7 472a 	sub.w	r7, r7, sl, asr #16
 8000396:	eba6 3beb 	sub.w	fp, r6, fp, asr #15
 800039a:	eb07 3aea 	add.w	sl, r7, sl, asr #15
 800039e:	804d      	strh	r5, [r1, #2]
 80003a0:	800c      	strh	r4, [r1, #0]
 80003a2:	4401      	add	r1, r0
 80003a4:	804f      	strh	r7, [r1, #2]
 80003a6:	800e      	strh	r6, [r1, #0]
 80003a8:	4401      	add	r1, r0
 80003aa:	f8a1 9002 	strh.w	r9, [r1, #2]
 80003ae:	f8a1 8000 	strh.w	r8, [r1]
 80003b2:	4401      	add	r1, r0
 80003b4:	f8a1 a002 	strh.w	sl, [r1, #2]
 80003b8:	f821 bb04 	strh.w	fp, [r1], #4
 80003bc:	f5b2 3280 	subs.w	r2, r2, #65536	; 0x10000
 80003c0:	da85      	bge.n	80002ce <butterloop_v7>
 80003c2:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80003c6:	4461      	add	r1, ip
 80003c8:	f1a2 0201 	sub.w	r2, r2, #1
 80003cc:	ea5f 4e02 	movs.w	lr, r2, lsl #16
 80003d0:	bf18      	it	ne
 80003d2:	eba3 030c 	subne.w	r3, r3, ip
 80003d6:	f47f af78 	bne.w	80002ca <grouploop_v7>
 80003da:	bc06      	pop	{r1, r2}
 80003dc:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80003e0:	0892      	lsrs	r2, r2, #2
 80003e2:	f47f af6b 	bne.w	80002bc <passloop_v7>
 80003e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003ea <TableFFT_V7>:
 80003ea:	4000      	.short	0x4000
 80003ec:	40000000 	.word	0x40000000
 80003f0:	40000000 	.word	0x40000000
 80003f4:	dd5d0000 	.word	0xdd5d0000
 80003f8:	22a33b21 	.word	0x22a33b21
 80003fc:	0000187e 	.word	0x0000187e
 8000400:	a57e2d41 	.word	0xa57e2d41
 8000404:	00002d41 	.word	0x00002d41
 8000408:	c0002d41 	.word	0xc0002d41
 800040c:	dd5d4000 	.word	0xdd5d4000
 8000410:	dd5de782 	.word	0xdd5de782
 8000414:	a57e3b21 	.word	0xa57e3b21
 8000418:	40002d41 	.word	0x40002d41
 800041c:	40000000 	.word	0x40000000
 8000420:	40000000 	.word	0x40000000
 8000424:	2aaa0000 	.word	0x2aaa0000
 8000428:	396b1294 	.word	0x396b1294
 800042c:	32490646 	.word	0x32490646
 8000430:	11a80c7c 	.word	0x11a80c7c
 8000434:	3249238e 	.word	0x3249238e
 8000438:	22a30c7c 	.word	0x22a30c7c
 800043c:	f721187e 	.word	0xf721187e
 8000440:	2aaa3179 	.word	0x2aaa3179
 8000444:	11a81294 	.word	0x11a81294
 8000448:	dd5d238e 	.word	0xdd5d238e
 800044c:	22a33b21 	.word	0x22a33b21
 8000450:	0000187e 	.word	0x0000187e
 8000454:	c6952d41 	.word	0xc6952d41
 8000458:	1a463fb1 	.word	0x1a463fb1
 800045c:	ee581e2b 	.word	0xee581e2b
 8000460:	b4be3537 	.word	0xb4be3537
 8000464:	11a83ec5 	.word	0x11a83ec5
 8000468:	dd5d238e 	.word	0xdd5d238e
 800046c:	a9633b21 	.word	0xa9633b21
 8000470:	08df3871 	.word	0x08df3871
 8000474:	cdb7289a 	.word	0xcdb7289a
 8000478:	a57e3ec5 	.word	0xa57e3ec5
 800047c:	00002d41 	.word	0x00002d41
 8000480:	c0002d41 	.word	0xc0002d41
 8000484:	a9634000 	.word	0xa9634000
 8000488:	f7211e2b 	.word	0xf7211e2b
 800048c:	b4be3179 	.word	0xb4be3179
 8000490:	b4be3ec5 	.word	0xb4be3ec5
 8000494:	ee580c7c 	.word	0xee580c7c
 8000498:	ac613537 	.word	0xac613537
 800049c:	c6953b21 	.word	0xc6953b21
 80004a0:	e5baf9ba 	.word	0xe5baf9ba
 80004a4:	a73b3871 	.word	0xa73b3871
 80004a8:	dd5d3537 	.word	0xdd5d3537
 80004ac:	dd5de782 	.word	0xdd5de782
 80004b0:	a57e3b21 	.word	0xa57e3b21
 80004b4:	f7212d41 	.word	0xf7212d41
 80004b8:	d556d766 	.word	0xd556d766
 80004bc:	a73b3d3f 	.word	0xa73b3d3f
 80004c0:	11a8238e 	.word	0x11a8238e
 80004c4:	cdb7cac9 	.word	0xcdb7cac9
 80004c8:	ac613ec5 	.word	0xac613ec5
 80004cc:	2aaa187e 	.word	0x2aaa187e
 80004d0:	c695c2c1 	.word	0xc695c2c1
 80004d4:	b4be3fb1 	.word	0xb4be3fb1
 80004d8:	0c7c      	.short	0x0c7c

080004da <strcmp>:
 80004da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	bf28      	it	cs
 80004e6:	429a      	cmpcs	r2, r3
 80004e8:	d0f7      	beq.n	80004da <strcmp>
 80004ea:	1ad0      	subs	r0, r2, r3
 80004ec:	4770      	bx	lr

080004ee <strlen>:
 80004ee:	4603      	mov	r3, r0
 80004f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004f4:	2a00      	cmp	r2, #0
 80004f6:	d1fb      	bne.n	80004f0 <strlen+0x2>
 80004f8:	1a18      	subs	r0, r3, r0
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
	...

08000500 <memchr>:
 8000500:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000504:	2a10      	cmp	r2, #16
 8000506:	db2b      	blt.n	8000560 <memchr+0x60>
 8000508:	f010 0f07 	tst.w	r0, #7
 800050c:	d008      	beq.n	8000520 <memchr+0x20>
 800050e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000512:	3a01      	subs	r2, #1
 8000514:	428b      	cmp	r3, r1
 8000516:	d02d      	beq.n	8000574 <memchr+0x74>
 8000518:	f010 0f07 	tst.w	r0, #7
 800051c:	b342      	cbz	r2, 8000570 <memchr+0x70>
 800051e:	d1f6      	bne.n	800050e <memchr+0xe>
 8000520:	b4f0      	push	{r4, r5, r6, r7}
 8000522:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000526:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800052a:	f022 0407 	bic.w	r4, r2, #7
 800052e:	f07f 0700 	mvns.w	r7, #0
 8000532:	2300      	movs	r3, #0
 8000534:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000538:	3c08      	subs	r4, #8
 800053a:	ea85 0501 	eor.w	r5, r5, r1
 800053e:	ea86 0601 	eor.w	r6, r6, r1
 8000542:	fa85 f547 	uadd8	r5, r5, r7
 8000546:	faa3 f587 	sel	r5, r3, r7
 800054a:	fa86 f647 	uadd8	r6, r6, r7
 800054e:	faa5 f687 	sel	r6, r5, r7
 8000552:	b98e      	cbnz	r6, 8000578 <memchr+0x78>
 8000554:	d1ee      	bne.n	8000534 <memchr+0x34>
 8000556:	bcf0      	pop	{r4, r5, r6, r7}
 8000558:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800055c:	f002 0207 	and.w	r2, r2, #7
 8000560:	b132      	cbz	r2, 8000570 <memchr+0x70>
 8000562:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000566:	3a01      	subs	r2, #1
 8000568:	ea83 0301 	eor.w	r3, r3, r1
 800056c:	b113      	cbz	r3, 8000574 <memchr+0x74>
 800056e:	d1f8      	bne.n	8000562 <memchr+0x62>
 8000570:	2000      	movs	r0, #0
 8000572:	4770      	bx	lr
 8000574:	3801      	subs	r0, #1
 8000576:	4770      	bx	lr
 8000578:	2d00      	cmp	r5, #0
 800057a:	bf06      	itte	eq
 800057c:	4635      	moveq	r5, r6
 800057e:	3803      	subeq	r0, #3
 8000580:	3807      	subne	r0, #7
 8000582:	f015 0f01 	tst.w	r5, #1
 8000586:	d107      	bne.n	8000598 <memchr+0x98>
 8000588:	3001      	adds	r0, #1
 800058a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800058e:	bf02      	ittt	eq
 8000590:	3001      	addeq	r0, #1
 8000592:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000596:	3001      	addeq	r0, #1
 8000598:	bcf0      	pop	{r4, r5, r6, r7}
 800059a:	3801      	subs	r0, #1
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <__aeabi_drsub>:
 80005a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80005a4:	e002      	b.n	80005ac <__adddf3>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dsub>:
 80005a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080005ac <__adddf3>:
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80005b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	bf1f      	itttt	ne
 80005c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80005c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80005ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80005ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d2:	f000 80e2 	beq.w	800079a <__adddf3+0x1ee>
 80005d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80005da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80005de:	bfb8      	it	lt
 80005e0:	426d      	neglt	r5, r5
 80005e2:	dd0c      	ble.n	80005fe <__adddf3+0x52>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea80 0202 	eor.w	r2, r0, r2
 80005ea:	ea81 0303 	eor.w	r3, r1, r3
 80005ee:	ea82 0000 	eor.w	r0, r2, r0
 80005f2:	ea83 0101 	eor.w	r1, r3, r1
 80005f6:	ea80 0202 	eor.w	r2, r0, r2
 80005fa:	ea81 0303 	eor.w	r3, r1, r3
 80005fe:	2d36      	cmp	r5, #54	; 0x36
 8000600:	bf88      	it	hi
 8000602:	bd30      	pophi	{r4, r5, pc}
 8000604:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000608:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800060c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000610:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000614:	d002      	beq.n	800061c <__adddf3+0x70>
 8000616:	4240      	negs	r0, r0
 8000618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000620:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000624:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000628:	d002      	beq.n	8000630 <__adddf3+0x84>
 800062a:	4252      	negs	r2, r2
 800062c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000630:	ea94 0f05 	teq	r4, r5
 8000634:	f000 80a7 	beq.w	8000786 <__adddf3+0x1da>
 8000638:	f1a4 0401 	sub.w	r4, r4, #1
 800063c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000640:	db0d      	blt.n	800065e <__adddf3+0xb2>
 8000642:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000646:	fa22 f205 	lsr.w	r2, r2, r5
 800064a:	1880      	adds	r0, r0, r2
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	fa03 f20e 	lsl.w	r2, r3, lr
 8000654:	1880      	adds	r0, r0, r2
 8000656:	fa43 f305 	asr.w	r3, r3, r5
 800065a:	4159      	adcs	r1, r3
 800065c:	e00e      	b.n	800067c <__adddf3+0xd0>
 800065e:	f1a5 0520 	sub.w	r5, r5, #32
 8000662:	f10e 0e20 	add.w	lr, lr, #32
 8000666:	2a01      	cmp	r2, #1
 8000668:	fa03 fc0e 	lsl.w	ip, r3, lr
 800066c:	bf28      	it	cs
 800066e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000672:	fa43 f305 	asr.w	r3, r3, r5
 8000676:	18c0      	adds	r0, r0, r3
 8000678:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	d507      	bpl.n	8000692 <__adddf3+0xe6>
 8000682:	f04f 0e00 	mov.w	lr, #0
 8000686:	f1dc 0c00 	rsbs	ip, ip, #0
 800068a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800068e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000692:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000696:	d31b      	bcc.n	80006d0 <__adddf3+0x124>
 8000698:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800069c:	d30c      	bcc.n	80006b8 <__adddf3+0x10c>
 800069e:	0849      	lsrs	r1, r1, #1
 80006a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80006a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80006a8:	f104 0401 	add.w	r4, r4, #1
 80006ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80006b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80006b4:	f080 809a 	bcs.w	80007ec <__adddf3+0x240>
 80006b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	ea41 0105 	orr.w	r1, r1, r5
 80006ce:	bd30      	pop	{r4, r5, pc}
 80006d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80006d4:	4140      	adcs	r0, r0
 80006d6:	eb41 0101 	adc.w	r1, r1, r1
 80006da:	3c01      	subs	r4, #1
 80006dc:	bf28      	it	cs
 80006de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80006e2:	d2e9      	bcs.n	80006b8 <__adddf3+0x10c>
 80006e4:	f091 0f00 	teq	r1, #0
 80006e8:	bf04      	itt	eq
 80006ea:	4601      	moveq	r1, r0
 80006ec:	2000      	moveq	r0, #0
 80006ee:	fab1 f381 	clz	r3, r1
 80006f2:	bf08      	it	eq
 80006f4:	3320      	addeq	r3, #32
 80006f6:	f1a3 030b 	sub.w	r3, r3, #11
 80006fa:	f1b3 0220 	subs.w	r2, r3, #32
 80006fe:	da0c      	bge.n	800071a <__adddf3+0x16e>
 8000700:	320c      	adds	r2, #12
 8000702:	dd08      	ble.n	8000716 <__adddf3+0x16a>
 8000704:	f102 0c14 	add.w	ip, r2, #20
 8000708:	f1c2 020c 	rsb	r2, r2, #12
 800070c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000710:	fa21 f102 	lsr.w	r1, r1, r2
 8000714:	e00c      	b.n	8000730 <__adddf3+0x184>
 8000716:	f102 0214 	add.w	r2, r2, #20
 800071a:	bfd8      	it	le
 800071c:	f1c2 0c20 	rsble	ip, r2, #32
 8000720:	fa01 f102 	lsl.w	r1, r1, r2
 8000724:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000728:	bfdc      	itt	le
 800072a:	ea41 010c 	orrle.w	r1, r1, ip
 800072e:	4090      	lslle	r0, r2
 8000730:	1ae4      	subs	r4, r4, r3
 8000732:	bfa2      	ittt	ge
 8000734:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000738:	4329      	orrge	r1, r5
 800073a:	bd30      	popge	{r4, r5, pc}
 800073c:	ea6f 0404 	mvn.w	r4, r4
 8000740:	3c1f      	subs	r4, #31
 8000742:	da1c      	bge.n	800077e <__adddf3+0x1d2>
 8000744:	340c      	adds	r4, #12
 8000746:	dc0e      	bgt.n	8000766 <__adddf3+0x1ba>
 8000748:	f104 0414 	add.w	r4, r4, #20
 800074c:	f1c4 0220 	rsb	r2, r4, #32
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f302 	lsl.w	r3, r1, r2
 8000758:	ea40 0003 	orr.w	r0, r0, r3
 800075c:	fa21 f304 	lsr.w	r3, r1, r4
 8000760:	ea45 0103 	orr.w	r1, r5, r3
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	f1c4 040c 	rsb	r4, r4, #12
 800076a:	f1c4 0220 	rsb	r2, r4, #32
 800076e:	fa20 f002 	lsr.w	r0, r0, r2
 8000772:	fa01 f304 	lsl.w	r3, r1, r4
 8000776:	ea40 0003 	orr.w	r0, r0, r3
 800077a:	4629      	mov	r1, r5
 800077c:	bd30      	pop	{r4, r5, pc}
 800077e:	fa21 f004 	lsr.w	r0, r1, r4
 8000782:	4629      	mov	r1, r5
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	f094 0f00 	teq	r4, #0
 800078a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800078e:	bf06      	itte	eq
 8000790:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000794:	3401      	addeq	r4, #1
 8000796:	3d01      	subne	r5, #1
 8000798:	e74e      	b.n	8000638 <__adddf3+0x8c>
 800079a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800079e:	bf18      	it	ne
 80007a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80007a4:	d029      	beq.n	80007fa <__adddf3+0x24e>
 80007a6:	ea94 0f05 	teq	r4, r5
 80007aa:	bf08      	it	eq
 80007ac:	ea90 0f02 	teqeq	r0, r2
 80007b0:	d005      	beq.n	80007be <__adddf3+0x212>
 80007b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80007b6:	bf04      	itt	eq
 80007b8:	4619      	moveq	r1, r3
 80007ba:	4610      	moveq	r0, r2
 80007bc:	bd30      	pop	{r4, r5, pc}
 80007be:	ea91 0f03 	teq	r1, r3
 80007c2:	bf1e      	ittt	ne
 80007c4:	2100      	movne	r1, #0
 80007c6:	2000      	movne	r0, #0
 80007c8:	bd30      	popne	{r4, r5, pc}
 80007ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80007ce:	d105      	bne.n	80007dc <__adddf3+0x230>
 80007d0:	0040      	lsls	r0, r0, #1
 80007d2:	4149      	adcs	r1, r1
 80007d4:	bf28      	it	cs
 80007d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80007da:	bd30      	pop	{r4, r5, pc}
 80007dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80007e0:	bf3c      	itt	cc
 80007e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80007e6:	bd30      	popcc	{r4, r5, pc}
 80007e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd30      	pop	{r4, r5, pc}
 80007fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007fe:	bf1a      	itte	ne
 8000800:	4619      	movne	r1, r3
 8000802:	4610      	movne	r0, r2
 8000804:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000808:	bf1c      	itt	ne
 800080a:	460b      	movne	r3, r1
 800080c:	4602      	movne	r2, r0
 800080e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000812:	bf06      	itte	eq
 8000814:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000818:	ea91 0f03 	teqeq	r1, r3
 800081c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000820:	bd30      	pop	{r4, r5, pc}
 8000822:	bf00      	nop

08000824 <__aeabi_ui2d>:
 8000824:	f090 0f00 	teq	r0, #0
 8000828:	bf04      	itt	eq
 800082a:	2100      	moveq	r1, #0
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000834:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000838:	f04f 0500 	mov.w	r5, #0
 800083c:	f04f 0100 	mov.w	r1, #0
 8000840:	e750      	b.n	80006e4 <__adddf3+0x138>
 8000842:	bf00      	nop

08000844 <__aeabi_i2d>:
 8000844:	f090 0f00 	teq	r0, #0
 8000848:	bf04      	itt	eq
 800084a:	2100      	moveq	r1, #0
 800084c:	4770      	bxeq	lr
 800084e:	b530      	push	{r4, r5, lr}
 8000850:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000854:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000858:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800085c:	bf48      	it	mi
 800085e:	4240      	negmi	r0, r0
 8000860:	f04f 0100 	mov.w	r1, #0
 8000864:	e73e      	b.n	80006e4 <__adddf3+0x138>
 8000866:	bf00      	nop

08000868 <__aeabi_f2d>:
 8000868:	0042      	lsls	r2, r0, #1
 800086a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800086e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000872:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000876:	bf1f      	itttt	ne
 8000878:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800087c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000880:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000884:	4770      	bxne	lr
 8000886:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800088a:	bf08      	it	eq
 800088c:	4770      	bxeq	lr
 800088e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000892:	bf04      	itt	eq
 8000894:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000898:	4770      	bxeq	lr
 800089a:	b530      	push	{r4, r5, lr}
 800089c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80008a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80008a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80008a8:	e71c      	b.n	80006e4 <__adddf3+0x138>
 80008aa:	bf00      	nop

080008ac <__aeabi_ul2d>:
 80008ac:	ea50 0201 	orrs.w	r2, r0, r1
 80008b0:	bf08      	it	eq
 80008b2:	4770      	bxeq	lr
 80008b4:	b530      	push	{r4, r5, lr}
 80008b6:	f04f 0500 	mov.w	r5, #0
 80008ba:	e00a      	b.n	80008d2 <__aeabi_l2d+0x16>

080008bc <__aeabi_l2d>:
 80008bc:	ea50 0201 	orrs.w	r2, r0, r1
 80008c0:	bf08      	it	eq
 80008c2:	4770      	bxeq	lr
 80008c4:	b530      	push	{r4, r5, lr}
 80008c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80008ca:	d502      	bpl.n	80008d2 <__aeabi_l2d+0x16>
 80008cc:	4240      	negs	r0, r0
 80008ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80008d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80008da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80008de:	f43f aed8 	beq.w	8000692 <__adddf3+0xe6>
 80008e2:	f04f 0203 	mov.w	r2, #3
 80008e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008ea:	bf18      	it	ne
 80008ec:	3203      	addne	r2, #3
 80008ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008f2:	bf18      	it	ne
 80008f4:	3203      	addne	r2, #3
 80008f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008fa:	f1c2 0320 	rsb	r3, r2, #32
 80008fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	fa01 fe03 	lsl.w	lr, r1, r3
 800090a:	ea40 000e 	orr.w	r0, r0, lr
 800090e:	fa21 f102 	lsr.w	r1, r1, r2
 8000912:	4414      	add	r4, r2
 8000914:	e6bd      	b.n	8000692 <__adddf3+0xe6>
 8000916:	bf00      	nop

08000918 <__aeabi_dmul>:
 8000918:	b570      	push	{r4, r5, r6, lr}
 800091a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800091e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000922:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000926:	bf1d      	ittte	ne
 8000928:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800092c:	ea94 0f0c 	teqne	r4, ip
 8000930:	ea95 0f0c 	teqne	r5, ip
 8000934:	f000 f8de 	bleq	8000af4 <__aeabi_dmul+0x1dc>
 8000938:	442c      	add	r4, r5
 800093a:	ea81 0603 	eor.w	r6, r1, r3
 800093e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000942:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000946:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800094a:	bf18      	it	ne
 800094c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000958:	d038      	beq.n	80009cc <__aeabi_dmul+0xb4>
 800095a:	fba0 ce02 	umull	ip, lr, r0, r2
 800095e:	f04f 0500 	mov.w	r5, #0
 8000962:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000966:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800096a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800096e:	f04f 0600 	mov.w	r6, #0
 8000972:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000976:	f09c 0f00 	teq	ip, #0
 800097a:	bf18      	it	ne
 800097c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000980:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000984:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000988:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800098c:	d204      	bcs.n	8000998 <__aeabi_dmul+0x80>
 800098e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000992:	416d      	adcs	r5, r5
 8000994:	eb46 0606 	adc.w	r6, r6, r6
 8000998:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800099c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80009a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80009a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80009a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80009ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b0:	bf88      	it	hi
 80009b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b6:	d81e      	bhi.n	80009f6 <__aeabi_dmul+0xde>
 80009b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80009c2:	f150 0000 	adcs.w	r0, r0, #0
 80009c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80009d0:	ea46 0101 	orr.w	r1, r6, r1
 80009d4:	ea40 0002 	orr.w	r0, r0, r2
 80009d8:	ea81 0103 	eor.w	r1, r1, r3
 80009dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	f300 80ab 	bgt.w	8000b50 <__aeabi_dmul+0x238>
 80009fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009fe:	bfde      	ittt	le
 8000a00:	2000      	movle	r0, #0
 8000a02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000a06:	bd70      	pople	{r4, r5, r6, pc}
 8000a08:	f1c4 0400 	rsb	r4, r4, #0
 8000a0c:	3c20      	subs	r4, #32
 8000a0e:	da35      	bge.n	8000a7c <__aeabi_dmul+0x164>
 8000a10:	340c      	adds	r4, #12
 8000a12:	dc1b      	bgt.n	8000a4c <__aeabi_dmul+0x134>
 8000a14:	f104 0414 	add.w	r4, r4, #20
 8000a18:	f1c4 0520 	rsb	r5, r4, #32
 8000a1c:	fa00 f305 	lsl.w	r3, r0, r5
 8000a20:	fa20 f004 	lsr.w	r0, r0, r4
 8000a24:	fa01 f205 	lsl.w	r2, r1, r5
 8000a28:	ea40 0002 	orr.w	r0, r0, r2
 8000a2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000a30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000a34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a38:	fa21 f604 	lsr.w	r6, r1, r4
 8000a3c:	eb42 0106 	adc.w	r1, r2, r6
 8000a40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a44:	bf08      	it	eq
 8000a46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	f1c4 040c 	rsb	r4, r4, #12
 8000a50:	f1c4 0520 	rsb	r5, r4, #32
 8000a54:	fa00 f304 	lsl.w	r3, r0, r4
 8000a58:	fa20 f005 	lsr.w	r0, r0, r5
 8000a5c:	fa01 f204 	lsl.w	r2, r1, r4
 8000a60:	ea40 0002 	orr.w	r0, r0, r2
 8000a64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a6c:	f141 0100 	adc.w	r1, r1, #0
 8000a70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a74:	bf08      	it	eq
 8000a76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a7a:	bd70      	pop	{r4, r5, r6, pc}
 8000a7c:	f1c4 0520 	rsb	r5, r4, #32
 8000a80:	fa00 f205 	lsl.w	r2, r0, r5
 8000a84:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a88:	fa20 f304 	lsr.w	r3, r0, r4
 8000a8c:	fa01 f205 	lsl.w	r2, r1, r5
 8000a90:	ea43 0302 	orr.w	r3, r3, r2
 8000a94:	fa21 f004 	lsr.w	r0, r1, r4
 8000a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a9c:	fa21 f204 	lsr.w	r2, r1, r4
 8000aa0:	ea20 0002 	bic.w	r0, r0, r2
 8000aa4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000aa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000aac:	bf08      	it	eq
 8000aae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f094 0f00 	teq	r4, #0
 8000ab8:	d10f      	bne.n	8000ada <__aeabi_dmul+0x1c2>
 8000aba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000abe:	0040      	lsls	r0, r0, #1
 8000ac0:	eb41 0101 	adc.w	r1, r1, r1
 8000ac4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ac8:	bf08      	it	eq
 8000aca:	3c01      	subeq	r4, #1
 8000acc:	d0f7      	beq.n	8000abe <__aeabi_dmul+0x1a6>
 8000ace:	ea41 0106 	orr.w	r1, r1, r6
 8000ad2:	f095 0f00 	teq	r5, #0
 8000ad6:	bf18      	it	ne
 8000ad8:	4770      	bxne	lr
 8000ada:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000ade:	0052      	lsls	r2, r2, #1
 8000ae0:	eb43 0303 	adc.w	r3, r3, r3
 8000ae4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000ae8:	bf08      	it	eq
 8000aea:	3d01      	subeq	r5, #1
 8000aec:	d0f7      	beq.n	8000ade <__aeabi_dmul+0x1c6>
 8000aee:	ea43 0306 	orr.w	r3, r3, r6
 8000af2:	4770      	bx	lr
 8000af4:	ea94 0f0c 	teq	r4, ip
 8000af8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000afc:	bf18      	it	ne
 8000afe:	ea95 0f0c 	teqne	r5, ip
 8000b02:	d00c      	beq.n	8000b1e <__aeabi_dmul+0x206>
 8000b04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b08:	bf18      	it	ne
 8000b0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b0e:	d1d1      	bne.n	8000ab4 <__aeabi_dmul+0x19c>
 8000b10:	ea81 0103 	eor.w	r1, r1, r3
 8000b14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	bd70      	pop	{r4, r5, r6, pc}
 8000b1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b22:	bf06      	itte	eq
 8000b24:	4610      	moveq	r0, r2
 8000b26:	4619      	moveq	r1, r3
 8000b28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b2c:	d019      	beq.n	8000b62 <__aeabi_dmul+0x24a>
 8000b2e:	ea94 0f0c 	teq	r4, ip
 8000b32:	d102      	bne.n	8000b3a <__aeabi_dmul+0x222>
 8000b34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000b38:	d113      	bne.n	8000b62 <__aeabi_dmul+0x24a>
 8000b3a:	ea95 0f0c 	teq	r5, ip
 8000b3e:	d105      	bne.n	8000b4c <__aeabi_dmul+0x234>
 8000b40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000b44:	bf1c      	itt	ne
 8000b46:	4610      	movne	r0, r2
 8000b48:	4619      	movne	r1, r3
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dmul+0x24a>
 8000b4c:	ea81 0103 	eor.w	r1, r1, r3
 8000b50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	bd70      	pop	{r4, r5, r6, pc}
 8000b62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}

08000b6c <__aeabi_ddiv>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b7a:	bf1d      	ittte	ne
 8000b7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b80:	ea94 0f0c 	teqne	r4, ip
 8000b84:	ea95 0f0c 	teqne	r5, ip
 8000b88:	f000 f8a7 	bleq	8000cda <__aeabi_ddiv+0x16e>
 8000b8c:	eba4 0405 	sub.w	r4, r4, r5
 8000b90:	ea81 0e03 	eor.w	lr, r1, r3
 8000b94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b9c:	f000 8088 	beq.w	8000cb0 <__aeabi_ddiv+0x144>
 8000ba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ba4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ba8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000bac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000bb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000bb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000bb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000bbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000bc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000bc4:	429d      	cmp	r5, r3
 8000bc6:	bf08      	it	eq
 8000bc8:	4296      	cmpeq	r6, r2
 8000bca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000bce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000bd2:	d202      	bcs.n	8000bda <__aeabi_ddiv+0x6e>
 8000bd4:	085b      	lsrs	r3, r3, #1
 8000bd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bda:	1ab6      	subs	r6, r6, r2
 8000bdc:	eb65 0503 	sbc.w	r5, r5, r3
 8000be0:	085b      	lsrs	r3, r3, #1
 8000be2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000be6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000bea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000bee:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bf6:	bf22      	ittt	cs
 8000bf8:	1ab6      	subcs	r6, r6, r2
 8000bfa:	4675      	movcs	r5, lr
 8000bfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c00:	085b      	lsrs	r3, r3, #1
 8000c02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c0e:	bf22      	ittt	cs
 8000c10:	1ab6      	subcs	r6, r6, r2
 8000c12:	4675      	movcs	r5, lr
 8000c14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c18:	085b      	lsrs	r3, r3, #1
 8000c1a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c26:	bf22      	ittt	cs
 8000c28:	1ab6      	subcs	r6, r6, r2
 8000c2a:	4675      	movcs	r5, lr
 8000c2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c30:	085b      	lsrs	r3, r3, #1
 8000c32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000c36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000c3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000c3e:	bf22      	ittt	cs
 8000c40:	1ab6      	subcs	r6, r6, r2
 8000c42:	4675      	movcs	r5, lr
 8000c44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c48:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c4c:	d018      	beq.n	8000c80 <__aeabi_ddiv+0x114>
 8000c4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c56:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c6a:	d1c0      	bne.n	8000bee <__aeabi_ddiv+0x82>
 8000c6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c70:	d10b      	bne.n	8000c8a <__aeabi_ddiv+0x11e>
 8000c72:	ea41 0100 	orr.w	r1, r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c7e:	e7b6      	b.n	8000bee <__aeabi_ddiv+0x82>
 8000c80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c84:	bf04      	itt	eq
 8000c86:	4301      	orreq	r1, r0
 8000c88:	2000      	moveq	r0, #0
 8000c8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c8e:	bf88      	it	hi
 8000c90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c94:	f63f aeaf 	bhi.w	80009f6 <__aeabi_dmul+0xde>
 8000c98:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c9c:	bf04      	itt	eq
 8000c9e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ca2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ca6:	f150 0000 	adcs.w	r0, r0, #0
 8000caa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000cae:	bd70      	pop	{r4, r5, r6, pc}
 8000cb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000cb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000cb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000cbc:	bfc2      	ittt	gt
 8000cbe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000cc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000cc6:	bd70      	popgt	{r4, r5, r6, pc}
 8000cc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ccc:	f04f 0e00 	mov.w	lr, #0
 8000cd0:	3c01      	subs	r4, #1
 8000cd2:	e690      	b.n	80009f6 <__aeabi_dmul+0xde>
 8000cd4:	ea45 0e06 	orr.w	lr, r5, r6
 8000cd8:	e68d      	b.n	80009f6 <__aeabi_dmul+0xde>
 8000cda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000cde:	ea94 0f0c 	teq	r4, ip
 8000ce2:	bf08      	it	eq
 8000ce4:	ea95 0f0c 	teqeq	r5, ip
 8000ce8:	f43f af3b 	beq.w	8000b62 <__aeabi_dmul+0x24a>
 8000cec:	ea94 0f0c 	teq	r4, ip
 8000cf0:	d10a      	bne.n	8000d08 <__aeabi_ddiv+0x19c>
 8000cf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000cf6:	f47f af34 	bne.w	8000b62 <__aeabi_dmul+0x24a>
 8000cfa:	ea95 0f0c 	teq	r5, ip
 8000cfe:	f47f af25 	bne.w	8000b4c <__aeabi_dmul+0x234>
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	e72c      	b.n	8000b62 <__aeabi_dmul+0x24a>
 8000d08:	ea95 0f0c 	teq	r5, ip
 8000d0c:	d106      	bne.n	8000d1c <__aeabi_ddiv+0x1b0>
 8000d0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000d12:	f43f aefd 	beq.w	8000b10 <__aeabi_dmul+0x1f8>
 8000d16:	4610      	mov	r0, r2
 8000d18:	4619      	mov	r1, r3
 8000d1a:	e722      	b.n	8000b62 <__aeabi_dmul+0x24a>
 8000d1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000d20:	bf18      	it	ne
 8000d22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000d26:	f47f aec5 	bne.w	8000ab4 <__aeabi_dmul+0x19c>
 8000d2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000d2e:	f47f af0d 	bne.w	8000b4c <__aeabi_dmul+0x234>
 8000d32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000d36:	f47f aeeb 	bne.w	8000b10 <__aeabi_dmul+0x1f8>
 8000d3a:	e712      	b.n	8000b62 <__aeabi_dmul+0x24a>

08000d3c <__gedf2>:
 8000d3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000d40:	e006      	b.n	8000d50 <__cmpdf2+0x4>
 8000d42:	bf00      	nop

08000d44 <__ledf2>:
 8000d44:	f04f 0c01 	mov.w	ip, #1
 8000d48:	e002      	b.n	8000d50 <__cmpdf2+0x4>
 8000d4a:	bf00      	nop

08000d4c <__cmpdf2>:
 8000d4c:	f04f 0c01 	mov.w	ip, #1
 8000d50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d60:	bf18      	it	ne
 8000d62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d66:	d01b      	beq.n	8000da0 <__cmpdf2+0x54>
 8000d68:	b001      	add	sp, #4
 8000d6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d6e:	bf0c      	ite	eq
 8000d70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d74:	ea91 0f03 	teqne	r1, r3
 8000d78:	bf02      	ittt	eq
 8000d7a:	ea90 0f02 	teqeq	r0, r2
 8000d7e:	2000      	moveq	r0, #0
 8000d80:	4770      	bxeq	lr
 8000d82:	f110 0f00 	cmn.w	r0, #0
 8000d86:	ea91 0f03 	teq	r1, r3
 8000d8a:	bf58      	it	pl
 8000d8c:	4299      	cmppl	r1, r3
 8000d8e:	bf08      	it	eq
 8000d90:	4290      	cmpeq	r0, r2
 8000d92:	bf2c      	ite	cs
 8000d94:	17d8      	asrcs	r0, r3, #31
 8000d96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d9a:	f040 0001 	orr.w	r0, r0, #1
 8000d9e:	4770      	bx	lr
 8000da0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000da4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000da8:	d102      	bne.n	8000db0 <__cmpdf2+0x64>
 8000daa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dae:	d107      	bne.n	8000dc0 <__cmpdf2+0x74>
 8000db0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000db4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000db8:	d1d6      	bne.n	8000d68 <__cmpdf2+0x1c>
 8000dba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dbe:	d0d3      	beq.n	8000d68 <__cmpdf2+0x1c>
 8000dc0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_cdrcmple>:
 8000dc8:	4684      	mov	ip, r0
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4662      	mov	r2, ip
 8000dce:	468c      	mov	ip, r1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4663      	mov	r3, ip
 8000dd4:	e000      	b.n	8000dd8 <__aeabi_cdcmpeq>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_cdcmpeq>:
 8000dd8:	b501      	push	{r0, lr}
 8000dda:	f7ff ffb7 	bl	8000d4c <__cmpdf2>
 8000dde:	2800      	cmp	r0, #0
 8000de0:	bf48      	it	mi
 8000de2:	f110 0f00 	cmnmi.w	r0, #0
 8000de6:	bd01      	pop	{r0, pc}

08000de8 <__aeabi_dcmpeq>:
 8000de8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dec:	f7ff fff4 	bl	8000dd8 <__aeabi_cdcmpeq>
 8000df0:	bf0c      	ite	eq
 8000df2:	2001      	moveq	r0, #1
 8000df4:	2000      	movne	r0, #0
 8000df6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfa:	bf00      	nop

08000dfc <__aeabi_dcmplt>:
 8000dfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e00:	f7ff ffea 	bl	8000dd8 <__aeabi_cdcmpeq>
 8000e04:	bf34      	ite	cc
 8000e06:	2001      	movcc	r0, #1
 8000e08:	2000      	movcs	r0, #0
 8000e0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e0e:	bf00      	nop

08000e10 <__aeabi_dcmple>:
 8000e10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e14:	f7ff ffe0 	bl	8000dd8 <__aeabi_cdcmpeq>
 8000e18:	bf94      	ite	ls
 8000e1a:	2001      	movls	r0, #1
 8000e1c:	2000      	movhi	r0, #0
 8000e1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e22:	bf00      	nop

08000e24 <__aeabi_dcmpge>:
 8000e24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e28:	f7ff ffce 	bl	8000dc8 <__aeabi_cdrcmple>
 8000e2c:	bf94      	ite	ls
 8000e2e:	2001      	movls	r0, #1
 8000e30:	2000      	movhi	r0, #0
 8000e32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e36:	bf00      	nop

08000e38 <__aeabi_dcmpgt>:
 8000e38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e3c:	f7ff ffc4 	bl	8000dc8 <__aeabi_cdrcmple>
 8000e40:	bf34      	ite	cc
 8000e42:	2001      	movcc	r0, #1
 8000e44:	2000      	movcs	r0, #0
 8000e46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e4a:	bf00      	nop

08000e4c <__aeabi_d2iz>:
 8000e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e54:	d215      	bcs.n	8000e82 <__aeabi_d2iz+0x36>
 8000e56:	d511      	bpl.n	8000e7c <__aeabi_d2iz+0x30>
 8000e58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e60:	d912      	bls.n	8000e88 <__aeabi_d2iz+0x3c>
 8000e62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e72:	fa23 f002 	lsr.w	r0, r3, r2
 8000e76:	bf18      	it	ne
 8000e78:	4240      	negne	r0, r0
 8000e7a:	4770      	bx	lr
 8000e7c:	f04f 0000 	mov.w	r0, #0
 8000e80:	4770      	bx	lr
 8000e82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e86:	d105      	bne.n	8000e94 <__aeabi_d2iz+0x48>
 8000e88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e92:	4770      	bx	lr
 8000e94:	f04f 0000 	mov.w	r0, #0
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <__aeabi_d2uiz>:
 8000e9c:	004a      	lsls	r2, r1, #1
 8000e9e:	d211      	bcs.n	8000ec4 <__aeabi_d2uiz+0x28>
 8000ea0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ea4:	d211      	bcs.n	8000eca <__aeabi_d2uiz+0x2e>
 8000ea6:	d50d      	bpl.n	8000ec4 <__aeabi_d2uiz+0x28>
 8000ea8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000eac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000eb0:	d40e      	bmi.n	8000ed0 <__aeabi_d2uiz+0x34>
 8000eb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000eb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000eba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ebe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ec2:	4770      	bx	lr
 8000ec4:	f04f 0000 	mov.w	r0, #0
 8000ec8:	4770      	bx	lr
 8000eca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ece:	d102      	bne.n	8000ed6 <__aeabi_d2uiz+0x3a>
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	4770      	bx	lr
 8000ed6:	f04f 0000 	mov.w	r0, #0
 8000eda:	4770      	bx	lr

08000edc <__aeabi_d2f>:
 8000edc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ee0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ee4:	bf24      	itt	cs
 8000ee6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000eea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000eee:	d90d      	bls.n	8000f0c <__aeabi_d2f+0x30>
 8000ef0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ef4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ef8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000efc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000f00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000f04:	bf08      	it	eq
 8000f06:	f020 0001 	biceq.w	r0, r0, #1
 8000f0a:	4770      	bx	lr
 8000f0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000f10:	d121      	bne.n	8000f56 <__aeabi_d2f+0x7a>
 8000f12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000f16:	bfbc      	itt	lt
 8000f18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000f1c:	4770      	bxlt	lr
 8000f1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000f22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000f26:	f1c2 0218 	rsb	r2, r2, #24
 8000f2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000f2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000f32:	fa20 f002 	lsr.w	r0, r0, r2
 8000f36:	bf18      	it	ne
 8000f38:	f040 0001 	orrne.w	r0, r0, #1
 8000f3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000f44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000f48:	ea40 000c 	orr.w	r0, r0, ip
 8000f4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000f50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000f54:	e7cc      	b.n	8000ef0 <__aeabi_d2f+0x14>
 8000f56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000f5a:	d107      	bne.n	8000f6c <__aeabi_d2f+0x90>
 8000f5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f60:	bf1e      	ittt	ne
 8000f62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f6a:	4770      	bxne	lr
 8000f6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__aeabi_uldivmod>:
 8000f7c:	b953      	cbnz	r3, 8000f94 <__aeabi_uldivmod+0x18>
 8000f7e:	b94a      	cbnz	r2, 8000f94 <__aeabi_uldivmod+0x18>
 8000f80:	2900      	cmp	r1, #0
 8000f82:	bf08      	it	eq
 8000f84:	2800      	cmpeq	r0, #0
 8000f86:	bf1c      	itt	ne
 8000f88:	f04f 31ff 	movne.w	r1, #4294967295
 8000f8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000f90:	f000 b974 	b.w	800127c <__aeabi_idiv0>
 8000f94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f9c:	f000 f806 	bl	8000fac <__udivmoddi4>
 8000fa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fa8:	b004      	add	sp, #16
 8000faa:	4770      	bx	lr

08000fac <__udivmoddi4>:
 8000fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb0:	9d08      	ldr	r5, [sp, #32]
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	468e      	mov	lr, r1
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d14d      	bne.n	8001056 <__udivmoddi4+0xaa>
 8000fba:	428a      	cmp	r2, r1
 8000fbc:	4694      	mov	ip, r2
 8000fbe:	d969      	bls.n	8001094 <__udivmoddi4+0xe8>
 8000fc0:	fab2 f282 	clz	r2, r2
 8000fc4:	b152      	cbz	r2, 8000fdc <__udivmoddi4+0x30>
 8000fc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000fca:	f1c2 0120 	rsb	r1, r2, #32
 8000fce:	fa20 f101 	lsr.w	r1, r0, r1
 8000fd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000fda:	4094      	lsls	r4, r2
 8000fdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fe0:	0c21      	lsrs	r1, r4, #16
 8000fe2:	fbbe f6f8 	udiv	r6, lr, r8
 8000fe6:	fa1f f78c 	uxth.w	r7, ip
 8000fea:	fb08 e316 	mls	r3, r8, r6, lr
 8000fee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ff2:	fb06 f107 	mul.w	r1, r6, r7
 8000ff6:	4299      	cmp	r1, r3
 8000ff8:	d90a      	bls.n	8001010 <__udivmoddi4+0x64>
 8000ffa:	eb1c 0303 	adds.w	r3, ip, r3
 8000ffe:	f106 30ff 	add.w	r0, r6, #4294967295
 8001002:	f080 811f 	bcs.w	8001244 <__udivmoddi4+0x298>
 8001006:	4299      	cmp	r1, r3
 8001008:	f240 811c 	bls.w	8001244 <__udivmoddi4+0x298>
 800100c:	3e02      	subs	r6, #2
 800100e:	4463      	add	r3, ip
 8001010:	1a5b      	subs	r3, r3, r1
 8001012:	b2a4      	uxth	r4, r4
 8001014:	fbb3 f0f8 	udiv	r0, r3, r8
 8001018:	fb08 3310 	mls	r3, r8, r0, r3
 800101c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001020:	fb00 f707 	mul.w	r7, r0, r7
 8001024:	42a7      	cmp	r7, r4
 8001026:	d90a      	bls.n	800103e <__udivmoddi4+0x92>
 8001028:	eb1c 0404 	adds.w	r4, ip, r4
 800102c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001030:	f080 810a 	bcs.w	8001248 <__udivmoddi4+0x29c>
 8001034:	42a7      	cmp	r7, r4
 8001036:	f240 8107 	bls.w	8001248 <__udivmoddi4+0x29c>
 800103a:	4464      	add	r4, ip
 800103c:	3802      	subs	r0, #2
 800103e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001042:	1be4      	subs	r4, r4, r7
 8001044:	2600      	movs	r6, #0
 8001046:	b11d      	cbz	r5, 8001050 <__udivmoddi4+0xa4>
 8001048:	40d4      	lsrs	r4, r2
 800104a:	2300      	movs	r3, #0
 800104c:	e9c5 4300 	strd	r4, r3, [r5]
 8001050:	4631      	mov	r1, r6
 8001052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001056:	428b      	cmp	r3, r1
 8001058:	d909      	bls.n	800106e <__udivmoddi4+0xc2>
 800105a:	2d00      	cmp	r5, #0
 800105c:	f000 80ef 	beq.w	800123e <__udivmoddi4+0x292>
 8001060:	2600      	movs	r6, #0
 8001062:	e9c5 0100 	strd	r0, r1, [r5]
 8001066:	4630      	mov	r0, r6
 8001068:	4631      	mov	r1, r6
 800106a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800106e:	fab3 f683 	clz	r6, r3
 8001072:	2e00      	cmp	r6, #0
 8001074:	d14a      	bne.n	800110c <__udivmoddi4+0x160>
 8001076:	428b      	cmp	r3, r1
 8001078:	d302      	bcc.n	8001080 <__udivmoddi4+0xd4>
 800107a:	4282      	cmp	r2, r0
 800107c:	f200 80f9 	bhi.w	8001272 <__udivmoddi4+0x2c6>
 8001080:	1a84      	subs	r4, r0, r2
 8001082:	eb61 0303 	sbc.w	r3, r1, r3
 8001086:	2001      	movs	r0, #1
 8001088:	469e      	mov	lr, r3
 800108a:	2d00      	cmp	r5, #0
 800108c:	d0e0      	beq.n	8001050 <__udivmoddi4+0xa4>
 800108e:	e9c5 4e00 	strd	r4, lr, [r5]
 8001092:	e7dd      	b.n	8001050 <__udivmoddi4+0xa4>
 8001094:	b902      	cbnz	r2, 8001098 <__udivmoddi4+0xec>
 8001096:	deff      	udf	#255	; 0xff
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	2a00      	cmp	r2, #0
 800109e:	f040 8092 	bne.w	80011c6 <__udivmoddi4+0x21a>
 80010a2:	eba1 010c 	sub.w	r1, r1, ip
 80010a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010aa:	fa1f fe8c 	uxth.w	lr, ip
 80010ae:	2601      	movs	r6, #1
 80010b0:	0c20      	lsrs	r0, r4, #16
 80010b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80010b6:	fb07 1113 	mls	r1, r7, r3, r1
 80010ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80010be:	fb0e f003 	mul.w	r0, lr, r3
 80010c2:	4288      	cmp	r0, r1
 80010c4:	d908      	bls.n	80010d8 <__udivmoddi4+0x12c>
 80010c6:	eb1c 0101 	adds.w	r1, ip, r1
 80010ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80010ce:	d202      	bcs.n	80010d6 <__udivmoddi4+0x12a>
 80010d0:	4288      	cmp	r0, r1
 80010d2:	f200 80cb 	bhi.w	800126c <__udivmoddi4+0x2c0>
 80010d6:	4643      	mov	r3, r8
 80010d8:	1a09      	subs	r1, r1, r0
 80010da:	b2a4      	uxth	r4, r4
 80010dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80010e0:	fb07 1110 	mls	r1, r7, r0, r1
 80010e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80010e8:	fb0e fe00 	mul.w	lr, lr, r0
 80010ec:	45a6      	cmp	lr, r4
 80010ee:	d908      	bls.n	8001102 <__udivmoddi4+0x156>
 80010f0:	eb1c 0404 	adds.w	r4, ip, r4
 80010f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80010f8:	d202      	bcs.n	8001100 <__udivmoddi4+0x154>
 80010fa:	45a6      	cmp	lr, r4
 80010fc:	f200 80bb 	bhi.w	8001276 <__udivmoddi4+0x2ca>
 8001100:	4608      	mov	r0, r1
 8001102:	eba4 040e 	sub.w	r4, r4, lr
 8001106:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800110a:	e79c      	b.n	8001046 <__udivmoddi4+0x9a>
 800110c:	f1c6 0720 	rsb	r7, r6, #32
 8001110:	40b3      	lsls	r3, r6
 8001112:	fa22 fc07 	lsr.w	ip, r2, r7
 8001116:	ea4c 0c03 	orr.w	ip, ip, r3
 800111a:	fa20 f407 	lsr.w	r4, r0, r7
 800111e:	fa01 f306 	lsl.w	r3, r1, r6
 8001122:	431c      	orrs	r4, r3
 8001124:	40f9      	lsrs	r1, r7
 8001126:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800112a:	fa00 f306 	lsl.w	r3, r0, r6
 800112e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001132:	0c20      	lsrs	r0, r4, #16
 8001134:	fa1f fe8c 	uxth.w	lr, ip
 8001138:	fb09 1118 	mls	r1, r9, r8, r1
 800113c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001140:	fb08 f00e 	mul.w	r0, r8, lr
 8001144:	4288      	cmp	r0, r1
 8001146:	fa02 f206 	lsl.w	r2, r2, r6
 800114a:	d90b      	bls.n	8001164 <__udivmoddi4+0x1b8>
 800114c:	eb1c 0101 	adds.w	r1, ip, r1
 8001150:	f108 3aff 	add.w	sl, r8, #4294967295
 8001154:	f080 8088 	bcs.w	8001268 <__udivmoddi4+0x2bc>
 8001158:	4288      	cmp	r0, r1
 800115a:	f240 8085 	bls.w	8001268 <__udivmoddi4+0x2bc>
 800115e:	f1a8 0802 	sub.w	r8, r8, #2
 8001162:	4461      	add	r1, ip
 8001164:	1a09      	subs	r1, r1, r0
 8001166:	b2a4      	uxth	r4, r4
 8001168:	fbb1 f0f9 	udiv	r0, r1, r9
 800116c:	fb09 1110 	mls	r1, r9, r0, r1
 8001170:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001174:	fb00 fe0e 	mul.w	lr, r0, lr
 8001178:	458e      	cmp	lr, r1
 800117a:	d908      	bls.n	800118e <__udivmoddi4+0x1e2>
 800117c:	eb1c 0101 	adds.w	r1, ip, r1
 8001180:	f100 34ff 	add.w	r4, r0, #4294967295
 8001184:	d26c      	bcs.n	8001260 <__udivmoddi4+0x2b4>
 8001186:	458e      	cmp	lr, r1
 8001188:	d96a      	bls.n	8001260 <__udivmoddi4+0x2b4>
 800118a:	3802      	subs	r0, #2
 800118c:	4461      	add	r1, ip
 800118e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001192:	fba0 9402 	umull	r9, r4, r0, r2
 8001196:	eba1 010e 	sub.w	r1, r1, lr
 800119a:	42a1      	cmp	r1, r4
 800119c:	46c8      	mov	r8, r9
 800119e:	46a6      	mov	lr, r4
 80011a0:	d356      	bcc.n	8001250 <__udivmoddi4+0x2a4>
 80011a2:	d053      	beq.n	800124c <__udivmoddi4+0x2a0>
 80011a4:	b15d      	cbz	r5, 80011be <__udivmoddi4+0x212>
 80011a6:	ebb3 0208 	subs.w	r2, r3, r8
 80011aa:	eb61 010e 	sbc.w	r1, r1, lr
 80011ae:	fa01 f707 	lsl.w	r7, r1, r7
 80011b2:	fa22 f306 	lsr.w	r3, r2, r6
 80011b6:	40f1      	lsrs	r1, r6
 80011b8:	431f      	orrs	r7, r3
 80011ba:	e9c5 7100 	strd	r7, r1, [r5]
 80011be:	2600      	movs	r6, #0
 80011c0:	4631      	mov	r1, r6
 80011c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011c6:	f1c2 0320 	rsb	r3, r2, #32
 80011ca:	40d8      	lsrs	r0, r3
 80011cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80011d0:	fa21 f303 	lsr.w	r3, r1, r3
 80011d4:	4091      	lsls	r1, r2
 80011d6:	4301      	orrs	r1, r0
 80011d8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011dc:	fa1f fe8c 	uxth.w	lr, ip
 80011e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80011e4:	fb07 3610 	mls	r6, r7, r0, r3
 80011e8:	0c0b      	lsrs	r3, r1, #16
 80011ea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80011ee:	fb00 f60e 	mul.w	r6, r0, lr
 80011f2:	429e      	cmp	r6, r3
 80011f4:	fa04 f402 	lsl.w	r4, r4, r2
 80011f8:	d908      	bls.n	800120c <__udivmoddi4+0x260>
 80011fa:	eb1c 0303 	adds.w	r3, ip, r3
 80011fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8001202:	d22f      	bcs.n	8001264 <__udivmoddi4+0x2b8>
 8001204:	429e      	cmp	r6, r3
 8001206:	d92d      	bls.n	8001264 <__udivmoddi4+0x2b8>
 8001208:	3802      	subs	r0, #2
 800120a:	4463      	add	r3, ip
 800120c:	1b9b      	subs	r3, r3, r6
 800120e:	b289      	uxth	r1, r1
 8001210:	fbb3 f6f7 	udiv	r6, r3, r7
 8001214:	fb07 3316 	mls	r3, r7, r6, r3
 8001218:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800121c:	fb06 f30e 	mul.w	r3, r6, lr
 8001220:	428b      	cmp	r3, r1
 8001222:	d908      	bls.n	8001236 <__udivmoddi4+0x28a>
 8001224:	eb1c 0101 	adds.w	r1, ip, r1
 8001228:	f106 38ff 	add.w	r8, r6, #4294967295
 800122c:	d216      	bcs.n	800125c <__udivmoddi4+0x2b0>
 800122e:	428b      	cmp	r3, r1
 8001230:	d914      	bls.n	800125c <__udivmoddi4+0x2b0>
 8001232:	3e02      	subs	r6, #2
 8001234:	4461      	add	r1, ip
 8001236:	1ac9      	subs	r1, r1, r3
 8001238:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800123c:	e738      	b.n	80010b0 <__udivmoddi4+0x104>
 800123e:	462e      	mov	r6, r5
 8001240:	4628      	mov	r0, r5
 8001242:	e705      	b.n	8001050 <__udivmoddi4+0xa4>
 8001244:	4606      	mov	r6, r0
 8001246:	e6e3      	b.n	8001010 <__udivmoddi4+0x64>
 8001248:	4618      	mov	r0, r3
 800124a:	e6f8      	b.n	800103e <__udivmoddi4+0x92>
 800124c:	454b      	cmp	r3, r9
 800124e:	d2a9      	bcs.n	80011a4 <__udivmoddi4+0x1f8>
 8001250:	ebb9 0802 	subs.w	r8, r9, r2
 8001254:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001258:	3801      	subs	r0, #1
 800125a:	e7a3      	b.n	80011a4 <__udivmoddi4+0x1f8>
 800125c:	4646      	mov	r6, r8
 800125e:	e7ea      	b.n	8001236 <__udivmoddi4+0x28a>
 8001260:	4620      	mov	r0, r4
 8001262:	e794      	b.n	800118e <__udivmoddi4+0x1e2>
 8001264:	4640      	mov	r0, r8
 8001266:	e7d1      	b.n	800120c <__udivmoddi4+0x260>
 8001268:	46d0      	mov	r8, sl
 800126a:	e77b      	b.n	8001164 <__udivmoddi4+0x1b8>
 800126c:	3b02      	subs	r3, #2
 800126e:	4461      	add	r1, ip
 8001270:	e732      	b.n	80010d8 <__udivmoddi4+0x12c>
 8001272:	4630      	mov	r0, r6
 8001274:	e709      	b.n	800108a <__udivmoddi4+0xde>
 8001276:	4464      	add	r4, ip
 8001278:	3802      	subs	r0, #2
 800127a:	e742      	b.n	8001102 <__udivmoddi4+0x156>

0800127c <__aeabi_idiv0>:
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff f930 	bl	80004ee <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f04f 33ff 	mov.w	r3, #4294967295
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <Send_Uart+0x28>)
 800129a:	f006 fae8 	bl	800786e <HAL_UART_Transmit>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000e64 	.word	0x20000e64

080012ac <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80012b4:	2201      	movs	r2, #1
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	480a      	ldr	r0, [pc, #40]	; (80012e4 <Mount_SD+0x38>)
 80012ba:	f009 fc3b 	bl	800ab34 <f_mount>
 80012be:	4603      	mov	r3, r0
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <Mount_SD+0x3c>)
 80012c4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <Mount_SD+0x3c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <Mount_SD+0x2a>
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <Mount_SD+0x40>)
 80012d0:	f7ff ffd6 	bl	8001280 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 80012d4:	e002      	b.n	80012dc <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <Mount_SD+0x44>)
 80012d8:	f7ff ffd2 	bl	8001280 <Send_Uart>
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200000c0 	.word	0x200000c0
 80012e8:	2000053c 	.word	0x2000053c
 80012ec:	08010b08 	.word	0x08010b08
 80012f0:	08010b2c 	.word	0x08010b2c

080012f4 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80012fc:	2201      	movs	r2, #1
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	2000      	movs	r0, #0
 8001302:	f009 fc17 	bl	800ab34 <f_mount>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <Unmount_SD+0x38>)
 800130c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800130e:	4b07      	ldr	r3, [pc, #28]	; (800132c <Unmount_SD+0x38>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <Unmount_SD+0x2a>
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <Unmount_SD+0x3c>)
 8001318:	f7ff ffb2 	bl	8001280 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 800131c:	e002      	b.n	8001324 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <Unmount_SD+0x40>)
 8001320:	f7ff ffae 	bl	8001280 <Send_Uart>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	2000053c 	.word	0x2000053c
 8001330:	08010b50 	.word	0x08010b50
 8001334:	08010b78 	.word	0x08010b78

08001338 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	; 0x38
 800133c:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = pvPortMalloc(20*sizeof (char));
 800133e:	2014      	movs	r0, #20
 8001340:	f00d fa6a 	bl	800e818 <pvPortMalloc>
 8001344:	6378      	str	r0, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8001346:	4a29      	ldr	r2, [pc, #164]	; (80013ec <Format_SD+0xb4>)
 8001348:	4929      	ldr	r1, [pc, #164]	; (80013f0 <Format_SD+0xb8>)
 800134a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800134c:	f00d fc8e 	bl	800ec6c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001354:	4618      	mov	r0, r3
 8001356:	f00a f872 	bl	800b43e <f_opendir>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b25      	ldr	r3, [pc, #148]	; (80013f4 <Format_SD+0xbc>)
 8001360:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <Format_SD+0xbc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d136      	bne.n	80013d8 <Format_SD+0xa0>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4922      	ldr	r1, [pc, #136]	; (80013f8 <Format_SD+0xc0>)
 800136e:	4618      	mov	r0, r3
 8001370:	f00a f909 	bl	800b586 <f_readdir>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <Format_SD+0xbc>)
 800137a:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 800137c:	4b1d      	ldr	r3, [pc, #116]	; (80013f4 <Format_SD+0xbc>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d125      	bne.n	80013d0 <Format_SD+0x98>
 8001384:	4b1c      	ldr	r3, [pc, #112]	; (80013f8 <Format_SD+0xc0>)
 8001386:	7a5b      	ldrb	r3, [r3, #9]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d021      	beq.n	80013d0 <Format_SD+0x98>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800138c:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <Format_SD+0xc0>)
 800138e:	7a1b      	ldrb	r3, [r3, #8]
 8001390:	f003 0310 	and.w	r3, r3, #16
 8001394:	2b00      	cmp	r3, #0
 8001396:	d011      	beq.n	80013bc <Format_SD+0x84>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001398:	4918      	ldr	r1, [pc, #96]	; (80013fc <Format_SD+0xc4>)
 800139a:	4819      	ldr	r0, [pc, #100]	; (8001400 <Format_SD+0xc8>)
 800139c:	f7ff f89d 	bl	80004da <strcmp>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <Format_SD+0x94>
            	fresult = f_unlink(fno.fname);
 80013a6:	4815      	ldr	r0, [pc, #84]	; (80013fc <Format_SD+0xc4>)
 80013a8:	f00a f970 	bl	800b68c <f_unlink>
 80013ac:	4603      	mov	r3, r0
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <Format_SD+0xbc>)
 80013b2:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <Format_SD+0xbc>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b07      	cmp	r3, #7
 80013ba:	e7d6      	b.n	800136a <Format_SD+0x32>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80013bc:	480f      	ldr	r0, [pc, #60]	; (80013fc <Format_SD+0xc4>)
 80013be:	f00a f965 	bl	800b68c <f_unlink>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <Format_SD+0xbc>)
 80013c8:	701a      	strb	r2, [r3, #0]
 80013ca:	e7ce      	b.n	800136a <Format_SD+0x32>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80013cc:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80013ce:	e7cc      	b.n	800136a <Format_SD+0x32>
            }
        }
        f_closedir(&dir);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00a f8ac 	bl	800b530 <f_closedir>
    }
    vPortFree(path);
 80013d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013da:	f00d fae9 	bl	800e9b0 <vPortFree>
    return fresult;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <Format_SD+0xbc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3738      	adds	r7, #56	; 0x38
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	08010bcc 	.word	0x08010bcc
 80013f0:	08010b9c 	.word	0x08010b9c
 80013f4:	2000053c 	.word	0x2000053c
 80013f8:	20000524 	.word	0x20000524
 80013fc:	2000052d 	.word	0x2000052d
 8001400:	08010ba0 	.word	0x08010ba0

08001404 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800140c:	4940      	ldr	r1, [pc, #256]	; (8001510 <Create_File+0x10c>)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f00a f8fc 	bl	800b60c <f_stat>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <Create_File+0x110>)
 800141a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800141c:	4b3d      	ldr	r3, [pc, #244]	; (8001514 <Create_File+0x110>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d111      	bne.n	8001448 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001424:	2064      	movs	r0, #100	; 0x64
 8001426:	f00d f9f7 	bl	800e818 <pvPortMalloc>
 800142a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	493a      	ldr	r1, [pc, #232]	; (8001518 <Create_File+0x114>)
 8001430:	68f8      	ldr	r0, [r7, #12]
 8001432:	f00d fc1b 	bl	800ec6c <siprintf>
		Send_Uart(buf);
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff ff22 	bl	8001280 <Send_Uart>
		vPortFree(buf);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f00d fab7 	bl	800e9b0 <vPortFree>
	    return fresult;
 8001442:	4b34      	ldr	r3, [pc, #208]	; (8001514 <Create_File+0x110>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	e05f      	b.n	8001508 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001448:	220b      	movs	r2, #11
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4833      	ldr	r0, [pc, #204]	; (800151c <Create_File+0x118>)
 800144e:	f009 fbd5 	bl	800abfc <f_open>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b2f      	ldr	r3, [pc, #188]	; (8001514 <Create_File+0x110>)
 8001458:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800145a:	4b2e      	ldr	r3, [pc, #184]	; (8001514 <Create_File+0x110>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d014      	beq.n	800148c <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001462:	2064      	movs	r0, #100	; 0x64
 8001464:	f00d f9d8 	bl	800e818 <pvPortMalloc>
 8001468:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800146a:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <Create_File+0x110>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	492b      	ldr	r1, [pc, #172]	; (8001520 <Create_File+0x11c>)
 8001474:	6938      	ldr	r0, [r7, #16]
 8001476:	f00d fbf9 	bl	800ec6c <siprintf>
			Send_Uart(buf);
 800147a:	6938      	ldr	r0, [r7, #16]
 800147c:	f7ff ff00 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 8001480:	6938      	ldr	r0, [r7, #16]
 8001482:	f00d fa95 	bl	800e9b0 <vPortFree>
		    return fresult;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <Create_File+0x110>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	e03d      	b.n	8001508 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800148c:	2064      	movs	r0, #100	; 0x64
 800148e:	f00d f9c3 	bl	800e818 <pvPortMalloc>
 8001492:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4923      	ldr	r1, [pc, #140]	; (8001524 <Create_File+0x120>)
 8001498:	69f8      	ldr	r0, [r7, #28]
 800149a:	f00d fbe7 	bl	800ec6c <siprintf>
			Send_Uart(buf);
 800149e:	69f8      	ldr	r0, [r7, #28]
 80014a0:	f7ff feee 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 80014a4:	69f8      	ldr	r0, [r7, #28]
 80014a6:	f00d fa83 	bl	800e9b0 <vPortFree>
		}

		fresult = f_close(&fil);
 80014aa:	481c      	ldr	r0, [pc, #112]	; (800151c <Create_File+0x118>)
 80014ac:	f009 ff98 	bl	800b3e0 <f_close>
 80014b0:	4603      	mov	r3, r0
 80014b2:	461a      	mov	r2, r3
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <Create_File+0x110>)
 80014b6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <Create_File+0x110>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d012      	beq.n	80014e6 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f00d f9a9 	bl	800e818 <pvPortMalloc>
 80014c6:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <Create_File+0x110>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4915      	ldr	r1, [pc, #84]	; (8001528 <Create_File+0x124>)
 80014d2:	6978      	ldr	r0, [r7, #20]
 80014d4:	f00d fbca 	bl	800ec6c <siprintf>
			Send_Uart(buf);
 80014d8:	6978      	ldr	r0, [r7, #20]
 80014da:	f7ff fed1 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 80014de:	6978      	ldr	r0, [r7, #20]
 80014e0:	f00d fa66 	bl	800e9b0 <vPortFree>
 80014e4:	e00e      	b.n	8001504 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80014e6:	2064      	movs	r0, #100	; 0x64
 80014e8:	f00d f996 	bl	800e818 <pvPortMalloc>
 80014ec:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	490e      	ldr	r1, [pc, #56]	; (800152c <Create_File+0x128>)
 80014f2:	69b8      	ldr	r0, [r7, #24]
 80014f4:	f00d fbba 	bl	800ec6c <siprintf>
			Send_Uart(buf);
 80014f8:	69b8      	ldr	r0, [r7, #24]
 80014fa:	f7ff fec1 	bl	8001280 <Send_Uart>
			vPortFree(buf);
 80014fe:	69b8      	ldr	r0, [r7, #24]
 8001500:	f00d fa56 	bl	800e9b0 <vPortFree>
		}
	}
    return fresult;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <Create_File+0x110>)
 8001506:	781b      	ldrb	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3720      	adds	r7, #32
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000524 	.word	0x20000524
 8001514:	2000053c 	.word	0x2000053c
 8001518:	08010d48 	.word	0x08010d48
 800151c:	200002f4 	.word	0x200002f4
 8001520:	08010d80 	.word	0x08010d80
 8001524:	08010da8 	.word	0x08010da8
 8001528:	08010de8 	.word	0x08010de8
 800152c:	08010d28 	.word	0x08010d28

08001530 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800153a:	4953      	ldr	r1, [pc, #332]	; (8001688 <Update_File+0x158>)
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f00a f865 	bl	800b60c <f_stat>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b51      	ldr	r3, [pc, #324]	; (800168c <Update_File+0x15c>)
 8001548:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800154a:	4b50      	ldr	r3, [pc, #320]	; (800168c <Update_File+0x15c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d011      	beq.n	8001576 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001552:	2064      	movs	r0, #100	; 0x64
 8001554:	f00d f960 	bl	800e818 <pvPortMalloc>
 8001558:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	494c      	ldr	r1, [pc, #304]	; (8001690 <Update_File+0x160>)
 800155e:	68b8      	ldr	r0, [r7, #8]
 8001560:	f00d fb84 	bl	800ec6c <siprintf>
		Send_Uart (buf);
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f7ff fe8b 	bl	8001280 <Send_Uart>
		vPortFree(buf);
 800156a:	68b8      	ldr	r0, [r7, #8]
 800156c:	f00d fa20 	bl	800e9b0 <vPortFree>
	    return fresult;
 8001570:	4b46      	ldr	r3, [pc, #280]	; (800168c <Update_File+0x15c>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	e083      	b.n	800167e <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001576:	2232      	movs	r2, #50	; 0x32
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4846      	ldr	r0, [pc, #280]	; (8001694 <Update_File+0x164>)
 800157c:	f009 fb3e 	bl	800abfc <f_open>
 8001580:	4603      	mov	r3, r0
 8001582:	461a      	mov	r2, r3
 8001584:	4b41      	ldr	r3, [pc, #260]	; (800168c <Update_File+0x15c>)
 8001586:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001588:	4b40      	ldr	r3, [pc, #256]	; (800168c <Update_File+0x15c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d014      	beq.n	80015ba <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001590:	2064      	movs	r0, #100	; 0x64
 8001592:	f00d f941 	bl	800e818 <pvPortMalloc>
 8001596:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <Update_File+0x15c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	493d      	ldr	r1, [pc, #244]	; (8001698 <Update_File+0x168>)
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f00d fb62 	bl	800ec6c <siprintf>
	    	Send_Uart(buf);
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff fe69 	bl	8001280 <Send_Uart>
	        vPortFree(buf);
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f00d f9fe 	bl	800e9b0 <vPortFree>
	        return fresult;
 80015b4:	4b35      	ldr	r3, [pc, #212]	; (800168c <Update_File+0x15c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	e061      	b.n	800167e <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80015ba:	6838      	ldr	r0, [r7, #0]
 80015bc:	f7fe ff97 	bl	80004ee <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <Update_File+0x16c>)
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	4833      	ldr	r0, [pc, #204]	; (8001694 <Update_File+0x164>)
 80015c8:	f009 fcdd 	bl	800af86 <f_write>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b2e      	ldr	r3, [pc, #184]	; (800168c <Update_File+0x15c>)
 80015d2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <Update_File+0x15c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d012      	beq.n	8001602 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80015dc:	2064      	movs	r0, #100	; 0x64
 80015de:	f00d f91b 	bl	800e818 <pvPortMalloc>
 80015e2:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80015e4:	4b29      	ldr	r3, [pc, #164]	; (800168c <Update_File+0x15c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	492c      	ldr	r1, [pc, #176]	; (80016a0 <Update_File+0x170>)
 80015ee:	69b8      	ldr	r0, [r7, #24]
 80015f0:	f00d fb3c 	bl	800ec6c <siprintf>
	    	Send_Uart(buf);
 80015f4:	69b8      	ldr	r0, [r7, #24]
 80015f6:	f7ff fe43 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 80015fa:	69b8      	ldr	r0, [r7, #24]
 80015fc:	f00d f9d8 	bl	800e9b0 <vPortFree>
 8001600:	e00e      	b.n	8001620 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001602:	2064      	movs	r0, #100	; 0x64
 8001604:	f00d f908 	bl	800e818 <pvPortMalloc>
 8001608:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	4925      	ldr	r1, [pc, #148]	; (80016a4 <Update_File+0x174>)
 800160e:	69f8      	ldr	r0, [r7, #28]
 8001610:	f00d fb2c 	bl	800ec6c <siprintf>
	    	Send_Uart(buf);
 8001614:	69f8      	ldr	r0, [r7, #28]
 8001616:	f7ff fe33 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 800161a:	69f8      	ldr	r0, [r7, #28]
 800161c:	f00d f9c8 	bl	800e9b0 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001620:	481c      	ldr	r0, [pc, #112]	; (8001694 <Update_File+0x164>)
 8001622:	f009 fedd 	bl	800b3e0 <f_close>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <Update_File+0x15c>)
 800162c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800162e:	4b17      	ldr	r3, [pc, #92]	; (800168c <Update_File+0x15c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d012      	beq.n	800165c <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001636:	2064      	movs	r0, #100	; 0x64
 8001638:	f00d f8ee 	bl	800e818 <pvPortMalloc>
 800163c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <Update_File+0x15c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4918      	ldr	r1, [pc, #96]	; (80016a8 <Update_File+0x178>)
 8001648:	6938      	ldr	r0, [r7, #16]
 800164a:	f00d fb0f 	bl	800ec6c <siprintf>
	    	Send_Uart(buf);
 800164e:	6938      	ldr	r0, [r7, #16]
 8001650:	f7ff fe16 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 8001654:	6938      	ldr	r0, [r7, #16]
 8001656:	f00d f9ab 	bl	800e9b0 <vPortFree>
 800165a:	e00e      	b.n	800167a <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800165c:	2064      	movs	r0, #100	; 0x64
 800165e:	f00d f8db 	bl	800e818 <pvPortMalloc>
 8001662:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	4911      	ldr	r1, [pc, #68]	; (80016ac <Update_File+0x17c>)
 8001668:	6978      	ldr	r0, [r7, #20]
 800166a:	f00d faff 	bl	800ec6c <siprintf>
	    	Send_Uart(buf);
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff fe06 	bl	8001280 <Send_Uart>
	    	vPortFree(buf);
 8001674:	6978      	ldr	r0, [r7, #20]
 8001676:	f00d f99b 	bl	800e9b0 <vPortFree>
	     }
	}
    return fresult;
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <Update_File+0x15c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000524 	.word	0x20000524
 800168c:	2000053c 	.word	0x2000053c
 8001690:	08010bd0 	.word	0x08010bd0
 8001694:	200002f4 	.word	0x200002f4
 8001698:	08010bf0 	.word	0x08010bf0
 800169c:	20000540 	.word	0x20000540
 80016a0:	08010e0c 	.word	0x08010e0c
 80016a4:	08010e34 	.word	0x08010e34
 80016a8:	08010d00 	.word	0x08010d00
 80016ac:	08010d28 	.word	0x08010d28

080016b0 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ba:	4802      	ldr	r0, [pc, #8]	; (80016c4 <SELECT+0x14>)
 80016bc:	f004 f92c 	bl	8005918 <HAL_GPIO_WritePin>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40020800 	.word	0x40020800

080016c8 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d2:	4802      	ldr	r0, [pc, #8]	; (80016dc <DESELECT+0x14>)
 80016d4:	f004 f920 	bl	8005918 <HAL_GPIO_WritePin>
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020800 	.word	0x40020800

080016e0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&SPI_HABDLE) != HAL_SPI_STATE_READY);
 80016ea:	bf00      	nop
 80016ec:	4808      	ldr	r0, [pc, #32]	; (8001710 <SPI_TxByte+0x30>)
 80016ee:	f005 faae 	bl	8006c4e <HAL_SPI_GetState>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d1f9      	bne.n	80016ec <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&SPI_HABDLE, &data, 1, SPI_TIMEOUT);
 80016f8:	1df9      	adds	r1, r7, #7
 80016fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016fe:	2201      	movs	r2, #1
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <SPI_TxByte+0x30>)
 8001702:	f004 ffc6 	bl	8006692 <HAL_SPI_Transmit>
}
 8001706:	bf00      	nop
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000d38 	.word	0x20000d38

08001714 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800171a:	23ff      	movs	r3, #255	; 0xff
 800171c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&SPI_HABDLE) != HAL_SPI_STATE_READY));
 8001722:	bf00      	nop
 8001724:	4809      	ldr	r0, [pc, #36]	; (800174c <SPI_RxByte+0x38>)
 8001726:	f005 fa92 	bl	8006c4e <HAL_SPI_GetState>
 800172a:	4603      	mov	r3, r0
 800172c:	2b01      	cmp	r3, #1
 800172e:	d1f9      	bne.n	8001724 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&SPI_HABDLE, &dummy, &data, 1, SPI_TIMEOUT);
 8001730:	1dba      	adds	r2, r7, #6
 8001732:	1df9      	adds	r1, r7, #7
 8001734:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	4803      	ldr	r0, [pc, #12]	; (800174c <SPI_RxByte+0x38>)
 800173e:	f005 f8e4 	bl	800690a <HAL_SPI_TransmitReceive>
  
  return data;
 8001742:	79bb      	ldrb	r3, [r7, #6]
}
 8001744:	4618      	mov	r0, r3
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000d38 	.word	0x20000d38

08001750 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8001758:	f7ff ffdc 	bl	8001714 <SPI_RxByte>
 800175c:	4603      	mov	r3, r0
 800175e:	461a      	mov	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	701a      	strb	r2, [r3, #0]
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <SD_ReadyWait+0x34>)
 8001774:	2232      	movs	r2, #50	; 0x32
 8001776:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8001778:	f7ff ffcc 	bl	8001714 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800177c:	f7ff ffca 	bl	8001714 <SPI_RxByte>
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2bff      	cmp	r3, #255	; 0xff
 8001788:	d004      	beq.n	8001794 <SD_ReadyWait+0x28>
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SD_ReadyWait+0x34>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1f3      	bne.n	800177c <SD_ReadyWait+0x10>
  
  return res;
 8001794:	79fb      	ldrb	r3, [r7, #7]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20001b82 	.word	0x20001b82

080017a4 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80017aa:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80017ae:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80017b0:	f7ff ff8a 	bl	80016c8 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80017b4:	2300      	movs	r3, #0
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	e005      	b.n	80017c6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80017ba:	20ff      	movs	r0, #255	; 0xff
 80017bc:	f7ff ff90 	bl	80016e0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	3301      	adds	r3, #1
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	2b09      	cmp	r3, #9
 80017ca:	ddf6      	ble.n	80017ba <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80017cc:	f7ff ff70 	bl	80016b0 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80017d0:	2340      	movs	r3, #64	; 0x40
 80017d2:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80017e4:	2395      	movs	r3, #149	; 0x95
 80017e6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	e009      	b.n	8001802 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80017ee:	1d3a      	adds	r2, r7, #4
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff72 	bl	80016e0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3301      	adds	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2b05      	cmp	r3, #5
 8001806:	ddf2      	ble.n	80017ee <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8001808:	e002      	b.n	8001810 <SD_PowerOn+0x6c>
  {
    Count--;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3b01      	subs	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8001810:	f7ff ff80 	bl	8001714 <SPI_RxByte>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	d002      	beq.n	8001820 <SD_PowerOn+0x7c>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f4      	bne.n	800180a <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8001820:	f7ff ff52 	bl	80016c8 <DESELECT>
  SPI_TxByte(0XFF);
 8001824:	20ff      	movs	r0, #255	; 0xff
 8001826:	f7ff ff5b 	bl	80016e0 <SPI_TxByte>
  
  PowerFlag = 1;
 800182a:	4b03      	ldr	r3, [pc, #12]	; (8001838 <SD_PowerOn+0x94>)
 800182c:	2201      	movs	r2, #1
 800182e:	701a      	strb	r2, [r3, #0]
}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000545 	.word	0x20000545

0800183c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <SD_PowerOff+0x14>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000545 	.word	0x20000545

08001854 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <SD_CheckPower+0x14>)
 800185a:	781b      	ldrb	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	20000545 	.word	0x20000545

0800186c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <SD_RxDataBlock+0x68>)
 8001878:	220a      	movs	r2, #10
 800187a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800187c:	f7ff ff4a 	bl	8001714 <SPI_RxByte>
 8001880:	4603      	mov	r3, r0
 8001882:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	d104      	bne.n	8001894 <SD_RxDataBlock+0x28>
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <SD_RxDataBlock+0x68>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f3      	bne.n	800187c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2bfe      	cmp	r3, #254	; 0xfe
 8001898:	d001      	beq.n	800189e <SD_RxDataBlock+0x32>
    return FALSE;
 800189a:	2300      	movs	r3, #0
 800189c:	e016      	b.n	80018cc <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	607a      	str	r2, [r7, #4]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff53 	bl	8001750 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff ff4d 	bl	8001750 <SPI_RxBytePtr>
  } while(btr -= 2);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3b02      	subs	r3, #2
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ed      	bne.n	800189e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80018c2:	f7ff ff27 	bl	8001714 <SPI_RxByte>
  SPI_RxByte();
 80018c6:	f7ff ff25 	bl	8001714 <SPI_RxByte>
  
  return TRUE;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20001b81 	.word	0x20001b81

080018d8 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80018e8:	f7ff ff40 	bl	800176c <SD_ReadyWait>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2bff      	cmp	r3, #255	; 0xff
 80018f0:	d001      	beq.n	80018f6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	e040      	b.n	8001978 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fef1 	bl	80016e0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80018fe:	78fb      	ldrb	r3, [r7, #3]
 8001900:	2bfd      	cmp	r3, #253	; 0xfd
 8001902:	d031      	beq.n	8001968 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fee5 	bl	80016e0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	1c5a      	adds	r2, r3, #1
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fede 	bl	80016e0 <SPI_TxByte>
    } while (--wc);
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	3b01      	subs	r3, #1
 8001928:	73bb      	strb	r3, [r7, #14]
 800192a:	7bbb      	ldrb	r3, [r7, #14]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1eb      	bne.n	8001908 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8001930:	f7ff fef0 	bl	8001714 <SPI_RxByte>
    SPI_RxByte();
 8001934:	f7ff feee 	bl	8001714 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8001938:	e00b      	b.n	8001952 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800193a:	f7ff feeb 	bl	8001714 <SPI_RxByte>
 800193e:	4603      	mov	r3, r0
 8001940:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	f003 031f 	and.w	r3, r3, #31
 8001948:	2b05      	cmp	r3, #5
 800194a:	d006      	beq.n	800195a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800194c:	7b7b      	ldrb	r3, [r7, #13]
 800194e:	3301      	adds	r3, #1
 8001950:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8001952:	7b7b      	ldrb	r3, [r7, #13]
 8001954:	2b40      	cmp	r3, #64	; 0x40
 8001956:	d9f0      	bls.n	800193a <SD_TxDataBlock+0x62>
 8001958:	e000      	b.n	800195c <SD_TxDataBlock+0x84>
        break;
 800195a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800195c:	bf00      	nop
 800195e:	f7ff fed9 	bl	8001714 <SPI_RxByte>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0fa      	beq.n	800195e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2b05      	cmp	r3, #5
 8001970:	d101      	bne.n	8001976 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800198c:	f7ff feee 	bl	800176c <SD_ReadyWait>
 8001990:	4603      	mov	r3, r0
 8001992:	2bff      	cmp	r3, #255	; 0xff
 8001994:	d001      	beq.n	800199a <SD_SendCmd+0x1a>
    return 0xFF;
 8001996:	23ff      	movs	r3, #255	; 0xff
 8001998:	e040      	b.n	8001a1c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fe9f 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	0e1b      	lsrs	r3, r3, #24
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fe99 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe93 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fe8d 	bl	80016e0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fe88 	bl	80016e0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80019d0:	2300      	movs	r3, #0
 80019d2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b40      	cmp	r3, #64	; 0x40
 80019d8:	d101      	bne.n	80019de <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80019da:	2395      	movs	r3, #149	; 0x95
 80019dc:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b48      	cmp	r3, #72	; 0x48
 80019e2:	d101      	bne.n	80019e8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80019e4:	2387      	movs	r3, #135	; 0x87
 80019e6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80019e8:	7bfb      	ldrb	r3, [r7, #15]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fe78 	bl	80016e0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	2b4c      	cmp	r3, #76	; 0x4c
 80019f4:	d101      	bne.n	80019fa <SD_SendCmd+0x7a>
    SPI_RxByte();
 80019f6:	f7ff fe8d 	bl	8001714 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80019fa:	230a      	movs	r3, #10
 80019fc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80019fe:	f7ff fe89 	bl	8001714 <SPI_RxByte>
 8001a02:	4603      	mov	r3, r0
 8001a04:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001a06:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da05      	bge.n	8001a1a <SD_SendCmd+0x9a>
 8001a0e:	7bbb      	ldrb	r3, [r7, #14]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	73bb      	strb	r3, [r7, #14]
 8001a14:	7bbb      	ldrb	r3, [r7, #14]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1f1      	bne.n	80019fe <SD_SendCmd+0x7e>
  
  return res;
 8001a1a:	7b7b      	ldrb	r3, [r7, #13]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8001a34:	2301      	movs	r3, #1
 8001a36:	e0d5      	b.n	8001be4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001a38:	4b6c      	ldr	r3, [pc, #432]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <SD_disk_initialize+0x2a>
    return Stat;        
 8001a46:	4b69      	ldr	r3, [pc, #420]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	e0ca      	b.n	8001be4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8001a4e:	f7ff fea9 	bl	80017a4 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8001a52:	f7ff fe2d 	bl	80016b0 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2040      	movs	r0, #64	; 0x40
 8001a5e:	f7ff ff8f 	bl	8001980 <SD_SendCmd>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 80a5 	bne.w	8001bb4 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001a6a:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001a6c:	2264      	movs	r2, #100	; 0x64
 8001a6e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8001a70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001a74:	2048      	movs	r0, #72	; 0x48
 8001a76:	f7ff ff83 	bl	8001980 <SD_SendCmd>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d158      	bne.n	8001b32 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e00c      	b.n	8001aa0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001a86:	7bfc      	ldrb	r4, [r7, #15]
 8001a88:	f7ff fe44 	bl	8001714 <SPI_RxByte>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f104 0310 	add.w	r3, r4, #16
 8001a94:	443b      	add	r3, r7
 8001a96:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	73fb      	strb	r3, [r7, #15]
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d9ef      	bls.n	8001a86 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8001aa6:	7abb      	ldrb	r3, [r7, #10]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	f040 8083 	bne.w	8001bb4 <SD_disk_initialize+0x190>
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	2baa      	cmp	r3, #170	; 0xaa
 8001ab2:	d17f      	bne.n	8001bb4 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2077      	movs	r0, #119	; 0x77
 8001ab8:	f7ff ff62 	bl	8001980 <SD_SendCmd>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d807      	bhi.n	8001ad2 <SD_disk_initialize+0xae>
 8001ac2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ac6:	2069      	movs	r0, #105	; 0x69
 8001ac8:	f7ff ff5a 	bl	8001980 <SD_SendCmd>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1eb      	bne.n	8001ab4 <SD_disk_initialize+0x90>
 8001adc:	e000      	b.n	8001ae0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001ade:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d064      	beq.n	8001bb4 <SD_disk_initialize+0x190>
 8001aea:	2100      	movs	r1, #0
 8001aec:	207a      	movs	r0, #122	; 0x7a
 8001aee:	f7ff ff47 	bl	8001980 <SD_SendCmd>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d15d      	bne.n	8001bb4 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]
 8001afc:	e00c      	b.n	8001b18 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001afe:	7bfc      	ldrb	r4, [r7, #15]
 8001b00:	f7ff fe08 	bl	8001714 <SPI_RxByte>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	f104 0310 	add.w	r3, r4, #16
 8001b0c:	443b      	add	r3, r7
 8001b0e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	3301      	adds	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d9ef      	bls.n	8001afe <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8001b1e:	7a3b      	ldrb	r3, [r7, #8]
 8001b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SD_disk_initialize+0x108>
 8001b28:	2306      	movs	r3, #6
 8001b2a:	e000      	b.n	8001b2e <SD_disk_initialize+0x10a>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	73bb      	strb	r3, [r7, #14]
 8001b30:	e040      	b.n	8001bb4 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001b32:	2100      	movs	r1, #0
 8001b34:	2077      	movs	r0, #119	; 0x77
 8001b36:	f7ff ff23 	bl	8001980 <SD_SendCmd>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d808      	bhi.n	8001b52 <SD_disk_initialize+0x12e>
 8001b40:	2100      	movs	r1, #0
 8001b42:	2069      	movs	r0, #105	; 0x69
 8001b44:	f7ff ff1c 	bl	8001980 <SD_SendCmd>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d801      	bhi.n	8001b52 <SD_disk_initialize+0x12e>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e000      	b.n	8001b54 <SD_disk_initialize+0x130>
 8001b52:	2301      	movs	r3, #1
 8001b54:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d10e      	bne.n	8001b7a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2077      	movs	r0, #119	; 0x77
 8001b60:	f7ff ff0e 	bl	8001980 <SD_SendCmd>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d80e      	bhi.n	8001b88 <SD_disk_initialize+0x164>
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2069      	movs	r0, #105	; 0x69
 8001b6e:	f7ff ff07 	bl	8001980 <SD_SendCmd>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d107      	bne.n	8001b88 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001b78:	e00d      	b.n	8001b96 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2041      	movs	r0, #65	; 0x41
 8001b7e:	f7ff feff 	bl	8001980 <SD_SendCmd>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e1      	bne.n	8001b56 <SD_disk_initialize+0x132>
 8001b92:	e000      	b.n	8001b96 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001b94:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <SD_disk_initialize+0x1cc>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <SD_disk_initialize+0x18c>
 8001ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ba4:	2050      	movs	r0, #80	; 0x50
 8001ba6:	f7ff feeb 	bl	8001980 <SD_SendCmd>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <SD_disk_initialize+0x1d0>)
 8001bb6:	7bbb      	ldrb	r3, [r7, #14]
 8001bb8:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8001bba:	f7ff fd85 	bl	80016c8 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001bbe:	f7ff fda9 	bl	8001714 <SPI_RxByte>
  
  if (type) 
 8001bc2:	7bbb      	ldrb	r3, [r7, #14]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	e001      	b.n	8001bde <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001bda:	f7ff fe2f 	bl	800183c <SD_PowerOff>
  }
  
  return Stat;
 8001bde:	4b03      	ldr	r3, [pc, #12]	; (8001bec <SD_disk_initialize+0x1c8>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2db      	uxtb	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20001b81 	.word	0x20001b81
 8001bf4:	20000544 	.word	0x20000544

08001bf8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e002      	b.n	8001c12 <SD_disk_status+0x1a>
  
  return Stat;
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <SD_disk_status+0x28>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	b2db      	uxtb	r3, r3
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000

08001c24 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	4603      	mov	r3, r0
 8001c32:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d102      	bne.n	8001c40 <SD_disk_read+0x1c>
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <SD_disk_read+0x20>
    return RES_PARERR;
 8001c40:	2304      	movs	r3, #4
 8001c42:	e051      	b.n	8001ce8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <SD_disk_read+0xcc>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e048      	b.n	8001ce8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8001c56:	4b27      	ldr	r3, [pc, #156]	; (8001cf4 <SD_disk_read+0xd0>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	f003 0304 	and.w	r3, r3, #4
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d102      	bne.n	8001c68 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	025b      	lsls	r3, r3, #9
 8001c66:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001c68:	f7ff fd22 	bl	80016b0 <SELECT>
  
  if (count == 1) 
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d111      	bne.n	8001c96 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	2051      	movs	r0, #81	; 0x51
 8001c76:	f7ff fe83 	bl	8001980 <SD_SendCmd>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d129      	bne.n	8001cd4 <SD_disk_read+0xb0>
 8001c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	f7ff fdf1 	bl	800186c <SD_RxDataBlock>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <SD_disk_read+0xb0>
      count = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	603b      	str	r3, [r7, #0]
 8001c94:	e01e      	b.n	8001cd4 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	2052      	movs	r0, #82	; 0x52
 8001c9a:	f7ff fe71 	bl	8001980 <SD_SendCmd>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d117      	bne.n	8001cd4 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001ca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca8:	68b8      	ldr	r0, [r7, #8]
 8001caa:	f7ff fddf 	bl	800186c <SD_RxDataBlock>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00a      	beq.n	8001cca <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cba:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1ed      	bne.n	8001ca4 <SD_disk_read+0x80>
 8001cc8:	e000      	b.n	8001ccc <SD_disk_read+0xa8>
          break;
 8001cca:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001ccc:	2100      	movs	r1, #0
 8001cce:	204c      	movs	r0, #76	; 0x4c
 8001cd0:	f7ff fe56 	bl	8001980 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001cd4:	f7ff fcf8 	bl	80016c8 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001cd8:	f7ff fd1c 	bl	8001714 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	bf14      	ite	ne
 8001ce2:	2301      	movne	r3, #1
 8001ce4:	2300      	moveq	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000544 	.word	0x20000544

08001cf8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4603      	mov	r3, r0
 8001d06:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d102      	bne.n	8001d14 <SD_disk_write+0x1c>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <SD_disk_write+0x20>
    return RES_PARERR;
 8001d14:	2304      	movs	r3, #4
 8001d16:	e06b      	b.n	8001df0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001d18:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <SD_disk_write+0x100>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e062      	b.n	8001df0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001d2a:	4b33      	ldr	r3, [pc, #204]	; (8001df8 <SD_disk_write+0x100>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e059      	b.n	8001df0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001d3c:	4b2f      	ldr	r3, [pc, #188]	; (8001dfc <SD_disk_write+0x104>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	025b      	lsls	r3, r3, #9
 8001d4c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8001d4e:	f7ff fcaf 	bl	80016b0 <SELECT>
  
  if (count == 1) 
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d110      	bne.n	8001d7a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	2058      	movs	r0, #88	; 0x58
 8001d5c:	f7ff fe10 	bl	8001980 <SD_SendCmd>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d13a      	bne.n	8001ddc <SD_disk_write+0xe4>
 8001d66:	21fe      	movs	r1, #254	; 0xfe
 8001d68:	68b8      	ldr	r0, [r7, #8]
 8001d6a:	f7ff fdb5 	bl	80018d8 <SD_TxDataBlock>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d033      	beq.n	8001ddc <SD_disk_write+0xe4>
      count = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	e030      	b.n	8001ddc <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <SD_disk_write+0x104>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001d86:	2100      	movs	r1, #0
 8001d88:	2077      	movs	r0, #119	; 0x77
 8001d8a:	f7ff fdf9 	bl	8001980 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	2057      	movs	r0, #87	; 0x57
 8001d92:	f7ff fdf5 	bl	8001980 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	2059      	movs	r0, #89	; 0x59
 8001d9a:	f7ff fdf1 	bl	8001980 <SD_SendCmd>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11b      	bne.n	8001ddc <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001da4:	21fc      	movs	r1, #252	; 0xfc
 8001da6:	68b8      	ldr	r0, [r7, #8]
 8001da8:	f7ff fd96 	bl	80018d8 <SD_TxDataBlock>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001db8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	603b      	str	r3, [r7, #0]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ee      	bne.n	8001da4 <SD_disk_write+0xac>
 8001dc6:	e000      	b.n	8001dca <SD_disk_write+0xd2>
          break;
 8001dc8:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001dca:	21fd      	movs	r1, #253	; 0xfd
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff fd83 	bl	80018d8 <SD_TxDataBlock>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <SD_disk_write+0xe4>
      {        
        count = 1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001ddc:	f7ff fc74 	bl	80016c8 <DESELECT>
  SPI_RxByte();
 8001de0:	f7ff fc98 	bl	8001714 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000544 	.word	0x20000544

08001e00 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b08b      	sub	sp, #44	; 0x2c
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	603a      	str	r2, [r7, #0]
 8001e0a:	71fb      	strb	r3, [r7, #7]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e11b      	b.n	8002056 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8001e24:	79bb      	ldrb	r3, [r7, #6]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d129      	bne.n	8001e7e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d017      	beq.n	8001e62 <SD_disk_ioctl+0x62>
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	dc1f      	bgt.n	8001e76 <SD_disk_ioctl+0x76>
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d002      	beq.n	8001e40 <SD_disk_ioctl+0x40>
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d00b      	beq.n	8001e56 <SD_disk_ioctl+0x56>
 8001e3e:	e01a      	b.n	8001e76 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001e40:	f7ff fd08 	bl	8001854 <SD_CheckPower>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001e4a:	f7ff fcf7 	bl	800183c <SD_PowerOff>
      res = RES_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e54:	e0fd      	b.n	8002052 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8001e56:	f7ff fca5 	bl	80017a4 <SD_PowerOn>
      res = RES_OK;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e60:	e0f7      	b.n	8002052 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	1c5c      	adds	r4, r3, #1
 8001e66:	f7ff fcf5 	bl	8001854 <SD_CheckPower>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001e74:	e0ed      	b.n	8002052 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8001e76:	2304      	movs	r3, #4
 8001e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e7c:	e0e9      	b.n	8002052 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8001e7e:	4b78      	ldr	r3, [pc, #480]	; (8002060 <SD_disk_ioctl+0x260>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0e2      	b.n	8002056 <SD_disk_ioctl+0x256>
    
    SELECT();
 8001e90:	f7ff fc0e 	bl	80016b0 <SELECT>
    
    switch (ctrl) 
 8001e94:	79bb      	ldrb	r3, [r7, #6]
 8001e96:	2b0d      	cmp	r3, #13
 8001e98:	f200 80cc 	bhi.w	8002034 <SD_disk_ioctl+0x234>
 8001e9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ea4 <SD_disk_ioctl+0xa4>)
 8001e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ea2:	bf00      	nop
 8001ea4:	08001f9f 	.word	0x08001f9f
 8001ea8:	08001edd 	.word	0x08001edd
 8001eac:	08001f8f 	.word	0x08001f8f
 8001eb0:	08002035 	.word	0x08002035
 8001eb4:	08002035 	.word	0x08002035
 8001eb8:	08002035 	.word	0x08002035
 8001ebc:	08002035 	.word	0x08002035
 8001ec0:	08002035 	.word	0x08002035
 8001ec4:	08002035 	.word	0x08002035
 8001ec8:	08002035 	.word	0x08002035
 8001ecc:	08002035 	.word	0x08002035
 8001ed0:	08001fb1 	.word	0x08001fb1
 8001ed4:	08001fd5 	.word	0x08001fd5
 8001ed8:	08001ff9 	.word	0x08001ff9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001edc:	2100      	movs	r1, #0
 8001ede:	2049      	movs	r0, #73	; 0x49
 8001ee0:	f7ff fd4e 	bl	8001980 <SD_SendCmd>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 80a8 	bne.w	800203c <SD_disk_ioctl+0x23c>
 8001eec:	f107 030c 	add.w	r3, r7, #12
 8001ef0:	2110      	movs	r1, #16
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fcba 	bl	800186c <SD_RxDataBlock>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 809e 	beq.w	800203c <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8001f00:	7b3b      	ldrb	r3, [r7, #12]
 8001f02:	099b      	lsrs	r3, r3, #6
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d10e      	bne.n	8001f28 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001f0a:	7d7b      	ldrb	r3, [r7, #21]
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	7d3b      	ldrb	r3, [r7, #20]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	021b      	lsls	r3, r3, #8
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001f1e:	8bfb      	ldrh	r3, [r7, #30]
 8001f20:	029a      	lsls	r2, r3, #10
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e02e      	b.n	8001f86 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001f28:	7c7b      	ldrb	r3, [r7, #17]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	7dbb      	ldrb	r3, [r7, #22]
 8001f32:	09db      	lsrs	r3, r3, #7
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	4413      	add	r3, r2
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	7d7b      	ldrb	r3, [r7, #21]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f003 0306 	and.w	r3, r3, #6
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001f50:	7d3b      	ldrb	r3, [r7, #20]
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	4413      	add	r3, r2
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	7cbb      	ldrb	r3, [r7, #18]
 8001f66:	029b      	lsls	r3, r3, #10
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3301      	adds	r3, #1
 8001f76:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001f78:	8bfa      	ldrh	r2, [r7, #30]
 8001f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f7e:	3b09      	subs	r3, #9
 8001f80:	409a      	lsls	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001f8c:	e056      	b.n	800203c <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f94:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001f9c:	e055      	b.n	800204a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001f9e:	f7ff fbe5 	bl	800176c <SD_ReadyWait>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2bff      	cmp	r3, #255	; 0xff
 8001fa6:	d14b      	bne.n	8002040 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fae:	e047      	b.n	8002040 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2049      	movs	r0, #73	; 0x49
 8001fb4:	f7ff fce4 	bl	8001980 <SD_SendCmd>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d142      	bne.n	8002044 <SD_disk_ioctl+0x244>
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	6a38      	ldr	r0, [r7, #32]
 8001fc2:	f7ff fc53 	bl	800186c <SD_RxDataBlock>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d03b      	beq.n	8002044 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001fd2:	e037      	b.n	8002044 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	204a      	movs	r0, #74	; 0x4a
 8001fd8:	f7ff fcd2 	bl	8001980 <SD_SendCmd>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d132      	bne.n	8002048 <SD_disk_ioctl+0x248>
 8001fe2:	2110      	movs	r1, #16
 8001fe4:	6a38      	ldr	r0, [r7, #32]
 8001fe6:	f7ff fc41 	bl	800186c <SD_RxDataBlock>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d02b      	beq.n	8002048 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001ff6:	e027      	b.n	8002048 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	207a      	movs	r0, #122	; 0x7a
 8001ffc:	f7ff fcc0 	bl	8001980 <SD_SendCmd>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d116      	bne.n	8002034 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8002006:	2300      	movs	r3, #0
 8002008:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800200c:	e00b      	b.n	8002026 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800200e:	6a3c      	ldr	r4, [r7, #32]
 8002010:	1c63      	adds	r3, r4, #1
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	f7ff fb7e 	bl	8001714 <SPI_RxByte>
 8002018:	4603      	mov	r3, r0
 800201a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800201c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002020:	3301      	adds	r3, #1
 8002022:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002026:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800202a:	2b03      	cmp	r3, #3
 800202c:	d9ef      	bls.n	800200e <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002034:	2304      	movs	r3, #4
 8002036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800203a:	e006      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 800203c:	bf00      	nop
 800203e:	e004      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 8002040:	bf00      	nop
 8002042:	e002      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 8002044:	bf00      	nop
 8002046:	e000      	b.n	800204a <SD_disk_ioctl+0x24a>
      break;
 8002048:	bf00      	nop
    }
    
    DESELECT();
 800204a:	f7ff fb3d 	bl	80016c8 <DESELECT>
    SPI_RxByte();
 800204e:	f7ff fb61 	bl	8001714 <SPI_RxByte>
  }
  
  return res;
 8002052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002056:	4618      	mov	r0, r3
 8002058:	372c      	adds	r7, #44	; 0x2c
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}
 800205e:	bf00      	nop
 8002060:	20000000 	.word	0x20000000

08002064 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4a07      	ldr	r2, [pc, #28]	; (8002090 <vApplicationGetIdleTaskMemory+0x2c>)
 8002074:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	4a06      	ldr	r2, [pc, #24]	; (8002094 <vApplicationGetIdleTaskMemory+0x30>)
 800207a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	; 0x80
 8002080:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000548 	.word	0x20000548
 8002094:	2000059c 	.word	0x2000059c

08002098 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4a07      	ldr	r2, [pc, #28]	; (80020c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80020a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <vApplicationGetTimerTaskMemory+0x30>)
 80020ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	2000079c 	.word	0x2000079c
 80020c8:	200007f0 	.word	0x200007f0

080020cc <Critical_section_Uart>:
void VLPT_task(void *argument);
void SD_task(void *argument);
void Send_task(void *argument);

void Critical_section_Uart(int len,char *str)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
	xSemaphoreTake(SimMutex,portMAX_DELAY);
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <Critical_section_Uart+0x44>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f04f 31ff 	mov.w	r1, #4294967295
 80020de:	4618      	mov	r0, r3
 80020e0:	f00a fa30 	bl	800c544 <xQueueSemaphoreTake>
	HAL_UART_Transmit_DMA(&huart4, (uint8_t *)str,len);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	6839      	ldr	r1, [r7, #0]
 80020ec:	4809      	ldr	r0, [pc, #36]	; (8002114 <Critical_section_Uart+0x48>)
 80020ee:	f005 fc51 	bl	8007994 <HAL_UART_Transmit_DMA>
	HAL_Delay(1);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f001 fea2 	bl	8003e3c <HAL_Delay>
	xSemaphoreGive(SimMutex);
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <Critical_section_Uart+0x44>)
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	2200      	movs	r2, #0
 8002100:	2100      	movs	r1, #0
 8002102:	f009 ff19 	bl	800bf38 <xQueueGenericSend>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20000bf0 	.word	0x20000bf0
 8002114:	20000e20 	.word	0x20000e20

08002118 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART4)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a8a      	ldr	r2, [pc, #552]	; (8002364 <HAL_UART_RxCpltCallback+0x238>)
 800213a:	4293      	cmp	r3, r2
 800213c:	f040 8131 	bne.w	80023a2 <HAL_UART_RxCpltCallback+0x276>
	{
		if(rx_buf[1]==0x31)
 8002140:	4b89      	ldr	r3, [pc, #548]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 8002142:	785b      	ldrb	r3, [r3, #1]
 8002144:	2b31      	cmp	r3, #49	; 0x31
 8002146:	d175      	bne.n	8002234 <HAL_UART_RxCpltCallback+0x108>
		{
			if(rx_buf[2]==0x02)
 8002148:	4b87      	ldr	r3, [pc, #540]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 800214a:	789b      	ldrb	r3, [r3, #2]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d10b      	bne.n	8002168 <HAL_UART_RxCpltCallback+0x3c>
			{
				if(rx_buf[3]==0x01)stop_button=1;
 8002150:	4b85      	ldr	r3, [pc, #532]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 8002152:	78db      	ldrb	r3, [r3, #3]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d103      	bne.n	8002160 <HAL_UART_RxCpltCallback+0x34>
 8002158:	4b84      	ldr	r3, [pc, #528]	; (800236c <HAL_UART_RxCpltCallback+0x240>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]
			{

			}
		}
	}
}
 800215e:	e120      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else stop_button=0;
 8002160:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_UART_RxCpltCallback+0x240>)
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
}
 8002166:	e11c      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x05)
 8002168:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 800216a:	789b      	ldrb	r3, [r3, #2]
 800216c:	2b05      	cmp	r3, #5
 800216e:	d111      	bne.n	8002194 <HAL_UART_RxCpltCallback+0x68>
				time_scale_tune=time_scale*2;
 8002170:	4b7f      	ldr	r3, [pc, #508]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	4a7f      	ldr	r2, [pc, #508]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 8002178:	6013      	str	r3, [r2, #0]
				if(time_scale_tune<128)time_scale=time_scale_tune;
 800217a:	4b7e      	ldr	r3, [pc, #504]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2b7f      	cmp	r3, #127	; 0x7f
 8002180:	dc04      	bgt.n	800218c <HAL_UART_RxCpltCallback+0x60>
 8002182:	4b7c      	ldr	r3, [pc, #496]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7a      	ldr	r2, [pc, #488]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 8002188:	6013      	str	r3, [r2, #0]
}
 800218a:	e10a      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else time_scale=128;
 800218c:	4b78      	ldr	r3, [pc, #480]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	601a      	str	r2, [r3, #0]
}
 8002192:	e106      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x06)
 8002194:	4b74      	ldr	r3, [pc, #464]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 8002196:	789b      	ldrb	r3, [r3, #2]
 8002198:	2b06      	cmp	r3, #6
 800219a:	d114      	bne.n	80021c6 <HAL_UART_RxCpltCallback+0x9a>
				time_scale_tune=time_scale/2;
 800219c:	4b74      	ldr	r3, [pc, #464]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	0fda      	lsrs	r2, r3, #31
 80021a2:	4413      	add	r3, r2
 80021a4:	105b      	asrs	r3, r3, #1
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b72      	ldr	r3, [pc, #456]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 80021aa:	601a      	str	r2, [r3, #0]
				if(time_scale_tune>1)time_scale=time_scale_tune;
 80021ac:	4b71      	ldr	r3, [pc, #452]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	dd04      	ble.n	80021be <HAL_UART_RxCpltCallback+0x92>
 80021b4:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a6d      	ldr	r2, [pc, #436]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 80021ba:	6013      	str	r3, [r2, #0]
}
 80021bc:	e0f1      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else time_scale=1;
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
}
 80021c4:	e0ed      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x0A)
 80021c6:	4b68      	ldr	r3, [pc, #416]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 80021c8:	789b      	ldrb	r3, [r3, #2]
 80021ca:	2b0a      	cmp	r3, #10
 80021cc:	d10b      	bne.n	80021e6 <HAL_UART_RxCpltCallback+0xba>
				if(rx_buf[3]==0x01)FFT_button=1;
 80021ce:	4b66      	ldr	r3, [pc, #408]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 80021d0:	78db      	ldrb	r3, [r3, #3]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d103      	bne.n	80021de <HAL_UART_RxCpltCallback+0xb2>
 80021d6:	4b68      	ldr	r3, [pc, #416]	; (8002378 <HAL_UART_RxCpltCallback+0x24c>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	e0e1      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else FFT_button=0;
 80021de:	4b66      	ldr	r3, [pc, #408]	; (8002378 <HAL_UART_RxCpltCallback+0x24c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
}
 80021e4:	e0dd      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x0B)
 80021e6:	4b60      	ldr	r3, [pc, #384]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 80021e8:	789b      	ldrb	r3, [r3, #2]
 80021ea:	2b0b      	cmp	r3, #11
 80021ec:	d10b      	bne.n	8002206 <HAL_UART_RxCpltCallback+0xda>
				if(rx_buf[3]==0x01)amplify=10;
 80021ee:	4b5e      	ldr	r3, [pc, #376]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 80021f0:	78db      	ldrb	r3, [r3, #3]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d103      	bne.n	80021fe <HAL_UART_RxCpltCallback+0xd2>
 80021f6:	4b61      	ldr	r3, [pc, #388]	; (800237c <HAL_UART_RxCpltCallback+0x250>)
 80021f8:	220a      	movs	r2, #10
 80021fa:	601a      	str	r2, [r3, #0]
}
 80021fc:	e0d1      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else amplify=1;
 80021fe:	4b5f      	ldr	r3, [pc, #380]	; (800237c <HAL_UART_RxCpltCallback+0x250>)
 8002200:	2201      	movs	r2, #1
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	e0cd      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x08)
 8002206:	4b58      	ldr	r3, [pc, #352]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 8002208:	789b      	ldrb	r3, [r3, #2]
 800220a:	2b08      	cmp	r3, #8
 800220c:	d106      	bne.n	800221c <HAL_UART_RxCpltCallback+0xf0>
				SD_flag=1;//let sd_falg=1,when write is done,reset flag=0;
 800220e:	4b5c      	ldr	r3, [pc, #368]	; (8002380 <HAL_UART_RxCpltCallback+0x254>)
 8002210:	2201      	movs	r2, #1
 8002212:	601a      	str	r2, [r3, #0]
				SD_ADC_falg=1;//Store ADC data to SD card
 8002214:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <HAL_UART_RxCpltCallback+0x258>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
}
 800221a:	e0c2      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x0C)
 800221c:	4b52      	ldr	r3, [pc, #328]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 800221e:	789b      	ldrb	r3, [r3, #2]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	f040 80be 	bne.w	80023a2 <HAL_UART_RxCpltCallback+0x276>
				SD_flag=1;//let sd_falg=1,when write is done,reset flag=0;
 8002226:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_UART_RxCpltCallback+0x254>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]
				SD_FFT_falg=1;//Store FFT data to SD card
 800222c:	4b56      	ldr	r3, [pc, #344]	; (8002388 <HAL_UART_RxCpltCallback+0x25c>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
}
 8002232:	e0b6      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			if(rx_buf[2]==0x02)
 8002234:	4b4c      	ldr	r3, [pc, #304]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 8002236:	789b      	ldrb	r3, [r3, #2]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d10b      	bne.n	8002254 <HAL_UART_RxCpltCallback+0x128>
				if(rx_buf[3]==0x01)stop_button=1;
 800223c:	4b4a      	ldr	r3, [pc, #296]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 800223e:	78db      	ldrb	r3, [r3, #3]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d103      	bne.n	800224c <HAL_UART_RxCpltCallback+0x120>
 8002244:	4b49      	ldr	r3, [pc, #292]	; (800236c <HAL_UART_RxCpltCallback+0x240>)
 8002246:	2201      	movs	r2, #1
 8002248:	601a      	str	r2, [r3, #0]
}
 800224a:	e0aa      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else stop_button=0;
 800224c:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_UART_RxCpltCallback+0x240>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
}
 8002252:	e0a6      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x05)
 8002254:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 8002256:	789b      	ldrb	r3, [r3, #2]
 8002258:	2b05      	cmp	r3, #5
 800225a:	d111      	bne.n	8002280 <HAL_UART_RxCpltCallback+0x154>
				time_scale_tune=time_scale*2;
 800225c:	4b44      	ldr	r3, [pc, #272]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4a44      	ldr	r2, [pc, #272]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 8002264:	6013      	str	r3, [r2, #0]
				if(time_scale_tune<128)time_scale=time_scale_tune;
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b7f      	cmp	r3, #127	; 0x7f
 800226c:	dc04      	bgt.n	8002278 <HAL_UART_RxCpltCallback+0x14c>
 800226e:	4b41      	ldr	r3, [pc, #260]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a3f      	ldr	r2, [pc, #252]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 8002274:	6013      	str	r3, [r2, #0]
}
 8002276:	e094      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else time_scale=128;
 8002278:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	601a      	str	r2, [r3, #0]
}
 800227e:	e090      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x06)
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 8002282:	789b      	ldrb	r3, [r3, #2]
 8002284:	2b06      	cmp	r3, #6
 8002286:	d114      	bne.n	80022b2 <HAL_UART_RxCpltCallback+0x186>
				time_scale_tune=time_scale/2;
 8002288:	4b39      	ldr	r3, [pc, #228]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0fda      	lsrs	r2, r3, #31
 800228e:	4413      	add	r3, r2
 8002290:	105b      	asrs	r3, r3, #1
 8002292:	461a      	mov	r2, r3
 8002294:	4b37      	ldr	r3, [pc, #220]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 8002296:	601a      	str	r2, [r3, #0]
				if(time_scale_tune>1)time_scale=time_scale_tune;
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	dd04      	ble.n	80022aa <HAL_UART_RxCpltCallback+0x17e>
 80022a0:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_UART_RxCpltCallback+0x248>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a32      	ldr	r2, [pc, #200]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	e07b      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else time_scale=1;
 80022aa:	4b31      	ldr	r3, [pc, #196]	; (8002370 <HAL_UART_RxCpltCallback+0x244>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
}
 80022b0:	e077      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x07)
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 80022b4:	789b      	ldrb	r3, [r3, #2]
 80022b6:	2b07      	cmp	r3, #7
 80022b8:	d112      	bne.n	80022e0 <HAL_UART_RxCpltCallback+0x1b4>
				mag_scale_tune=mag_scale*2;
 80022ba:	4b34      	ldr	r3, [pc, #208]	; (800238c <HAL_UART_RxCpltCallback+0x260>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b33      	ldr	r3, [pc, #204]	; (8002390 <HAL_UART_RxCpltCallback+0x264>)
 80022c4:	701a      	strb	r2, [r3, #0]
				if(mag_scale_tune<32)mag_scale=mag_scale_tune;
 80022c6:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_UART_RxCpltCallback+0x264>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b1f      	cmp	r3, #31
 80022cc:	d804      	bhi.n	80022d8 <HAL_UART_RxCpltCallback+0x1ac>
 80022ce:	4b30      	ldr	r3, [pc, #192]	; (8002390 <HAL_UART_RxCpltCallback+0x264>)
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_UART_RxCpltCallback+0x260>)
 80022d4:	701a      	strb	r2, [r3, #0]
}
 80022d6:	e064      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else mag_scale=32;
 80022d8:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_UART_RxCpltCallback+0x260>)
 80022da:	2220      	movs	r2, #32
 80022dc:	701a      	strb	r2, [r3, #0]
}
 80022de:	e060      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x08)
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 80022e2:	789b      	ldrb	r3, [r3, #2]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d112      	bne.n	800230e <HAL_UART_RxCpltCallback+0x1e2>
				mag_scale_tune=mag_scale/2;
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <HAL_UART_RxCpltCallback+0x260>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	085b      	lsrs	r3, r3, #1
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_UART_RxCpltCallback+0x264>)
 80022f2:	701a      	strb	r2, [r3, #0]
				if(mag_scale_tune>1)mag_scale=mag_scale_tune;
 80022f4:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_UART_RxCpltCallback+0x264>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d904      	bls.n	8002306 <HAL_UART_RxCpltCallback+0x1da>
 80022fc:	4b24      	ldr	r3, [pc, #144]	; (8002390 <HAL_UART_RxCpltCallback+0x264>)
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	4b22      	ldr	r3, [pc, #136]	; (800238c <HAL_UART_RxCpltCallback+0x260>)
 8002302:	701a      	strb	r2, [r3, #0]
}
 8002304:	e04d      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else mag_scale=1;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_UART_RxCpltCallback+0x260>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
}
 800230c:	e049      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x09)
 800230e:	4b16      	ldr	r3, [pc, #88]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 8002310:	789b      	ldrb	r3, [r3, #2]
 8002312:	2b09      	cmp	r3, #9
 8002314:	d112      	bne.n	800233c <HAL_UART_RxCpltCallback+0x210>
				scope_bias_tune=scope_bias_tune+5;
 8002316:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <HAL_UART_RxCpltCallback+0x268>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	3305      	adds	r3, #5
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <HAL_UART_RxCpltCallback+0x268>)
 8002320:	701a      	strb	r2, [r3, #0]
				if(scope_bias_tune<255)scope_bias=scope_bias_tune;
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <HAL_UART_RxCpltCallback+0x268>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2bff      	cmp	r3, #255	; 0xff
 8002328:	d004      	beq.n	8002334 <HAL_UART_RxCpltCallback+0x208>
 800232a:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <HAL_UART_RxCpltCallback+0x268>)
 800232c:	781a      	ldrb	r2, [r3, #0]
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_UART_RxCpltCallback+0x26c>)
 8002330:	701a      	strb	r2, [r3, #0]
}
 8002332:	e036      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				else scope_bias=255;
 8002334:	4b18      	ldr	r3, [pc, #96]	; (8002398 <HAL_UART_RxCpltCallback+0x26c>)
 8002336:	22ff      	movs	r2, #255	; 0xff
 8002338:	701a      	strb	r2, [r3, #0]
}
 800233a:	e032      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
			else if(rx_buf[2]==0x0A)
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_UART_RxCpltCallback+0x23c>)
 800233e:	789b      	ldrb	r3, [r3, #2]
 8002340:	2b0a      	cmp	r3, #10
 8002342:	d12e      	bne.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
				scope_bias_tune=scope_bias_tune-5;
 8002344:	4b13      	ldr	r3, [pc, #76]	; (8002394 <HAL_UART_RxCpltCallback+0x268>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b05      	subs	r3, #5
 800234a:	b2da      	uxtb	r2, r3
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_UART_RxCpltCallback+0x268>)
 800234e:	701a      	strb	r2, [r3, #0]
				if(scope_bias_tune>0)scope_bias=scope_bias_tune;
 8002350:	4b10      	ldr	r3, [pc, #64]	; (8002394 <HAL_UART_RxCpltCallback+0x268>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d021      	beq.n	800239c <HAL_UART_RxCpltCallback+0x270>
 8002358:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <HAL_UART_RxCpltCallback+0x268>)
 800235a:	781a      	ldrb	r2, [r3, #0]
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_UART_RxCpltCallback+0x26c>)
 800235e:	701a      	strb	r2, [r3, #0]
}
 8002360:	e01f      	b.n	80023a2 <HAL_UART_RxCpltCallback+0x276>
 8002362:	bf00      	nop
 8002364:	40004c00 	.word	0x40004c00
 8002368:	20000fe0 	.word	0x20000fe0
 800236c:	20000fc8 	.word	0x20000fc8
 8002370:	20000008 	.word	0x20000008
 8002374:	20000004 	.word	0x20000004
 8002378:	20000fcc 	.word	0x20000fcc
 800237c:	20000010 	.word	0x20000010
 8002380:	20000fd0 	.word	0x20000fd0
 8002384:	20000fd4 	.word	0x20000fd4
 8002388:	20000fd8 	.word	0x20000fd8
 800238c:	2000000d 	.word	0x2000000d
 8002390:	2000000c 	.word	0x2000000c
 8002394:	20000fdc 	.word	0x20000fdc
 8002398:	20000fdd 	.word	0x20000fdd
				else scope_bias=0;
 800239c:	4b04      	ldr	r3, [pc, #16]	; (80023b0 <HAL_UART_RxCpltCallback+0x284>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	20000fdd 	.word	0x20000fdd
 80023b4:	00000000 	.word	0x00000000

080023b8 <get_sinval>:
//-------------sin waveform generate-----------------//
//---------------------------------------------------//
uint32_t sin_val[100];//for saving sin waveform sample data

void get_sinval ()
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
	for(int i=0;i<100;i++)
 80023be:	2300      	movs	r3, #0
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	e03a      	b.n	800243a <get_sinval+0x82>
	{
		sin_val[i]=(sin(i*2*PI*1/100)*(4096/2)+2048);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fa3b 	bl	8000844 <__aeabi_i2d>
 80023ce:	a323      	add	r3, pc, #140	; (adr r3, 800245c <get_sinval+0xa4>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe faa0 	bl	8000918 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <get_sinval+0x98>)
 80023e6:	f7fe fbc1 	bl	8000b6c <__aeabi_ddiv>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	ec43 2b17 	vmov	d7, r2, r3
 80023f2:	eeb0 0a47 	vmov.f32	s0, s14
 80023f6:	eef0 0a67 	vmov.f32	s1, s15
 80023fa:	f00d f899 	bl	800f530 <sin>
 80023fe:	ec51 0b10 	vmov	r0, r1, d0
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <get_sinval+0x9c>)
 8002408:	f7fe fa86 	bl	8000918 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <get_sinval+0x9c>)
 800241a:	f7fe f8c7 	bl	80005ac <__adddf3>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fd39 	bl	8000e9c <__aeabi_d2uiz>
 800242a:	4602      	mov	r2, r0
 800242c:	490a      	ldr	r1, [pc, #40]	; (8002458 <get_sinval+0xa0>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<100;i++)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b63      	cmp	r3, #99	; 0x63
 800243e:	ddc1      	ble.n	80023c4 <get_sinval+0xc>
	}
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	f3af 8000 	nop.w
 8002450:	40590000 	.word	0x40590000
 8002454:	40a00000 	.word	0x40a00000
 8002458:	20001458 	.word	0x20001458
 800245c:	fc8b007a 	.word	0xfc8b007a
 8002460:	400921fa 	.word	0x400921fa

08002464 <PowerMag>:
* �? ??��?�_usFFTPoints FFT?��?��
* �? ??? ??: ???
*********************************************************************************************************
*/
void PowerMag(uint16_t _usFFTPoints)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
	int16_t lX,lY;
	uint16_t i;
	float32_t mag;
	/* 计�?��?��?? */
	for (i=0; i < _usFFTPoints; i++)
 800246e:	2300      	movs	r3, #0
 8002470:	83fb      	strh	r3, [r7, #30]
 8002472:	e045      	b.n	8002500 <PowerMag+0x9c>
	{
	lX= (output[i]<<16)>>16; /* 实部*/
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	4a29      	ldr	r2, [pc, #164]	; (800251c <PowerMag+0xb8>)
 8002478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247c:	83bb      	strh	r3, [r7, #28]
	lY= (output[i]>> 16); /* ??�部 */
 800247e:	8bfb      	ldrh	r3, [r7, #30]
 8002480:	4a26      	ldr	r2, [pc, #152]	; (800251c <PowerMag+0xb8>)
 8002482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002486:	0c1b      	lsrs	r3, r3, #16
 8002488:	837b      	strh	r3, [r7, #26]
	arm_sqrt_f32((float32_t)(lX*lX+ lY*lY), &mag); /* 求模 */
 800248a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800248e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002492:	fb03 f202 	mul.w	r2, r3, r2
 8002496:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800249a:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800249e:	fb01 f303 	mul.w	r3, r1, r3
 80024a2:	4413      	add	r3, r2
 80024a4:	ee07 3a90 	vmov	s15, r3
 80024a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ac:	edc7 7a05 	vstr	s15, [r7, #20]
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80024b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80024ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	db09      	blt.n	80024d8 <PowerMag+0x74>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 80024c4:	ed97 0a05 	vldr	s0, [r7, #20]
 80024c8:	f00d f88c 	bl	800f5e4 <sqrtf>
 80024cc:	eef0 7a40 	vmov.f32	s15, s0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 80024d6:	e004      	b.n	80024e2 <PowerMag+0x7e>
    }
    else
    {
      *pOut = 0.0f;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80024e0:	bf00      	nop
	Mag[i]= mag*2; /* 求模??��?�以2??�是实�?�模?��?�直流�?��?��?��?要�??2 */
 80024e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ea:	8bfb      	ldrh	r3, [r7, #30]
 80024ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f0:	ee17 1a90 	vmov	r1, s15
 80024f4:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <PowerMag+0xbc>)
 80024f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (i=0; i < _usFFTPoints; i++)
 80024fa:	8bfb      	ldrh	r3, [r7, #30]
 80024fc:	3301      	adds	r3, #1
 80024fe:	83fb      	strh	r3, [r7, #30]
 8002500:	8bfa      	ldrh	r2, [r7, #30]
 8002502:	88fb      	ldrh	r3, [r7, #6]
 8002504:	429a      	cmp	r2, r3
 8002506:	d3b5      	bcc.n	8002474 <PowerMag+0x10>
	}

	/* ?��于�?�面多�?��??2，�?以�?��?�直流�?��?��?�除�?2 */
	Mag[0] = Mag[0]>>1;
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <PowerMag+0xbc>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	085b      	lsrs	r3, r3, #1
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <PowerMag+0xbc>)
 8002510:	6013      	str	r3, [r2, #0]
}
 8002512:	bf00      	nop
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	200016fc 	.word	0x200016fc
 8002520:	200017fc 	.word	0x200017fc
 8002524:	00000000 	.word	0x00000000

08002528 <Power_Phase_Radians>:
* �? ??��?�_usFFTPoints FFT?��?���? uiCmpValue ????
* �? ??? ??: ???
*********************************************************************************************************
*/
void Power_Phase_Radians(uint16_t _usFFTPoints, uint32_t _uiCmpValue)
{
 8002528:	b5b0      	push	{r4, r5, r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	6039      	str	r1, [r7, #0]
 8002532:	80fb      	strh	r3, [r7, #6]
	int16_t lX, lY;
	uint16_t i;
	float32_t phase;
	float32_t mag;
	for (i=0; i <_usFFTPoints; i++)
 8002534:	2300      	movs	r3, #0
 8002536:	83fb      	strh	r3, [r7, #30]
 8002538:	e084      	b.n	8002644 <Power_Phase_Radians+0x11c>
	{
		lX= (output[i]<<16)>>16; /* 实部 */
 800253a:	8bfb      	ldrh	r3, [r7, #30]
 800253c:	4a48      	ldr	r2, [pc, #288]	; (8002660 <Power_Phase_Radians+0x138>)
 800253e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002542:	83bb      	strh	r3, [r7, #28]
		lY= (output[i] >> 16); /* ??�部 */
 8002544:	8bfb      	ldrh	r3, [r7, #30]
 8002546:	4a46      	ldr	r2, [pc, #280]	; (8002660 <Power_Phase_Radians+0x138>)
 8002548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	837b      	strh	r3, [r7, #26]
		phase = atan2(lY, lX); /* atan2求解??��?��?��?�围?��(-pi, pi], 弧度?�� */
 8002550:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe f975 	bl	8000844 <__aeabi_i2d>
 800255a:	4604      	mov	r4, r0
 800255c:	460d      	mov	r5, r1
 800255e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f96e 	bl	8000844 <__aeabi_i2d>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	ec43 2b11 	vmov	d1, r2, r3
 8002570:	ec45 4b10 	vmov	d0, r4, r5
 8002574:	f00d f834 	bl	800f5e0 <atan2>
 8002578:	ec53 2b10 	vmov	r2, r3, d0
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fcac 	bl	8000edc <__aeabi_d2f>
 8002584:	4603      	mov	r3, r0
 8002586:	617b      	str	r3, [r7, #20]
		arm_sqrt_f32((float32_t)(lX*lX+ lY*lY), &mag); /* 求模 */
 8002588:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800258c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002590:	fb03 f202 	mul.w	r2, r3, r2
 8002594:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002598:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	4413      	add	r3, r2
 80025a2:	ee07 3a90 	vmov	s15, r3
 80025a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025aa:	edc7 7a04 	vstr	s15, [r7, #16]
 80025ae:	f107 0308 	add.w	r3, r7, #8
 80025b2:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 80025b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80025b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c0:	db09      	blt.n	80025d6 <Power_Phase_Radians+0xae>
      *pOut = __builtin_sqrtf(in);
 80025c2:	ed97 0a04 	vldr	s0, [r7, #16]
 80025c6:	f00d f80d 	bl	800f5e4 <sqrtf>
 80025ca:	eef0 7a40 	vmov.f32	s15, s0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80025d4:	e004      	b.n	80025e0 <Power_Phase_Radians+0xb8>
      *pOut = 0.0f;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80025de:	bf00      	nop
		if(_uiCmpValue > mag)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80025ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	dd07      	ble.n	8002608 <Power_Phase_Radians+0xe0>
		{
			Phase[i] = 0;
 80025f8:	8bfb      	ldrh	r3, [r7, #30]
 80025fa:	4a1a      	ldr	r2, [pc, #104]	; (8002664 <Power_Phase_Radians+0x13c>)
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e01a      	b.n	800263e <Power_Phase_Radians+0x116>
		}
		else
		{
			Phase[i] = phase* 180.0f/PI; /* 将�?�解??��?��?�由弧度转换为�?�度 */
 8002608:	edd7 7a05 	vldr	s15, [r7, #20]
 800260c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002668 <Power_Phase_Radians+0x140>
 8002610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002614:	ee17 0a90 	vmov	r0, s15
 8002618:	f7fe f926 	bl	8000868 <__aeabi_f2d>
 800261c:	a30e      	add	r3, pc, #56	; (adr r3, 8002658 <Power_Phase_Radians+0x130>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fe faa3 	bl	8000b6c <__aeabi_ddiv>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	8bfc      	ldrh	r4, [r7, #30]
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	f7fe fc54 	bl	8000edc <__aeabi_d2f>
 8002634:	4602      	mov	r2, r0
 8002636:	490b      	ldr	r1, [pc, #44]	; (8002664 <Power_Phase_Radians+0x13c>)
 8002638:	00a3      	lsls	r3, r4, #2
 800263a:	440b      	add	r3, r1
 800263c:	601a      	str	r2, [r3, #0]
	for (i=0; i <_usFFTPoints; i++)
 800263e:	8bfb      	ldrh	r3, [r7, #30]
 8002640:	3301      	adds	r3, #1
 8002642:	83fb      	strh	r3, [r7, #30]
 8002644:	8bfa      	ldrh	r2, [r7, #30]
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	429a      	cmp	r2, r3
 800264a:	f4ff af76 	bcc.w	800253a <Power_Phase_Radians+0x12>
		}
	}
}
 800264e:	bf00      	nop
 8002650:	bf00      	nop
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bdb0      	pop	{r4, r5, r7, pc}
 8002658:	fc8b007a 	.word	0xfc8b007a
 800265c:	400921fa 	.word	0x400921fa
 8002660:	200016fc 	.word	0x200016fc
 8002664:	200018fc 	.word	0x200018fc
 8002668:	43340000 	.word	0x43340000

0800266c <DSP_FFTPhase>:
* �? ??��?��??
* �? ??? ??: ???
*********************************************************************************************************
*/
void DSP_FFTPhase(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
	/* 计�??64?��FFT
	 output：�?�出结�?��?��??16位是??�部，�??16位是实部??
	 input ：�?�入?��?��，�??16位是??�部，�??16位是实部??
	 第�?�个??�数必须?��64??
	*/
	cr4_fft_64_stm32(output, input, 64);
 8002670:	2240      	movs	r2, #64	; 0x40
 8002672:	4906      	ldr	r1, [pc, #24]	; (800268c <DSP_FFTPhase+0x20>)
 8002674:	4806      	ldr	r0, [pc, #24]	; (8002690 <DSP_FFTPhase+0x24>)
 8002676:	f7fd fdcb 	bl	8000210 <cr4_fft_64_stm32>
	/* 求�?��?? */
	PowerMag(FFT_length);
 800267a:	2040      	movs	r0, #64	; 0x40
 800267c:	f7ff fef2 	bl	8002464 <PowerMag>

	Power_Phase_Radians(FFT_length, 100);
 8002680:	2164      	movs	r1, #100	; 0x64
 8002682:	2040      	movs	r0, #64	; 0x40
 8002684:	f7ff ff50 	bl	8002528 <Power_Phase_Radians>
}
 8002688:	bf00      	nop
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200015fc 	.word	0x200015fc
 8002690:	200016fc 	.word	0x200016fc

08002694 <buffer_value_set>:
int sd_store_counter=0;
int write_counter_adc=0;
int write_counter_fft=0;

void buffer_value_set()
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
	for(int i=0;i<64;i++)
 800269a:	2300      	movs	r3, #0
 800269c:	607b      	str	r3, [r7, #4]
 800269e:	e007      	b.n	80026b0 <buffer_value_set+0x1c>
	{
		buf_val[i]=i;
 80026a0:	4908      	ldr	r1, [pc, #32]	; (80026c4 <buffer_value_set+0x30>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<64;i++)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3301      	adds	r3, #1
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b3f      	cmp	r3, #63	; 0x3f
 80026b4:	ddf4      	ble.n	80026a0 <buffer_value_set+0xc>
	}
}
 80026b6:	bf00      	nop
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	20001a30 	.word	0x20001a30

080026c8 <timer_callback>:

void timer_callback (xTimerHandle xtimer)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
		//save to fft buffer//
//		if(fft_counter>=FFT_length)fft_counter=0;
//		input[fft_counter]=adc_val/4;
//		fft_counter++;
	}
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026e2:	f001 fb69 	bl	8003db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026e6:	f000 f8f9 	bl	80028dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ea:	f000 fb4f 	bl	8002d8c <MX_GPIO_Init>
  MX_DMA_Init();
 80026ee:	f000 faff 	bl	8002cf0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80026f2:	f000 fad3 	bl	8002c9c <MX_USART2_UART_Init>
  MX_UART4_Init();
 80026f6:	f000 faa7 	bl	8002c48 <MX_UART4_Init>
  MX_DAC_Init();
 80026fa:	f000 f9ad 	bl	8002a58 <MX_DAC_Init>
  MX_ADC1_Init();
 80026fe:	f000 f959 	bl	80029b4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002702:	f000 fa09 	bl	8002b18 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002706:	f000 fa53 	bl	8002bb0 <MX_TIM3_Init>
  MX_SPI3_Init();
 800270a:	f000 f9cf 	bl	8002aac <MX_SPI3_Init>
  MX_FATFS_Init();
 800270e:	f006 fb3d 	bl	8008d8c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  //SD card setup//
  buffer_value_set();
 8002712:	f7ff ffbf 	bl	8002694 <buffer_value_set>


  Mount_SD("/");
 8002716:	484c      	ldr	r0, [pc, #304]	; (8002848 <main+0x16c>)
 8002718:	f7fe fdc8 	bl	80012ac <Mount_SD>
  Format_SD();
 800271c:	f7fe fe0c 	bl	8001338 <Format_SD>
  Create_File("ADC.TXT");
 8002720:	484a      	ldr	r0, [pc, #296]	; (800284c <main+0x170>)
 8002722:	f7fe fe6f 	bl	8001404 <Create_File>
  Create_File("FFT.TXT");
 8002726:	484a      	ldr	r0, [pc, #296]	; (8002850 <main+0x174>)
 8002728:	f7fe fe6c 	bl	8001404 <Create_File>
  Unmount_SD("/");
 800272c:	4846      	ldr	r0, [pc, #280]	; (8002848 <main+0x16c>)
 800272e:	f7fe fde1 	bl	80012f4 <Unmount_SD>




  //DAC setup//
  HAL_TIM_Base_Start(&htim2);
 8002732:	4848      	ldr	r0, [pc, #288]	; (8002854 <main+0x178>)
 8002734:	f004 fbb4 	bl	8006ea0 <HAL_TIM_Base_Start>
  get_sinval();
 8002738:	f7ff fe3e 	bl	80023b8 <get_sinval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 800273c:	2300      	movs	r3, #0
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2364      	movs	r3, #100	; 0x64
 8002742:	4a45      	ldr	r2, [pc, #276]	; (8002858 <main+0x17c>)
 8002744:	2100      	movs	r1, #0
 8002746:	4845      	ldr	r0, [pc, #276]	; (800285c <main+0x180>)
 8002748:	f002 f98a 	bl	8004a60 <HAL_DAC_Start_DMA>
  //ADC_DMA_setup//
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc_dma,1);
 800274c:	2201      	movs	r2, #1
 800274e:	4944      	ldr	r1, [pc, #272]	; (8002860 <main+0x184>)
 8002750:	4844      	ldr	r0, [pc, #272]	; (8002864 <main+0x188>)
 8002752:	f001 fcad 	bl	80040b0 <HAL_ADC_Start_DMA>

  //TIM3 interrupt setup//
  HAL_TIM_Base_Start_IT(&htim3);
 8002756:	4844      	ldr	r0, [pc, #272]	; (8002868 <main+0x18c>)
 8002758:	f004 fc0a 	bl	8006f70 <HAL_TIM_Base_Start_IT>

  //Start Receive IT//
  HAL_UART_Receive_DMA(&huart4, rx_buf, 5);
 800275c:	2205      	movs	r2, #5
 800275e:	4943      	ldr	r1, [pc, #268]	; (800286c <main+0x190>)
 8002760:	4843      	ldr	r0, [pc, #268]	; (8002870 <main+0x194>)
 8002762:	f005 f995 	bl	8007a90 <HAL_UART_Receive_DMA>


  //create semaphore//
  Bin_sem=xSemaphoreCreateBinary();
 8002766:	2203      	movs	r2, #3
 8002768:	2100      	movs	r1, #0
 800276a:	2001      	movs	r0, #1
 800276c:	f009 fb58 	bl	800be20 <xQueueGenericCreate>
 8002770:	4603      	mov	r3, r0
 8002772:	4a40      	ldr	r2, [pc, #256]	; (8002874 <main+0x198>)
 8002774:	6013      	str	r3, [r2, #0]
  //create mutex//
  SimMutex = xSemaphoreCreateMutex();
 8002776:	2001      	movs	r0, #1
 8002778:	f009 fbc5 	bl	800bf06 <xQueueCreateMutex>
 800277c:	4603      	mov	r3, r0
 800277e:	4a3e      	ldr	r2, [pc, #248]	; (8002878 <main+0x19c>)
 8002780:	6013      	str	r3, [r2, #0]
  if(SimMutex!=NULL)mutex_flag=1;
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <main+0x19c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <main+0xb4>
 800278a:	4b3c      	ldr	r3, [pc, #240]	; (800287c <main+0x1a0>)
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]

  //create software timer//
  FFT_timer_handler=xTimerCreate("FFT_timer",pdMS_TO_TICKS(16), pdTRUE,(void *) 1,(TimerCallbackFunction_t)timer_callback);
 8002790:	4b3b      	ldr	r3, [pc, #236]	; (8002880 <main+0x1a4>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2301      	movs	r3, #1
 8002796:	2201      	movs	r2, #1
 8002798:	2110      	movs	r1, #16
 800279a:	483a      	ldr	r0, [pc, #232]	; (8002884 <main+0x1a8>)
 800279c:	f00b faa4 	bl	800dce8 <xTimerCreate>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a39      	ldr	r2, [pc, #228]	; (8002888 <main+0x1ac>)
 80027a4:	6013      	str	r3, [r2, #0]

  //Queue create//
  SD_queue=xQueueCreate(64,sizeof(int));
 80027a6:	2200      	movs	r2, #0
 80027a8:	2104      	movs	r1, #4
 80027aa:	2040      	movs	r0, #64	; 0x40
 80027ac:	f009 fb38 	bl	800be20 <xQueueGenericCreate>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4a36      	ldr	r2, [pc, #216]	; (800288c <main+0x1b0>)
 80027b4:	6013      	str	r3, [r2, #0]
  FFT_queue=xQueueCreate(32,sizeof(int));
 80027b6:	2200      	movs	r2, #0
 80027b8:	2104      	movs	r1, #4
 80027ba:	2020      	movs	r0, #32
 80027bc:	f009 fb30 	bl	800be20 <xQueueGenericCreate>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4a33      	ldr	r2, [pc, #204]	; (8002890 <main+0x1b4>)
 80027c4:	6013      	str	r3, [r2, #0]
  //create task//
  xTaskCreate(HPT_task,"HPT",128,NULL,4,&HPT_handler);
 80027c6:	4b33      	ldr	r3, [pc, #204]	; (8002894 <main+0x1b8>)
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2304      	movs	r3, #4
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2300      	movs	r3, #0
 80027d0:	2280      	movs	r2, #128	; 0x80
 80027d2:	4931      	ldr	r1, [pc, #196]	; (8002898 <main+0x1bc>)
 80027d4:	4831      	ldr	r0, [pc, #196]	; (800289c <main+0x1c0>)
 80027d6:	f00a fa72 	bl	800ccbe <xTaskCreate>
  xTaskCreate(MPT_task,"MPT",128,NULL,4,&MPT_handler);
 80027da:	4b31      	ldr	r3, [pc, #196]	; (80028a0 <main+0x1c4>)
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	2304      	movs	r3, #4
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2300      	movs	r3, #0
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	492f      	ldr	r1, [pc, #188]	; (80028a4 <main+0x1c8>)
 80027e8:	482f      	ldr	r0, [pc, #188]	; (80028a8 <main+0x1cc>)
 80027ea:	f00a fa68 	bl	800ccbe <xTaskCreate>
  xTaskCreate(LPT_task,"LPT",128,NULL,3,&LPT_handler);
 80027ee:	4b2f      	ldr	r3, [pc, #188]	; (80028ac <main+0x1d0>)
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	2303      	movs	r3, #3
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2300      	movs	r3, #0
 80027f8:	2280      	movs	r2, #128	; 0x80
 80027fa:	492d      	ldr	r1, [pc, #180]	; (80028b0 <main+0x1d4>)
 80027fc:	482d      	ldr	r0, [pc, #180]	; (80028b4 <main+0x1d8>)
 80027fe:	f00a fa5e 	bl	800ccbe <xTaskCreate>
  xTaskCreate(VLPT_task,"VLPT",128,NULL,2,&VLPT_handler);
 8002802:	4b2d      	ldr	r3, [pc, #180]	; (80028b8 <main+0x1dc>)
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	2302      	movs	r3, #2
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2300      	movs	r3, #0
 800280c:	2280      	movs	r2, #128	; 0x80
 800280e:	492b      	ldr	r1, [pc, #172]	; (80028bc <main+0x1e0>)
 8002810:	482b      	ldr	r0, [pc, #172]	; (80028c0 <main+0x1e4>)
 8002812:	f00a fa54 	bl	800ccbe <xTaskCreate>
  xTaskCreate(SD_task,"SDT",256,NULL,2,&SD_handler);
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <main+0x1e8>)
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	2302      	movs	r3, #2
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	2300      	movs	r3, #0
 8002820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002824:	4928      	ldr	r1, [pc, #160]	; (80028c8 <main+0x1ec>)
 8002826:	4829      	ldr	r0, [pc, #164]	; (80028cc <main+0x1f0>)
 8002828:	f00a fa49 	bl	800ccbe <xTaskCreate>
  xTaskCreate(Send_task,"ST",128,NULL,1,&ST_handler);
 800282c:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <main+0x1f4>)
 800282e:	9301      	str	r3, [sp, #4]
 8002830:	2301      	movs	r3, #1
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	2300      	movs	r3, #0
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	4926      	ldr	r1, [pc, #152]	; (80028d4 <main+0x1f8>)
 800283a:	4827      	ldr	r0, [pc, #156]	; (80028d8 <main+0x1fc>)
 800283c:	f00a fa3f 	bl	800ccbe <xTaskCreate>
  vTaskStartScheduler();
 8002840:	f00a fba8 	bl	800cf94 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002844:	e7fe      	b.n	8002844 <main+0x168>
 8002846:	bf00      	nop
 8002848:	08010f20 	.word	0x08010f20
 800284c:	08010f24 	.word	0x08010f24
 8002850:	08010f2c 	.word	0x08010f2c
 8002854:	20000d90 	.word	0x20000d90
 8002858:	20001458 	.word	0x20001458
 800285c:	20000cc4 	.word	0x20000cc4
 8002860:	20001434 	.word	0x20001434
 8002864:	20000c1c 	.word	0x20000c1c
 8002868:	20000dd8 	.word	0x20000dd8
 800286c:	20000fe0 	.word	0x20000fe0
 8002870:	20000e20 	.word	0x20000e20
 8002874:	20000bf4 	.word	0x20000bf4
 8002878:	20000bf0 	.word	0x20000bf0
 800287c:	20000fe5 	.word	0x20000fe5
 8002880:	080026c9 	.word	0x080026c9
 8002884:	08010f34 	.word	0x08010f34
 8002888:	20000c18 	.word	0x20000c18
 800288c:	20000c10 	.word	0x20000c10
 8002890:	20000c14 	.word	0x20000c14
 8002894:	20000bf8 	.word	0x20000bf8
 8002898:	08010f40 	.word	0x08010f40
 800289c:	08002e31 	.word	0x08002e31
 80028a0:	20000bfc 	.word	0x20000bfc
 80028a4:	08010f44 	.word	0x08010f44
 80028a8:	08002ec9 	.word	0x08002ec9
 80028ac:	20000c00 	.word	0x20000c00
 80028b0:	08010f48 	.word	0x08010f48
 80028b4:	08002fa5 	.word	0x08002fa5
 80028b8:	20000c04 	.word	0x20000c04
 80028bc:	08010f4c 	.word	0x08010f4c
 80028c0:	0800302d 	.word	0x0800302d
 80028c4:	20000c08 	.word	0x20000c08
 80028c8:	08010f54 	.word	0x08010f54
 80028cc:	08003081 	.word	0x08003081
 80028d0:	20000c0c 	.word	0x20000c0c
 80028d4:	08010f58 	.word	0x08010f58
 80028d8:	080031f9 	.word	0x080031f9

080028dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b094      	sub	sp, #80	; 0x50
 80028e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028e2:	f107 031c 	add.w	r3, r7, #28
 80028e6:	2234      	movs	r2, #52	; 0x34
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00c f9b6 	bl	800ec5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028f0:	f107 0308 	add.w	r3, r7, #8
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002900:	2300      	movs	r3, #0
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	4b29      	ldr	r3, [pc, #164]	; (80029ac <SystemClock_Config+0xd0>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	4a28      	ldr	r2, [pc, #160]	; (80029ac <SystemClock_Config+0xd0>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	6413      	str	r3, [r2, #64]	; 0x40
 8002910:	4b26      	ldr	r3, [pc, #152]	; (80029ac <SystemClock_Config+0xd0>)
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800291c:	2300      	movs	r3, #0
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <SystemClock_Config+0xd4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a22      	ldr	r2, [pc, #136]	; (80029b0 <SystemClock_Config+0xd4>)
 8002926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b20      	ldr	r3, [pc, #128]	; (80029b0 <SystemClock_Config+0xd4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002938:	2301      	movs	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800293c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002940:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002942:	2302      	movs	r3, #2
 8002944:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002946:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800294a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800294c:	2304      	movs	r3, #4
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002950:	23a0      	movs	r3, #160	; 0xa0
 8002952:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002954:	2302      	movs	r3, #2
 8002956:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002958:	2302      	movs	r3, #2
 800295a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800295c:	2302      	movs	r3, #2
 800295e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002960:	f107 031c 	add.w	r3, r7, #28
 8002964:	4618      	mov	r0, r3
 8002966:	f003 fb6d 	bl	8006044 <HAL_RCC_OscConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002970:	f000 fdc6 	bl	8003500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002974:	230f      	movs	r3, #15
 8002976:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002978:	2302      	movs	r3, #2
 800297a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002980:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002984:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800298a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800298c:	f107 0308 	add.w	r3, r7, #8
 8002990:	2105      	movs	r1, #5
 8002992:	4618      	mov	r0, r3
 8002994:	f002 ffda 	bl	800594c <HAL_RCC_ClockConfig>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800299e:	f000 fdaf 	bl	8003500 <Error_Handler>
  }
}
 80029a2:	bf00      	nop
 80029a4:	3750      	adds	r7, #80	; 0x50
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40007000 	.word	0x40007000

080029b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029ba:	463b      	mov	r3, r7
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80029c6:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <MX_ADC1_Init+0x98>)
 80029c8:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <MX_ADC1_Init+0x9c>)
 80029ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80029cc:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <MX_ADC1_Init+0x98>)
 80029ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <MX_ADC1_Init+0x98>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80029da:	4b1c      	ldr	r3, [pc, #112]	; (8002a4c <MX_ADC1_Init+0x98>)
 80029dc:	2200      	movs	r2, #0
 80029de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <MX_ADC1_Init+0x98>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <MX_ADC1_Init+0x98>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <MX_ADC1_Init+0x98>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <MX_ADC1_Init+0x98>)
 80029f6:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <MX_ADC1_Init+0xa0>)
 80029f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80029fa:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <MX_ADC1_Init+0x98>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <MX_ADC1_Init+0x98>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002a06:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <MX_ADC1_Init+0x98>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_ADC1_Init+0x98>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002a14:	480d      	ldr	r0, [pc, #52]	; (8002a4c <MX_ADC1_Init+0x98>)
 8002a16:	f001 fa35 	bl	8003e84 <HAL_ADC_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002a20:	f000 fd6e 	bl	8003500 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002a24:	230e      	movs	r3, #14
 8002a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002a30:	463b      	mov	r3, r7
 8002a32:	4619      	mov	r1, r3
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <MX_ADC1_Init+0x98>)
 8002a36:	f001 fc5f 	bl	80042f8 <HAL_ADC_ConfigChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002a40:	f000 fd5e 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002a44:	bf00      	nop
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000c1c 	.word	0x20000c1c
 8002a50:	40012000 	.word	0x40012000
 8002a54:	0f000001 	.word	0x0f000001

08002a58 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002a5e:	463b      	mov	r3, r7
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <MX_DAC_Init+0x4c>)
 8002a68:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <MX_DAC_Init+0x50>)
 8002a6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002a6c:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <MX_DAC_Init+0x4c>)
 8002a6e:	f001 ffd5 	bl	8004a1c <HAL_DAC_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002a78:	f000 fd42 	bl	8003500 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002a7c:	2324      	movs	r3, #36	; 0x24
 8002a7e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002a84:	463b      	mov	r3, r7
 8002a86:	2200      	movs	r2, #0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <MX_DAC_Init+0x4c>)
 8002a8c:	f002 f8d4 	bl	8004c38 <HAL_DAC_ConfigChannel>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002a96:	f000 fd33 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000cc4 	.word	0x20000cc4
 8002aa8:	40007400 	.word	0x40007400

08002aac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002ab2:	4a18      	ldr	r2, [pc, #96]	; (8002b14 <MX_SPI3_Init+0x68>)
 8002ab4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002ab6:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002ab8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002abc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002adc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002ade:	4b0c      	ldr	r3, [pc, #48]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002af8:	220a      	movs	r2, #10
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002afc:	4804      	ldr	r0, [pc, #16]	; (8002b10 <MX_SPI3_Init+0x64>)
 8002afe:	f003 fd3f 	bl	8006580 <HAL_SPI_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002b08:	f000 fcfa 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000d38 	.word	0x20000d38
 8002b14:	40003c00 	.word	0x40003c00

08002b18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b1e:	f107 0308 	add.w	r3, r7, #8
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	605a      	str	r2, [r3, #4]
 8002b28:	609a      	str	r2, [r3, #8]
 8002b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <MX_TIM2_Init+0x94>)
 8002b36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8002b3c:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <MX_TIM2_Init+0x94>)
 8002b3e:	224f      	movs	r2, #79	; 0x4f
 8002b40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <MX_TIM2_Init+0x94>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <MX_TIM2_Init+0x94>)
 8002b4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <MX_TIM2_Init+0x94>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b56:	4b15      	ldr	r3, [pc, #84]	; (8002bac <MX_TIM2_Init+0x94>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b5c:	4813      	ldr	r0, [pc, #76]	; (8002bac <MX_TIM2_Init+0x94>)
 8002b5e:	f004 f94f 	bl	8006e00 <HAL_TIM_Base_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b68:	f000 fcca 	bl	8003500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	4619      	mov	r1, r3
 8002b78:	480c      	ldr	r0, [pc, #48]	; (8002bac <MX_TIM2_Init+0x94>)
 8002b7a:	f004 fb71 	bl	8007260 <HAL_TIM_ConfigClockSource>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b84:	f000 fcbc 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b90:	463b      	mov	r3, r7
 8002b92:	4619      	mov	r1, r3
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <MX_TIM2_Init+0x94>)
 8002b96:	f004 fd8d 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002ba0:	f000 fcae 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ba4:	bf00      	nop
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000d90 	.word	0x20000d90

08002bb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_TIM3_Init+0x90>)
 8002bce:	4a1d      	ldr	r2, [pc, #116]	; (8002c44 <MX_TIM3_Init+0x94>)
 8002bd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 80-1;
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <MX_TIM3_Init+0x90>)
 8002bd4:	224f      	movs	r2, #79	; 0x4f
 8002bd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_TIM3_Init+0x90>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002bde:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <MX_TIM3_Init+0x90>)
 8002be0:	2263      	movs	r2, #99	; 0x63
 8002be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be4:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <MX_TIM3_Init+0x90>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bea:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <MX_TIM3_Init+0x90>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bf0:	4813      	ldr	r0, [pc, #76]	; (8002c40 <MX_TIM3_Init+0x90>)
 8002bf2:	f004 f905 	bl	8006e00 <HAL_TIM_Base_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002bfc:	f000 fc80 	bl	8003500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	480c      	ldr	r0, [pc, #48]	; (8002c40 <MX_TIM3_Init+0x90>)
 8002c0e:	f004 fb27 	bl	8007260 <HAL_TIM_ConfigClockSource>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002c18:	f000 fc72 	bl	8003500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c24:	463b      	mov	r3, r7
 8002c26:	4619      	mov	r1, r3
 8002c28:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_TIM3_Init+0x90>)
 8002c2a:	f004 fd43 	bl	80076b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002c34:	f000 fc64 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c38:	bf00      	nop
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000dd8 	.word	0x20000dd8
 8002c44:	40000400 	.word	0x40000400

08002c48 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <MX_UART4_Init+0x4c>)
 8002c4e:	4a12      	ldr	r2, [pc, #72]	; (8002c98 <MX_UART4_Init+0x50>)
 8002c50:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <MX_UART4_Init+0x4c>)
 8002c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c58:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5a:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <MX_UART4_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <MX_UART4_Init+0x4c>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <MX_UART4_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <MX_UART4_Init+0x4c>)
 8002c6e:	220c      	movs	r2, #12
 8002c70:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <MX_UART4_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <MX_UART4_Init+0x4c>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002c7e:	4805      	ldr	r0, [pc, #20]	; (8002c94 <MX_UART4_Init+0x4c>)
 8002c80:	f004 fda8 	bl	80077d4 <HAL_UART_Init>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002c8a:	f000 fc39 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000e20 	.word	0x20000e20
 8002c98:	40004c00 	.word	0x40004c00

08002c9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ca0:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <MX_USART2_UART_Init+0x4c>)
 8002ca2:	4a12      	ldr	r2, [pc, #72]	; (8002cec <MX_USART2_UART_Init+0x50>)
 8002ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ca6:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <MX_USART2_UART_Init+0x4c>)
 8002ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <MX_USART2_UART_Init+0x4c>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <MX_USART2_UART_Init+0x4c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <MX_USART2_UART_Init+0x4c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cc0:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <MX_USART2_UART_Init+0x4c>)
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ccc:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <MX_USART2_UART_Init+0x4c>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <MX_USART2_UART_Init+0x4c>)
 8002cd4:	f004 fd7e 	bl	80077d4 <HAL_UART_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cde:	f000 fc0f 	bl	8003500 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000e64 	.word	0x20000e64
 8002cec:	40004400 	.word	0x40004400

08002cf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	4b23      	ldr	r3, [pc, #140]	; (8002d88 <MX_DMA_Init+0x98>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a22      	ldr	r2, [pc, #136]	; (8002d88 <MX_DMA_Init+0x98>)
 8002d00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <MX_DMA_Init+0x98>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0e:	607b      	str	r3, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <MX_DMA_Init+0x98>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <MX_DMA_Init+0x98>)
 8002d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d20:	6313      	str	r3, [r2, #48]	; 0x30
 8002d22:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <MX_DMA_Init+0x98>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2105      	movs	r1, #5
 8002d32:	200d      	movs	r0, #13
 8002d34:	f001 fe48 	bl	80049c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002d38:	200d      	movs	r0, #13
 8002d3a:	f001 fe61 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2105      	movs	r1, #5
 8002d42:	200f      	movs	r0, #15
 8002d44:	f001 fe40 	bl	80049c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002d48:	200f      	movs	r0, #15
 8002d4a:	f001 fe59 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2105      	movs	r1, #5
 8002d52:	2010      	movs	r0, #16
 8002d54:	f001 fe38 	bl	80049c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002d58:	2010      	movs	r0, #16
 8002d5a:	f001 fe51 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2105      	movs	r1, #5
 8002d62:	2011      	movs	r0, #17
 8002d64:	f001 fe30 	bl	80049c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002d68:	2011      	movs	r0, #17
 8002d6a:	f001 fe49 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2105      	movs	r1, #5
 8002d72:	2038      	movs	r0, #56	; 0x38
 8002d74:	f001 fe28 	bl	80049c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d78:	2038      	movs	r0, #56	; 0x38
 8002d7a:	f001 fe41 	bl	8004a00 <HAL_NVIC_EnableIRQ>

}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023800 	.word	0x40023800

08002d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d92:	f107 030c 	add.w	r3, r7, #12
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	60da      	str	r2, [r3, #12]
 8002da0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <MX_GPIO_Init+0x9c>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	4a1f      	ldr	r2, [pc, #124]	; (8002e28 <MX_GPIO_Init+0x9c>)
 8002dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002db0:	6313      	str	r3, [r2, #48]	; 0x30
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <MX_GPIO_Init+0x9c>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <MX_GPIO_Init+0x9c>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <MX_GPIO_Init+0x9c>)
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b16      	ldr	r3, [pc, #88]	; (8002e28 <MX_GPIO_Init+0x9c>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dda:	2300      	movs	r3, #0
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <MX_GPIO_Init+0x9c>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	4a11      	ldr	r2, [pc, #68]	; (8002e28 <MX_GPIO_Init+0x9c>)
 8002de4:	f043 0301 	orr.w	r3, r3, #1
 8002de8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dea:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <MX_GPIO_Init+0x9c>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	603b      	str	r3, [r7, #0]
 8002df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8002df6:	2200      	movs	r2, #0
 8002df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dfc:	480b      	ldr	r0, [pc, #44]	; (8002e2c <MX_GPIO_Init+0xa0>)
 8002dfe:	f002 fd8b 	bl	8005918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4804      	ldr	r0, [pc, #16]	; (8002e2c <MX_GPIO_Init+0xa0>)
 8002e1c:	f002 fbe8 	bl	80055f0 <HAL_GPIO_Init>

}
 8002e20:	bf00      	nop
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020800 	.word	0x40020800

08002e30 <HPT_task>:

/* USER CODE BEGIN 4 */
void HPT_task(void *argument)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(uart_trans_counter>=1000)uart_trans_counter=0;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HPT_task+0x74>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e40:	db02      	blt.n	8002e48 <HPT_task+0x18>
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HPT_task+0x74>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]

		int value=adc_data_buf[uart_trans_counter]/mag_scale+scope_bias;
 8002e48:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HPT_task+0x74>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a16      	ldr	r2, [pc, #88]	; (8002ea8 <HPT_task+0x78>)
 8002e4e:	5cd2      	ldrb	r2, [r2, r3]
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HPT_task+0x7c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HPT_task+0x80>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4413      	add	r3, r2
 8002e62:	60fb      	str	r3, [r7, #12]
		if(value>=255)value=255;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2bfe      	cmp	r3, #254	; 0xfe
 8002e68:	dd01      	ble.n	8002e6e <HPT_task+0x3e>
 8002e6a:	23ff      	movs	r3, #255	; 0xff
 8002e6c:	60fb      	str	r3, [r7, #12]

		int len=sprintf(buf,"add 1,0,%d%s",value,cmd_end);
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HPT_task+0x84>)
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4911      	ldr	r1, [pc, #68]	; (8002eb8 <HPT_task+0x88>)
 8002e74:	4811      	ldr	r0, [pc, #68]	; (8002ebc <HPT_task+0x8c>)
 8002e76:	f00b fef9 	bl	800ec6c <siprintf>
 8002e7a:	60b8      	str	r0, [r7, #8]
		if(stop_button==0)
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HPT_task+0x90>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d108      	bne.n	8002e96 <HPT_task+0x66>
		{
		Critical_section_Uart(len,buf);//if stop button=0,send data to display
 8002e84:	490d      	ldr	r1, [pc, #52]	; (8002ebc <HPT_task+0x8c>)
 8002e86:	68b8      	ldr	r0, [r7, #8]
 8002e88:	f7ff f920 	bl	80020cc <Critical_section_Uart>
		uart_trans_counter++;
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HPT_task+0x74>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <HPT_task+0x74>)
 8002e94:	6013      	str	r3, [r2, #0]
		}


		vTaskDelay(1*time_scale);
 8002e96:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <HPT_task+0x94>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f00a f846 	bl	800cf2c <vTaskDelay>
	{
 8002ea0:	e7ca      	b.n	8002e38 <HPT_task+0x8>
 8002ea2:	bf00      	nop
 8002ea4:	20001440 	.word	0x20001440
 8002ea8:	2000104c 	.word	0x2000104c
 8002eac:	2000000d 	.word	0x2000000d
 8002eb0:	20000fdd 	.word	0x20000fdd
 8002eb4:	20000014 	.word	0x20000014
 8002eb8:	08010f5c 	.word	0x08010f5c
 8002ebc:	20000fe8 	.word	0x20000fe8
 8002ec0:	20000fc8 	.word	0x20000fc8
 8002ec4:	20000008 	.word	0x20000008

08002ec8 <MPT_task>:
	}
}

void MPT_task(void *argument)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	uint32_t Tick_delay=pdMS_TO_TICKS(1000);
 8002ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed4:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		if(FFT_button==1&&stop_button==0&&fft_complete_flag==0)
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <MPT_task+0xb0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d148      	bne.n	8002f70 <MPT_task+0xa8>
 8002ede:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <MPT_task+0xb4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d144      	bne.n	8002f70 <MPT_task+0xa8>
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <MPT_task+0xb8>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d140      	bne.n	8002f70 <MPT_task+0xa8>
		{
			if(fft_transfer_counter<0)
 8002eee:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <MPT_task+0xbc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da0f      	bge.n	8002f16 <MPT_task+0x4e>
			{
				fft_transfer_counter=31;
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <MPT_task+0xbc>)
 8002ef8:	221f      	movs	r2, #31
 8002efa:	601a      	str	r2, [r3, #0]
				fft_complete_flag=1;//transfer complete set flag to stop transfer data
 8002efc:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <MPT_task+0xb8>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	601a      	str	r2, [r3, #0]
				xSemaphoreGive(Bin_sem);//Transfer complete Release Binary semaphore
 8002f02:	4b21      	ldr	r3, [pc, #132]	; (8002f88 <MPT_task+0xc0>)
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	f009 f814 	bl	800bf38 <xQueueGenericSend>
				vTaskDelay(Tick_delay);
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f00a f80b 	bl	800cf2c <vTaskDelay>
			}

			if(fft_hold_counter!=1)
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <MPT_task+0xc4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d003      	beq.n	8002f26 <MPT_task+0x5e>
			{
				value_fft=0;
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <MPT_task+0xc8>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e007      	b.n	8002f36 <MPT_task+0x6e>
			}
			else value_fft=Mag[fft_transfer_counter];
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <MPT_task+0xbc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <MPT_task+0xcc>)
 8002f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <MPT_task+0xc8>)
 8002f34:	601a      	str	r2, [r3, #0]

			int len=sprintf(buf_3,"add 1,1,%d%s",value_fft,cmd_end);
 8002f36:	4b16      	ldr	r3, [pc, #88]	; (8002f90 <MPT_task+0xc8>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	4b17      	ldr	r3, [pc, #92]	; (8002f98 <MPT_task+0xd0>)
 8002f3c:	4917      	ldr	r1, [pc, #92]	; (8002f9c <MPT_task+0xd4>)
 8002f3e:	4818      	ldr	r0, [pc, #96]	; (8002fa0 <MPT_task+0xd8>)
 8002f40:	f00b fe94 	bl	800ec6c <siprintf>
 8002f44:	60b8      	str	r0, [r7, #8]
			Critical_section_Uart(len,buf_3);//if FFT_button=1,send data to display
 8002f46:	4916      	ldr	r1, [pc, #88]	; (8002fa0 <MPT_task+0xd8>)
 8002f48:	68b8      	ldr	r0, [r7, #8]
 8002f4a:	f7ff f8bf 	bl	80020cc <Critical_section_Uart>

			if(fft_hold_counter>=10)
 8002f4e:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <MPT_task+0xc4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b09      	cmp	r3, #9
 8002f54:	dd07      	ble.n	8002f66 <MPT_task+0x9e>
			{
				fft_transfer_counter--;
 8002f56:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <MPT_task+0xbc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	4a09      	ldr	r2, [pc, #36]	; (8002f84 <MPT_task+0xbc>)
 8002f5e:	6013      	str	r3, [r2, #0]
				fft_hold_counter=0;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <MPT_task+0xc4>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	601a      	str	r2, [r3, #0]
			}
				fft_hold_counter++;
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <MPT_task+0xc4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	4a07      	ldr	r2, [pc, #28]	; (8002f8c <MPT_task+0xc4>)
 8002f6e:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(10);
 8002f70:	200a      	movs	r0, #10
 8002f72:	f009 ffdb 	bl	800cf2c <vTaskDelay>
		if(FFT_button==1&&stop_button==0&&fft_complete_flag==0)
 8002f76:	e7ae      	b.n	8002ed6 <MPT_task+0xe>
 8002f78:	20000fcc 	.word	0x20000fcc
 8002f7c:	20000fc8 	.word	0x20000fc8
 8002f80:	200015f0 	.word	0x200015f0
 8002f84:	20000018 	.word	0x20000018
 8002f88:	20000bf4 	.word	0x20000bf4
 8002f8c:	200015ec 	.word	0x200015ec
 8002f90:	200015f4 	.word	0x200015f4
 8002f94:	200017fc 	.word	0x200017fc
 8002f98:	20000014 	.word	0x20000014
 8002f9c:	08010f6c 	.word	0x08010f6c
 8002fa0:	20001018 	.word	0x20001018

08002fa4 <LPT_task>:
	}
}

void LPT_task(void *argument)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Receive_DMA(&huart4,rx_buf,5);
 8002fac:	2205      	movs	r2, #5
 8002fae:	4914      	ldr	r1, [pc, #80]	; (8003000 <LPT_task+0x5c>)
 8002fb0:	4814      	ldr	r0, [pc, #80]	; (8003004 <LPT_task+0x60>)
 8002fb2:	f004 fd6d 	bl	8007a90 <HAL_UART_Receive_DMA>

		if(stop_button==0)
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <LPT_task+0x64>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11b      	bne.n	8002ff6 <LPT_task+0x52>
		{
			int len=sprintf(buf_2,"t0.txt=\"freq=%d Hz\"%s",frequency,cmd_end);
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <LPT_task+0x68>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b12      	ldr	r3, [pc, #72]	; (8003010 <LPT_task+0x6c>)
 8002fc6:	4913      	ldr	r1, [pc, #76]	; (8003014 <LPT_task+0x70>)
 8002fc8:	4813      	ldr	r0, [pc, #76]	; (8003018 <LPT_task+0x74>)
 8002fca:	f00b fe4f 	bl	800ec6c <siprintf>
 8002fce:	60f8      	str	r0, [r7, #12]
			Critical_section_Uart(len,buf_2);
 8002fd0:	4911      	ldr	r1, [pc, #68]	; (8003018 <LPT_task+0x74>)
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff f87a 	bl	80020cc <Critical_section_Uart>
			len=sprintf(buf_4,"t1.txt=\"Mag=%d.%d V\"%s",mag_max_int,mag_max_mod,cmd_end);
 8002fd8:	4b10      	ldr	r3, [pc, #64]	; (800301c <LPT_task+0x78>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <LPT_task+0x7c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	490b      	ldr	r1, [pc, #44]	; (8003010 <LPT_task+0x6c>)
 8002fe2:	9100      	str	r1, [sp, #0]
 8002fe4:	490f      	ldr	r1, [pc, #60]	; (8003024 <LPT_task+0x80>)
 8002fe6:	4810      	ldr	r0, [pc, #64]	; (8003028 <LPT_task+0x84>)
 8002fe8:	f00b fe40 	bl	800ec6c <siprintf>
 8002fec:	60f8      	str	r0, [r7, #12]
			Critical_section_Uart(len,buf_4);
 8002fee:	490e      	ldr	r1, [pc, #56]	; (8003028 <LPT_task+0x84>)
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f7ff f86b 	bl	80020cc <Critical_section_Uart>
		}
		vTaskDelay(500);
 8002ff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ffa:	f009 ff97 	bl	800cf2c <vTaskDelay>
		HAL_UART_Receive_DMA(&huart4,rx_buf,5);
 8002ffe:	e7d5      	b.n	8002fac <LPT_task+0x8>
 8003000:	20000fe0 	.word	0x20000fe0
 8003004:	20000e20 	.word	0x20000e20
 8003008:	20000fc8 	.word	0x20000fc8
 800300c:	20001448 	.word	0x20001448
 8003010:	20000014 	.word	0x20000014
 8003014:	08010f7c 	.word	0x08010f7c
 8003018:	20000ffc 	.word	0x20000ffc
 800301c:	2000144c 	.word	0x2000144c
 8003020:	20001450 	.word	0x20001450
 8003024:	08010f94 	.word	0x08010f94
 8003028:	2000102c 	.word	0x2000102c

0800302c <VLPT_task>:
	}
}

void VLPT_task(void *argument)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b085      	sub	sp, #20
 8003030:	af02      	add	r7, sp, #8
 8003032:	6078      	str	r0, [r7, #4]
	xTimerStart(FFT_timer_handler,0);
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <VLPT_task+0x48>)
 8003036:	681c      	ldr	r4, [r3, #0]
 8003038:	f00a f8bc 	bl	800d1b4 <xTaskGetTickCount>
 800303c:	4602      	mov	r2, r0
 800303e:	2300      	movs	r3, #0
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	2300      	movs	r3, #0
 8003044:	2101      	movs	r1, #1
 8003046:	4620      	mov	r0, r4
 8003048:	f00a feaa 	bl	800dda0 <xTimerGenericCommand>
	while(1)
	{
		//Do FFT calculation,only when receive Binary semaphore
		if(xSemaphoreTake(Bin_sem,portMAX_DELAY)!=pdFALSE)
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <VLPT_task+0x4c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f04f 31ff 	mov.w	r1, #4294967295
 8003054:	4618      	mov	r0, r3
 8003056:	f009 fa75 	bl	800c544 <xQueueSemaphoreTake>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <VLPT_task+0x3e>
		{
			DSP_FFTPhase();
 8003060:	f7ff fb04 	bl	800266c <DSP_FFTPhase>
			fft_complete_flag=0;//when fft update,reset the fft flag
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <VLPT_task+0x50>)
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
		}
		else
		{
		}

		vTaskDelay(2000);
 800306a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800306e:	f009 ff5d 	bl	800cf2c <vTaskDelay>
		if(xSemaphoreTake(Bin_sem,portMAX_DELAY)!=pdFALSE)
 8003072:	e7eb      	b.n	800304c <VLPT_task+0x20>
 8003074:	20000c18 	.word	0x20000c18
 8003078:	20000bf4 	.word	0x20000bf4
 800307c:	200015f0 	.word	0x200015f0

08003080 <SD_task>:

	}
}

void SD_task(void *argument)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
	int value;
	int value_FFT;
	uint32_t Tick_delay=pdMS_TO_TICKS(1);
 8003088:	2301      	movs	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
	while(1)
	{
		if(SD_flag==1&&SD_ADC_falg==1)
 800308c:	4b4b      	ldr	r3, [pc, #300]	; (80031bc <SD_task+0x13c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d130      	bne.n	80030f6 <SD_task+0x76>
 8003094:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <SD_task+0x140>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d12c      	bne.n	80030f6 <SD_task+0x76>
		{
			xQueueReceive(SD_queue, &value, Tick_delay);
 800309c:	4b49      	ldr	r3, [pc, #292]	; (80031c4 <SD_task+0x144>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f107 010c 	add.w	r1, r7, #12
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f009 f96c 	bl	800c384 <xQueueReceive>
			if(write_counter_adc!=0)
 80030ac:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <SD_task+0x148>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <SD_task+0x46>
			sprintf(buf_sd,"%d.%d\n",(write_counter_adc+1),value);
 80030b4:	4b44      	ldr	r3, [pc, #272]	; (80031c8 <SD_task+0x148>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4943      	ldr	r1, [pc, #268]	; (80031cc <SD_task+0x14c>)
 80030be:	4844      	ldr	r0, [pc, #272]	; (80031d0 <SD_task+0x150>)
 80030c0:	f00b fdd4 	bl	800ec6c <siprintf>
 80030c4:	e007      	b.n	80030d6 <SD_task+0x56>
			else
			sprintf(buf_sd,"ADC_value\n%d.%d\n",(write_counter_adc+1),value);
 80030c6:	4b40      	ldr	r3, [pc, #256]	; (80031c8 <SD_task+0x148>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4941      	ldr	r1, [pc, #260]	; (80031d4 <SD_task+0x154>)
 80030d0:	483f      	ldr	r0, [pc, #252]	; (80031d0 <SD_task+0x150>)
 80030d2:	f00b fdcb 	bl	800ec6c <siprintf>

			//update file//
			Mount_SD("/");
 80030d6:	4840      	ldr	r0, [pc, #256]	; (80031d8 <SD_task+0x158>)
 80030d8:	f7fe f8e8 	bl	80012ac <Mount_SD>
			Update_File("ADC.TXT",buf_sd);
 80030dc:	493c      	ldr	r1, [pc, #240]	; (80031d0 <SD_task+0x150>)
 80030de:	483f      	ldr	r0, [pc, #252]	; (80031dc <SD_task+0x15c>)
 80030e0:	f7fe fa26 	bl	8001530 <Update_File>
			Unmount_SD("/");
 80030e4:	483c      	ldr	r0, [pc, #240]	; (80031d8 <SD_task+0x158>)
 80030e6:	f7fe f905 	bl	80012f4 <Unmount_SD>

			write_counter_adc++;
 80030ea:	4b37      	ldr	r3, [pc, #220]	; (80031c8 <SD_task+0x148>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	4a35      	ldr	r2, [pc, #212]	; (80031c8 <SD_task+0x148>)
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	e031      	b.n	800315a <SD_task+0xda>
		}
		else
		{
			if(SD_flag==1&&SD_FFT_falg==1)
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <SD_task+0x13c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d12d      	bne.n	800315a <SD_task+0xda>
 80030fe:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <SD_task+0x160>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d129      	bne.n	800315a <SD_task+0xda>
			{
				value_FFT=Mag[write_counter_fft];
 8003106:	4b37      	ldr	r3, [pc, #220]	; (80031e4 <SD_task+0x164>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a37      	ldr	r2, [pc, #220]	; (80031e8 <SD_task+0x168>)
 800310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003110:	613b      	str	r3, [r7, #16]
				if(write_counter_fft!=0)
 8003112:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <SD_task+0x164>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <SD_task+0xac>
				sprintf(buf_sd,"%d.%d\n",(write_counter_fft+1),value_FFT);
 800311a:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <SD_task+0x164>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	492a      	ldr	r1, [pc, #168]	; (80031cc <SD_task+0x14c>)
 8003124:	482a      	ldr	r0, [pc, #168]	; (80031d0 <SD_task+0x150>)
 8003126:	f00b fda1 	bl	800ec6c <siprintf>
 800312a:	e007      	b.n	800313c <SD_task+0xbc>
				else
				sprintf(buf_sd,"Mag_value\n%d.%d\n",(write_counter_fft+1),value_FFT);
 800312c:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <SD_task+0x164>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	492d      	ldr	r1, [pc, #180]	; (80031ec <SD_task+0x16c>)
 8003136:	4826      	ldr	r0, [pc, #152]	; (80031d0 <SD_task+0x150>)
 8003138:	f00b fd98 	bl	800ec6c <siprintf>

				//update file//
				Mount_SD("/");
 800313c:	4826      	ldr	r0, [pc, #152]	; (80031d8 <SD_task+0x158>)
 800313e:	f7fe f8b5 	bl	80012ac <Mount_SD>
				Update_File("FFT.TXT",buf_sd);
 8003142:	4923      	ldr	r1, [pc, #140]	; (80031d0 <SD_task+0x150>)
 8003144:	482a      	ldr	r0, [pc, #168]	; (80031f0 <SD_task+0x170>)
 8003146:	f7fe f9f3 	bl	8001530 <Update_File>
				Unmount_SD("/");
 800314a:	4823      	ldr	r0, [pc, #140]	; (80031d8 <SD_task+0x158>)
 800314c:	f7fe f8d2 	bl	80012f4 <Unmount_SD>

				write_counter_fft++;
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <SD_task+0x164>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3301      	adds	r3, #1
 8003156:	4a23      	ldr	r2, [pc, #140]	; (80031e4 <SD_task+0x164>)
 8003158:	6013      	str	r3, [r2, #0]
			}
		}


		if(write_counter_adc>=64&&SD_ADC_falg==1)
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <SD_task+0x148>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2b3f      	cmp	r3, #63	; 0x3f
 8003160:	dd09      	ble.n	8003176 <SD_task+0xf6>
 8003162:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <SD_task+0x140>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d105      	bne.n	8003176 <SD_task+0xf6>
		{
			write_counter_adc=0;
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <SD_task+0x148>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
			SD_ADC_falg=0;//ADC data store complete
 8003170:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <SD_task+0x140>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
		}

		if(write_counter_fft>=32&&SD_FFT_falg==1)
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <SD_task+0x164>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b1f      	cmp	r3, #31
 800317c:	dd09      	ble.n	8003192 <SD_task+0x112>
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <SD_task+0x160>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <SD_task+0x112>
		{
			write_counter_fft=0;
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <SD_task+0x164>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
			SD_FFT_falg=0;//FFT data store complete
 800318c:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <SD_task+0x160>)
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
		}

		if(SD_ADC_falg==0&&SD_FFT_falg==0)
 8003192:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <SD_task+0x140>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <SD_task+0x128>
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <SD_task+0x160>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <SD_task+0x128>
		{
			SD_flag=0;//if data write complete reset flag
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <SD_task+0x13c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
		}


		vTaskDelay(3*time_scale);
 80031a8:	4b12      	ldr	r3, [pc, #72]	; (80031f4 <SD_task+0x174>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f009 feba 	bl	800cf2c <vTaskDelay>
		if(SD_flag==1&&SD_ADC_falg==1)
 80031b8:	e768      	b.n	800308c <SD_task+0xc>
 80031ba:	bf00      	nop
 80031bc:	20000fd0 	.word	0x20000fd0
 80031c0:	20000fd4 	.word	0x20000fd4
 80031c4:	20000c10 	.word	0x20000c10
 80031c8:	20001b30 	.word	0x20001b30
 80031cc:	08010fac 	.word	0x08010fac
 80031d0:	200019fc 	.word	0x200019fc
 80031d4:	08010fb4 	.word	0x08010fb4
 80031d8:	08010f20 	.word	0x08010f20
 80031dc:	08010f24 	.word	0x08010f24
 80031e0:	20000fd8 	.word	0x20000fd8
 80031e4:	20001b34 	.word	0x20001b34
 80031e8:	200017fc 	.word	0x200017fc
 80031ec:	08010fc8 	.word	0x08010fc8
 80031f0:	08010f2c 	.word	0x08010f2c
 80031f4:	20000008 	.word	0x20000008

080031f8 <Send_task>:
	}
}


void Send_task(void *argument)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
	uint32_t Tick_delay=pdMS_TO_TICKS(1);
 8003200:	2301      	movs	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
	while(1)
	{
			xQueueSend(SD_queue,&adc_val,Tick_delay);
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <Send_task+0x28>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	2300      	movs	r3, #0
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4905      	ldr	r1, [pc, #20]	; (8003224 <Send_task+0x2c>)
 800320e:	f008 fe93 	bl	800bf38 <xQueueGenericSend>
			vTaskDelay(1*time_scale);
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <Send_task+0x30>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f009 fe88 	bl	800cf2c <vTaskDelay>
			xQueueSend(SD_queue,&adc_val,Tick_delay);
 800321c:	e7f2      	b.n	8003204 <Send_task+0xc>
 800321e:	bf00      	nop
 8003220:	20000c10 	.word	0x20000c10
 8003224:	20001048 	.word	0x20001048
 8003228:	20000008 	.word	0x20000008

0800322c <HAL_ADC_ConvCpltCallback>:
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
	adc_val=adc_dma[0];
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_ADC_ConvCpltCallback+0x20>)
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	461a      	mov	r2, r3
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_ADC_ConvCpltCallback+0x24>)
 800323c:	601a      	str	r2, [r3, #0]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	20001434 	.word	0x20001434
 8003250:	20001048 	.word	0x20001048
 8003254:	00000000 	.word	0x00000000

08003258 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a90      	ldr	r2, [pc, #576]	; (80034a8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800326a:	f000 fdc7 	bl	8003dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a8e      	ldr	r2, [pc, #568]	; (80034ac <HAL_TIM_PeriodElapsedCallback+0x254>)
 8003274:	4293      	cmp	r3, r2
 8003276:	f040 8106 	bne.w	8003486 <HAL_TIM_PeriodElapsedCallback+0x22e>
  {
	sample_counter++;
 800327a:	4b8d      	ldr	r3, [pc, #564]	; (80034b0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	4a8b      	ldr	r2, [pc, #556]	; (80034b0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003282:	6013      	str	r3, [r2, #0]
	//sample counter decide sample rate//
	if(sample_counter>=1*time_scale)
 8003284:	4b8a      	ldr	r3, [pc, #552]	; (80034b0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b8a      	ldr	r3, [pc, #552]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	f2c0 80d8 	blt.w	8003442 <HAL_TIM_PeriodElapsedCallback+0x1ea>
	{

		sample_counter=0;
 8003292:	4b87      	ldr	r3, [pc, #540]	; (80034b0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
		if(store_counter>=1000)store_counter=0;
 8003298:	4b87      	ldr	r3, [pc, #540]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032a0:	db02      	blt.n	80032a8 <HAL_TIM_PeriodElapsedCallback+0x50>
 80032a2:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 80032a8:	4884      	ldr	r0, [pc, #528]	; (80034bc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80032aa:	f000 fe2f 	bl	8003f0c <HAL_ADC_Start>
		adc_data_buf[store_counter]=adc_val/16;
 80032ae:	4b84      	ldr	r3, [pc, #528]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	091a      	lsrs	r2, r3, #4
 80032b4:	4b80      	ldr	r3, [pc, #512]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b2d1      	uxtb	r1, r2
 80032ba:	4a82      	ldr	r2, [pc, #520]	; (80034c4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80032bc:	54d1      	strb	r1, [r2, r3]
		store_counter++;
 80032be:	4b7e      	ldr	r3, [pc, #504]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	4a7c      	ldr	r2, [pc, #496]	; (80034b8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80032c6:	6013      	str	r3, [r2, #0]



		//frequency calculation//
		if(adc_val>=2048)cros_time++;
 80032c8:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032d0:	d305      	bcc.n	80032de <HAL_TIM_PeriodElapsedCallback+0x86>
 80032d2:	4b7d      	ldr	r3, [pc, #500]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	4a7b      	ldr	r2, [pc, #492]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	e03d      	b.n	800335a <HAL_TIM_PeriodElapsedCallback+0x102>
		else if(adc_val<2048&&cros_time!=0)
 80032de:	4b78      	ldr	r3, [pc, #480]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e6:	d238      	bcs.n	800335a <HAL_TIM_PeriodElapsedCallback+0x102>
 80032e8:	4b77      	ldr	r3, [pc, #476]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d034      	beq.n	800335a <HAL_TIM_PeriodElapsedCallback+0x102>
		{
			frequency=1/(0.0001*time_scale*cros_time*2);
 80032f0:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd faa5 	bl	8000844 <__aeabi_i2d>
 80032fa:	a365      	add	r3, pc, #404	; (adr r3, 8003490 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f7fd fb0a 	bl	8000918 <__aeabi_dmul>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4614      	mov	r4, r2
 800330a:	461d      	mov	r5, r3
 800330c:	4b6e      	ldr	r3, [pc, #440]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fa97 	bl	8000844 <__aeabi_i2d>
 8003316:	4602      	mov	r2, r0
 8003318:	460b      	mov	r3, r1
 800331a:	4620      	mov	r0, r4
 800331c:	4629      	mov	r1, r5
 800331e:	f7fd fafb 	bl	8000918 <__aeabi_dmul>
 8003322:	4602      	mov	r2, r0
 8003324:	460b      	mov	r3, r1
 8003326:	4610      	mov	r0, r2
 8003328:	4619      	mov	r1, r3
 800332a:	4602      	mov	r2, r0
 800332c:	460b      	mov	r3, r1
 800332e:	f7fd f93d 	bl	80005ac <__adddf3>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	f04f 0000 	mov.w	r0, #0
 800333a:	4964      	ldr	r1, [pc, #400]	; (80034cc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800333c:	f7fd fc16 	bl	8000b6c <__aeabi_ddiv>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	f7fd fda8 	bl	8000e9c <__aeabi_d2uiz>
 800334c:	4603      	mov	r3, r0
 800334e:	b2da      	uxtb	r2, r3
 8003350:	4b5f      	ldr	r3, [pc, #380]	; (80034d0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003352:	701a      	strb	r2, [r3, #0]
			cros_time=0;
 8003354:	4b5c      	ldr	r3, [pc, #368]	; (80034c8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
		}

		//magnitude calculation//
		if((adc_val/16)>mag_max)
 800335a:	4b59      	ldr	r3, [pc, #356]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	4a5c      	ldr	r2, [pc, #368]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003362:	7812      	ldrb	r2, [r2, #0]
 8003364:	4293      	cmp	r3, r2
 8003366:	d954      	bls.n	8003412 <HAL_TIM_PeriodElapsedCallback+0x1ba>
		{
			mag_max=adc_val/16;//if adc_val >previous value,change max value
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	b2da      	uxtb	r2, r3
 8003370:	4b58      	ldr	r3, [pc, #352]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003372:	701a      	strb	r2, [r3, #0]
			mag_max_int=mag_max*3.3*amplify/255;
 8003374:	4b57      	ldr	r3, [pc, #348]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd fa63 	bl	8000844 <__aeabi_i2d>
 800337e:	a346      	add	r3, pc, #280	; (adr r3, 8003498 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f7fd fac8 	bl	8000918 <__aeabi_dmul>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4614      	mov	r4, r2
 800338e:	461d      	mov	r5, r3
 8003390:	4b51      	ldr	r3, [pc, #324]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd fa55 	bl	8000844 <__aeabi_i2d>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4620      	mov	r0, r4
 80033a0:	4629      	mov	r1, r5
 80033a2:	f7fd fab9 	bl	8000918 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4610      	mov	r0, r2
 80033ac:	4619      	mov	r1, r3
 80033ae:	a33c      	add	r3, pc, #240	; (adr r3, 80034a0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f7fd fbda 	bl	8000b6c <__aeabi_ddiv>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	f7fd fd44 	bl	8000e4c <__aeabi_d2iz>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4a45      	ldr	r2, [pc, #276]	; (80034dc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80033c8:	6013      	str	r3, [r2, #0]
			mag_max_mod=(mag_max*33/10*amplify%255)/26;
 80033ca:	4b42      	ldr	r3, [pc, #264]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	4613      	mov	r3, r2
 80033d2:	015b      	lsls	r3, r3, #5
 80033d4:	4413      	add	r3, r2
 80033d6:	4a42      	ldr	r2, [pc, #264]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80033d8:	fb82 1203 	smull	r1, r2, r2, r3
 80033dc:	1092      	asrs	r2, r2, #2
 80033de:	17db      	asrs	r3, r3, #31
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	4a3d      	ldr	r2, [pc, #244]	; (80034d8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80033e4:	6812      	ldr	r2, [r2, #0]
 80033e6:	fb02 f103 	mul.w	r1, r2, r3
 80033ea:	4b3e      	ldr	r3, [pc, #248]	; (80034e4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80033ec:	fb83 2301 	smull	r2, r3, r3, r1
 80033f0:	440b      	add	r3, r1
 80033f2:	11da      	asrs	r2, r3, #7
 80033f4:	17cb      	asrs	r3, r1, #31
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	0212      	lsls	r2, r2, #8
 80033fc:	1ad2      	subs	r2, r2, r3
 80033fe:	1a8b      	subs	r3, r1, r2
 8003400:	4a39      	ldr	r2, [pc, #228]	; (80034e8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8003402:	fb82 1203 	smull	r1, r2, r2, r3
 8003406:	10d2      	asrs	r2, r2, #3
 8003408:	17db      	asrs	r3, r3, #31
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	4a37      	ldr	r2, [pc, #220]	; (80034ec <HAL_TIM_PeriodElapsedCallback+0x294>)
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	e017      	b.n	8003442 <HAL_TIM_PeriodElapsedCallback+0x1ea>
		}
		else
		{
			flush_counter++;
 8003412:	4b37      	ldr	r3, [pc, #220]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	4a35      	ldr	r2, [pc, #212]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800341a:	6013      	str	r3, [r2, #0]
			if(flush_counter>=(1000/time_scale))//flush data in period
 800341c:	4b25      	ldr	r3, [pc, #148]	; (80034b4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003424:	fb92 f2f3 	sdiv	r2, r2, r3
 8003428:	4b31      	ldr	r3, [pc, #196]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	dc08      	bgt.n	8003442 <HAL_TIM_PeriodElapsedCallback+0x1ea>
			{
				mag_max=0;//reset_mag
 8003430:	4b28      	ldr	r3, [pc, #160]	; (80034d4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
				frequency=0;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
				flush_counter=0;
 800343c:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800343e:	2200      	movs	r2, #0
 8003440:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//save to fft buffer//
	if(fft_sample_counter>=16)
 8003442:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	dd18      	ble.n	800347c <HAL_TIM_PeriodElapsedCallback+0x224>
	{
		fft_sample_counter=0;
 800344a:	4b2a      	ldr	r3, [pc, #168]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
		if(fft_counter>=FFT_length)fft_counter=0;
 8003450:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b3f      	cmp	r3, #63	; 0x3f
 8003456:	dd02      	ble.n	800345e <HAL_TIM_PeriodElapsedCallback+0x206>
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
		input[fft_counter]=adc_val/4-512;
 800345e:	4b18      	ldr	r3, [pc, #96]	; (80034c0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	089a      	lsrs	r2, r3, #2
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f5a2 7200 	sub.w	r2, r2, #512	; 0x200
 800346c:	4923      	ldr	r1, [pc, #140]	; (80034fc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800346e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		fft_counter++;
 8003472:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	3301      	adds	r3, #1
 8003478:	4a1f      	ldr	r2, [pc, #124]	; (80034f8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800347a:	6013      	str	r3, [r2, #0]
	}

	fft_sample_counter++;
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	4a1c      	ldr	r2, [pc, #112]	; (80034f4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003484:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8003486:	bf00      	nop
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bdb0      	pop	{r4, r5, r7, pc}
 800348e:	bf00      	nop
 8003490:	eb1c432d 	.word	0xeb1c432d
 8003494:	3f1a36e2 	.word	0x3f1a36e2
 8003498:	66666666 	.word	0x66666666
 800349c:	400a6666 	.word	0x400a6666
 80034a0:	00000000 	.word	0x00000000
 80034a4:	406fe000 	.word	0x406fe000
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40000400 	.word	0x40000400
 80034b0:	20001438 	.word	0x20001438
 80034b4:	20000008 	.word	0x20000008
 80034b8:	2000143c 	.word	0x2000143c
 80034bc:	20000c1c 	.word	0x20000c1c
 80034c0:	20001048 	.word	0x20001048
 80034c4:	2000104c 	.word	0x2000104c
 80034c8:	20001444 	.word	0x20001444
 80034cc:	3ff00000 	.word	0x3ff00000
 80034d0:	20001448 	.word	0x20001448
 80034d4:	20001449 	.word	0x20001449
 80034d8:	20000010 	.word	0x20000010
 80034dc:	2000144c 	.word	0x2000144c
 80034e0:	66666667 	.word	0x66666667
 80034e4:	80808081 	.word	0x80808081
 80034e8:	4ec4ec4f 	.word	0x4ec4ec4f
 80034ec:	20001450 	.word	0x20001450
 80034f0:	20001454 	.word	0x20001454
 80034f4:	200015f8 	.word	0x200015f8
 80034f8:	200015e8 	.word	0x200015e8
 80034fc:	200015fc 	.word	0x200015fc

08003500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003504:	b672      	cpsid	i
}
 8003506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003508:	e7fe      	b.n	8003508 <Error_Handler+0x8>
	...

0800350c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_MspInit+0x54>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	4a11      	ldr	r2, [pc, #68]	; (8003560 <HAL_MspInit+0x54>)
 800351c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003520:	6453      	str	r3, [r2, #68]	; 0x44
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <HAL_MspInit+0x54>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_MspInit+0x54>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <HAL_MspInit+0x54>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353c:	6413      	str	r3, [r2, #64]	; 0x40
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <HAL_MspInit+0x54>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800354a:	2200      	movs	r2, #0
 800354c:	210f      	movs	r1, #15
 800354e:	f06f 0001 	mvn.w	r0, #1
 8003552:	f001 fa39 	bl	80049c8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800

08003564 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b08a      	sub	sp, #40	; 0x28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a2f      	ldr	r2, [pc, #188]	; (8003640 <HAL_ADC_MspInit+0xdc>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d157      	bne.n	8003636 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	4b2e      	ldr	r3, [pc, #184]	; (8003644 <HAL_ADC_MspInit+0xe0>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a2d      	ldr	r2, [pc, #180]	; (8003644 <HAL_ADC_MspInit+0xe0>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_ADC_MspInit+0xe0>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b27      	ldr	r3, [pc, #156]	; (8003644 <HAL_ADC_MspInit+0xe0>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a26      	ldr	r2, [pc, #152]	; (8003644 <HAL_ADC_MspInit+0xe0>)
 80035ac:	f043 0304 	orr.w	r3, r3, #4
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_ADC_MspInit+0xe0>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035be:	2310      	movs	r3, #16
 80035c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035c2:	2303      	movs	r3, #3
 80035c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ca:	f107 0314 	add.w	r3, r7, #20
 80035ce:	4619      	mov	r1, r3
 80035d0:	481d      	ldr	r0, [pc, #116]	; (8003648 <HAL_ADC_MspInit+0xe4>)
 80035d2:	f002 f80d 	bl	80055f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80035d6:	4b1d      	ldr	r3, [pc, #116]	; (800364c <HAL_ADC_MspInit+0xe8>)
 80035d8:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <HAL_ADC_MspInit+0xec>)
 80035da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_ADC_MspInit+0xe8>)
 80035de:	2200      	movs	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035e2:	4b1a      	ldr	r3, [pc, #104]	; (800364c <HAL_ADC_MspInit+0xe8>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e8:	4b18      	ldr	r3, [pc, #96]	; (800364c <HAL_ADC_MspInit+0xe8>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80035ee:	4b17      	ldr	r3, [pc, #92]	; (800364c <HAL_ADC_MspInit+0xe8>)
 80035f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_ADC_MspInit+0xe8>)
 80035f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <HAL_ADC_MspInit+0xe8>)
 8003600:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003604:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003606:	4b11      	ldr	r3, [pc, #68]	; (800364c <HAL_ADC_MspInit+0xe8>)
 8003608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800360c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <HAL_ADC_MspInit+0xe8>)
 8003610:	2200      	movs	r2, #0
 8003612:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003614:	4b0d      	ldr	r3, [pc, #52]	; (800364c <HAL_ADC_MspInit+0xe8>)
 8003616:	2200      	movs	r2, #0
 8003618:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800361a:	480c      	ldr	r0, [pc, #48]	; (800364c <HAL_ADC_MspInit+0xe8>)
 800361c:	f001 fbe6 	bl	8004dec <HAL_DMA_Init>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003626:	f7ff ff6b 	bl	8003500 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a07      	ldr	r2, [pc, #28]	; (800364c <HAL_ADC_MspInit+0xe8>)
 800362e:	639a      	str	r2, [r3, #56]	; 0x38
 8003630:	4a06      	ldr	r2, [pc, #24]	; (800364c <HAL_ADC_MspInit+0xe8>)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003636:	bf00      	nop
 8003638:	3728      	adds	r7, #40	; 0x28
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	40012000 	.word	0x40012000
 8003644:	40023800 	.word	0x40023800
 8003648:	40020800 	.word	0x40020800
 800364c:	20000c64 	.word	0x20000c64
 8003650:	40026410 	.word	0x40026410

08003654 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 0314 	add.w	r3, r7, #20
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2f      	ldr	r2, [pc, #188]	; (8003730 <HAL_DAC_MspInit+0xdc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d158      	bne.n	8003728 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	613b      	str	r3, [r7, #16]
 800367a:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <HAL_DAC_MspInit+0xe0>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <HAL_DAC_MspInit+0xe0>)
 8003680:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003684:	6413      	str	r3, [r2, #64]	; 0x40
 8003686:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_DAC_MspInit+0xe0>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_DAC_MspInit+0xe0>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a26      	ldr	r2, [pc, #152]	; (8003734 <HAL_DAC_MspInit+0xe0>)
 800369c:	f043 0301 	orr.w	r3, r3, #1
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_DAC_MspInit+0xe0>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036ae:	2310      	movs	r3, #16
 80036b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036b2:	2303      	movs	r3, #3
 80036b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ba:	f107 0314 	add.w	r3, r7, #20
 80036be:	4619      	mov	r1, r3
 80036c0:	481d      	ldr	r0, [pc, #116]	; (8003738 <HAL_DAC_MspInit+0xe4>)
 80036c2:	f001 ff95 	bl	80055f0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_DAC_MspInit+0xe8>)
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <HAL_DAC_MspInit+0xec>)
 80036ca:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <HAL_DAC_MspInit+0xe8>)
 80036ce:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80036d2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_DAC_MspInit+0xe8>)
 80036d6:	2240      	movs	r2, #64	; 0x40
 80036d8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <HAL_DAC_MspInit+0xe8>)
 80036dc:	2200      	movs	r2, #0
 80036de:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80036e0:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_DAC_MspInit+0xe8>)
 80036e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036e6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036e8:	4b14      	ldr	r3, [pc, #80]	; (800373c <HAL_DAC_MspInit+0xe8>)
 80036ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ee:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_DAC_MspInit+0xe8>)
 80036f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036f6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80036f8:	4b10      	ldr	r3, [pc, #64]	; (800373c <HAL_DAC_MspInit+0xe8>)
 80036fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036fe:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <HAL_DAC_MspInit+0xe8>)
 8003702:	2200      	movs	r2, #0
 8003704:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_DAC_MspInit+0xe8>)
 8003708:	2200      	movs	r2, #0
 800370a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800370c:	480b      	ldr	r0, [pc, #44]	; (800373c <HAL_DAC_MspInit+0xe8>)
 800370e:	f001 fb6d 	bl	8004dec <HAL_DMA_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8003718:	f7ff fef2 	bl	8003500 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <HAL_DAC_MspInit+0xe8>)
 8003720:	609a      	str	r2, [r3, #8]
 8003722:	4a06      	ldr	r2, [pc, #24]	; (800373c <HAL_DAC_MspInit+0xe8>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003728:	bf00      	nop
 800372a:	3728      	adds	r7, #40	; 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40007400 	.word	0x40007400
 8003734:	40023800 	.word	0x40023800
 8003738:	40020000 	.word	0x40020000
 800373c:	20000cd8 	.word	0x20000cd8
 8003740:	40026088 	.word	0x40026088

08003744 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a21      	ldr	r2, [pc, #132]	; (80037e8 <HAL_SPI_MspInit+0xa4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d13c      	bne.n	80037e0 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_SPI_MspInit+0xa8>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_SPI_MspInit+0xa8>)
 8003770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <HAL_SPI_MspInit+0xa8>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <HAL_SPI_MspInit+0xa8>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a18      	ldr	r2, [pc, #96]	; (80037ec <HAL_SPI_MspInit+0xa8>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b16      	ldr	r3, [pc, #88]	; (80037ec <HAL_SPI_MspInit+0xa8>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0304 	and.w	r3, r3, #4
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC1     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800379e:	2302      	movs	r3, #2
 80037a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037aa:	2303      	movs	r3, #3
 80037ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 80037ae:	2305      	movs	r3, #5
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	4619      	mov	r1, r3
 80037b8:	480d      	ldr	r0, [pc, #52]	; (80037f0 <HAL_SPI_MspInit+0xac>)
 80037ba:	f001 ff19 	bl	80055f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	2302      	movs	r3, #2
 80037c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037cc:	2303      	movs	r3, #3
 80037ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037d0:	2306      	movs	r3, #6
 80037d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037d4:	f107 0314 	add.w	r3, r7, #20
 80037d8:	4619      	mov	r1, r3
 80037da:	4805      	ldr	r0, [pc, #20]	; (80037f0 <HAL_SPI_MspInit+0xac>)
 80037dc:	f001 ff08 	bl	80055f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80037e0:	bf00      	nop
 80037e2:	3728      	adds	r7, #40	; 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40003c00 	.word	0x40003c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40020800 	.word	0x40020800

080037f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003804:	d116      	bne.n	8003834 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_TIM_Base_MspInit+0x80>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_TIM_Base_MspInit+0x80>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	6413      	str	r3, [r2, #64]	; 0x40
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <HAL_TIM_Base_MspInit+0x80>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	2105      	movs	r1, #5
 8003826:	201c      	movs	r0, #28
 8003828:	f001 f8ce 	bl	80049c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800382c:	201c      	movs	r0, #28
 800382e:	f001 f8e7 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003832:	e01a      	b.n	800386a <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a0f      	ldr	r2, [pc, #60]	; (8003878 <HAL_TIM_Base_MspInit+0x84>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d115      	bne.n	800386a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_TIM_Base_MspInit+0x80>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	4a0b      	ldr	r2, [pc, #44]	; (8003874 <HAL_TIM_Base_MspInit+0x80>)
 8003848:	f043 0302 	orr.w	r3, r3, #2
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_TIM_Base_MspInit+0x80>)
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	60bb      	str	r3, [r7, #8]
 8003858:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800385a:	2200      	movs	r2, #0
 800385c:	2105      	movs	r1, #5
 800385e:	201d      	movs	r0, #29
 8003860:	f001 f8b2 	bl	80049c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003864:	201d      	movs	r0, #29
 8003866:	f001 f8cb 	bl	8004a00 <HAL_NVIC_EnableIRQ>
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40023800 	.word	0x40023800
 8003878:	40000400 	.word	0x40000400

0800387c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08c      	sub	sp, #48	; 0x30
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003884:	f107 031c 	add.w	r3, r7, #28
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	60da      	str	r2, [r3, #12]
 8003892:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a7f      	ldr	r2, [pc, #508]	; (8003a98 <HAL_UART_MspInit+0x21c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	f040 8091 	bne.w	80039c2 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	4b7d      	ldr	r3, [pc, #500]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	4a7c      	ldr	r2, [pc, #496]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80038aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038ae:	6413      	str	r3, [r2, #64]	; 0x40
 80038b0:	4b7a      	ldr	r3, [pc, #488]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b8:	61bb      	str	r3, [r7, #24]
 80038ba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	4b76      	ldr	r3, [pc, #472]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	4a75      	ldr	r2, [pc, #468]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80038c6:	f043 0301 	orr.w	r3, r3, #1
 80038ca:	6313      	str	r3, [r2, #48]	; 0x30
 80038cc:	4b73      	ldr	r3, [pc, #460]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80038d8:	2303      	movs	r3, #3
 80038da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038dc:	2302      	movs	r3, #2
 80038de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038e4:	2303      	movs	r3, #3
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80038e8:	2308      	movs	r3, #8
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ec:	f107 031c 	add.w	r3, r7, #28
 80038f0:	4619      	mov	r1, r3
 80038f2:	486b      	ldr	r0, [pc, #428]	; (8003aa0 <HAL_UART_MspInit+0x224>)
 80038f4:	f001 fe7c 	bl	80055f0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 80038fa:	4a6b      	ldr	r2, [pc, #428]	; (8003aa8 <HAL_UART_MspInit+0x22c>)
 80038fc:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80038fe:	4b69      	ldr	r3, [pc, #420]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 8003900:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003904:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003906:	4b67      	ldr	r3, [pc, #412]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 8003908:	2240      	movs	r2, #64	; 0x40
 800390a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800390c:	4b65      	ldr	r3, [pc, #404]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 800390e:	2200      	movs	r2, #0
 8003910:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003912:	4b64      	ldr	r3, [pc, #400]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 8003914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003918:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800391a:	4b62      	ldr	r3, [pc, #392]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 800391c:	2200      	movs	r2, #0
 800391e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003920:	4b60      	ldr	r3, [pc, #384]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 8003922:	2200      	movs	r2, #0
 8003924:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003926:	4b5f      	ldr	r3, [pc, #380]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 8003928:	2200      	movs	r2, #0
 800392a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800392c:	4b5d      	ldr	r3, [pc, #372]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 800392e:	2200      	movs	r2, #0
 8003930:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003932:	4b5c      	ldr	r3, [pc, #368]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 8003934:	2200      	movs	r2, #0
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8003938:	485a      	ldr	r0, [pc, #360]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 800393a:	f001 fa57 	bl	8004dec <HAL_DMA_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003944:	f7ff fddc 	bl	8003500 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a56      	ldr	r2, [pc, #344]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 800394c:	635a      	str	r2, [r3, #52]	; 0x34
 800394e:	4a55      	ldr	r2, [pc, #340]	; (8003aa4 <HAL_UART_MspInit+0x228>)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003954:	4b55      	ldr	r3, [pc, #340]	; (8003aac <HAL_UART_MspInit+0x230>)
 8003956:	4a56      	ldr	r2, [pc, #344]	; (8003ab0 <HAL_UART_MspInit+0x234>)
 8003958:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800395a:	4b54      	ldr	r3, [pc, #336]	; (8003aac <HAL_UART_MspInit+0x230>)
 800395c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003960:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003962:	4b52      	ldr	r3, [pc, #328]	; (8003aac <HAL_UART_MspInit+0x230>)
 8003964:	2200      	movs	r2, #0
 8003966:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003968:	4b50      	ldr	r3, [pc, #320]	; (8003aac <HAL_UART_MspInit+0x230>)
 800396a:	2200      	movs	r2, #0
 800396c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800396e:	4b4f      	ldr	r3, [pc, #316]	; (8003aac <HAL_UART_MspInit+0x230>)
 8003970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003974:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003976:	4b4d      	ldr	r3, [pc, #308]	; (8003aac <HAL_UART_MspInit+0x230>)
 8003978:	2200      	movs	r2, #0
 800397a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800397c:	4b4b      	ldr	r3, [pc, #300]	; (8003aac <HAL_UART_MspInit+0x230>)
 800397e:	2200      	movs	r2, #0
 8003980:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8003982:	4b4a      	ldr	r3, [pc, #296]	; (8003aac <HAL_UART_MspInit+0x230>)
 8003984:	2200      	movs	r2, #0
 8003986:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003988:	4b48      	ldr	r3, [pc, #288]	; (8003aac <HAL_UART_MspInit+0x230>)
 800398a:	2200      	movs	r2, #0
 800398c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800398e:	4b47      	ldr	r3, [pc, #284]	; (8003aac <HAL_UART_MspInit+0x230>)
 8003990:	2200      	movs	r2, #0
 8003992:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003994:	4845      	ldr	r0, [pc, #276]	; (8003aac <HAL_UART_MspInit+0x230>)
 8003996:	f001 fa29 	bl	8004dec <HAL_DMA_Init>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80039a0:	f7ff fdae 	bl	8003500 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a41      	ldr	r2, [pc, #260]	; (8003aac <HAL_UART_MspInit+0x230>)
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
 80039aa:	4a40      	ldr	r2, [pc, #256]	; (8003aac <HAL_UART_MspInit+0x230>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2105      	movs	r1, #5
 80039b4:	2034      	movs	r0, #52	; 0x34
 80039b6:	f001 f807 	bl	80049c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80039ba:	2034      	movs	r0, #52	; 0x34
 80039bc:	f001 f820 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80039c0:	e066      	b.n	8003a90 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a3b      	ldr	r2, [pc, #236]	; (8003ab4 <HAL_UART_MspInit+0x238>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d161      	bne.n	8003a90 <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039cc:	2300      	movs	r3, #0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	4b32      	ldr	r3, [pc, #200]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	4a31      	ldr	r2, [pc, #196]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80039d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039da:	6413      	str	r3, [r2, #64]	; 0x40
 80039dc:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	4b2b      	ldr	r3, [pc, #172]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6313      	str	r3, [r2, #48]	; 0x30
 80039f8:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <HAL_UART_MspInit+0x220>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003a04:	230c      	movs	r3, #12
 8003a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a10:	2303      	movs	r3, #3
 8003a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a14:	2307      	movs	r3, #7
 8003a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a18:	f107 031c 	add.w	r3, r7, #28
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4820      	ldr	r0, [pc, #128]	; (8003aa0 <HAL_UART_MspInit+0x224>)
 8003a20:	f001 fde6 	bl	80055f0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003a24:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a26:	4a25      	ldr	r2, [pc, #148]	; (8003abc <HAL_UART_MspInit+0x240>)
 8003a28:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003a2a:	4b23      	ldr	r3, [pc, #140]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a30:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a32:	4b21      	ldr	r3, [pc, #132]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a34:	2240      	movs	r2, #64	; 0x40
 8003a36:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a38:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a46:	4b1c      	ldr	r3, [pc, #112]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a4c:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a52:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a58:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a64:	4814      	ldr	r0, [pc, #80]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a66:	f001 f9c1 	bl	8004dec <HAL_DMA_Init>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8003a70:	f7ff fd46 	bl	8003500 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a78:	635a      	str	r2, [r3, #52]	; 0x34
 8003a7a:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <HAL_UART_MspInit+0x23c>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2105      	movs	r1, #5
 8003a84:	2026      	movs	r0, #38	; 0x26
 8003a86:	f000 ff9f 	bl	80049c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a8a:	2026      	movs	r0, #38	; 0x26
 8003a8c:	f000 ffb8 	bl	8004a00 <HAL_NVIC_EnableIRQ>
}
 8003a90:	bf00      	nop
 8003a92:	3730      	adds	r7, #48	; 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40004c00 	.word	0x40004c00
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	20000ea8 	.word	0x20000ea8
 8003aa8:	40026070 	.word	0x40026070
 8003aac:	20000f08 	.word	0x20000f08
 8003ab0:	40026040 	.word	0x40026040
 8003ab4:	40004400 	.word	0x40004400
 8003ab8:	20000f68 	.word	0x20000f68
 8003abc:	400260a0 	.word	0x400260a0

08003ac0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	2019      	movs	r0, #25
 8003ad6:	f000 ff77 	bl	80049c8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ada:	2019      	movs	r0, #25
 8003adc:	f000 ff90 	bl	8004a00 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <HAL_InitTick+0xa4>)
 8003ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae8:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_InitTick+0xa4>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6453      	str	r3, [r2, #68]	; 0x44
 8003af0:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <HAL_InitTick+0xa4>)
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003afc:	f107 0210 	add.w	r2, r7, #16
 8003b00:	f107 0314 	add.w	r3, r7, #20
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 f83a 	bl	8005b80 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003b0c:	f002 f824 	bl	8005b58 <HAL_RCC_GetPCLK2Freq>
 8003b10:	4603      	mov	r3, r0
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	4a13      	ldr	r2, [pc, #76]	; (8003b68 <HAL_InitTick+0xa8>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	0c9b      	lsrs	r3, r3, #18
 8003b20:	3b01      	subs	r3, #1
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_InitTick+0xac>)
 8003b26:	4a12      	ldr	r2, [pc, #72]	; (8003b70 <HAL_InitTick+0xb0>)
 8003b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <HAL_InitTick+0xac>)
 8003b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003b32:	4a0e      	ldr	r2, [pc, #56]	; (8003b6c <HAL_InitTick+0xac>)
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_InitTick+0xac>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_InitTick+0xac>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003b44:	4809      	ldr	r0, [pc, #36]	; (8003b6c <HAL_InitTick+0xac>)
 8003b46:	f003 f95b 	bl	8006e00 <HAL_TIM_Base_Init>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003b50:	4806      	ldr	r0, [pc, #24]	; (8003b6c <HAL_InitTick+0xac>)
 8003b52:	f003 fa0d 	bl	8006f70 <HAL_TIM_Base_Start_IT>
 8003b56:	4603      	mov	r3, r0
 8003b58:	e000      	b.n	8003b5c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3730      	adds	r7, #48	; 0x30
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	431bde83 	.word	0x431bde83
 8003b6c:	20001b38 	.word	0x20001b38
 8003b70:	40010000 	.word	0x40010000

08003b74 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003b78:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <SDTimer_Handler+0x40>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <SDTimer_Handler+0x1c>
    Timer1--;
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <SDTimer_Handler+0x40>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <SDTimer_Handler+0x40>)
 8003b8e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003b90:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <SDTimer_Handler+0x44>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d006      	beq.n	8003ba8 <SDTimer_Handler+0x34>
    Timer2--;
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <SDTimer_Handler+0x44>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <SDTimer_Handler+0x44>)
 8003ba6:	701a      	strb	r2, [r3, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20001b81 	.word	0x20001b81
 8003bb8:	20001b82 	.word	0x20001b82

08003bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003bc0:	e7fe      	b.n	8003bc0 <NMI_Handler+0x4>

08003bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bc6:	e7fe      	b.n	8003bc6 <HardFault_Handler+0x4>

08003bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bcc:	e7fe      	b.n	8003bcc <MemManage_Handler+0x4>

08003bce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bd2:	e7fe      	b.n	8003bd2 <BusFault_Handler+0x4>

08003bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bd8:	e7fe      	b.n	8003bd8 <UsageFault_Handler+0x4>

08003bda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <DMA1_Stream2_IRQHandler+0x10>)
 8003bee:	f001 fa95 	bl	800511c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000f08 	.word	0x20000f08

08003bfc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <DMA1_Stream4_IRQHandler+0x10>)
 8003c02:	f001 fa8b 	bl	800511c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	20000ea8 	.word	0x20000ea8

08003c10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <DMA1_Stream5_IRQHandler+0x10>)
 8003c16:	f001 fa81 	bl	800511c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000cd8 	.word	0x20000cd8

08003c24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <DMA1_Stream6_IRQHandler+0x10>)
 8003c2a:	f001 fa77 	bl	800511c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000f68 	.word	0x20000f68

08003c38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	FatFsCnt++;
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3301      	adds	r3, #1
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8003c48:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b09      	cmp	r3, #9
 8003c52:	d904      	bls.n	8003c5e <TIM1_UP_TIM10_IRQHandler+0x26>
	{
	  FatFsCnt = 0;
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <TIM1_UP_TIM10_IRQHandler+0x30>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8003c5a:	f7ff ff8b 	bl	8003b74 <SDTimer_Handler>
	}
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c5e:	4803      	ldr	r0, [pc, #12]	; (8003c6c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8003c60:	f003 f9f6 	bl	8007050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003c64:	bf00      	nop
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	20001b80 	.word	0x20001b80
 8003c6c:	20001b38 	.word	0x20001b38

08003c70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c74:	4802      	ldr	r0, [pc, #8]	; (8003c80 <TIM2_IRQHandler+0x10>)
 8003c76:	f003 f9eb 	bl	8007050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000d90 	.word	0x20000d90

08003c84 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c88:	4802      	ldr	r0, [pc, #8]	; (8003c94 <TIM3_IRQHandler+0x10>)
 8003c8a:	f003 f9e1 	bl	8007050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000dd8 	.word	0x20000dd8

08003c98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <USART2_IRQHandler+0x10>)
 8003c9e:	f003 ff27 	bl	8007af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000e64 	.word	0x20000e64

08003cac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003cb0:	4802      	ldr	r0, [pc, #8]	; (8003cbc <UART4_IRQHandler+0x10>)
 8003cb2:	f003 ff1d 	bl	8007af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000e20 	.word	0x20000e20

08003cc0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <DMA2_Stream0_IRQHandler+0x10>)
 8003cc6:	f001 fa29 	bl	800511c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000c64 	.word	0x20000c64

08003cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cdc:	4a14      	ldr	r2, [pc, #80]	; (8003d30 <_sbrk+0x5c>)
 8003cde:	4b15      	ldr	r3, [pc, #84]	; (8003d34 <_sbrk+0x60>)
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <_sbrk+0x64>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cf0:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <_sbrk+0x64>)
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <_sbrk+0x68>)
 8003cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cf6:	4b10      	ldr	r3, [pc, #64]	; (8003d38 <_sbrk+0x64>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d207      	bcs.n	8003d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d04:	f00a ff72 	bl	800ebec <__errno>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	220c      	movs	r2, #12
 8003d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	e009      	b.n	8003d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d14:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <_sbrk+0x64>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <_sbrk+0x64>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	4a05      	ldr	r2, [pc, #20]	; (8003d38 <_sbrk+0x64>)
 8003d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20020000 	.word	0x20020000
 8003d34:	00000400 	.word	0x00000400
 8003d38:	20001b84 	.word	0x20001b84
 8003d3c:	20005a68 	.word	0x20005a68

08003d40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d44:	4b06      	ldr	r3, [pc, #24]	; (8003d60 <SystemInit+0x20>)
 8003d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4a:	4a05      	ldr	r2, [pc, #20]	; (8003d60 <SystemInit+0x20>)
 8003d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <Reset_Handler>:
 8003d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d9c <LoopFillZerobss+0x12>
 8003d68:	480d      	ldr	r0, [pc, #52]	; (8003da0 <LoopFillZerobss+0x16>)
 8003d6a:	490e      	ldr	r1, [pc, #56]	; (8003da4 <LoopFillZerobss+0x1a>)
 8003d6c:	4a0e      	ldr	r2, [pc, #56]	; (8003da8 <LoopFillZerobss+0x1e>)
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e002      	b.n	8003d78 <LoopCopyDataInit>

08003d72 <CopyDataInit>:
 8003d72:	58d4      	ldr	r4, [r2, r3]
 8003d74:	50c4      	str	r4, [r0, r3]
 8003d76:	3304      	adds	r3, #4

08003d78 <LoopCopyDataInit>:
 8003d78:	18c4      	adds	r4, r0, r3
 8003d7a:	428c      	cmp	r4, r1
 8003d7c:	d3f9      	bcc.n	8003d72 <CopyDataInit>
 8003d7e:	4a0b      	ldr	r2, [pc, #44]	; (8003dac <LoopFillZerobss+0x22>)
 8003d80:	4c0b      	ldr	r4, [pc, #44]	; (8003db0 <LoopFillZerobss+0x26>)
 8003d82:	2300      	movs	r3, #0
 8003d84:	e001      	b.n	8003d8a <LoopFillZerobss>

08003d86 <FillZerobss>:
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	3204      	adds	r2, #4

08003d8a <LoopFillZerobss>:
 8003d8a:	42a2      	cmp	r2, r4
 8003d8c:	d3fb      	bcc.n	8003d86 <FillZerobss>
 8003d8e:	f7ff ffd7 	bl	8003d40 <SystemInit>
 8003d92:	f00a ff31 	bl	800ebf8 <__libc_init_array>
 8003d96:	f7fe fca1 	bl	80026dc <main>
 8003d9a:	4770      	bx	lr
 8003d9c:	20020000 	.word	0x20020000
 8003da0:	20000000 	.word	0x20000000
 8003da4:	200000a4 	.word	0x200000a4
 8003da8:	08011368 	.word	0x08011368
 8003dac:	200000a4 	.word	0x200000a4
 8003db0:	20005a68 	.word	0x20005a68

08003db4 <ADC_IRQHandler>:
 8003db4:	e7fe      	b.n	8003db4 <ADC_IRQHandler>
	...

08003db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <HAL_Init+0x40>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a0d      	ldr	r2, [pc, #52]	; (8003df8 <HAL_Init+0x40>)
 8003dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <HAL_Init+0x40>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a0a      	ldr	r2, [pc, #40]	; (8003df8 <HAL_Init+0x40>)
 8003dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <HAL_Init+0x40>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <HAL_Init+0x40>)
 8003dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003de0:	2003      	movs	r0, #3
 8003de2:	f000 fde6 	bl	80049b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003de6:	200f      	movs	r0, #15
 8003de8:	f7ff fe6a 	bl	8003ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dec:	f7ff fb8e 	bl	800350c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40023c00 	.word	0x40023c00

08003dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e00:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_IncTick+0x20>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_IncTick+0x24>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4a04      	ldr	r2, [pc, #16]	; (8003e20 <HAL_IncTick+0x24>)
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20000024 	.word	0x20000024
 8003e20:	20001b88 	.word	0x20001b88

08003e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return uwTick;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_GetTick+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20001b88 	.word	0x20001b88

08003e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e44:	f7ff ffee 	bl	8003e24 <HAL_GetTick>
 8003e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e54:	d005      	beq.n	8003e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e56:	4b0a      	ldr	r3, [pc, #40]	; (8003e80 <HAL_Delay+0x44>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e62:	bf00      	nop
 8003e64:	f7ff ffde 	bl	8003e24 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d8f7      	bhi.n	8003e64 <HAL_Delay+0x28>
  {
  }
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20000024 	.word	0x20000024

08003e84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e033      	b.n	8003f02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d109      	bne.n	8003eb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff fb5e 	bl	8003564 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 0310 	and.w	r3, r3, #16
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d118      	bne.n	8003ef4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003eca:	f023 0302 	bic.w	r3, r3, #2
 8003ece:	f043 0202 	orr.w	r2, r3, #2
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fb40 	bl	800455c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f023 0303 	bic.w	r3, r3, #3
 8003eea:	f043 0201 	orr.w	r2, r3, #1
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ef2:	e001      	b.n	8003ef8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_ADC_Start+0x1a>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e0b2      	b.n	800408c <HAL_ADC_Start+0x180>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d018      	beq.n	8003f6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f4c:	4b52      	ldr	r3, [pc, #328]	; (8004098 <HAL_ADC_Start+0x18c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a52      	ldr	r2, [pc, #328]	; (800409c <HAL_ADC_Start+0x190>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	0c9a      	lsrs	r2, r3, #18
 8003f58:	4613      	mov	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f60:	e002      	b.n	8003f68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f9      	bne.n	8003f62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d17a      	bne.n	8004072 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fa6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fba:	d106      	bne.n	8003fca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc0:	f023 0206 	bic.w	r2, r3, #6
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	645a      	str	r2, [r3, #68]	; 0x44
 8003fc8:	e002      	b.n	8003fd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fd8:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <HAL_ADC_Start+0x194>)
 8003fda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003fe4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d12a      	bne.n	8004048 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a2b      	ldr	r2, [pc, #172]	; (80040a4 <HAL_ADC_Start+0x198>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d015      	beq.n	8004028 <HAL_ADC_Start+0x11c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a29      	ldr	r2, [pc, #164]	; (80040a8 <HAL_ADC_Start+0x19c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d105      	bne.n	8004012 <HAL_ADC_Start+0x106>
 8004006:	4b26      	ldr	r3, [pc, #152]	; (80040a0 <HAL_ADC_Start+0x194>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 031f 	and.w	r3, r3, #31
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00a      	beq.n	8004028 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a25      	ldr	r2, [pc, #148]	; (80040ac <HAL_ADC_Start+0x1a0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d136      	bne.n	800408a <HAL_ADC_Start+0x17e>
 800401c:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_ADC_Start+0x194>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d130      	bne.n	800408a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d129      	bne.n	800408a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004044:	609a      	str	r2, [r3, #8]
 8004046:	e020      	b.n	800408a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <HAL_ADC_Start+0x198>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d11b      	bne.n	800408a <HAL_ADC_Start+0x17e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d114      	bne.n	800408a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	e00b      	b.n	800408a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f043 0210 	orr.w	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	2000001c 	.word	0x2000001c
 800409c:	431bde83 	.word	0x431bde83
 80040a0:	40012300 	.word	0x40012300
 80040a4:	40012000 	.word	0x40012000
 80040a8:	40012100 	.word	0x40012100
 80040ac:	40012200 	.word	0x40012200

080040b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_ADC_Start_DMA+0x1e>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e0e9      	b.n	80042a2 <HAL_ADC_Start_DMA+0x1f2>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d018      	beq.n	8004116 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040f4:	4b6d      	ldr	r3, [pc, #436]	; (80042ac <HAL_ADC_Start_DMA+0x1fc>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6d      	ldr	r2, [pc, #436]	; (80042b0 <HAL_ADC_Start_DMA+0x200>)
 80040fa:	fba2 2303 	umull	r2, r3, r2, r3
 80040fe:	0c9a      	lsrs	r2, r3, #18
 8004100:	4613      	mov	r3, r2
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	4413      	add	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004108:	e002      	b.n	8004110 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3b01      	subs	r3, #1
 800410e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f9      	bne.n	800410a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004124:	d107      	bne.n	8004136 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004134:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	f040 80a1 	bne.w	8004288 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004170:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004184:	d106      	bne.n	8004194 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f023 0206 	bic.w	r2, r3, #6
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
 8004192:	e002      	b.n	800419a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041a2:	4b44      	ldr	r3, [pc, #272]	; (80042b4 <HAL_ADC_Start_DMA+0x204>)
 80041a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	4a43      	ldr	r2, [pc, #268]	; (80042b8 <HAL_ADC_Start_DMA+0x208>)
 80041ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	4a42      	ldr	r2, [pc, #264]	; (80042bc <HAL_ADC_Start_DMA+0x20c>)
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	4a41      	ldr	r2, [pc, #260]	; (80042c0 <HAL_ADC_Start_DMA+0x210>)
 80041bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80041c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	334c      	adds	r3, #76	; 0x4c
 80041f2:	4619      	mov	r1, r3
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f000 fea6 	bl	8004f48 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	2b00      	cmp	r3, #0
 8004206:	d12a      	bne.n	800425e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_ADC_Start_DMA+0x214>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d015      	beq.n	800423e <HAL_ADC_Start_DMA+0x18e>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a2c      	ldr	r2, [pc, #176]	; (80042c8 <HAL_ADC_Start_DMA+0x218>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d105      	bne.n	8004228 <HAL_ADC_Start_DMA+0x178>
 800421c:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_ADC_Start_DMA+0x204>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a27      	ldr	r2, [pc, #156]	; (80042cc <HAL_ADC_Start_DMA+0x21c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d136      	bne.n	80042a0 <HAL_ADC_Start_DMA+0x1f0>
 8004232:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_ADC_Start_DMA+0x204>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b00      	cmp	r3, #0
 800423c:	d130      	bne.n	80042a0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d129      	bne.n	80042a0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	e020      	b.n	80042a0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_ADC_Start_DMA+0x214>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d11b      	bne.n	80042a0 <HAL_ADC_Start_DMA+0x1f0>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d114      	bne.n	80042a0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004284:	609a      	str	r2, [r3, #8]
 8004286:	e00b      	b.n	80042a0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	f043 0210 	orr.w	r2, r3, #16
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	f043 0201 	orr.w	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	2000001c 	.word	0x2000001c
 80042b0:	431bde83 	.word	0x431bde83
 80042b4:	40012300 	.word	0x40012300
 80042b8:	08004755 	.word	0x08004755
 80042bc:	0800480f 	.word	0x0800480f
 80042c0:	0800482b 	.word	0x0800482b
 80042c4:	40012000 	.word	0x40012000
 80042c8:	40012100 	.word	0x40012100
 80042cc:	40012200 	.word	0x40012200

080042d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x1c>
 8004310:	2302      	movs	r3, #2
 8004312:	e113      	b.n	800453c <HAL_ADC_ConfigChannel+0x244>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2b09      	cmp	r3, #9
 8004322:	d925      	bls.n	8004370 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68d9      	ldr	r1, [r3, #12]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	b29b      	uxth	r3, r3
 8004330:	461a      	mov	r2, r3
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	3b1e      	subs	r3, #30
 800433a:	2207      	movs	r2, #7
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43da      	mvns	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	400a      	ands	r2, r1
 8004348:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68d9      	ldr	r1, [r3, #12]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	4618      	mov	r0, r3
 800435c:	4603      	mov	r3, r0
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	4403      	add	r3, r0
 8004362:	3b1e      	subs	r3, #30
 8004364:	409a      	lsls	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	60da      	str	r2, [r3, #12]
 800436e:	e022      	b.n	80043b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6919      	ldr	r1, [r3, #16]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	461a      	mov	r2, r3
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	2207      	movs	r2, #7
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43da      	mvns	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	400a      	ands	r2, r1
 8004392:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6919      	ldr	r1, [r3, #16]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	4618      	mov	r0, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4403      	add	r3, r0
 80043ac:	409a      	lsls	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d824      	bhi.n	8004408 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	3b05      	subs	r3, #5
 80043d0:	221f      	movs	r2, #31
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43da      	mvns	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	400a      	ands	r2, r1
 80043de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	4618      	mov	r0, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	3b05      	subs	r3, #5
 80043fa:	fa00 f203 	lsl.w	r2, r0, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	635a      	str	r2, [r3, #52]	; 0x34
 8004406:	e04c      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d824      	bhi.n	800445a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	3b23      	subs	r3, #35	; 0x23
 8004422:	221f      	movs	r2, #31
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43da      	mvns	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	400a      	ands	r2, r1
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	4618      	mov	r0, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	3b23      	subs	r3, #35	; 0x23
 800444c:	fa00 f203 	lsl.w	r2, r0, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
 8004458:	e023      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	4413      	add	r3, r2
 800446a:	3b41      	subs	r3, #65	; 0x41
 800446c:	221f      	movs	r2, #31
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	43da      	mvns	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	400a      	ands	r2, r1
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	b29b      	uxth	r3, r3
 8004488:	4618      	mov	r0, r3
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	3b41      	subs	r3, #65	; 0x41
 8004496:	fa00 f203 	lsl.w	r2, r0, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044a2:	4b29      	ldr	r3, [pc, #164]	; (8004548 <HAL_ADC_ConfigChannel+0x250>)
 80044a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a28      	ldr	r2, [pc, #160]	; (800454c <HAL_ADC_ConfigChannel+0x254>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d10f      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1d8>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b12      	cmp	r3, #18
 80044b6:	d10b      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_ADC_ConfigChannel+0x254>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d12b      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x23a>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a1c      	ldr	r2, [pc, #112]	; (8004550 <HAL_ADC_ConfigChannel+0x258>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d003      	beq.n	80044ec <HAL_ADC_ConfigChannel+0x1f4>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b11      	cmp	r3, #17
 80044ea:	d122      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a11      	ldr	r2, [pc, #68]	; (8004550 <HAL_ADC_ConfigChannel+0x258>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d111      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800450e:	4b11      	ldr	r3, [pc, #68]	; (8004554 <HAL_ADC_ConfigChannel+0x25c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <HAL_ADC_ConfigChannel+0x260>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	0c9a      	lsrs	r2, r3, #18
 800451a:	4613      	mov	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004524:	e002      	b.n	800452c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	3b01      	subs	r3, #1
 800452a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f9      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40012300 	.word	0x40012300
 800454c:	40012000 	.word	0x40012000
 8004550:	10000012 	.word	0x10000012
 8004554:	2000001c 	.word	0x2000001c
 8004558:	431bde83 	.word	0x431bde83

0800455c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004564:	4b79      	ldr	r3, [pc, #484]	; (800474c <ADC_Init+0x1f0>)
 8004566:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	431a      	orrs	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	021a      	lsls	r2, r3, #8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80045b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6899      	ldr	r1, [r3, #8]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	4a58      	ldr	r2, [pc, #352]	; (8004750 <ADC_Init+0x1f4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d022      	beq.n	800463a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004602:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6899      	ldr	r1, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6899      	ldr	r1, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
 8004638:	e00f      	b.n	800465a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004648:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004658:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0202 	bic.w	r2, r2, #2
 8004668:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6899      	ldr	r1, [r3, #8]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	7e1b      	ldrb	r3, [r3, #24]
 8004674:	005a      	lsls	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d01b      	beq.n	80046c0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004696:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80046a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6859      	ldr	r1, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	3b01      	subs	r3, #1
 80046b4:	035a      	lsls	r2, r3, #13
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	e007      	b.n	80046d0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	051a      	lsls	r2, r3, #20
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6899      	ldr	r1, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004712:	025a      	lsls	r2, r3, #9
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800472a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6899      	ldr	r1, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	029a      	lsls	r2, r3, #10
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40012300 	.word	0x40012300
 8004750:	0f000001 	.word	0x0f000001

08004754 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004760:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800476a:	2b00      	cmp	r3, #0
 800476c:	d13c      	bne.n	80047e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d12b      	bne.n	80047e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800478c:	2b00      	cmp	r3, #0
 800478e:	d127      	bne.n	80047e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d119      	bne.n	80047e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0220 	bic.w	r2, r2, #32
 80047ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d105      	bne.n	80047e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	f043 0201 	orr.w	r2, r3, #1
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f7fe fd23 	bl	800322c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047e6:	e00e      	b.n	8004806 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff fd75 	bl	80042e4 <HAL_ADC_ErrorCallback>
}
 80047fa:	e004      	b.n	8004806 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	4798      	blx	r3
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f7ff fd57 	bl	80042d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004822:	bf00      	nop
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b084      	sub	sp, #16
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004836:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2240      	movs	r2, #64	; 0x40
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f043 0204 	orr.w	r2, r3, #4
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff fd4a 	bl	80042e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <__NVIC_SetPriorityGrouping+0x44>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004874:	4013      	ands	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800488a:	4a04      	ldr	r2, [pc, #16]	; (800489c <__NVIC_SetPriorityGrouping+0x44>)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	60d3      	str	r3, [r2, #12]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <__NVIC_GetPriorityGrouping+0x18>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	f003 0307 	and.w	r3, r3, #7
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	e000ed00 	.word	0xe000ed00

080048bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	4603      	mov	r3, r0
 80048c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	db0b      	blt.n	80048e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	f003 021f 	and.w	r2, r3, #31
 80048d4:	4907      	ldr	r1, [pc, #28]	; (80048f4 <__NVIC_EnableIRQ+0x38>)
 80048d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048da:	095b      	lsrs	r3, r3, #5
 80048dc:	2001      	movs	r0, #1
 80048de:	fa00 f202 	lsl.w	r2, r0, r2
 80048e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	e000e100 	.word	0xe000e100

080048f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	6039      	str	r1, [r7, #0]
 8004902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004908:	2b00      	cmp	r3, #0
 800490a:	db0a      	blt.n	8004922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	490c      	ldr	r1, [pc, #48]	; (8004944 <__NVIC_SetPriority+0x4c>)
 8004912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	b2d2      	uxtb	r2, r2
 800491a:	440b      	add	r3, r1
 800491c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004920:	e00a      	b.n	8004938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4908      	ldr	r1, [pc, #32]	; (8004948 <__NVIC_SetPriority+0x50>)
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	3b04      	subs	r3, #4
 8004930:	0112      	lsls	r2, r2, #4
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	440b      	add	r3, r1
 8004936:	761a      	strb	r2, [r3, #24]
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	e000e100 	.word	0xe000e100
 8004948:	e000ed00 	.word	0xe000ed00

0800494c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800494c:	b480      	push	{r7}
 800494e:	b089      	sub	sp, #36	; 0x24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f1c3 0307 	rsb	r3, r3, #7
 8004966:	2b04      	cmp	r3, #4
 8004968:	bf28      	it	cs
 800496a:	2304      	movcs	r3, #4
 800496c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	3304      	adds	r3, #4
 8004972:	2b06      	cmp	r3, #6
 8004974:	d902      	bls.n	800497c <NVIC_EncodePriority+0x30>
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	3b03      	subs	r3, #3
 800497a:	e000      	b.n	800497e <NVIC_EncodePriority+0x32>
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004980:	f04f 32ff 	mov.w	r2, #4294967295
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43da      	mvns	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	401a      	ands	r2, r3
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004994:	f04f 31ff 	mov.w	r1, #4294967295
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	43d9      	mvns	r1, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049a4:	4313      	orrs	r3, r2
         );
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3724      	adds	r7, #36	; 0x24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b082      	sub	sp, #8
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff ff4c 	bl	8004858 <__NVIC_SetPriorityGrouping>
}
 80049c0:	bf00      	nop
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049da:	f7ff ff61 	bl	80048a0 <__NVIC_GetPriorityGrouping>
 80049de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	6978      	ldr	r0, [r7, #20]
 80049e6:	f7ff ffb1 	bl	800494c <NVIC_EncodePriority>
 80049ea:	4602      	mov	r2, r0
 80049ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049f0:	4611      	mov	r1, r2
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff ff80 	bl	80048f8 <__NVIC_SetPriority>
}
 80049f8:	bf00      	nop
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4603      	mov	r3, r0
 8004a08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7ff ff54 	bl	80048bc <__NVIC_EnableIRQ>
}
 8004a14:	bf00      	nop
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e014      	b.n	8004a58 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	791b      	ldrb	r3, [r3, #4]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7fe fe08 	bl	8003654 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
 8004a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	795b      	ldrb	r3, [r3, #5]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_DAC_Start_DMA+0x22>
 8004a7e:	2302      	movs	r3, #2
 8004a80:	e0ab      	b.n	8004bda <HAL_DAC_Start_DMA+0x17a>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d12f      	bne.n	8004af4 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a52      	ldr	r2, [pc, #328]	; (8004be4 <HAL_DAC_Start_DMA+0x184>)
 8004a9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a51      	ldr	r2, [pc, #324]	; (8004be8 <HAL_DAC_Start_DMA+0x188>)
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4a50      	ldr	r2, [pc, #320]	; (8004bec <HAL_DAC_Start_DMA+0x18c>)
 8004aaa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004aba:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d013      	beq.n	8004aea <HAL_DAC_Start_DMA+0x8a>
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d845      	bhi.n	8004b54 <HAL_DAC_Start_DMA+0xf4>
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_DAC_Start_DMA+0x76>
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d005      	beq.n	8004ae0 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004ad4:	e03e      	b.n	8004b54 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3308      	adds	r3, #8
 8004adc:	613b      	str	r3, [r7, #16]
        break;
 8004ade:	e03c      	b.n	8004b5a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	613b      	str	r3, [r7, #16]
        break;
 8004ae8:	e037      	b.n	8004b5a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3310      	adds	r3, #16
 8004af0:	613b      	str	r3, [r7, #16]
        break;
 8004af2:	e032      	b.n	8004b5a <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	4a3d      	ldr	r2, [pc, #244]	; (8004bf0 <HAL_DAC_Start_DMA+0x190>)
 8004afa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4a3c      	ldr	r2, [pc, #240]	; (8004bf4 <HAL_DAC_Start_DMA+0x194>)
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4a3b      	ldr	r2, [pc, #236]	; (8004bf8 <HAL_DAC_Start_DMA+0x198>)
 8004b0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b1a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d013      	beq.n	8004b4a <HAL_DAC_Start_DMA+0xea>
 8004b22:	6a3b      	ldr	r3, [r7, #32]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d817      	bhi.n	8004b58 <HAL_DAC_Start_DMA+0xf8>
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_DAC_Start_DMA+0xd6>
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d005      	beq.n	8004b40 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004b34:	e010      	b.n	8004b58 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3314      	adds	r3, #20
 8004b3c:	613b      	str	r3, [r7, #16]
        break;
 8004b3e:	e00c      	b.n	8004b5a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3318      	adds	r3, #24
 8004b46:	613b      	str	r3, [r7, #16]
        break;
 8004b48:	e007      	b.n	8004b5a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	331c      	adds	r3, #28
 8004b50:	613b      	str	r3, [r7, #16]
        break;
 8004b52:	e002      	b.n	8004b5a <HAL_DAC_Start_DMA+0xfa>
        break;
 8004b54:	bf00      	nop
 8004b56:	e000      	b.n	8004b5a <HAL_DAC_Start_DMA+0xfa>
        break;
 8004b58:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b6e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6898      	ldr	r0, [r3, #8]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	f000 f9e5 	bl	8004f48 <HAL_DMA_Start_IT>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	75fb      	strb	r3, [r7, #23]
 8004b82:	e010      	b.n	8004ba6 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004b92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	68d8      	ldr	r0, [r3, #12]
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	f000 f9d3 	bl	8004f48 <HAL_DMA_Start_IT>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10c      	bne.n	8004bcc <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6819      	ldr	r1, [r3, #0]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f003 0310 	and.w	r3, r3, #16
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	409a      	lsls	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e005      	b.n	8004bd8 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	f043 0204 	orr.w	r2, r3, #4
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8004bd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3718      	adds	r7, #24
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	08004cd7 	.word	0x08004cd7
 8004be8:	08004cf9 	.word	0x08004cf9
 8004bec:	08004d15 	.word	0x08004d15
 8004bf0:	08004d7f 	.word	0x08004d7f
 8004bf4:	08004da1 	.word	0x08004da1
 8004bf8:	08004dbd 	.word	0x08004dbd

08004bfc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b087      	sub	sp, #28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	795b      	ldrb	r3, [r3, #5]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_DAC_ConfigChannel+0x18>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e03c      	b.n	8004cca <HAL_DAC_ConfigChannel+0x92>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43db      	mvns	r3, r3
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4013      	ands	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6819      	ldr	r1, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f003 0310 	and.w	r3, r3, #16
 8004cac:	22c0      	movs	r2, #192	; 0xc0
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	43da      	mvns	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	400a      	ands	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr

08004cd6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f7ff ff89 	bl	8004bfc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2201      	movs	r2, #1
 8004cee:	711a      	strb	r2, [r3, #4]
}
 8004cf0:	bf00      	nop
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004d06:	68f8      	ldr	r0, [r7, #12]
 8004d08:	f7ff ff82 	bl	8004c10 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004d0c:	bf00      	nop
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f043 0204 	orr.w	r2, r3, #4
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f7ff ff78 	bl	8004c24 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2201      	movs	r2, #1
 8004d38:	711a      	strb	r2, [r3, #4]
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b083      	sub	sp, #12
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7ff ffd8 	bl	8004d42 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2201      	movs	r2, #1
 8004d96:	711a      	strb	r2, [r3, #4]
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f7ff ffd1 	bl	8004d56 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f043 0204 	orr.w	r2, r3, #4
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7ff ffc7 	bl	8004d6a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	711a      	strb	r2, [r3, #4]
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004df8:	f7ff f814 	bl	8003e24 <HAL_GetTick>
 8004dfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d101      	bne.n	8004e08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e099      	b.n	8004f3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e28:	e00f      	b.n	8004e4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e2a:	f7fe fffb 	bl	8003e24 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b05      	cmp	r3, #5
 8004e36:	d908      	bls.n	8004e4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2203      	movs	r2, #3
 8004e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e078      	b.n	8004f3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e8      	bne.n	8004e2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4b38      	ldr	r3, [pc, #224]	; (8004f44 <HAL_DMA_Init+0x158>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	2b04      	cmp	r3, #4
 8004ea2:	d107      	bne.n	8004eb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eac:	4313      	orrs	r3, r2
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f023 0307 	bic.w	r3, r3, #7
 8004eca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d117      	bne.n	8004f0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00e      	beq.n	8004f0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fb01 	bl	80054f8 <DMA_CheckFifoParam>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d008      	beq.n	8004f0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2240      	movs	r2, #64	; 0x40
 8004f00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e016      	b.n	8004f3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fab8 	bl	800548c <DMA_CalcBaseAndBitshift>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f24:	223f      	movs	r2, #63	; 0x3f
 8004f26:	409a      	lsls	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	f010803f 	.word	0xf010803f

08004f48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_DMA_Start_IT+0x26>
 8004f6a:	2302      	movs	r3, #2
 8004f6c:	e040      	b.n	8004ff0 <HAL_DMA_Start_IT+0xa8>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d12f      	bne.n	8004fe2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	68f8      	ldr	r0, [r7, #12]
 8004f98:	f000 fa4a 	bl	8005430 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa0:	223f      	movs	r2, #63	; 0x3f
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0216 	orr.w	r2, r2, #22
 8004fb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0208 	orr.w	r2, r2, #8
 8004fce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e005      	b.n	8004fee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
 8004fec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005004:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005006:	f7fe ff0d 	bl	8003e24 <HAL_GetTick>
 800500a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d008      	beq.n	800502a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2280      	movs	r2, #128	; 0x80
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e052      	b.n	80050d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0216 	bic.w	r2, r2, #22
 8005038:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005048:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_DMA_Abort+0x62>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0208 	bic.w	r2, r2, #8
 8005068:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800507a:	e013      	b.n	80050a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800507c:	f7fe fed2 	bl	8003e24 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b05      	cmp	r3, #5
 8005088:	d90c      	bls.n	80050a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2203      	movs	r2, #3
 8005094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e015      	b.n	80050d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e4      	bne.n	800507c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b6:	223f      	movs	r2, #63	; 0x3f
 80050b8:	409a      	lsls	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d004      	beq.n	80050f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2280      	movs	r2, #128	; 0x80
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e00c      	b.n	8005110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2205      	movs	r2, #5
 80050fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 0201 	bic.w	r2, r2, #1
 800510c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005128:	4b8e      	ldr	r3, [pc, #568]	; (8005364 <HAL_DMA_IRQHandler+0x248>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a8e      	ldr	r2, [pc, #568]	; (8005368 <HAL_DMA_IRQHandler+0x24c>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	0a9b      	lsrs	r3, r3, #10
 8005134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005146:	2208      	movs	r2, #8
 8005148:	409a      	lsls	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01a      	beq.n	8005188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d013      	beq.n	8005188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0204 	bic.w	r2, r2, #4
 800516e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005174:	2208      	movs	r2, #8
 8005176:	409a      	lsls	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005180:	f043 0201 	orr.w	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518c:	2201      	movs	r2, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4013      	ands	r3, r2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d012      	beq.n	80051be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051aa:	2201      	movs	r2, #1
 80051ac:	409a      	lsls	r2, r3
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b6:	f043 0202 	orr.w	r2, r3, #2
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c2:	2204      	movs	r2, #4
 80051c4:	409a      	lsls	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d012      	beq.n	80051f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00b      	beq.n	80051f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e0:	2204      	movs	r2, #4
 80051e2:	409a      	lsls	r2, r3
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	f043 0204 	orr.w	r2, r3, #4
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f8:	2210      	movs	r2, #16
 80051fa:	409a      	lsls	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	4013      	ands	r3, r2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d043      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0308 	and.w	r3, r3, #8
 800520e:	2b00      	cmp	r3, #0
 8005210:	d03c      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005216:	2210      	movs	r2, #16
 8005218:	409a      	lsls	r2, r3
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d018      	beq.n	800525e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d108      	bne.n	800524c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d024      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	4798      	blx	r3
 800524a:	e01f      	b.n	800528c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005250:	2b00      	cmp	r3, #0
 8005252:	d01b      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4798      	blx	r3
 800525c:	e016      	b.n	800528c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d107      	bne.n	800527c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0208 	bic.w	r2, r2, #8
 800527a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005290:	2220      	movs	r2, #32
 8005292:	409a      	lsls	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 808f 	beq.w	80053bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8087 	beq.w	80053bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b2:	2220      	movs	r2, #32
 80052b4:	409a      	lsls	r2, r3
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b05      	cmp	r3, #5
 80052c4:	d136      	bne.n	8005334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 0216 	bic.w	r2, r2, #22
 80052d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	695a      	ldr	r2, [r3, #20]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <HAL_DMA_IRQHandler+0x1da>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0208 	bic.w	r2, r2, #8
 8005304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800530a:	223f      	movs	r2, #63	; 0x3f
 800530c:	409a      	lsls	r2, r3
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005326:	2b00      	cmp	r3, #0
 8005328:	d07e      	beq.n	8005428 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
        }
        return;
 8005332:	e079      	b.n	8005428 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d01d      	beq.n	800537e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10d      	bne.n	800536c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005354:	2b00      	cmp	r3, #0
 8005356:	d031      	beq.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
 8005360:	e02c      	b.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
 8005362:	bf00      	nop
 8005364:	2000001c 	.word	0x2000001c
 8005368:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	4798      	blx	r3
 800537c:	e01e      	b.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10f      	bne.n	80053ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0210 	bic.w	r2, r2, #16
 800539a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d032      	beq.n	800542a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d022      	beq.n	8005416 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2205      	movs	r2, #5
 80053d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60bb      	str	r3, [r7, #8]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d307      	bcc.n	8005404 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f2      	bne.n	80053e8 <HAL_DMA_IRQHandler+0x2cc>
 8005402:	e000      	b.n	8005406 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005404:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	4798      	blx	r3
 8005426:	e000      	b.n	800542a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005428:	bf00      	nop
    }
  }
}
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800544c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	683a      	ldr	r2, [r7, #0]
 8005454:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b40      	cmp	r3, #64	; 0x40
 800545c:	d108      	bne.n	8005470 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800546e:	e007      	b.n	8005480 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]
}
 8005480:	bf00      	nop
 8005482:	3714      	adds	r7, #20
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	3b10      	subs	r3, #16
 800549c:	4a14      	ldr	r2, [pc, #80]	; (80054f0 <DMA_CalcBaseAndBitshift+0x64>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80054a6:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <DMA_CalcBaseAndBitshift+0x68>)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	4413      	add	r3, r2
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b03      	cmp	r3, #3
 80054b8:	d909      	bls.n	80054ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	1d1a      	adds	r2, r3, #4
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	659a      	str	r2, [r3, #88]	; 0x58
 80054cc:	e007      	b.n	80054de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054d6:	f023 0303 	bic.w	r3, r3, #3
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	aaaaaaab 	.word	0xaaaaaaab
 80054f4:	08011050 	.word	0x08011050

080054f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005508:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d11f      	bne.n	8005552 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	2b03      	cmp	r3, #3
 8005516:	d856      	bhi.n	80055c6 <DMA_CheckFifoParam+0xce>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <DMA_CheckFifoParam+0x28>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005531 	.word	0x08005531
 8005524:	08005543 	.word	0x08005543
 8005528:	08005531 	.word	0x08005531
 800552c:	080055c7 	.word	0x080055c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d046      	beq.n	80055ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005540:	e043      	b.n	80055ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800554a:	d140      	bne.n	80055ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005550:	e03d      	b.n	80055ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555a:	d121      	bne.n	80055a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b03      	cmp	r3, #3
 8005560:	d837      	bhi.n	80055d2 <DMA_CheckFifoParam+0xda>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <DMA_CheckFifoParam+0x70>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	08005579 	.word	0x08005579
 800556c:	0800557f 	.word	0x0800557f
 8005570:	08005579 	.word	0x08005579
 8005574:	08005591 	.word	0x08005591
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	73fb      	strb	r3, [r7, #15]
      break;
 800557c:	e030      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d025      	beq.n	80055d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800558e:	e022      	b.n	80055d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005598:	d11f      	bne.n	80055da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800559e:	e01c      	b.n	80055da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d903      	bls.n	80055ae <DMA_CheckFifoParam+0xb6>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d003      	beq.n	80055b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80055ac:	e018      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	73fb      	strb	r3, [r7, #15]
      break;
 80055b2:	e015      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00e      	beq.n	80055de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      break;
 80055c4:	e00b      	b.n	80055de <DMA_CheckFifoParam+0xe6>
      break;
 80055c6:	bf00      	nop
 80055c8:	e00a      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055ca:	bf00      	nop
 80055cc:	e008      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055ce:	bf00      	nop
 80055d0:	e006      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055d2:	bf00      	nop
 80055d4:	e004      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055d6:	bf00      	nop
 80055d8:	e002      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80055da:	bf00      	nop
 80055dc:	e000      	b.n	80055e0 <DMA_CheckFifoParam+0xe8>
      break;
 80055de:	bf00      	nop
    }
  } 
  
  return status; 
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop

080055f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	; 0x24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055fe:	2300      	movs	r3, #0
 8005600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005602:	2300      	movs	r3, #0
 8005604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	e165      	b.n	80058d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800560c:	2201      	movs	r2, #1
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	fa02 f303 	lsl.w	r3, r2, r3
 8005614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4013      	ands	r3, r2
 800561e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	429a      	cmp	r2, r3
 8005626:	f040 8154 	bne.w	80058d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f003 0303 	and.w	r3, r3, #3
 8005632:	2b01      	cmp	r3, #1
 8005634:	d005      	beq.n	8005642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800563e:	2b02      	cmp	r3, #2
 8005640:	d130      	bne.n	80056a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	2203      	movs	r2, #3
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43db      	mvns	r3, r3
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	4013      	ands	r3, r2
 8005658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005678:	2201      	movs	r2, #1
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4013      	ands	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	f003 0201 	and.w	r2, r3, #1
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	fa02 f303 	lsl.w	r3, r2, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4313      	orrs	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 0303 	and.w	r3, r3, #3
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d017      	beq.n	80056e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	2203      	movs	r2, #3
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	005b      	lsls	r3, r3, #1
 80056d0:	fa02 f303 	lsl.w	r3, r2, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 0303 	and.w	r3, r3, #3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d123      	bne.n	8005734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	08da      	lsrs	r2, r3, #3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3208      	adds	r2, #8
 80056f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	220f      	movs	r2, #15
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	43db      	mvns	r3, r3
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	4013      	ands	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	fa02 f303 	lsl.w	r3, r2, r3
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	4313      	orrs	r3, r2
 8005724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	08da      	lsrs	r2, r3, #3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3208      	adds	r2, #8
 800572e:	69b9      	ldr	r1, [r7, #24]
 8005730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	2203      	movs	r2, #3
 8005740:	fa02 f303 	lsl.w	r3, r2, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	4013      	ands	r3, r2
 800574a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 0203 	and.w	r2, r3, #3
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	fa02 f303 	lsl.w	r3, r2, r3
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	4313      	orrs	r3, r2
 8005760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80ae 	beq.w	80058d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	4b5d      	ldr	r3, [pc, #372]	; (80058f0 <HAL_GPIO_Init+0x300>)
 800577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577e:	4a5c      	ldr	r2, [pc, #368]	; (80058f0 <HAL_GPIO_Init+0x300>)
 8005780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005784:	6453      	str	r3, [r2, #68]	; 0x44
 8005786:	4b5a      	ldr	r3, [pc, #360]	; (80058f0 <HAL_GPIO_Init+0x300>)
 8005788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800578a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578e:	60fb      	str	r3, [r7, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005792:	4a58      	ldr	r2, [pc, #352]	; (80058f4 <HAL_GPIO_Init+0x304>)
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	089b      	lsrs	r3, r3, #2
 8005798:	3302      	adds	r3, #2
 800579a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	220f      	movs	r2, #15
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43db      	mvns	r3, r3
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4013      	ands	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a4f      	ldr	r2, [pc, #316]	; (80058f8 <HAL_GPIO_Init+0x308>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d025      	beq.n	800580a <HAL_GPIO_Init+0x21a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a4e      	ldr	r2, [pc, #312]	; (80058fc <HAL_GPIO_Init+0x30c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01f      	beq.n	8005806 <HAL_GPIO_Init+0x216>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a4d      	ldr	r2, [pc, #308]	; (8005900 <HAL_GPIO_Init+0x310>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d019      	beq.n	8005802 <HAL_GPIO_Init+0x212>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a4c      	ldr	r2, [pc, #304]	; (8005904 <HAL_GPIO_Init+0x314>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <HAL_GPIO_Init+0x20e>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a4b      	ldr	r2, [pc, #300]	; (8005908 <HAL_GPIO_Init+0x318>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00d      	beq.n	80057fa <HAL_GPIO_Init+0x20a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a4a      	ldr	r2, [pc, #296]	; (800590c <HAL_GPIO_Init+0x31c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d007      	beq.n	80057f6 <HAL_GPIO_Init+0x206>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a49      	ldr	r2, [pc, #292]	; (8005910 <HAL_GPIO_Init+0x320>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d101      	bne.n	80057f2 <HAL_GPIO_Init+0x202>
 80057ee:	2306      	movs	r3, #6
 80057f0:	e00c      	b.n	800580c <HAL_GPIO_Init+0x21c>
 80057f2:	2307      	movs	r3, #7
 80057f4:	e00a      	b.n	800580c <HAL_GPIO_Init+0x21c>
 80057f6:	2305      	movs	r3, #5
 80057f8:	e008      	b.n	800580c <HAL_GPIO_Init+0x21c>
 80057fa:	2304      	movs	r3, #4
 80057fc:	e006      	b.n	800580c <HAL_GPIO_Init+0x21c>
 80057fe:	2303      	movs	r3, #3
 8005800:	e004      	b.n	800580c <HAL_GPIO_Init+0x21c>
 8005802:	2302      	movs	r3, #2
 8005804:	e002      	b.n	800580c <HAL_GPIO_Init+0x21c>
 8005806:	2301      	movs	r3, #1
 8005808:	e000      	b.n	800580c <HAL_GPIO_Init+0x21c>
 800580a:	2300      	movs	r3, #0
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	f002 0203 	and.w	r2, r2, #3
 8005812:	0092      	lsls	r2, r2, #2
 8005814:	4093      	lsls	r3, r2
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800581c:	4935      	ldr	r1, [pc, #212]	; (80058f4 <HAL_GPIO_Init+0x304>)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	089b      	lsrs	r3, r3, #2
 8005822:	3302      	adds	r3, #2
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800582a:	4b3a      	ldr	r3, [pc, #232]	; (8005914 <HAL_GPIO_Init+0x324>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	43db      	mvns	r3, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4013      	ands	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800584e:	4a31      	ldr	r2, [pc, #196]	; (8005914 <HAL_GPIO_Init+0x324>)
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005854:	4b2f      	ldr	r3, [pc, #188]	; (8005914 <HAL_GPIO_Init+0x324>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	43db      	mvns	r3, r3
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	4013      	ands	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005878:	4a26      	ldr	r2, [pc, #152]	; (8005914 <HAL_GPIO_Init+0x324>)
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800587e:	4b25      	ldr	r3, [pc, #148]	; (8005914 <HAL_GPIO_Init+0x324>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	43db      	mvns	r3, r3
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	4013      	ands	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4313      	orrs	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058a2:	4a1c      	ldr	r2, [pc, #112]	; (8005914 <HAL_GPIO_Init+0x324>)
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058a8:	4b1a      	ldr	r3, [pc, #104]	; (8005914 <HAL_GPIO_Init+0x324>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4013      	ands	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058cc:	4a11      	ldr	r2, [pc, #68]	; (8005914 <HAL_GPIO_Init+0x324>)
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3301      	adds	r3, #1
 80058d6:	61fb      	str	r3, [r7, #28]
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	f67f ae96 	bls.w	800560c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	3724      	adds	r7, #36	; 0x24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40023800 	.word	0x40023800
 80058f4:	40013800 	.word	0x40013800
 80058f8:	40020000 	.word	0x40020000
 80058fc:	40020400 	.word	0x40020400
 8005900:	40020800 	.word	0x40020800
 8005904:	40020c00 	.word	0x40020c00
 8005908:	40021000 	.word	0x40021000
 800590c:	40021400 	.word	0x40021400
 8005910:	40021800 	.word	0x40021800
 8005914:	40013c00 	.word	0x40013c00

08005918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	460b      	mov	r3, r1
 8005922:	807b      	strh	r3, [r7, #2]
 8005924:	4613      	mov	r3, r2
 8005926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005928:	787b      	ldrb	r3, [r7, #1]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800592e:	887a      	ldrh	r2, [r7, #2]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005934:	e003      	b.n	800593e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005936:	887b      	ldrh	r3, [r7, #2]
 8005938:	041a      	lsls	r2, r3, #16
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	619a      	str	r2, [r3, #24]
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
	...

0800594c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e0cc      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005960:	4b68      	ldr	r3, [pc, #416]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d90c      	bls.n	8005988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596e:	4b65      	ldr	r3, [pc, #404]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b63      	ldr	r3, [pc, #396]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d001      	beq.n	8005988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e0b8      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d020      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a0:	4b59      	ldr	r3, [pc, #356]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	4a58      	ldr	r2, [pc, #352]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b8:	4b53      	ldr	r3, [pc, #332]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4a52      	ldr	r2, [pc, #328]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c4:	4b50      	ldr	r3, [pc, #320]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	494d      	ldr	r1, [pc, #308]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d044      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d107      	bne.n	80059fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ea:	4b47      	ldr	r3, [pc, #284]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d119      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e07f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d003      	beq.n	8005a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a06:	2b03      	cmp	r3, #3
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a0a:	4b3f      	ldr	r3, [pc, #252]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e06f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1a:	4b3b      	ldr	r3, [pc, #236]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e067      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a2a:	4b37      	ldr	r3, [pc, #220]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f023 0203 	bic.w	r2, r3, #3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	4934      	ldr	r1, [pc, #208]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a3c:	f7fe f9f2 	bl	8003e24 <HAL_GetTick>
 8005a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a44:	f7fe f9ee 	bl	8003e24 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e04f      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a5a:	4b2b      	ldr	r3, [pc, #172]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 020c 	and.w	r2, r3, #12
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d1eb      	bne.n	8005a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b25      	ldr	r3, [pc, #148]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d20c      	bcs.n	8005a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	b2d2      	uxtb	r2, r2
 8005a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a82:	4b20      	ldr	r3, [pc, #128]	; (8005b04 <HAL_RCC_ClockConfig+0x1b8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e032      	b.n	8005afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa0:	4b19      	ldr	r3, [pc, #100]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4916      	ldr	r1, [pc, #88]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d009      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005abe:	4b12      	ldr	r3, [pc, #72]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	490e      	ldr	r1, [pc, #56]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ad2:	f000 f887 	bl	8005be4 <HAL_RCC_GetSysClockFreq>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	4b0b      	ldr	r3, [pc, #44]	; (8005b08 <HAL_RCC_ClockConfig+0x1bc>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	091b      	lsrs	r3, r3, #4
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	490a      	ldr	r1, [pc, #40]	; (8005b0c <HAL_RCC_ClockConfig+0x1c0>)
 8005ae4:	5ccb      	ldrb	r3, [r1, r3]
 8005ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aea:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <HAL_RCC_ClockConfig+0x1c4>)
 8005aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <HAL_RCC_ClockConfig+0x1c8>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fd ffe4 	bl	8003ac0 <HAL_InitTick>

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	40023c00 	.word	0x40023c00
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	08011038 	.word	0x08011038
 8005b10:	2000001c 	.word	0x2000001c
 8005b14:	20000020 	.word	0x20000020

08005b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	; (8005b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	2000001c 	.word	0x2000001c

08005b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b34:	f7ff fff0 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	0a9b      	lsrs	r3, r3, #10
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	4903      	ldr	r1, [pc, #12]	; (8005b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b46:	5ccb      	ldrb	r3, [r1, r3]
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40023800 	.word	0x40023800
 8005b54:	08011048 	.word	0x08011048

08005b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b5c:	f7ff ffdc 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0b5b      	lsrs	r3, r3, #13
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4903      	ldr	r1, [pc, #12]	; (8005b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	08011048 	.word	0x08011048

08005b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	220f      	movs	r2, #15
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b90:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <HAL_RCC_GetClockConfig+0x5c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0203 	and.w	r2, r3, #3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <HAL_RCC_GetClockConfig+0x5c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <HAL_RCC_GetClockConfig+0x5c>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <HAL_RCC_GetClockConfig+0x5c>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	08db      	lsrs	r3, r3, #3
 8005bba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <HAL_RCC_GetClockConfig+0x60>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 020f 	and.w	r2, r3, #15
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40023800 	.word	0x40023800
 8005be0:	40023c00 	.word	0x40023c00

08005be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be8:	b0ae      	sub	sp, #184	; 0xb8
 8005bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c0a:	4bcb      	ldr	r3, [pc, #812]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 030c 	and.w	r3, r3, #12
 8005c12:	2b0c      	cmp	r3, #12
 8005c14:	f200 8206 	bhi.w	8006024 <HAL_RCC_GetSysClockFreq+0x440>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005c55 	.word	0x08005c55
 8005c24:	08006025 	.word	0x08006025
 8005c28:	08006025 	.word	0x08006025
 8005c2c:	08006025 	.word	0x08006025
 8005c30:	08005c5d 	.word	0x08005c5d
 8005c34:	08006025 	.word	0x08006025
 8005c38:	08006025 	.word	0x08006025
 8005c3c:	08006025 	.word	0x08006025
 8005c40:	08005c65 	.word	0x08005c65
 8005c44:	08006025 	.word	0x08006025
 8005c48:	08006025 	.word	0x08006025
 8005c4c:	08006025 	.word	0x08006025
 8005c50:	08005e55 	.word	0x08005e55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c54:	4bb9      	ldr	r3, [pc, #740]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x358>)
 8005c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005c5a:	e1e7      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c5c:	4bb8      	ldr	r3, [pc, #736]	; (8005f40 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005c62:	e1e3      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c64:	4bb4      	ldr	r3, [pc, #720]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c70:	4bb1      	ldr	r3, [pc, #708]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d071      	beq.n	8005d60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c7c:	4bae      	ldr	r3, [pc, #696]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	099b      	lsrs	r3, r3, #6
 8005c82:	2200      	movs	r2, #0
 8005c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ca2:	4622      	mov	r2, r4
 8005ca4:	462b      	mov	r3, r5
 8005ca6:	f04f 0000 	mov.w	r0, #0
 8005caa:	f04f 0100 	mov.w	r1, #0
 8005cae:	0159      	lsls	r1, r3, #5
 8005cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cb4:	0150      	lsls	r0, r2, #5
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	4621      	mov	r1, r4
 8005cbc:	1a51      	subs	r1, r2, r1
 8005cbe:	6439      	str	r1, [r7, #64]	; 0x40
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	018b      	lsls	r3, r1, #6
 8005cd8:	4641      	mov	r1, r8
 8005cda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005cde:	4641      	mov	r1, r8
 8005ce0:	018a      	lsls	r2, r1, #6
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	1a51      	subs	r1, r2, r1
 8005ce6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ce8:	4649      	mov	r1, r9
 8005cea:	eb63 0301 	sbc.w	r3, r3, r1
 8005cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf0:	f04f 0200 	mov.w	r2, #0
 8005cf4:	f04f 0300 	mov.w	r3, #0
 8005cf8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005cfc:	4649      	mov	r1, r9
 8005cfe:	00cb      	lsls	r3, r1, #3
 8005d00:	4641      	mov	r1, r8
 8005d02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d06:	4641      	mov	r1, r8
 8005d08:	00ca      	lsls	r2, r1, #3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	4622      	mov	r2, r4
 8005d12:	189b      	adds	r3, r3, r2
 8005d14:	633b      	str	r3, [r7, #48]	; 0x30
 8005d16:	462b      	mov	r3, r5
 8005d18:	460a      	mov	r2, r1
 8005d1a:	eb42 0303 	adc.w	r3, r2, r3
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	024b      	lsls	r3, r1, #9
 8005d30:	4621      	mov	r1, r4
 8005d32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d36:	4621      	mov	r1, r4
 8005d38:	024a      	lsls	r2, r1, #9
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005d50:	f7fb f914 	bl	8000f7c <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4613      	mov	r3, r2
 8005d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d5e:	e067      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d60:	4b75      	ldr	r3, [pc, #468]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	099b      	lsrs	r3, r3, #6
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005d70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d78:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8005d82:	4622      	mov	r2, r4
 8005d84:	462b      	mov	r3, r5
 8005d86:	f04f 0000 	mov.w	r0, #0
 8005d8a:	f04f 0100 	mov.w	r1, #0
 8005d8e:	0159      	lsls	r1, r3, #5
 8005d90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d94:	0150      	lsls	r0, r2, #5
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	1a51      	subs	r1, r2, r1
 8005d9e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005da0:	4629      	mov	r1, r5
 8005da2:	eb63 0301 	sbc.w	r3, r3, r1
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005db4:	4649      	mov	r1, r9
 8005db6:	018b      	lsls	r3, r1, #6
 8005db8:	4641      	mov	r1, r8
 8005dba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005dbe:	4641      	mov	r1, r8
 8005dc0:	018a      	lsls	r2, r1, #6
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dc8:	4649      	mov	r1, r9
 8005dca:	eb63 0b01 	sbc.w	fp, r3, r1
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de2:	4692      	mov	sl, r2
 8005de4:	469b      	mov	fp, r3
 8005de6:	4623      	mov	r3, r4
 8005de8:	eb1a 0303 	adds.w	r3, sl, r3
 8005dec:	623b      	str	r3, [r7, #32]
 8005dee:	462b      	mov	r3, r5
 8005df0:	eb4b 0303 	adc.w	r3, fp, r3
 8005df4:	627b      	str	r3, [r7, #36]	; 0x24
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	f04f 0300 	mov.w	r3, #0
 8005dfe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005e02:	4629      	mov	r1, r5
 8005e04:	028b      	lsls	r3, r1, #10
 8005e06:	4621      	mov	r1, r4
 8005e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	028a      	lsls	r2, r1, #10
 8005e10:	4610      	mov	r0, r2
 8005e12:	4619      	mov	r1, r3
 8005e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e18:	2200      	movs	r2, #0
 8005e1a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e1c:	677a      	str	r2, [r7, #116]	; 0x74
 8005e1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005e22:	f7fb f8ab 	bl	8000f7c <__aeabi_uldivmod>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e30:	4b41      	ldr	r3, [pc, #260]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	0c1b      	lsrs	r3, r3, #16
 8005e36:	f003 0303 	and.w	r3, r3, #3
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005e42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005e52:	e0eb      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e54:	4b38      	ldr	r3, [pc, #224]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e60:	4b35      	ldr	r3, [pc, #212]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d06b      	beq.n	8005f44 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e6c:	4b32      	ldr	r3, [pc, #200]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x354>)
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	099b      	lsrs	r3, r3, #6
 8005e72:	2200      	movs	r2, #0
 8005e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	663b      	str	r3, [r7, #96]	; 0x60
 8005e80:	2300      	movs	r3, #0
 8005e82:	667b      	str	r3, [r7, #100]	; 0x64
 8005e84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005e88:	4622      	mov	r2, r4
 8005e8a:	462b      	mov	r3, r5
 8005e8c:	f04f 0000 	mov.w	r0, #0
 8005e90:	f04f 0100 	mov.w	r1, #0
 8005e94:	0159      	lsls	r1, r3, #5
 8005e96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e9a:	0150      	lsls	r0, r2, #5
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	1a51      	subs	r1, r2, r1
 8005ea4:	61b9      	str	r1, [r7, #24]
 8005ea6:	4629      	mov	r1, r5
 8005ea8:	eb63 0301 	sbc.w	r3, r3, r1
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	f04f 0200 	mov.w	r2, #0
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005eba:	4659      	mov	r1, fp
 8005ebc:	018b      	lsls	r3, r1, #6
 8005ebe:	4651      	mov	r1, sl
 8005ec0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005ec4:	4651      	mov	r1, sl
 8005ec6:	018a      	lsls	r2, r1, #6
 8005ec8:	4651      	mov	r1, sl
 8005eca:	ebb2 0801 	subs.w	r8, r2, r1
 8005ece:	4659      	mov	r1, fp
 8005ed0:	eb63 0901 	sbc.w	r9, r3, r1
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ee0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ee4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ee8:	4690      	mov	r8, r2
 8005eea:	4699      	mov	r9, r3
 8005eec:	4623      	mov	r3, r4
 8005eee:	eb18 0303 	adds.w	r3, r8, r3
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	eb49 0303 	adc.w	r3, r9, r3
 8005efa:	617b      	str	r3, [r7, #20]
 8005efc:	f04f 0200 	mov.w	r2, #0
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005f08:	4629      	mov	r1, r5
 8005f0a:	024b      	lsls	r3, r1, #9
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f12:	4621      	mov	r1, r4
 8005f14:	024a      	lsls	r2, r1, #9
 8005f16:	4610      	mov	r0, r2
 8005f18:	4619      	mov	r1, r3
 8005f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f1e:	2200      	movs	r2, #0
 8005f20:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005f24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f28:	f7fb f828 	bl	8000f7c <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4613      	mov	r3, r2
 8005f32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f36:	e065      	b.n	8006004 <HAL_RCC_GetSysClockFreq+0x420>
 8005f38:	40023800 	.word	0x40023800
 8005f3c:	00f42400 	.word	0x00f42400
 8005f40:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f44:	4b3d      	ldr	r3, [pc, #244]	; (800603c <HAL_RCC_GetSysClockFreq+0x458>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	099b      	lsrs	r3, r3, #6
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	4611      	mov	r1, r2
 8005f50:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f54:	653b      	str	r3, [r7, #80]	; 0x50
 8005f56:	2300      	movs	r3, #0
 8005f58:	657b      	str	r3, [r7, #84]	; 0x54
 8005f5a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005f5e:	4642      	mov	r2, r8
 8005f60:	464b      	mov	r3, r9
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f04f 0100 	mov.w	r1, #0
 8005f6a:	0159      	lsls	r1, r3, #5
 8005f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f70:	0150      	lsls	r0, r2, #5
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4641      	mov	r1, r8
 8005f78:	1a51      	subs	r1, r2, r1
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f82:	60fb      	str	r3, [r7, #12]
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005f90:	4659      	mov	r1, fp
 8005f92:	018b      	lsls	r3, r1, #6
 8005f94:	4651      	mov	r1, sl
 8005f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f9a:	4651      	mov	r1, sl
 8005f9c:	018a      	lsls	r2, r1, #6
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	1a54      	subs	r4, r2, r1
 8005fa2:	4659      	mov	r1, fp
 8005fa4:	eb63 0501 	sbc.w	r5, r3, r1
 8005fa8:	f04f 0200 	mov.w	r2, #0
 8005fac:	f04f 0300 	mov.w	r3, #0
 8005fb0:	00eb      	lsls	r3, r5, #3
 8005fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fb6:	00e2      	lsls	r2, r4, #3
 8005fb8:	4614      	mov	r4, r2
 8005fba:	461d      	mov	r5, r3
 8005fbc:	4643      	mov	r3, r8
 8005fbe:	18e3      	adds	r3, r4, r3
 8005fc0:	603b      	str	r3, [r7, #0]
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	eb45 0303 	adc.w	r3, r5, r3
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	f04f 0300 	mov.w	r3, #0
 8005fd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	028b      	lsls	r3, r1, #10
 8005fda:	4621      	mov	r1, r4
 8005fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	028a      	lsls	r2, r1, #10
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fec:	2200      	movs	r2, #0
 8005fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ff0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ff2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005ff6:	f7fa ffc1 	bl	8000f7c <__aeabi_uldivmod>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4613      	mov	r3, r2
 8006000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006004:	4b0d      	ldr	r3, [pc, #52]	; (800603c <HAL_RCC_GetSysClockFreq+0x458>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	0f1b      	lsrs	r3, r3, #28
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8006012:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006016:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800601a:	fbb2 f3f3 	udiv	r3, r2, r3
 800601e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8006022:	e003      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006024:	4b06      	ldr	r3, [pc, #24]	; (8006040 <HAL_RCC_GetSysClockFreq+0x45c>)
 8006026:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800602a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800602c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8006030:	4618      	mov	r0, r3
 8006032:	37b8      	adds	r7, #184	; 0xb8
 8006034:	46bd      	mov	sp, r7
 8006036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800
 8006040:	00f42400 	.word	0x00f42400

08006044 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e28d      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8083 	beq.w	800616a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006064:	4b94      	ldr	r3, [pc, #592]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 030c 	and.w	r3, r3, #12
 800606c:	2b04      	cmp	r3, #4
 800606e:	d019      	beq.n	80060a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006070:	4b91      	ldr	r3, [pc, #580]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006078:	2b08      	cmp	r3, #8
 800607a:	d106      	bne.n	800608a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800607c:	4b8e      	ldr	r3, [pc, #568]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006088:	d00c      	beq.n	80060a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800608a:	4b8b      	ldr	r3, [pc, #556]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006092:	2b0c      	cmp	r3, #12
 8006094:	d112      	bne.n	80060bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006096:	4b88      	ldr	r3, [pc, #544]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800609e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060a2:	d10b      	bne.n	80060bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060a4:	4b84      	ldr	r3, [pc, #528]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d05b      	beq.n	8006168 <HAL_RCC_OscConfig+0x124>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d157      	bne.n	8006168 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e25a      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c4:	d106      	bne.n	80060d4 <HAL_RCC_OscConfig+0x90>
 80060c6:	4b7c      	ldr	r3, [pc, #496]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a7b      	ldr	r2, [pc, #492]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80060cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e01d      	b.n	8006110 <HAL_RCC_OscConfig+0xcc>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060dc:	d10c      	bne.n	80060f8 <HAL_RCC_OscConfig+0xb4>
 80060de:	4b76      	ldr	r3, [pc, #472]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a75      	ldr	r2, [pc, #468]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80060e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	4b73      	ldr	r3, [pc, #460]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a72      	ldr	r2, [pc, #456]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80060f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	e00b      	b.n	8006110 <HAL_RCC_OscConfig+0xcc>
 80060f8:	4b6f      	ldr	r3, [pc, #444]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a6e      	ldr	r2, [pc, #440]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80060fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	4b6c      	ldr	r3, [pc, #432]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a6b      	ldr	r2, [pc, #428]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 800610a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800610e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d013      	beq.n	8006140 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006118:	f7fd fe84 	bl	8003e24 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800611e:	e008      	b.n	8006132 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006120:	f7fd fe80 	bl	8003e24 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	2b64      	cmp	r3, #100	; 0x64
 800612c:	d901      	bls.n	8006132 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e21f      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006132:	4b61      	ldr	r3, [pc, #388]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f0      	beq.n	8006120 <HAL_RCC_OscConfig+0xdc>
 800613e:	e014      	b.n	800616a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006140:	f7fd fe70 	bl	8003e24 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006148:	f7fd fe6c 	bl	8003e24 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b64      	cmp	r3, #100	; 0x64
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e20b      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800615a:	4b57      	ldr	r3, [pc, #348]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1f0      	bne.n	8006148 <HAL_RCC_OscConfig+0x104>
 8006166:	e000      	b.n	800616a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d06f      	beq.n	8006256 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8006176:	4b50      	ldr	r3, [pc, #320]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 030c 	and.w	r3, r3, #12
 800617e:	2b00      	cmp	r3, #0
 8006180:	d017      	beq.n	80061b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006182:	4b4d      	ldr	r3, [pc, #308]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800618a:	2b08      	cmp	r3, #8
 800618c:	d105      	bne.n	800619a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800618e:	4b4a      	ldr	r3, [pc, #296]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00b      	beq.n	80061b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800619a:	4b47      	ldr	r3, [pc, #284]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80061a2:	2b0c      	cmp	r3, #12
 80061a4:	d11c      	bne.n	80061e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061a6:	4b44      	ldr	r3, [pc, #272]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d116      	bne.n	80061e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061b2:	4b41      	ldr	r3, [pc, #260]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d005      	beq.n	80061ca <HAL_RCC_OscConfig+0x186>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d001      	beq.n	80061ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e1d3      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ca:	4b3b      	ldr	r3, [pc, #236]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	4937      	ldr	r1, [pc, #220]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061de:	e03a      	b.n	8006256 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d020      	beq.n	800622a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061e8:	4b34      	ldr	r3, [pc, #208]	; (80062bc <HAL_RCC_OscConfig+0x278>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ee:	f7fd fe19 	bl	8003e24 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061f6:	f7fd fe15 	bl	8003e24 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e1b4      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006208:	4b2b      	ldr	r3, [pc, #172]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006214:	4b28      	ldr	r3, [pc, #160]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	691b      	ldr	r3, [r3, #16]
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	4925      	ldr	r1, [pc, #148]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 8006224:	4313      	orrs	r3, r2
 8006226:	600b      	str	r3, [r1, #0]
 8006228:	e015      	b.n	8006256 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800622a:	4b24      	ldr	r3, [pc, #144]	; (80062bc <HAL_RCC_OscConfig+0x278>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006230:	f7fd fdf8 	bl	8003e24 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006238:	f7fd fdf4 	bl	8003e24 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e193      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800624a:	4b1b      	ldr	r3, [pc, #108]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0302 	and.w	r3, r3, #2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d036      	beq.n	80062d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d016      	beq.n	8006298 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800626a:	4b15      	ldr	r3, [pc, #84]	; (80062c0 <HAL_RCC_OscConfig+0x27c>)
 800626c:	2201      	movs	r2, #1
 800626e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006270:	f7fd fdd8 	bl	8003e24 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006278:	f7fd fdd4 	bl	8003e24 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e173      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800628a:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <HAL_RCC_OscConfig+0x274>)
 800628c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0f0      	beq.n	8006278 <HAL_RCC_OscConfig+0x234>
 8006296:	e01b      	b.n	80062d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <HAL_RCC_OscConfig+0x27c>)
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629e:	f7fd fdc1 	bl	8003e24 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062a4:	e00e      	b.n	80062c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062a6:	f7fd fdbd 	bl	8003e24 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d907      	bls.n	80062c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e15c      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
 80062b8:	40023800 	.word	0x40023800
 80062bc:	42470000 	.word	0x42470000
 80062c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c4:	4b8a      	ldr	r3, [pc, #552]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 80062c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1ea      	bne.n	80062a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8097 	beq.w	800640c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062de:	2300      	movs	r3, #0
 80062e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e2:	4b83      	ldr	r3, [pc, #524]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 80062e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	4b7f      	ldr	r3, [pc, #508]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	4a7e      	ldr	r2, [pc, #504]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 80062f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062fc:	6413      	str	r3, [r2, #64]	; 0x40
 80062fe:	4b7c      	ldr	r3, [pc, #496]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006306:	60bb      	str	r3, [r7, #8]
 8006308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800630a:	2301      	movs	r3, #1
 800630c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800630e:	4b79      	ldr	r3, [pc, #484]	; (80064f4 <HAL_RCC_OscConfig+0x4b0>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006316:	2b00      	cmp	r3, #0
 8006318:	d118      	bne.n	800634c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800631a:	4b76      	ldr	r3, [pc, #472]	; (80064f4 <HAL_RCC_OscConfig+0x4b0>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a75      	ldr	r2, [pc, #468]	; (80064f4 <HAL_RCC_OscConfig+0x4b0>)
 8006320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006326:	f7fd fd7d 	bl	8003e24 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800632c:	e008      	b.n	8006340 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800632e:	f7fd fd79 	bl	8003e24 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e118      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006340:	4b6c      	ldr	r3, [pc, #432]	; (80064f4 <HAL_RCC_OscConfig+0x4b0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d106      	bne.n	8006362 <HAL_RCC_OscConfig+0x31e>
 8006354:	4b66      	ldr	r3, [pc, #408]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4a65      	ldr	r2, [pc, #404]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 800635a:	f043 0301 	orr.w	r3, r3, #1
 800635e:	6713      	str	r3, [r2, #112]	; 0x70
 8006360:	e01c      	b.n	800639c <HAL_RCC_OscConfig+0x358>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b05      	cmp	r3, #5
 8006368:	d10c      	bne.n	8006384 <HAL_RCC_OscConfig+0x340>
 800636a:	4b61      	ldr	r3, [pc, #388]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	4a60      	ldr	r2, [pc, #384]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006370:	f043 0304 	orr.w	r3, r3, #4
 8006374:	6713      	str	r3, [r2, #112]	; 0x70
 8006376:	4b5e      	ldr	r3, [pc, #376]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800637a:	4a5d      	ldr	r2, [pc, #372]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 800637c:	f043 0301 	orr.w	r3, r3, #1
 8006380:	6713      	str	r3, [r2, #112]	; 0x70
 8006382:	e00b      	b.n	800639c <HAL_RCC_OscConfig+0x358>
 8006384:	4b5a      	ldr	r3, [pc, #360]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006388:	4a59      	ldr	r2, [pc, #356]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	6713      	str	r3, [r2, #112]	; 0x70
 8006390:	4b57      	ldr	r3, [pc, #348]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006394:	4a56      	ldr	r2, [pc, #344]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006396:	f023 0304 	bic.w	r3, r3, #4
 800639a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d015      	beq.n	80063d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fd fd3e 	bl	8003e24 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ac:	f7fd fd3a 	bl	8003e24 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e0d7      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c2:	4b4b      	ldr	r3, [pc, #300]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 80063c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0ee      	beq.n	80063ac <HAL_RCC_OscConfig+0x368>
 80063ce:	e014      	b.n	80063fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d0:	f7fd fd28 	bl	8003e24 <HAL_GetTick>
 80063d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063d6:	e00a      	b.n	80063ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063d8:	f7fd fd24 	bl	8003e24 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e0c1      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ee:	4b40      	ldr	r3, [pc, #256]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1ee      	bne.n	80063d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063fa:	7dfb      	ldrb	r3, [r7, #23]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d105      	bne.n	800640c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006400:	4b3b      	ldr	r3, [pc, #236]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	4a3a      	ldr	r2, [pc, #232]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006406:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800640a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 80ad 	beq.w	8006570 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006416:	4b36      	ldr	r3, [pc, #216]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 030c 	and.w	r3, r3, #12
 800641e:	2b08      	cmp	r3, #8
 8006420:	d060      	beq.n	80064e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d145      	bne.n	80064b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800642a:	4b33      	ldr	r3, [pc, #204]	; (80064f8 <HAL_RCC_OscConfig+0x4b4>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006430:	f7fd fcf8 	bl	8003e24 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006438:	f7fd fcf4 	bl	8003e24 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e093      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644a:	4b29      	ldr	r3, [pc, #164]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69da      	ldr	r2, [r3, #28]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	431a      	orrs	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	019b      	lsls	r3, r3, #6
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	085b      	lsrs	r3, r3, #1
 800646e:	3b01      	subs	r3, #1
 8006470:	041b      	lsls	r3, r3, #16
 8006472:	431a      	orrs	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006478:	061b      	lsls	r3, r3, #24
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	071b      	lsls	r3, r3, #28
 8006482:	491b      	ldr	r1, [pc, #108]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 8006484:	4313      	orrs	r3, r2
 8006486:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006488:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <HAL_RCC_OscConfig+0x4b4>)
 800648a:	2201      	movs	r2, #1
 800648c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648e:	f7fd fcc9 	bl	8003e24 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006494:	e008      	b.n	80064a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006496:	f7fd fcc5 	bl	8003e24 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d901      	bls.n	80064a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e064      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a8:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d0f0      	beq.n	8006496 <HAL_RCC_OscConfig+0x452>
 80064b4:	e05c      	b.n	8006570 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064b6:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <HAL_RCC_OscConfig+0x4b4>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064bc:	f7fd fcb2 	bl	8003e24 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064c4:	f7fd fcae 	bl	8003e24 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e04d      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064d6:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <HAL_RCC_OscConfig+0x4ac>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x480>
 80064e2:	e045      	b.n	8006570 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d107      	bne.n	80064fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e040      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
 80064f0:	40023800 	.word	0x40023800
 80064f4:	40007000 	.word	0x40007000
 80064f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064fc:	4b1f      	ldr	r3, [pc, #124]	; (800657c <HAL_RCC_OscConfig+0x538>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d030      	beq.n	800656c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006514:	429a      	cmp	r2, r3
 8006516:	d129      	bne.n	800656c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006522:	429a      	cmp	r2, r3
 8006524:	d122      	bne.n	800656c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800652c:	4013      	ands	r3, r2
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006534:	4293      	cmp	r3, r2
 8006536:	d119      	bne.n	800656c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006542:	085b      	lsrs	r3, r3, #1
 8006544:	3b01      	subs	r3, #1
 8006546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006548:	429a      	cmp	r2, r3
 800654a:	d10f      	bne.n	800656c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006558:	429a      	cmp	r2, r3
 800655a:	d107      	bne.n	800656c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006566:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006568:	429a      	cmp	r2, r3
 800656a:	d001      	beq.n	8006570 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	40023800 	.word	0x40023800

08006580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e07b      	b.n	800668a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a2:	d009      	beq.n	80065b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	61da      	str	r2, [r3, #28]
 80065aa:	e005      	b.n	80065b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fd f8b6 	bl	8003744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800660a:	431a      	orrs	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f003 0302 	and.w	r3, r3, #2
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663c:	ea42 0103 	orr.w	r1, r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	0c1b      	lsrs	r3, r3, #16
 8006656:	f003 0104 	and.w	r1, r3, #4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f003 0210 	and.w	r2, r3, #16
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006678:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b088      	sub	sp, #32
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	4613      	mov	r3, r2
 80066a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_SPI_Transmit+0x22>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e126      	b.n	8006902 <HAL_SPI_Transmit+0x270>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066bc:	f7fd fbb2 	bl	8003e24 <HAL_GetTick>
 80066c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d002      	beq.n	80066d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066d2:	2302      	movs	r3, #2
 80066d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066d6:	e10b      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_SPI_Transmit+0x52>
 80066de:	88fb      	ldrh	r3, [r7, #6]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d102      	bne.n	80066ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066e8:	e102      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2203      	movs	r2, #3
 80066ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	88fa      	ldrh	r2, [r7, #6]
 8006708:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2200      	movs	r2, #0
 8006714:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006730:	d10f      	bne.n	8006752 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006740:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006750:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	2b40      	cmp	r3, #64	; 0x40
 800675e:	d007      	beq.n	8006770 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800676e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006778:	d14b      	bne.n	8006812 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <HAL_SPI_Transmit+0xf6>
 8006782:	8afb      	ldrh	r3, [r7, #22]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d13e      	bne.n	8006806 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678c:	881a      	ldrh	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006798:	1c9a      	adds	r2, r3, #2
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067ac:	e02b      	b.n	8006806 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d112      	bne.n	80067e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	881a      	ldrh	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067cc:	1c9a      	adds	r2, r3, #2
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	3b01      	subs	r3, #1
 80067da:	b29a      	uxth	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	86da      	strh	r2, [r3, #54]	; 0x36
 80067e0:	e011      	b.n	8006806 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067e2:	f7fd fb1f 	bl	8003e24 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d803      	bhi.n	80067fa <HAL_SPI_Transmit+0x168>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d102      	bne.n	8006800 <HAL_SPI_Transmit+0x16e>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d102      	bne.n	8006806 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006804:	e074      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800680a:	b29b      	uxth	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1ce      	bne.n	80067ae <HAL_SPI_Transmit+0x11c>
 8006810:	e04c      	b.n	80068ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_SPI_Transmit+0x18e>
 800681a:	8afb      	ldrh	r3, [r7, #22]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d140      	bne.n	80068a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	330c      	adds	r3, #12
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800683c:	b29b      	uxth	r3, r3
 800683e:	3b01      	subs	r3, #1
 8006840:	b29a      	uxth	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006846:	e02c      	b.n	80068a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 0302 	and.w	r3, r3, #2
 8006852:	2b02      	cmp	r3, #2
 8006854:	d113      	bne.n	800687e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	330c      	adds	r3, #12
 8006860:	7812      	ldrb	r2, [r2, #0]
 8006862:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006872:	b29b      	uxth	r3, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	86da      	strh	r2, [r3, #54]	; 0x36
 800687c:	e011      	b.n	80068a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800687e:	f7fd fad1 	bl	8003e24 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d803      	bhi.n	8006896 <HAL_SPI_Transmit+0x204>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006894:	d102      	bne.n	800689c <HAL_SPI_Transmit+0x20a>
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800689c:	2303      	movs	r3, #3
 800689e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068a0:	e026      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1cd      	bne.n	8006848 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 fa63 	bl	8006d7c <SPI_EndRxTxTransaction>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10a      	bne.n	80068e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e000      	b.n	80068f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80068ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006900:	7ffb      	ldrb	r3, [r7, #31]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3720      	adds	r7, #32
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b08c      	sub	sp, #48	; 0x30
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
 8006916:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006918:	2301      	movs	r3, #1
 800691a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_SPI_TransmitReceive+0x26>
 800692c:	2302      	movs	r3, #2
 800692e:	e18a      	b.n	8006c46 <HAL_SPI_TransmitReceive+0x33c>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006938:	f7fd fa74 	bl	8003e24 <HAL_GetTick>
 800693c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006944:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800694e:	887b      	ldrh	r3, [r7, #2]
 8006950:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006952:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006956:	2b01      	cmp	r3, #1
 8006958:	d00f      	beq.n	800697a <HAL_SPI_TransmitReceive+0x70>
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006960:	d107      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d103      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x68>
 800696a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800696e:	2b04      	cmp	r3, #4
 8006970:	d003      	beq.n	800697a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006972:	2302      	movs	r3, #2
 8006974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006978:	e15b      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <HAL_SPI_TransmitReceive+0x82>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_SPI_TransmitReceive+0x82>
 8006986:	887b      	ldrh	r3, [r7, #2]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d103      	bne.n	8006994 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006992:	e14e      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b04      	cmp	r3, #4
 800699e:	d003      	beq.n	80069a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2205      	movs	r2, #5
 80069a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	887a      	ldrh	r2, [r7, #2]
 80069b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	887a      	ldrh	r2, [r7, #2]
 80069be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	887a      	ldrh	r2, [r7, #2]
 80069ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	887a      	ldrh	r2, [r7, #2]
 80069d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e8:	2b40      	cmp	r3, #64	; 0x40
 80069ea:	d007      	beq.n	80069fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a04:	d178      	bne.n	8006af8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d002      	beq.n	8006a14 <HAL_SPI_TransmitReceive+0x10a>
 8006a0e:	8b7b      	ldrh	r3, [r7, #26]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d166      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	881a      	ldrh	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a24:	1c9a      	adds	r2, r3, #2
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a38:	e053      	b.n	8006ae2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d11b      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x176>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d016      	beq.n	8006a80 <HAL_SPI_TransmitReceive+0x176>
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d113      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5c:	881a      	ldrh	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a68:	1c9a      	adds	r2, r3, #2
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	3b01      	subs	r3, #1
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d119      	bne.n	8006ac2 <HAL_SPI_TransmitReceive+0x1b8>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d014      	beq.n	8006ac2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa2:	b292      	uxth	r2, r2
 8006aa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aaa:	1c9a      	adds	r2, r3, #2
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006ac2:	f7fd f9af 	bl	8003e24 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d807      	bhi.n	8006ae2 <HAL_SPI_TransmitReceive+0x1d8>
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d003      	beq.n	8006ae2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ae0:	e0a7      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d1a6      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x130>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1a1      	bne.n	8006a3a <HAL_SPI_TransmitReceive+0x130>
 8006af6:	e07c      	b.n	8006bf2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d002      	beq.n	8006b06 <HAL_SPI_TransmitReceive+0x1fc>
 8006b00:	8b7b      	ldrh	r3, [r7, #26]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d16b      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	330c      	adds	r3, #12
 8006b10:	7812      	ldrb	r2, [r2, #0]
 8006b12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b2c:	e057      	b.n	8006bde <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d11c      	bne.n	8006b76 <HAL_SPI_TransmitReceive+0x26c>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d017      	beq.n	8006b76 <HAL_SPI_TransmitReceive+0x26c>
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d114      	bne.n	8006b76 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	330c      	adds	r3, #12
 8006b56:	7812      	ldrb	r2, [r2, #0]
 8006b58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d119      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x2ae>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d014      	beq.n	8006bb8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bb8:	f7fd f934 	bl	8003e24 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d803      	bhi.n	8006bd0 <HAL_SPI_TransmitReceive+0x2c6>
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d102      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x2cc>
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006bdc:	e029      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1a2      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x224>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d19d      	bne.n	8006b2e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f8c0 	bl	8006d7c <SPI_EndRxTxTransaction>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d006      	beq.n	8006c10 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006c0e:	e010      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	e000      	b.n	8006c32 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006c30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3730      	adds	r7, #48	; 0x30
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c5c:	b2db      	uxtb	r3, r3
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
	...

08006c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b088      	sub	sp, #32
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c7c:	f7fd f8d2 	bl	8003e24 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	1a9b      	subs	r3, r3, r2
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	4413      	add	r3, r2
 8006c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c8c:	f7fd f8ca 	bl	8003e24 <HAL_GetTick>
 8006c90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c92:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	015b      	lsls	r3, r3, #5
 8006c98:	0d1b      	lsrs	r3, r3, #20
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ca2:	e054      	b.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006caa:	d050      	beq.n	8006d4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006cac:	f7fd f8ba 	bl	8003e24 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d902      	bls.n	8006cc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d13d      	bne.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006cd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cda:	d111      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce4:	d004      	beq.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cee:	d107      	bne.n	8006d00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d08:	d10f      	bne.n	8006d2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e017      	b.n	8006d6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4013      	ands	r3, r2
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	bf0c      	ite	eq
 8006d5e:	2301      	moveq	r3, #1
 8006d60:	2300      	movne	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d19b      	bne.n	8006ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	2000001c 	.word	0x2000001c

08006d7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d88:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <SPI_EndRxTxTransaction+0x7c>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1b      	ldr	r2, [pc, #108]	; (8006dfc <SPI_EndRxTxTransaction+0x80>)
 8006d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d92:	0d5b      	lsrs	r3, r3, #21
 8006d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d98:	fb02 f303 	mul.w	r3, r2, r3
 8006d9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006da6:	d112      	bne.n	8006dce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	9300      	str	r3, [sp, #0]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2200      	movs	r2, #0
 8006db0:	2180      	movs	r1, #128	; 0x80
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f7ff ff5a 	bl	8006c6c <SPI_WaitFlagStateUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d016      	beq.n	8006dec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc2:	f043 0220 	orr.w	r2, r3, #32
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e00f      	b.n	8006dee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de4:	2b80      	cmp	r3, #128	; 0x80
 8006de6:	d0f2      	beq.n	8006dce <SPI_EndRxTxTransaction+0x52>
 8006de8:	e000      	b.n	8006dec <SPI_EndRxTxTransaction+0x70>
        break;
 8006dea:	bf00      	nop
  }

  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	2000001c 	.word	0x2000001c
 8006dfc:	165e9f81 	.word	0x165e9f81

08006e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e041      	b.n	8006e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fc fce4 	bl	80037f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	4610      	mov	r0, r2
 8006e40:	f000 fafe 	bl	8007440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
	...

08006ea0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d001      	beq.n	8006eb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e046      	b.n	8006f46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a23      	ldr	r2, [pc, #140]	; (8006f54 <HAL_TIM_Base_Start+0xb4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d022      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed2:	d01d      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a1f      	ldr	r2, [pc, #124]	; (8006f58 <HAL_TIM_Base_Start+0xb8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d018      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1e      	ldr	r2, [pc, #120]	; (8006f5c <HAL_TIM_Base_Start+0xbc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d013      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1c      	ldr	r2, [pc, #112]	; (8006f60 <HAL_TIM_Base_Start+0xc0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00e      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1b      	ldr	r2, [pc, #108]	; (8006f64 <HAL_TIM_Base_Start+0xc4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d009      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <HAL_TIM_Base_Start+0xc8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d004      	beq.n	8006f10 <HAL_TIM_Base_Start+0x70>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <HAL_TIM_Base_Start+0xcc>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d111      	bne.n	8006f34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 0307 	and.w	r3, r3, #7
 8006f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b06      	cmp	r3, #6
 8006f20:	d010      	beq.n	8006f44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f042 0201 	orr.w	r2, r2, #1
 8006f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f32:	e007      	b.n	8006f44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0201 	orr.w	r2, r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40000c00 	.word	0x40000c00
 8006f64:	40010400 	.word	0x40010400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40001800 	.word	0x40001800

08006f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d001      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e04e      	b.n	8007026 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a23      	ldr	r2, [pc, #140]	; (8007034 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d022      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb2:	d01d      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1f      	ldr	r2, [pc, #124]	; (8007038 <HAL_TIM_Base_Start_IT+0xc8>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d018      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1e      	ldr	r2, [pc, #120]	; (800703c <HAL_TIM_Base_Start_IT+0xcc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d013      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1c      	ldr	r2, [pc, #112]	; (8007040 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d00e      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1b      	ldr	r2, [pc, #108]	; (8007044 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d009      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a19      	ldr	r2, [pc, #100]	; (8007048 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d004      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0x80>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a18      	ldr	r2, [pc, #96]	; (800704c <HAL_TIM_Base_Start_IT+0xdc>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d111      	bne.n	8007014 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f003 0307 	and.w	r3, r3, #7
 8006ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2b06      	cmp	r3, #6
 8007000:	d010      	beq.n	8007024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0201 	orr.w	r2, r2, #1
 8007010:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007012:	e007      	b.n	8007024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0201 	orr.w	r2, r2, #1
 8007022:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	40010000 	.word	0x40010000
 8007038:	40000400 	.word	0x40000400
 800703c:	40000800 	.word	0x40000800
 8007040:	40000c00 	.word	0x40000c00
 8007044:	40010400 	.word	0x40010400
 8007048:	40014000 	.word	0x40014000
 800704c:	40001800 	.word	0x40001800

08007050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0302 	and.w	r3, r3, #2
 8007062:	2b02      	cmp	r3, #2
 8007064:	d122      	bne.n	80070ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0302 	and.w	r3, r3, #2
 8007070:	2b02      	cmp	r3, #2
 8007072:	d11b      	bne.n	80070ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f06f 0202 	mvn.w	r2, #2
 800707c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	f003 0303 	and.w	r3, r3, #3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9b5 	bl	8007402 <HAL_TIM_IC_CaptureCallback>
 8007098:	e005      	b.n	80070a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f9a7 	bl	80073ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 f9b8 	bl	8007416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d122      	bne.n	8007100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0304 	and.w	r3, r3, #4
 80070c4:	2b04      	cmp	r3, #4
 80070c6:	d11b      	bne.n	8007100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0204 	mvn.w	r2, #4
 80070d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f98b 	bl	8007402 <HAL_TIM_IC_CaptureCallback>
 80070ec:	e005      	b.n	80070fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f97d 	bl	80073ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f98e 	bl	8007416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b08      	cmp	r3, #8
 800710c:	d122      	bne.n	8007154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f003 0308 	and.w	r3, r3, #8
 8007118:	2b08      	cmp	r3, #8
 800711a:	d11b      	bne.n	8007154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f06f 0208 	mvn.w	r2, #8
 8007124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2204      	movs	r2, #4
 800712a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 f961 	bl	8007402 <HAL_TIM_IC_CaptureCallback>
 8007140:	e005      	b.n	800714e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f953 	bl	80073ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f964 	bl	8007416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b10      	cmp	r3, #16
 8007160:	d122      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	2b10      	cmp	r3, #16
 800716e:	d11b      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f06f 0210 	mvn.w	r2, #16
 8007178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2208      	movs	r2, #8
 800717e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800718a:	2b00      	cmp	r3, #0
 800718c:	d003      	beq.n	8007196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 f937 	bl	8007402 <HAL_TIM_IC_CaptureCallback>
 8007194:	e005      	b.n	80071a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f929 	bl	80073ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f93a 	bl	8007416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d10e      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d107      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0201 	mvn.w	r2, #1
 80071cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fc f842 	bl	8003258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071de:	2b80      	cmp	r3, #128	; 0x80
 80071e0:	d10e      	bne.n	8007200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ec:	2b80      	cmp	r3, #128	; 0x80
 80071ee:	d107      	bne.n	8007200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fae0 	bl	80077c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720a:	2b40      	cmp	r3, #64	; 0x40
 800720c:	d10e      	bne.n	800722c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b40      	cmp	r3, #64	; 0x40
 800721a:	d107      	bne.n	800722c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f8ff 	bl	800742a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b20      	cmp	r3, #32
 8007238:	d10e      	bne.n	8007258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b20      	cmp	r3, #32
 8007246:	d107      	bne.n	8007258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f06f 0220 	mvn.w	r2, #32
 8007250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 faaa 	bl	80077ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_TIM_ConfigClockSource+0x1c>
 8007278:	2302      	movs	r3, #2
 800727a:	e0b4      	b.n	80073e6 <HAL_TIM_ConfigClockSource+0x186>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800729a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072b4:	d03e      	beq.n	8007334 <HAL_TIM_ConfigClockSource+0xd4>
 80072b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ba:	f200 8087 	bhi.w	80073cc <HAL_TIM_ConfigClockSource+0x16c>
 80072be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c2:	f000 8086 	beq.w	80073d2 <HAL_TIM_ConfigClockSource+0x172>
 80072c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ca:	d87f      	bhi.n	80073cc <HAL_TIM_ConfigClockSource+0x16c>
 80072cc:	2b70      	cmp	r3, #112	; 0x70
 80072ce:	d01a      	beq.n	8007306 <HAL_TIM_ConfigClockSource+0xa6>
 80072d0:	2b70      	cmp	r3, #112	; 0x70
 80072d2:	d87b      	bhi.n	80073cc <HAL_TIM_ConfigClockSource+0x16c>
 80072d4:	2b60      	cmp	r3, #96	; 0x60
 80072d6:	d050      	beq.n	800737a <HAL_TIM_ConfigClockSource+0x11a>
 80072d8:	2b60      	cmp	r3, #96	; 0x60
 80072da:	d877      	bhi.n	80073cc <HAL_TIM_ConfigClockSource+0x16c>
 80072dc:	2b50      	cmp	r3, #80	; 0x50
 80072de:	d03c      	beq.n	800735a <HAL_TIM_ConfigClockSource+0xfa>
 80072e0:	2b50      	cmp	r3, #80	; 0x50
 80072e2:	d873      	bhi.n	80073cc <HAL_TIM_ConfigClockSource+0x16c>
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d058      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x13a>
 80072e8:	2b40      	cmp	r3, #64	; 0x40
 80072ea:	d86f      	bhi.n	80073cc <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b30      	cmp	r3, #48	; 0x30
 80072ee:	d064      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x15a>
 80072f0:	2b30      	cmp	r3, #48	; 0x30
 80072f2:	d86b      	bhi.n	80073cc <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d060      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x15a>
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	d867      	bhi.n	80073cc <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d05c      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x15a>
 8007300:	2b10      	cmp	r3, #16
 8007302:	d05a      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x15a>
 8007304:	e062      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6818      	ldr	r0, [r3, #0]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	6899      	ldr	r1, [r3, #8]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	f000 f9ad 	bl	8007674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007328:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	609a      	str	r2, [r3, #8]
      break;
 8007332:	e04f      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	6899      	ldr	r1, [r3, #8]
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	f000 f996 	bl	8007674 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689a      	ldr	r2, [r3, #8]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007356:	609a      	str	r2, [r3, #8]
      break;
 8007358:	e03c      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	6859      	ldr	r1, [r3, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	461a      	mov	r2, r3
 8007368:	f000 f90a 	bl	8007580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2150      	movs	r1, #80	; 0x50
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f963 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8007378:	e02c      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	461a      	mov	r2, r3
 8007388:	f000 f929 	bl	80075de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2160      	movs	r1, #96	; 0x60
 8007392:	4618      	mov	r0, r3
 8007394:	f000 f953 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 8007398:	e01c      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6859      	ldr	r1, [r3, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f000 f8ea 	bl	8007580 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2140      	movs	r1, #64	; 0x40
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 f943 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 80073b8:	e00c      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f000 f93a 	bl	800763e <TIM_ITRx_SetConfig>
      break;
 80073ca:	e003      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
      break;
 80073d0:	e000      	b.n	80073d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007402:	b480      	push	{r7}
 8007404:	b083      	sub	sp, #12
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800740a:	bf00      	nop
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007416:	b480      	push	{r7}
 8007418:	b083      	sub	sp, #12
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800741e:	bf00      	nop
 8007420:	370c      	adds	r7, #12
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800742a:	b480      	push	{r7}
 800742c:	b083      	sub	sp, #12
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007440:	b480      	push	{r7}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a40      	ldr	r2, [pc, #256]	; (8007554 <TIM_Base_SetConfig+0x114>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d013      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745e:	d00f      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a3d      	ldr	r2, [pc, #244]	; (8007558 <TIM_Base_SetConfig+0x118>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d00b      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a3c      	ldr	r2, [pc, #240]	; (800755c <TIM_Base_SetConfig+0x11c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d007      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a3b      	ldr	r2, [pc, #236]	; (8007560 <TIM_Base_SetConfig+0x120>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d003      	beq.n	8007480 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a3a      	ldr	r2, [pc, #232]	; (8007564 <TIM_Base_SetConfig+0x124>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d108      	bne.n	8007492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2f      	ldr	r2, [pc, #188]	; (8007554 <TIM_Base_SetConfig+0x114>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d02b      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a0:	d027      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a2c      	ldr	r2, [pc, #176]	; (8007558 <TIM_Base_SetConfig+0x118>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d023      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a2b      	ldr	r2, [pc, #172]	; (800755c <TIM_Base_SetConfig+0x11c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01f      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a2a      	ldr	r2, [pc, #168]	; (8007560 <TIM_Base_SetConfig+0x120>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d01b      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a29      	ldr	r2, [pc, #164]	; (8007564 <TIM_Base_SetConfig+0x124>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d017      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a28      	ldr	r2, [pc, #160]	; (8007568 <TIM_Base_SetConfig+0x128>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a27      	ldr	r2, [pc, #156]	; (800756c <TIM_Base_SetConfig+0x12c>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a26      	ldr	r2, [pc, #152]	; (8007570 <TIM_Base_SetConfig+0x130>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00b      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a25      	ldr	r2, [pc, #148]	; (8007574 <TIM_Base_SetConfig+0x134>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a24      	ldr	r2, [pc, #144]	; (8007578 <TIM_Base_SetConfig+0x138>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_Base_SetConfig+0xb2>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a23      	ldr	r2, [pc, #140]	; (800757c <TIM_Base_SetConfig+0x13c>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d108      	bne.n	8007504 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a0a      	ldr	r2, [pc, #40]	; (8007554 <TIM_Base_SetConfig+0x114>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d003      	beq.n	8007538 <TIM_Base_SetConfig+0xf8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a0c      	ldr	r2, [pc, #48]	; (8007564 <TIM_Base_SetConfig+0x124>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d103      	bne.n	8007540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	691a      	ldr	r2, [r3, #16]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	615a      	str	r2, [r3, #20]
}
 8007546:	bf00      	nop
 8007548:	3714      	adds	r7, #20
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40010000 	.word	0x40010000
 8007558:	40000400 	.word	0x40000400
 800755c:	40000800 	.word	0x40000800
 8007560:	40000c00 	.word	0x40000c00
 8007564:	40010400 	.word	0x40010400
 8007568:	40014000 	.word	0x40014000
 800756c:	40014400 	.word	0x40014400
 8007570:	40014800 	.word	0x40014800
 8007574:	40001800 	.word	0x40001800
 8007578:	40001c00 	.word	0x40001c00
 800757c:	40002000 	.word	0x40002000

08007580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	f023 0201 	bic.w	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	011b      	lsls	r3, r3, #4
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 030a 	bic.w	r3, r3, #10
 80075bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075be:	697a      	ldr	r2, [r7, #20]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	693a      	ldr	r2, [r7, #16]
 80075ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	697a      	ldr	r2, [r7, #20]
 80075d0:	621a      	str	r2, [r3, #32]
}
 80075d2:	bf00      	nop
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075de:	b480      	push	{r7}
 80075e0:	b087      	sub	sp, #28
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f023 0210 	bic.w	r2, r3, #16
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	699b      	ldr	r3, [r3, #24]
 80075fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a1b      	ldr	r3, [r3, #32]
 8007600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	031b      	lsls	r3, r3, #12
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	4313      	orrs	r3, r2
 8007612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800761a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	011b      	lsls	r3, r3, #4
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	693a      	ldr	r2, [r7, #16]
 8007630:	621a      	str	r2, [r3, #32]
}
 8007632:	bf00      	nop
 8007634:	371c      	adds	r7, #28
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800763e:	b480      	push	{r7}
 8007640:	b085      	sub	sp, #20
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	f043 0307 	orr.w	r3, r3, #7
 8007660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	609a      	str	r2, [r3, #8]
}
 8007668:	bf00      	nop
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800768e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	021a      	lsls	r2, r3, #8
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	431a      	orrs	r2, r3
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4313      	orrs	r3, r2
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	609a      	str	r2, [r3, #8]
}
 80076a8:	bf00      	nop
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e05a      	b.n	8007782 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2202      	movs	r2, #2
 80076d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a21      	ldr	r2, [pc, #132]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d022      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007718:	d01d      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1d      	ldr	r2, [pc, #116]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d018      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a1b      	ldr	r2, [pc, #108]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d013      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a1a      	ldr	r2, [pc, #104]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d00e      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a18      	ldr	r2, [pc, #96]	; (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d009      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a17      	ldr	r2, [pc, #92]	; (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d004      	beq.n	8007756 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a15      	ldr	r2, [pc, #84]	; (80077a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d10c      	bne.n	8007770 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800775c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	4313      	orrs	r3, r2
 8007766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	40010000 	.word	0x40010000
 8007794:	40000400 	.word	0x40000400
 8007798:	40000800 	.word	0x40000800
 800779c:	40000c00 	.word	0x40000c00
 80077a0:	40010400 	.word	0x40010400
 80077a4:	40014000 	.word	0x40014000
 80077a8:	40001800 	.word	0x40001800

080077ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e03f      	b.n	8007866 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d106      	bne.n	8007800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f7fc f83e 	bl	800387c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2224      	movs	r2, #36	; 0x24
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 f843 	bl	80088a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800782c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	695a      	ldr	r2, [r3, #20]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800783c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68da      	ldr	r2, [r3, #12]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800784c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2220      	movs	r2, #32
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b08a      	sub	sp, #40	; 0x28
 8007872:	af02      	add	r7, sp, #8
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	60b9      	str	r1, [r7, #8]
 8007878:	603b      	str	r3, [r7, #0]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b20      	cmp	r3, #32
 800788c:	d17c      	bne.n	8007988 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d002      	beq.n	800789a <HAL_UART_Transmit+0x2c>
 8007894:	88fb      	ldrh	r3, [r7, #6]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e075      	b.n	800798a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_UART_Transmit+0x3e>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e06e      	b.n	800798a <HAL_UART_Transmit+0x11c>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2200      	movs	r2, #0
 80078b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2221      	movs	r2, #33	; 0x21
 80078be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80078c2:	f7fc faaf 	bl	8003e24 <HAL_GetTick>
 80078c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	88fa      	ldrh	r2, [r7, #6]
 80078cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	88fa      	ldrh	r2, [r7, #6]
 80078d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078dc:	d108      	bne.n	80078f0 <HAL_UART_Transmit+0x82>
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d104      	bne.n	80078f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	61bb      	str	r3, [r7, #24]
 80078ee:	e003      	b.n	80078f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078f4:	2300      	movs	r3, #0
 80078f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007900:	e02a      	b.n	8007958 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2200      	movs	r2, #0
 800790a:	2180      	movs	r1, #128	; 0x80
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fcfa 	bl	8008306 <UART_WaitOnFlagUntilTimeout>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e036      	b.n	800798a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007930:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	3302      	adds	r3, #2
 8007936:	61bb      	str	r3, [r7, #24]
 8007938:	e007      	b.n	800794a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	781a      	ldrb	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	3301      	adds	r3, #1
 8007948:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800794e:	b29b      	uxth	r3, r3
 8007950:	3b01      	subs	r3, #1
 8007952:	b29a      	uxth	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1cf      	bne.n	8007902 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	9300      	str	r3, [sp, #0]
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2200      	movs	r2, #0
 800796a:	2140      	movs	r1, #64	; 0x40
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f000 fcca 	bl	8008306 <UART_WaitOnFlagUntilTimeout>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d001      	beq.n	800797c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e006      	b.n	800798a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	e000      	b.n	800798a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007988:	2302      	movs	r3, #2
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	3720      	adds	r7, #32
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08c      	sub	sp, #48	; 0x30
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b20      	cmp	r3, #32
 80079ac:	d165      	bne.n	8007a7a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <HAL_UART_Transmit_DMA+0x26>
 80079b4:	88fb      	ldrh	r3, [r7, #6]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e05e      	b.n	8007a7c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_UART_Transmit_DMA+0x38>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e057      	b.n	8007a7c <HAL_UART_Transmit_DMA+0xe8>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	88fa      	ldrh	r2, [r7, #6]
 80079de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	88fa      	ldrh	r2, [r7, #6]
 80079e4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2221      	movs	r2, #33	; 0x21
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f8:	4a22      	ldr	r2, [pc, #136]	; (8007a84 <HAL_UART_Transmit_DMA+0xf0>)
 80079fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a00:	4a21      	ldr	r2, [pc, #132]	; (8007a88 <HAL_UART_Transmit_DMA+0xf4>)
 8007a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a08:	4a20      	ldr	r2, [pc, #128]	; (8007a8c <HAL_UART_Transmit_DMA+0xf8>)
 8007a0a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a10:	2200      	movs	r2, #0
 8007a12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007a14:	f107 0308 	add.w	r3, r7, #8
 8007a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	6819      	ldr	r1, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3304      	adds	r3, #4
 8007a28:	461a      	mov	r2, r3
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	f7fd fa8c 	bl	8004f48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a38:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3314      	adds	r3, #20
 8007a48:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	617b      	str	r3, [r7, #20]
   return(result);
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3314      	adds	r3, #20
 8007a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a62:	627a      	str	r2, [r7, #36]	; 0x24
 8007a64:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6a39      	ldr	r1, [r7, #32]
 8007a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e5      	bne.n	8007a42 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e000      	b.n	8007a7c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007a7a:	2302      	movs	r3, #2
  }
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3730      	adds	r7, #48	; 0x30
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	08008061 	.word	0x08008061
 8007a88:	080080fb 	.word	0x080080fb
 8007a8c:	08008273 	.word	0x08008273

08007a90 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d11d      	bne.n	8007ae6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d002      	beq.n	8007ab6 <HAL_UART_Receive_DMA+0x26>
 8007ab0:	88fb      	ldrh	r3, [r7, #6]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e016      	b.n	8007ae8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_UART_Receive_DMA+0x38>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e00f      	b.n	8007ae8 <HAL_UART_Receive_DMA+0x58>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007ad6:	88fb      	ldrh	r3, [r7, #6]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 fc81 	bl	80083e4 <UART_Start_Receive_DMA>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	e000      	b.n	8007ae8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007ae6:	2302      	movs	r3, #2
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b0ba      	sub	sp, #232	; 0xe8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b26:	f003 030f 	and.w	r3, r3, #15
 8007b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10f      	bne.n	8007b56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d009      	beq.n	8007b56 <HAL_UART_IRQHandler+0x66>
 8007b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fded 	bl	800872e <UART_Receive_IT>
      return;
 8007b54:	e256      	b.n	8008004 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 80de 	beq.w	8007d1c <HAL_UART_IRQHandler+0x22c>
 8007b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d106      	bne.n	8007b7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b70:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80d1 	beq.w	8007d1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00b      	beq.n	8007b9e <HAL_UART_IRQHandler+0xae>
 8007b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b96:	f043 0201 	orr.w	r2, r3, #1
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba2:	f003 0304 	and.w	r3, r3, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00b      	beq.n	8007bc2 <HAL_UART_IRQHandler+0xd2>
 8007baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f043 0202 	orr.w	r2, r3, #2
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc6:	f003 0302 	and.w	r3, r3, #2
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00b      	beq.n	8007be6 <HAL_UART_IRQHandler+0xf6>
 8007bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d005      	beq.n	8007be6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f043 0204 	orr.w	r2, r3, #4
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d011      	beq.n	8007c16 <HAL_UART_IRQHandler+0x126>
 8007bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf6:	f003 0320 	and.w	r3, r3, #32
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d105      	bne.n	8007c0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	f043 0208 	orr.w	r2, r3, #8
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 81ed 	beq.w	8007ffa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_UART_IRQHandler+0x14e>
 8007c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c30:	f003 0320 	and.w	r3, r3, #32
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fd78 	bl	800872e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	bf0c      	ite	eq
 8007c4c:	2301      	moveq	r3, #1
 8007c4e:	2300      	movne	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <HAL_UART_IRQHandler+0x17a>
 8007c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d04f      	beq.n	8007d0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fc80 	bl	8008570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7a:	2b40      	cmp	r3, #64	; 0x40
 8007c7c:	d141      	bne.n	8007d02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3314      	adds	r3, #20
 8007c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cba:	e841 2300 	strex	r3, r2, [r1]
 8007cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1d9      	bne.n	8007c7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d013      	beq.n	8007cfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd6:	4a7d      	ldr	r2, [pc, #500]	; (8007ecc <HAL_UART_IRQHandler+0x3dc>)
 8007cd8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fd f9fa 	bl	80050d8 <HAL_DMA_Abort_IT>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d016      	beq.n	8007d18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007cf4:	4610      	mov	r0, r2
 8007cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf8:	e00e      	b.n	8007d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f99a 	bl	8008034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d00:	e00a      	b.n	8007d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f996 	bl	8008034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d08:	e006      	b.n	8007d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f992 	bl	8008034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d16:	e170      	b.n	8007ffa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d18:	bf00      	nop
    return;
 8007d1a:	e16e      	b.n	8007ffa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	f040 814a 	bne.w	8007fba <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d2a:	f003 0310 	and.w	r3, r3, #16
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8143 	beq.w	8007fba <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d38:	f003 0310 	and.w	r3, r3, #16
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f000 813c 	beq.w	8007fba <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d42:	2300      	movs	r3, #0
 8007d44:	60bb      	str	r3, [r7, #8]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60bb      	str	r3, [r7, #8]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	60bb      	str	r3, [r7, #8]
 8007d56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	f040 80b4 	bne.w	8007ed0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 8140 	beq.w	8007ffe <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d86:	429a      	cmp	r2, r3
 8007d88:	f080 8139 	bcs.w	8007ffe <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d92:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	69db      	ldr	r3, [r3, #28]
 8007d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d9e:	f000 8088 	beq.w	8007eb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	330c      	adds	r3, #12
 8007da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	330c      	adds	r3, #12
 8007dca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007dce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1d9      	bne.n	8007da2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3314      	adds	r3, #20
 8007df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3314      	adds	r3, #20
 8007e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e1      	bne.n	8007dee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3314      	adds	r3, #20
 8007e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3314      	adds	r3, #20
 8007e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e3      	bne.n	8007e2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2220      	movs	r2, #32
 8007e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	330c      	adds	r3, #12
 8007e76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e7a:	e853 3f00 	ldrex	r3, [r3]
 8007e7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e82:	f023 0310 	bic.w	r3, r3, #16
 8007e86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	330c      	adds	r3, #12
 8007e90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e94:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e9c:	e841 2300 	strex	r3, r2, [r1]
 8007ea0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e3      	bne.n	8007e70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fd f8a3 	bl	8004ff8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f8c0 	bl	8008048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ec8:	e099      	b.n	8007ffe <HAL_UART_IRQHandler+0x50e>
 8007eca:	bf00      	nop
 8007ecc:	08008637 	.word	0x08008637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 808b 	beq.w	8008002 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007eec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8086 	beq.w	8008002 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	330c      	adds	r3, #12
 8007efc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f00:	e853 3f00 	ldrex	r3, [r3]
 8007f04:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	330c      	adds	r3, #12
 8007f16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007f1a:	647a      	str	r2, [r7, #68]	; 0x44
 8007f1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f22:	e841 2300 	strex	r3, r2, [r1]
 8007f26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d1e3      	bne.n	8007ef6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3314      	adds	r3, #20
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	e853 3f00 	ldrex	r3, [r3]
 8007f3c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	f023 0301 	bic.w	r3, r3, #1
 8007f44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3314      	adds	r3, #20
 8007f4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f52:	633a      	str	r2, [r7, #48]	; 0x30
 8007f54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f5a:	e841 2300 	strex	r3, r2, [r1]
 8007f5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1e3      	bne.n	8007f2e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	330c      	adds	r3, #12
 8007f7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0310 	bic.w	r3, r3, #16
 8007f8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	330c      	adds	r3, #12
 8007f94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f98:	61fa      	str	r2, [r7, #28]
 8007f9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	69b9      	ldr	r1, [r7, #24]
 8007f9e:	69fa      	ldr	r2, [r7, #28]
 8007fa0:	e841 2300 	strex	r3, r2, [r1]
 8007fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d1e3      	bne.n	8007f74 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f848 	bl	8008048 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fb8:	e023      	b.n	8008002 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d009      	beq.n	8007fda <HAL_UART_IRQHandler+0x4ea>
 8007fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fb43 	bl	800865e <UART_Transmit_IT>
    return;
 8007fd8:	e014      	b.n	8008004 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00e      	beq.n	8008004 <HAL_UART_IRQHandler+0x514>
 8007fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d008      	beq.n	8008004 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fb83 	bl	80086fe <UART_EndTransmit_IT>
    return;
 8007ff8:	e004      	b.n	8008004 <HAL_UART_IRQHandler+0x514>
    return;
 8007ffa:	bf00      	nop
 8007ffc:	e002      	b.n	8008004 <HAL_UART_IRQHandler+0x514>
      return;
 8007ffe:	bf00      	nop
 8008000:	e000      	b.n	8008004 <HAL_UART_IRQHandler+0x514>
      return;
 8008002:	bf00      	nop
  }
}
 8008004:	37e8      	adds	r7, #232	; 0xe8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop

0800800c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	460b      	mov	r3, r1
 8008052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008054:	bf00      	nop
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b090      	sub	sp, #64	; 0x40
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008078:	2b00      	cmp	r3, #0
 800807a:	d137      	bne.n	80080ec <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800807c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807e:	2200      	movs	r2, #0
 8008080:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3314      	adds	r3, #20
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	623b      	str	r3, [r7, #32]
   return(result);
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008098:	63bb      	str	r3, [r7, #56]	; 0x38
 800809a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3314      	adds	r3, #20
 80080a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080a2:	633a      	str	r2, [r7, #48]	; 0x30
 80080a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080aa:	e841 2300 	strex	r3, r2, [r1]
 80080ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80080b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1e5      	bne.n	8008082 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	330c      	adds	r3, #12
 80080bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	e853 3f00 	ldrex	r3, [r3]
 80080c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080cc:	637b      	str	r3, [r7, #52]	; 0x34
 80080ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	330c      	adds	r3, #12
 80080d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080d6:	61fa      	str	r2, [r7, #28]
 80080d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080da:	69b9      	ldr	r1, [r7, #24]
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	e841 2300 	strex	r3, r2, [r1]
 80080e2:	617b      	str	r3, [r7, #20]
   return(result);
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d1e5      	bne.n	80080b6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080ea:	e002      	b.n	80080f2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80080ec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80080ee:	f7fa f813 	bl	8002118 <HAL_UART_TxCpltCallback>
}
 80080f2:	bf00      	nop
 80080f4:	3740      	adds	r7, #64	; 0x40
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f7ff ff7f 	bl	800800c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b09c      	sub	sp, #112	; 0x70
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008122:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800812e:	2b00      	cmp	r3, #0
 8008130:	d172      	bne.n	8008218 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008134:	2200      	movs	r2, #0
 8008136:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	330c      	adds	r3, #12
 800813e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008148:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800814a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800814e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	330c      	adds	r3, #12
 8008156:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008158:	65ba      	str	r2, [r7, #88]	; 0x58
 800815a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800815e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e5      	bne.n	8008138 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3314      	adds	r3, #20
 8008172:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008176:	e853 3f00 	ldrex	r3, [r3]
 800817a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	f023 0301 	bic.w	r3, r3, #1
 8008182:	667b      	str	r3, [r7, #100]	; 0x64
 8008184:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	3314      	adds	r3, #20
 800818a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800818c:	647a      	str	r2, [r7, #68]	; 0x44
 800818e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008192:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008194:	e841 2300 	strex	r3, r2, [r1]
 8008198:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800819a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1e5      	bne.n	800816c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3314      	adds	r3, #20
 80081a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	623b      	str	r3, [r7, #32]
   return(result);
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b6:	663b      	str	r3, [r7, #96]	; 0x60
 80081b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	3314      	adds	r3, #20
 80081be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081c0:	633a      	str	r2, [r7, #48]	; 0x30
 80081c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e5      	bne.n	80081a0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d6:	2220      	movs	r2, #32
 80081d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d119      	bne.n	8008218 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	330c      	adds	r3, #12
 80081ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	e853 3f00 	ldrex	r3, [r3]
 80081f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f023 0310 	bic.w	r3, r3, #16
 80081fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	330c      	adds	r3, #12
 8008202:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008204:	61fa      	str	r2, [r7, #28]
 8008206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	69b9      	ldr	r1, [r7, #24]
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	e841 2300 	strex	r3, r2, [r1]
 8008210:	617b      	str	r3, [r7, #20]
   return(result);
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d1e5      	bne.n	80081e4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	2b01      	cmp	r3, #1
 800821e:	d106      	bne.n	800822e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008222:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008224:	4619      	mov	r1, r3
 8008226:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008228:	f7ff ff0e 	bl	8008048 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800822c:	e002      	b.n	8008234 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800822e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008230:	f7f9 ff7c 	bl	800212c <HAL_UART_RxCpltCallback>
}
 8008234:	bf00      	nop
 8008236:	3770      	adds	r7, #112	; 0x70
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824e:	2b01      	cmp	r3, #1
 8008250:	d108      	bne.n	8008264 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008256:	085b      	lsrs	r3, r3, #1
 8008258:	b29b      	uxth	r3, r3
 800825a:	4619      	mov	r1, r3
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f7ff fef3 	bl	8008048 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008262:	e002      	b.n	800826a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff fedb 	bl	8008020 <HAL_UART_RxHalfCpltCallback>
}
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	bf0c      	ite	eq
 8008292:	2301      	moveq	r3, #1
 8008294:	2300      	movne	r3, #0
 8008296:	b2db      	uxtb	r3, r3
 8008298:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b21      	cmp	r3, #33	; 0x21
 80082a4:	d108      	bne.n	80082b8 <UART_DMAError+0x46>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	2200      	movs	r2, #0
 80082b0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80082b2:	68b8      	ldr	r0, [r7, #8]
 80082b4:	f000 f934 	bl	8008520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695b      	ldr	r3, [r3, #20]
 80082be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c2:	2b40      	cmp	r3, #64	; 0x40
 80082c4:	bf0c      	ite	eq
 80082c6:	2301      	moveq	r3, #1
 80082c8:	2300      	movne	r3, #0
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b22      	cmp	r3, #34	; 0x22
 80082d8:	d108      	bne.n	80082ec <UART_DMAError+0x7a>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80082e6:	68b8      	ldr	r0, [r7, #8]
 80082e8:	f000 f942 	bl	8008570 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f0:	f043 0210 	orr.w	r2, r3, #16
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082f8:	68b8      	ldr	r0, [r7, #8]
 80082fa:	f7ff fe9b 	bl	8008034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b090      	sub	sp, #64	; 0x40
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
 800830e:	60b9      	str	r1, [r7, #8]
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	4613      	mov	r3, r2
 8008314:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008316:	e050      	b.n	80083ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800831a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831e:	d04c      	beq.n	80083ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008320:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008322:	2b00      	cmp	r3, #0
 8008324:	d007      	beq.n	8008336 <UART_WaitOnFlagUntilTimeout+0x30>
 8008326:	f7fb fd7d 	bl	8003e24 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008332:	429a      	cmp	r2, r3
 8008334:	d241      	bcs.n	80083ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	330c      	adds	r3, #12
 800833c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800834c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	330c      	adds	r3, #12
 8008354:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008356:	637a      	str	r2, [r7, #52]	; 0x34
 8008358:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800835c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e5      	bne.n	8008336 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	3314      	adds	r3, #20
 8008370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	e853 3f00 	ldrex	r3, [r3]
 8008378:	613b      	str	r3, [r7, #16]
   return(result);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f023 0301 	bic.w	r3, r3, #1
 8008380:	63bb      	str	r3, [r7, #56]	; 0x38
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3314      	adds	r3, #20
 8008388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800838a:	623a      	str	r2, [r7, #32]
 800838c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838e:	69f9      	ldr	r1, [r7, #28]
 8008390:	6a3a      	ldr	r2, [r7, #32]
 8008392:	e841 2300 	strex	r3, r2, [r1]
 8008396:	61bb      	str	r3, [r7, #24]
   return(result);
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1e5      	bne.n	800836a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2220      	movs	r2, #32
 80083a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e00f      	b.n	80083da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4013      	ands	r3, r2
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	bf0c      	ite	eq
 80083ca:	2301      	moveq	r3, #1
 80083cc:	2300      	movne	r3, #0
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	461a      	mov	r2, r3
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d09f      	beq.n	8008318 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3740      	adds	r7, #64	; 0x40
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
	...

080083e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b098      	sub	sp, #96	; 0x60
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	4613      	mov	r3, r2
 80083f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80083f2:	68ba      	ldr	r2, [r7, #8]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	88fa      	ldrh	r2, [r7, #6]
 80083fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2222      	movs	r2, #34	; 0x22
 8008408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	4a40      	ldr	r2, [pc, #256]	; (8008514 <UART_Start_Receive_DMA+0x130>)
 8008412:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	4a3f      	ldr	r2, [pc, #252]	; (8008518 <UART_Start_Receive_DMA+0x134>)
 800841a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	4a3e      	ldr	r2, [pc, #248]	; (800851c <UART_Start_Receive_DMA+0x138>)
 8008422:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008428:	2200      	movs	r2, #0
 800842a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800842c:	f107 0308 	add.w	r3, r7, #8
 8008430:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3304      	adds	r3, #4
 800843c:	4619      	mov	r1, r3
 800843e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	f7fc fd80 	bl	8004f48 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008448:	2300      	movs	r3, #0
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	613b      	str	r3, [r7, #16]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	613b      	str	r3, [r7, #16]
 800845c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d019      	beq.n	80084a2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	330c      	adds	r3, #12
 8008474:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008478:	e853 3f00 	ldrex	r3, [r3]
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008484:	65bb      	str	r3, [r7, #88]	; 0x58
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	330c      	adds	r3, #12
 800848c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800848e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008490:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008492:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008494:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008496:	e841 2300 	strex	r3, r2, [r1]
 800849a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800849c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1e5      	bne.n	800846e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3314      	adds	r3, #20
 80084a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	657b      	str	r3, [r7, #84]	; 0x54
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	3314      	adds	r3, #20
 80084c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084c2:	63ba      	str	r2, [r7, #56]	; 0x38
 80084c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80084c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e5      	bne.n	80084a2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3314      	adds	r3, #20
 80084dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	e853 3f00 	ldrex	r3, [r3]
 80084e4:	617b      	str	r3, [r7, #20]
   return(result);
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ec:	653b      	str	r3, [r7, #80]	; 0x50
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3314      	adds	r3, #20
 80084f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084f6:	627a      	str	r2, [r7, #36]	; 0x24
 80084f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fa:	6a39      	ldr	r1, [r7, #32]
 80084fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fe:	e841 2300 	strex	r3, r2, [r1]
 8008502:	61fb      	str	r3, [r7, #28]
   return(result);
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d1e5      	bne.n	80084d6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3760      	adds	r7, #96	; 0x60
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	08008117 	.word	0x08008117
 8008518:	0800823d 	.word	0x0800823d
 800851c:	08008273 	.word	0x08008273

08008520 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008520:	b480      	push	{r7}
 8008522:	b089      	sub	sp, #36	; 0x24
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	330c      	adds	r3, #12
 800852e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	60bb      	str	r3, [r7, #8]
   return(result);
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800853e:	61fb      	str	r3, [r7, #28]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	330c      	adds	r3, #12
 8008546:	69fa      	ldr	r2, [r7, #28]
 8008548:	61ba      	str	r2, [r7, #24]
 800854a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	6979      	ldr	r1, [r7, #20]
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	613b      	str	r3, [r7, #16]
   return(result);
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e5      	bne.n	8008528 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2220      	movs	r2, #32
 8008560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008564:	bf00      	nop
 8008566:	3724      	adds	r7, #36	; 0x24
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008570:	b480      	push	{r7}
 8008572:	b095      	sub	sp, #84	; 0x54
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	330c      	adds	r3, #12
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800858e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	330c      	adds	r3, #12
 8008596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008598:	643a      	str	r2, [r7, #64]	; 0x40
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800859e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e5      	bne.n	8008578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3314      	adds	r3, #20
 80085b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	e853 3f00 	ldrex	r3, [r3]
 80085ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	f023 0301 	bic.w	r3, r3, #1
 80085c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3314      	adds	r3, #20
 80085ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d4:	e841 2300 	strex	r3, r2, [r1]
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1e5      	bne.n	80085ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d119      	bne.n	800861c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	330c      	adds	r3, #12
 80085ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	f023 0310 	bic.w	r3, r3, #16
 80085fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	330c      	adds	r3, #12
 8008606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008608:	61ba      	str	r2, [r7, #24]
 800860a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	6979      	ldr	r1, [r7, #20]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	613b      	str	r3, [r7, #16]
   return(result);
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800862a:	bf00      	nop
 800862c:	3754      	adds	r7, #84	; 0x54
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008636:	b580      	push	{r7, lr}
 8008638:	b084      	sub	sp, #16
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008650:	68f8      	ldr	r0, [r7, #12]
 8008652:	f7ff fcef 	bl	8008034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800865e:	b480      	push	{r7}
 8008660:	b085      	sub	sp, #20
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b21      	cmp	r3, #33	; 0x21
 8008670:	d13e      	bne.n	80086f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867a:	d114      	bne.n	80086a6 <UART_Transmit_IT+0x48>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d110      	bne.n	80086a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a1b      	ldr	r3, [r3, #32]
 8008688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	1c9a      	adds	r2, r3, #2
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	621a      	str	r2, [r3, #32]
 80086a4:	e008      	b.n	80086b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	1c59      	adds	r1, r3, #1
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6211      	str	r1, [r2, #32]
 80086b0:	781a      	ldrb	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80086bc:	b29b      	uxth	r3, r3
 80086be:	3b01      	subs	r3, #1
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	4619      	mov	r1, r3
 80086c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10f      	bne.n	80086ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68da      	ldr	r2, [r3, #12]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e000      	b.n	80086f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086f0:	2302      	movs	r3, #2
  }
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2220      	movs	r2, #32
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7f9 fcfa 	bl	8002118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b08c      	sub	sp, #48	; 0x30
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b22      	cmp	r3, #34	; 0x22
 8008740:	f040 80ab 	bne.w	800889a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874c:	d117      	bne.n	800877e <UART_Receive_IT+0x50>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	691b      	ldr	r3, [r3, #16]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d113      	bne.n	800877e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008756:	2300      	movs	r3, #0
 8008758:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800876c:	b29a      	uxth	r2, r3
 800876e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	1c9a      	adds	r2, r3, #2
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	629a      	str	r2, [r3, #40]	; 0x28
 800877c:	e026      	b.n	80087cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008782:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008784:	2300      	movs	r3, #0
 8008786:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008790:	d007      	beq.n	80087a2 <UART_Receive_IT+0x74>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10a      	bne.n	80087b0 <UART_Receive_IT+0x82>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d106      	bne.n	80087b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ac:	701a      	strb	r2, [r3, #0]
 80087ae:	e008      	b.n	80087c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	3b01      	subs	r3, #1
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	4619      	mov	r1, r3
 80087da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d15a      	bne.n	8008896 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f022 0220 	bic.w	r2, r2, #32
 80087ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695a      	ldr	r2, [r3, #20]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f022 0201 	bic.w	r2, r2, #1
 800880e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2220      	movs	r2, #32
 8008814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881c:	2b01      	cmp	r3, #1
 800881e:	d135      	bne.n	800888c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	330c      	adds	r3, #12
 800882c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	e853 3f00 	ldrex	r3, [r3]
 8008834:	613b      	str	r3, [r7, #16]
   return(result);
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f023 0310 	bic.w	r3, r3, #16
 800883c:	627b      	str	r3, [r7, #36]	; 0x24
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	330c      	adds	r3, #12
 8008844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008846:	623a      	str	r2, [r7, #32]
 8008848:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884a:	69f9      	ldr	r1, [r7, #28]
 800884c:	6a3a      	ldr	r2, [r7, #32]
 800884e:	e841 2300 	strex	r3, r2, [r1]
 8008852:	61bb      	str	r3, [r7, #24]
   return(result);
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d1e5      	bne.n	8008826 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0310 	and.w	r3, r3, #16
 8008864:	2b10      	cmp	r3, #16
 8008866:	d10a      	bne.n	800887e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	60fb      	str	r3, [r7, #12]
 800887c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff fbdf 	bl	8008048 <HAL_UARTEx_RxEventCallback>
 800888a:	e002      	b.n	8008892 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7f9 fc4d 	bl	800212c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	e002      	b.n	800889c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	e000      	b.n	800889c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800889a:	2302      	movs	r3, #2
  }
}
 800889c:	4618      	mov	r0, r3
 800889e:	3730      	adds	r7, #48	; 0x30
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088a8:	b0c0      	sub	sp, #256	; 0x100
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80088bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c0:	68d9      	ldr	r1, [r3, #12]
 80088c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	ea40 0301 	orr.w	r3, r0, r1
 80088cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	431a      	orrs	r2, r3
 80088dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	431a      	orrs	r2, r3
 80088e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80088fc:	f021 010c 	bic.w	r1, r1, #12
 8008900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800890a:	430b      	orrs	r3, r1
 800890c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800890e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800891a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800891e:	6999      	ldr	r1, [r3, #24]
 8008920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	ea40 0301 	orr.w	r3, r0, r1
 800892a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800892c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	4b8f      	ldr	r3, [pc, #572]	; (8008b70 <UART_SetConfig+0x2cc>)
 8008934:	429a      	cmp	r2, r3
 8008936:	d005      	beq.n	8008944 <UART_SetConfig+0xa0>
 8008938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800893c:	681a      	ldr	r2, [r3, #0]
 800893e:	4b8d      	ldr	r3, [pc, #564]	; (8008b74 <UART_SetConfig+0x2d0>)
 8008940:	429a      	cmp	r2, r3
 8008942:	d104      	bne.n	800894e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008944:	f7fd f908 	bl	8005b58 <HAL_RCC_GetPCLK2Freq>
 8008948:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800894c:	e003      	b.n	8008956 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800894e:	f7fd f8ef 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 8008952:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800895a:	69db      	ldr	r3, [r3, #28]
 800895c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008960:	f040 810c 	bne.w	8008b7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008964:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008968:	2200      	movs	r2, #0
 800896a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800896e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008972:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008976:	4622      	mov	r2, r4
 8008978:	462b      	mov	r3, r5
 800897a:	1891      	adds	r1, r2, r2
 800897c:	65b9      	str	r1, [r7, #88]	; 0x58
 800897e:	415b      	adcs	r3, r3
 8008980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008982:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008986:	4621      	mov	r1, r4
 8008988:	eb12 0801 	adds.w	r8, r2, r1
 800898c:	4629      	mov	r1, r5
 800898e:	eb43 0901 	adc.w	r9, r3, r1
 8008992:	f04f 0200 	mov.w	r2, #0
 8008996:	f04f 0300 	mov.w	r3, #0
 800899a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800899e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80089a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80089a6:	4690      	mov	r8, r2
 80089a8:	4699      	mov	r9, r3
 80089aa:	4623      	mov	r3, r4
 80089ac:	eb18 0303 	adds.w	r3, r8, r3
 80089b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80089b4:	462b      	mov	r3, r5
 80089b6:	eb49 0303 	adc.w	r3, r9, r3
 80089ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80089ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80089d2:	460b      	mov	r3, r1
 80089d4:	18db      	adds	r3, r3, r3
 80089d6:	653b      	str	r3, [r7, #80]	; 0x50
 80089d8:	4613      	mov	r3, r2
 80089da:	eb42 0303 	adc.w	r3, r2, r3
 80089de:	657b      	str	r3, [r7, #84]	; 0x54
 80089e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80089e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80089e8:	f7f8 fac8 	bl	8000f7c <__aeabi_uldivmod>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4b61      	ldr	r3, [pc, #388]	; (8008b78 <UART_SetConfig+0x2d4>)
 80089f2:	fba3 2302 	umull	r2, r3, r3, r2
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	011c      	lsls	r4, r3, #4
 80089fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089fe:	2200      	movs	r2, #0
 8008a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008a08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008a0c:	4642      	mov	r2, r8
 8008a0e:	464b      	mov	r3, r9
 8008a10:	1891      	adds	r1, r2, r2
 8008a12:	64b9      	str	r1, [r7, #72]	; 0x48
 8008a14:	415b      	adcs	r3, r3
 8008a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	eb12 0a01 	adds.w	sl, r2, r1
 8008a22:	4649      	mov	r1, r9
 8008a24:	eb43 0b01 	adc.w	fp, r3, r1
 8008a28:	f04f 0200 	mov.w	r2, #0
 8008a2c:	f04f 0300 	mov.w	r3, #0
 8008a30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008a34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008a38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a3c:	4692      	mov	sl, r2
 8008a3e:	469b      	mov	fp, r3
 8008a40:	4643      	mov	r3, r8
 8008a42:	eb1a 0303 	adds.w	r3, sl, r3
 8008a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	eb4b 0303 	adc.w	r3, fp, r3
 8008a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008a64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	18db      	adds	r3, r3, r3
 8008a6c:	643b      	str	r3, [r7, #64]	; 0x40
 8008a6e:	4613      	mov	r3, r2
 8008a70:	eb42 0303 	adc.w	r3, r2, r3
 8008a74:	647b      	str	r3, [r7, #68]	; 0x44
 8008a76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008a7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008a7e:	f7f8 fa7d 	bl	8000f7c <__aeabi_uldivmod>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	4611      	mov	r1, r2
 8008a88:	4b3b      	ldr	r3, [pc, #236]	; (8008b78 <UART_SetConfig+0x2d4>)
 8008a8a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a8e:	095b      	lsrs	r3, r3, #5
 8008a90:	2264      	movs	r2, #100	; 0x64
 8008a92:	fb02 f303 	mul.w	r3, r2, r3
 8008a96:	1acb      	subs	r3, r1, r3
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008a9e:	4b36      	ldr	r3, [pc, #216]	; (8008b78 <UART_SetConfig+0x2d4>)
 8008aa0:	fba3 2302 	umull	r2, r3, r3, r2
 8008aa4:	095b      	lsrs	r3, r3, #5
 8008aa6:	005b      	lsls	r3, r3, #1
 8008aa8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008aac:	441c      	add	r4, r3
 8008aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ab8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008abc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ac0:	4642      	mov	r2, r8
 8008ac2:	464b      	mov	r3, r9
 8008ac4:	1891      	adds	r1, r2, r2
 8008ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ac8:	415b      	adcs	r3, r3
 8008aca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008acc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	1851      	adds	r1, r2, r1
 8008ad4:	6339      	str	r1, [r7, #48]	; 0x30
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	414b      	adcs	r3, r1
 8008ada:	637b      	str	r3, [r7, #52]	; 0x34
 8008adc:	f04f 0200 	mov.w	r2, #0
 8008ae0:	f04f 0300 	mov.w	r3, #0
 8008ae4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008ae8:	4659      	mov	r1, fp
 8008aea:	00cb      	lsls	r3, r1, #3
 8008aec:	4651      	mov	r1, sl
 8008aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008af2:	4651      	mov	r1, sl
 8008af4:	00ca      	lsls	r2, r1, #3
 8008af6:	4610      	mov	r0, r2
 8008af8:	4619      	mov	r1, r3
 8008afa:	4603      	mov	r3, r0
 8008afc:	4642      	mov	r2, r8
 8008afe:	189b      	adds	r3, r3, r2
 8008b00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b04:	464b      	mov	r3, r9
 8008b06:	460a      	mov	r2, r1
 8008b08:	eb42 0303 	adc.w	r3, r2, r3
 8008b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008b1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008b20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008b24:	460b      	mov	r3, r1
 8008b26:	18db      	adds	r3, r3, r3
 8008b28:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	eb42 0303 	adc.w	r3, r2, r3
 8008b30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008b36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008b3a:	f7f8 fa1f 	bl	8000f7c <__aeabi_uldivmod>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	4b0d      	ldr	r3, [pc, #52]	; (8008b78 <UART_SetConfig+0x2d4>)
 8008b44:	fba3 1302 	umull	r1, r3, r3, r2
 8008b48:	095b      	lsrs	r3, r3, #5
 8008b4a:	2164      	movs	r1, #100	; 0x64
 8008b4c:	fb01 f303 	mul.w	r3, r1, r3
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	3332      	adds	r3, #50	; 0x32
 8008b56:	4a08      	ldr	r2, [pc, #32]	; (8008b78 <UART_SetConfig+0x2d4>)
 8008b58:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5c:	095b      	lsrs	r3, r3, #5
 8008b5e:	f003 0207 	and.w	r2, r3, #7
 8008b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4422      	add	r2, r4
 8008b6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b6c:	e105      	b.n	8008d7a <UART_SetConfig+0x4d6>
 8008b6e:	bf00      	nop
 8008b70:	40011000 	.word	0x40011000
 8008b74:	40011400 	.word	0x40011400
 8008b78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b80:	2200      	movs	r2, #0
 8008b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008b8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008b8e:	4642      	mov	r2, r8
 8008b90:	464b      	mov	r3, r9
 8008b92:	1891      	adds	r1, r2, r2
 8008b94:	6239      	str	r1, [r7, #32]
 8008b96:	415b      	adcs	r3, r3
 8008b98:	627b      	str	r3, [r7, #36]	; 0x24
 8008b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b9e:	4641      	mov	r1, r8
 8008ba0:	1854      	adds	r4, r2, r1
 8008ba2:	4649      	mov	r1, r9
 8008ba4:	eb43 0501 	adc.w	r5, r3, r1
 8008ba8:	f04f 0200 	mov.w	r2, #0
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	00eb      	lsls	r3, r5, #3
 8008bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008bb6:	00e2      	lsls	r2, r4, #3
 8008bb8:	4614      	mov	r4, r2
 8008bba:	461d      	mov	r5, r3
 8008bbc:	4643      	mov	r3, r8
 8008bbe:	18e3      	adds	r3, r4, r3
 8008bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	eb45 0303 	adc.w	r3, r5, r3
 8008bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008bde:	f04f 0200 	mov.w	r2, #0
 8008be2:	f04f 0300 	mov.w	r3, #0
 8008be6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008bea:	4629      	mov	r1, r5
 8008bec:	008b      	lsls	r3, r1, #2
 8008bee:	4621      	mov	r1, r4
 8008bf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	008a      	lsls	r2, r1, #2
 8008bf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008bfc:	f7f8 f9be 	bl	8000f7c <__aeabi_uldivmod>
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	4b60      	ldr	r3, [pc, #384]	; (8008d88 <UART_SetConfig+0x4e4>)
 8008c06:	fba3 2302 	umull	r2, r3, r3, r2
 8008c0a:	095b      	lsrs	r3, r3, #5
 8008c0c:	011c      	lsls	r4, r3, #4
 8008c0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c12:	2200      	movs	r2, #0
 8008c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c18:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008c1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008c20:	4642      	mov	r2, r8
 8008c22:	464b      	mov	r3, r9
 8008c24:	1891      	adds	r1, r2, r2
 8008c26:	61b9      	str	r1, [r7, #24]
 8008c28:	415b      	adcs	r3, r3
 8008c2a:	61fb      	str	r3, [r7, #28]
 8008c2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c30:	4641      	mov	r1, r8
 8008c32:	1851      	adds	r1, r2, r1
 8008c34:	6139      	str	r1, [r7, #16]
 8008c36:	4649      	mov	r1, r9
 8008c38:	414b      	adcs	r3, r1
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c48:	4659      	mov	r1, fp
 8008c4a:	00cb      	lsls	r3, r1, #3
 8008c4c:	4651      	mov	r1, sl
 8008c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c52:	4651      	mov	r1, sl
 8008c54:	00ca      	lsls	r2, r1, #3
 8008c56:	4610      	mov	r0, r2
 8008c58:	4619      	mov	r1, r3
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	189b      	adds	r3, r3, r2
 8008c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c64:	464b      	mov	r3, r9
 8008c66:	460a      	mov	r2, r1
 8008c68:	eb42 0303 	adc.w	r3, r2, r3
 8008c6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	67bb      	str	r3, [r7, #120]	; 0x78
 8008c7a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008c7c:	f04f 0200 	mov.w	r2, #0
 8008c80:	f04f 0300 	mov.w	r3, #0
 8008c84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008c88:	4649      	mov	r1, r9
 8008c8a:	008b      	lsls	r3, r1, #2
 8008c8c:	4641      	mov	r1, r8
 8008c8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c92:	4641      	mov	r1, r8
 8008c94:	008a      	lsls	r2, r1, #2
 8008c96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008c9a:	f7f8 f96f 	bl	8000f7c <__aeabi_uldivmod>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	4b39      	ldr	r3, [pc, #228]	; (8008d88 <UART_SetConfig+0x4e4>)
 8008ca4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	2164      	movs	r1, #100	; 0x64
 8008cac:	fb01 f303 	mul.w	r3, r1, r3
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	011b      	lsls	r3, r3, #4
 8008cb4:	3332      	adds	r3, #50	; 0x32
 8008cb6:	4a34      	ldr	r2, [pc, #208]	; (8008d88 <UART_SetConfig+0x4e4>)
 8008cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008cbc:	095b      	lsrs	r3, r3, #5
 8008cbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cc2:	441c      	add	r4, r3
 8008cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cc8:	2200      	movs	r2, #0
 8008cca:	673b      	str	r3, [r7, #112]	; 0x70
 8008ccc:	677a      	str	r2, [r7, #116]	; 0x74
 8008cce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	464b      	mov	r3, r9
 8008cd6:	1891      	adds	r1, r2, r2
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	415b      	adcs	r3, r3
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	1851      	adds	r1, r2, r1
 8008ce6:	6039      	str	r1, [r7, #0]
 8008ce8:	4649      	mov	r1, r9
 8008cea:	414b      	adcs	r3, r1
 8008cec:	607b      	str	r3, [r7, #4]
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cfa:	4659      	mov	r1, fp
 8008cfc:	00cb      	lsls	r3, r1, #3
 8008cfe:	4651      	mov	r1, sl
 8008d00:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d04:	4651      	mov	r1, sl
 8008d06:	00ca      	lsls	r2, r1, #3
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	4642      	mov	r2, r8
 8008d10:	189b      	adds	r3, r3, r2
 8008d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d14:	464b      	mov	r3, r9
 8008d16:	460a      	mov	r2, r1
 8008d18:	eb42 0303 	adc.w	r3, r2, r3
 8008d1c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2200      	movs	r2, #0
 8008d26:	663b      	str	r3, [r7, #96]	; 0x60
 8008d28:	667a      	str	r2, [r7, #100]	; 0x64
 8008d2a:	f04f 0200 	mov.w	r2, #0
 8008d2e:	f04f 0300 	mov.w	r3, #0
 8008d32:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008d36:	4649      	mov	r1, r9
 8008d38:	008b      	lsls	r3, r1, #2
 8008d3a:	4641      	mov	r1, r8
 8008d3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d40:	4641      	mov	r1, r8
 8008d42:	008a      	lsls	r2, r1, #2
 8008d44:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008d48:	f7f8 f918 	bl	8000f7c <__aeabi_uldivmod>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	460b      	mov	r3, r1
 8008d50:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <UART_SetConfig+0x4e4>)
 8008d52:	fba3 1302 	umull	r1, r3, r3, r2
 8008d56:	095b      	lsrs	r3, r3, #5
 8008d58:	2164      	movs	r1, #100	; 0x64
 8008d5a:	fb01 f303 	mul.w	r3, r1, r3
 8008d5e:	1ad3      	subs	r3, r2, r3
 8008d60:	011b      	lsls	r3, r3, #4
 8008d62:	3332      	adds	r3, #50	; 0x32
 8008d64:	4a08      	ldr	r2, [pc, #32]	; (8008d88 <UART_SetConfig+0x4e4>)
 8008d66:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6a:	095b      	lsrs	r3, r3, #5
 8008d6c:	f003 020f 	and.w	r2, r3, #15
 8008d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4422      	add	r2, r4
 8008d78:	609a      	str	r2, [r3, #8]
}
 8008d7a:	bf00      	nop
 8008d7c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008d80:	46bd      	mov	sp, r7
 8008d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d86:	bf00      	nop
 8008d88:	51eb851f 	.word	0x51eb851f

08008d8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008d90:	4904      	ldr	r1, [pc, #16]	; (8008da4 <MX_FATFS_Init+0x18>)
 8008d92:	4805      	ldr	r0, [pc, #20]	; (8008da8 <MX_FATFS_Init+0x1c>)
 8008d94:	f002 fd78 	bl	800b888 <FATFS_LinkDriver>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	4b03      	ldr	r3, [pc, #12]	; (8008dac <MX_FATFS_Init+0x20>)
 8008d9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008da0:	bf00      	nop
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20001b90 	.word	0x20001b90
 8008da8:	20000028 	.word	0x20000028
 8008dac:	20001b8c 	.word	0x20001b8c

08008db0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008db0:	b480      	push	{r7}
 8008db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008db4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8008dca:	79fb      	ldrb	r3, [r7, #7]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7f8 fe29 	bl	8001a24 <SD_disk_initialize>
 8008dd2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7f8 ff05 	bl	8001bf8 <SD_disk_status>
 8008dee:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8008e08:	7bf8      	ldrb	r0, [r7, #15]
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	68b9      	ldr	r1, [r7, #8]
 8008e10:	f7f8 ff08 	bl	8001c24 <SD_disk_read>
 8008e14:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	603b      	str	r3, [r7, #0]
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8008e2e:	7bf8      	ldrb	r0, [r7, #15]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	68b9      	ldr	r1, [r7, #8]
 8008e36:	f7f8 ff5f 	bl	8001cf8 <SD_disk_write>
 8008e3a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	603a      	str	r2, [r7, #0]
 8008e4e:	71fb      	strb	r3, [r7, #7]
 8008e50:	460b      	mov	r3, r1
 8008e52:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8008e54:	79b9      	ldrb	r1, [r7, #6]
 8008e56:	79fb      	ldrb	r3, [r7, #7]
 8008e58:	683a      	ldr	r2, [r7, #0]
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7f8 ffd0 	bl	8001e00 <SD_disk_ioctl>
 8008e60:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	4603      	mov	r3, r0
 8008e74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	4a08      	ldr	r2, [pc, #32]	; (8008e9c <disk_status+0x30>)
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	79fa      	ldrb	r2, [r7, #7]
 8008e84:	4905      	ldr	r1, [pc, #20]	; (8008e9c <disk_status+0x30>)
 8008e86:	440a      	add	r2, r1
 8008e88:	7a12      	ldrb	r2, [r2, #8]
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4798      	blx	r3
 8008e8e:	4603      	mov	r3, r0
 8008e90:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	20001bbc 	.word	0x20001bbc

08008ea0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008eae:	79fb      	ldrb	r3, [r7, #7]
 8008eb0:	4a0d      	ldr	r2, [pc, #52]	; (8008ee8 <disk_initialize+0x48>)
 8008eb2:	5cd3      	ldrb	r3, [r2, r3]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d111      	bne.n	8008edc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008eb8:	79fb      	ldrb	r3, [r7, #7]
 8008eba:	4a0b      	ldr	r2, [pc, #44]	; (8008ee8 <disk_initialize+0x48>)
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	4a09      	ldr	r2, [pc, #36]	; (8008ee8 <disk_initialize+0x48>)
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	79fa      	ldrb	r2, [r7, #7]
 8008ece:	4906      	ldr	r1, [pc, #24]	; (8008ee8 <disk_initialize+0x48>)
 8008ed0:	440a      	add	r2, r1
 8008ed2:	7a12      	ldrb	r2, [r2, #8]
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20001bbc 	.word	0x20001bbc

08008eec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008eec:	b590      	push	{r4, r7, lr}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	607a      	str	r2, [r7, #4]
 8008ef6:	603b      	str	r3, [r7, #0]
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	4a0a      	ldr	r2, [pc, #40]	; (8008f28 <disk_read+0x3c>)
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	689c      	ldr	r4, [r3, #8]
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	4a07      	ldr	r2, [pc, #28]	; (8008f28 <disk_read+0x3c>)
 8008f0c:	4413      	add	r3, r2
 8008f0e:	7a18      	ldrb	r0, [r3, #8]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	47a0      	blx	r4
 8008f18:	4603      	mov	r3, r0
 8008f1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	371c      	adds	r7, #28
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd90      	pop	{r4, r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20001bbc 	.word	0x20001bbc

08008f2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008f2c:	b590      	push	{r4, r7, lr}
 8008f2e:	b087      	sub	sp, #28
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	4a0a      	ldr	r2, [pc, #40]	; (8008f68 <disk_write+0x3c>)
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	68dc      	ldr	r4, [r3, #12]
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	4a07      	ldr	r2, [pc, #28]	; (8008f68 <disk_write+0x3c>)
 8008f4c:	4413      	add	r3, r2
 8008f4e:	7a18      	ldrb	r0, [r3, #8]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	68b9      	ldr	r1, [r7, #8]
 8008f56:	47a0      	blx	r4
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	371c      	adds	r7, #28
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd90      	pop	{r4, r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20001bbc 	.word	0x20001bbc

08008f6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	603a      	str	r2, [r7, #0]
 8008f76:	71fb      	strb	r3, [r7, #7]
 8008f78:	460b      	mov	r3, r1
 8008f7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	4a09      	ldr	r2, [pc, #36]	; (8008fa4 <disk_ioctl+0x38>)
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	79fa      	ldrb	r2, [r7, #7]
 8008f8a:	4906      	ldr	r1, [pc, #24]	; (8008fa4 <disk_ioctl+0x38>)
 8008f8c:	440a      	add	r2, r1
 8008f8e:	7a10      	ldrb	r0, [r2, #8]
 8008f90:	79b9      	ldrb	r1, [r7, #6]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4798      	blx	r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	73fb      	strb	r3, [r7, #15]
  return res;
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20001bbc 	.word	0x20001bbc

08008fa8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008fb8:	89fb      	ldrh	r3, [r7, #14]
 8008fba:	021b      	lsls	r3, r3, #8
 8008fbc:	b21a      	sxth	r2, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	b21b      	sxth	r3, r3
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	b21b      	sxth	r3, r3
 8008fc8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008fca:	89fb      	ldrh	r3, [r7, #14]
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3303      	adds	r3, #3
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	021b      	lsls	r3, r3, #8
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	3202      	adds	r2, #2
 8008ff0:	7812      	ldrb	r2, [r2, #0]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	021b      	lsls	r3, r3, #8
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	3201      	adds	r2, #1
 8008ffe:	7812      	ldrb	r2, [r2, #0]
 8009000:	4313      	orrs	r3, r2
 8009002:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	7812      	ldrb	r2, [r2, #0]
 800900c:	4313      	orrs	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009010:	68fb      	ldr	r3, [r7, #12]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
 8009026:	460b      	mov	r3, r1
 8009028:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	607a      	str	r2, [r7, #4]
 8009030:	887a      	ldrh	r2, [r7, #2]
 8009032:	b2d2      	uxtb	r2, r2
 8009034:	701a      	strb	r2, [r3, #0]
 8009036:	887b      	ldrh	r3, [r7, #2]
 8009038:	0a1b      	lsrs	r3, r3, #8
 800903a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	607a      	str	r2, [r7, #4]
 8009042:	887a      	ldrh	r2, [r7, #2]
 8009044:	b2d2      	uxtb	r2, r2
 8009046:	701a      	strb	r2, [r3, #0]
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	607a      	str	r2, [r7, #4]
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	701a      	strb	r2, [r3, #0]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	0a1b      	lsrs	r3, r3, #8
 800906e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	607a      	str	r2, [r7, #4]
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	b2d2      	uxtb	r2, r2
 800907a:	701a      	strb	r2, [r3, #0]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	0a1b      	lsrs	r3, r3, #8
 8009080:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	0a1b      	lsrs	r3, r3, #8
 8009092:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	b2d2      	uxtb	r2, r2
 800909e:	701a      	strb	r2, [r3, #0]
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80090ac:	b480      	push	{r7}
 80090ae:	b087      	sub	sp, #28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00d      	beq.n	80090e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	1c53      	adds	r3, r2, #1
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	1c59      	adds	r1, r3, #1
 80090d0:	6179      	str	r1, [r7, #20]
 80090d2:	7812      	ldrb	r2, [r2, #0]
 80090d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	3b01      	subs	r3, #1
 80090da:	607b      	str	r3, [r7, #4]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1f1      	bne.n	80090c6 <mem_cpy+0x1a>
	}
}
 80090e2:	bf00      	nop
 80090e4:	371c      	adds	r7, #28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80090ee:	b480      	push	{r7}
 80090f0:	b087      	sub	sp, #28
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	1c5a      	adds	r2, r3, #1
 8009102:	617a      	str	r2, [r7, #20]
 8009104:	68ba      	ldr	r2, [r7, #8]
 8009106:	b2d2      	uxtb	r2, r2
 8009108:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3b01      	subs	r3, #1
 800910e:	607b      	str	r3, [r7, #4]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f3      	bne.n	80090fe <mem_set+0x10>
}
 8009116:	bf00      	nop
 8009118:	bf00      	nop
 800911a:	371c      	adds	r7, #28
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009124:	b480      	push	{r7}
 8009126:	b089      	sub	sp, #36	; 0x24
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	1c5a      	adds	r2, r3, #1
 8009140:	61fa      	str	r2, [r7, #28]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	4619      	mov	r1, r3
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	61ba      	str	r2, [r7, #24]
 800914c:	781b      	ldrb	r3, [r3, #0]
 800914e:	1acb      	subs	r3, r1, r3
 8009150:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	3b01      	subs	r3, #1
 8009156:	607b      	str	r3, [r7, #4]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <mem_cmp+0x40>
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0eb      	beq.n	800913c <mem_cmp+0x18>

	return r;
 8009164:	697b      	ldr	r3, [r7, #20]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3724      	adds	r7, #36	; 0x24
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800917c:	e002      	b.n	8009184 <chk_chr+0x12>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3301      	adds	r3, #1
 8009182:	607b      	str	r3, [r7, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	781b      	ldrb	r3, [r3, #0]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <chk_chr+0x26>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	461a      	mov	r2, r3
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	4293      	cmp	r3, r2
 8009196:	d1f2      	bne.n	800917e <chk_chr+0xc>
	return *str;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	781b      	ldrb	r3, [r3, #0]
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d009      	beq.n	80091ca <lock_fs+0x22>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f002 fb9f 	bl	800b8fe <ff_req_grant>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <lock_fs+0x22>
 80091c6:	2301      	movs	r3, #1
 80091c8:	e000      	b.n	80091cc <lock_fs+0x24>
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00d      	beq.n	8009202 <unlock_fs+0x2e>
 80091e6:	78fb      	ldrb	r3, [r7, #3]
 80091e8:	2b0c      	cmp	r3, #12
 80091ea:	d00a      	beq.n	8009202 <unlock_fs+0x2e>
 80091ec:	78fb      	ldrb	r3, [r7, #3]
 80091ee:	2b0b      	cmp	r3, #11
 80091f0:	d007      	beq.n	8009202 <unlock_fs+0x2e>
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	2b0f      	cmp	r3, #15
 80091f6:	d004      	beq.n	8009202 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f002 fb93 	bl	800b928 <ff_rel_grant>
	}
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009216:	2300      	movs	r3, #0
 8009218:	60bb      	str	r3, [r7, #8]
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	e029      	b.n	8009274 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009220:	4a27      	ldr	r2, [pc, #156]	; (80092c0 <chk_lock+0xb4>)
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	011b      	lsls	r3, r3, #4
 8009226:	4413      	add	r3, r2
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d01d      	beq.n	800926a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800922e:	4a24      	ldr	r2, [pc, #144]	; (80092c0 <chk_lock+0xb4>)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	011b      	lsls	r3, r3, #4
 8009234:	4413      	add	r3, r2
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d116      	bne.n	800926e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009240:	4a1f      	ldr	r2, [pc, #124]	; (80092c0 <chk_lock+0xb4>)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	011b      	lsls	r3, r3, #4
 8009246:	4413      	add	r3, r2
 8009248:	3304      	adds	r3, #4
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009250:	429a      	cmp	r2, r3
 8009252:	d10c      	bne.n	800926e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009254:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <chk_lock+0xb4>)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	011b      	lsls	r3, r3, #4
 800925a:	4413      	add	r3, r2
 800925c:	3308      	adds	r3, #8
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009264:	429a      	cmp	r2, r3
 8009266:	d102      	bne.n	800926e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009268:	e007      	b.n	800927a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800926a:	2301      	movs	r3, #1
 800926c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	3301      	adds	r3, #1
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d9d2      	bls.n	8009220 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d109      	bne.n	8009294 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d102      	bne.n	800928c <chk_lock+0x80>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b02      	cmp	r3, #2
 800928a:	d101      	bne.n	8009290 <chk_lock+0x84>
 800928c:	2300      	movs	r3, #0
 800928e:	e010      	b.n	80092b2 <chk_lock+0xa6>
 8009290:	2312      	movs	r3, #18
 8009292:	e00e      	b.n	80092b2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d108      	bne.n	80092ac <chk_lock+0xa0>
 800929a:	4a09      	ldr	r2, [pc, #36]	; (80092c0 <chk_lock+0xb4>)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	4413      	add	r3, r2
 80092a2:	330c      	adds	r3, #12
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092aa:	d101      	bne.n	80092b0 <chk_lock+0xa4>
 80092ac:	2310      	movs	r3, #16
 80092ae:	e000      	b.n	80092b2 <chk_lock+0xa6>
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3714      	adds	r7, #20
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	20001b9c 	.word	0x20001b9c

080092c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80092ca:	2300      	movs	r3, #0
 80092cc:	607b      	str	r3, [r7, #4]
 80092ce:	e002      	b.n	80092d6 <enq_lock+0x12>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3301      	adds	r3, #1
 80092d4:	607b      	str	r3, [r7, #4]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d806      	bhi.n	80092ea <enq_lock+0x26>
 80092dc:	4a09      	ldr	r2, [pc, #36]	; (8009304 <enq_lock+0x40>)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	011b      	lsls	r3, r3, #4
 80092e2:	4413      	add	r3, r2
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1f2      	bne.n	80092d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	bf14      	ite	ne
 80092f0:	2301      	movne	r3, #1
 80092f2:	2300      	moveq	r3, #0
 80092f4:	b2db      	uxtb	r3, r3
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	20001b9c 	.word	0x20001b9c

08009308 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009312:	2300      	movs	r3, #0
 8009314:	60fb      	str	r3, [r7, #12]
 8009316:	e01f      	b.n	8009358 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009318:	4a41      	ldr	r2, [pc, #260]	; (8009420 <inc_lock+0x118>)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	4413      	add	r3, r2
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	429a      	cmp	r2, r3
 8009328:	d113      	bne.n	8009352 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800932a:	4a3d      	ldr	r2, [pc, #244]	; (8009420 <inc_lock+0x118>)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	011b      	lsls	r3, r3, #4
 8009330:	4413      	add	r3, r2
 8009332:	3304      	adds	r3, #4
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800933a:	429a      	cmp	r2, r3
 800933c:	d109      	bne.n	8009352 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800933e:	4a38      	ldr	r2, [pc, #224]	; (8009420 <inc_lock+0x118>)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	011b      	lsls	r3, r3, #4
 8009344:	4413      	add	r3, r2
 8009346:	3308      	adds	r3, #8
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800934e:	429a      	cmp	r2, r3
 8009350:	d006      	beq.n	8009360 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	3301      	adds	r3, #1
 8009356:	60fb      	str	r3, [r7, #12]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d9dc      	bls.n	8009318 <inc_lock+0x10>
 800935e:	e000      	b.n	8009362 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009360:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d132      	bne.n	80093ce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	e002      	b.n	8009374 <inc_lock+0x6c>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3301      	adds	r3, #1
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d806      	bhi.n	8009388 <inc_lock+0x80>
 800937a:	4a29      	ldr	r2, [pc, #164]	; (8009420 <inc_lock+0x118>)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	011b      	lsls	r3, r3, #4
 8009380:	4413      	add	r3, r2
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1f2      	bne.n	800936e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d101      	bne.n	8009392 <inc_lock+0x8a>
 800938e:	2300      	movs	r3, #0
 8009390:	e040      	b.n	8009414 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	4922      	ldr	r1, [pc, #136]	; (8009420 <inc_lock+0x118>)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	440b      	add	r3, r1
 800939e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689a      	ldr	r2, [r3, #8]
 80093a4:	491e      	ldr	r1, [pc, #120]	; (8009420 <inc_lock+0x118>)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	011b      	lsls	r3, r3, #4
 80093aa:	440b      	add	r3, r1
 80093ac:	3304      	adds	r3, #4
 80093ae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	695a      	ldr	r2, [r3, #20]
 80093b4:	491a      	ldr	r1, [pc, #104]	; (8009420 <inc_lock+0x118>)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	011b      	lsls	r3, r3, #4
 80093ba:	440b      	add	r3, r1
 80093bc:	3308      	adds	r3, #8
 80093be:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80093c0:	4a17      	ldr	r2, [pc, #92]	; (8009420 <inc_lock+0x118>)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	4413      	add	r3, r2
 80093c8:	330c      	adds	r3, #12
 80093ca:	2200      	movs	r2, #0
 80093cc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d009      	beq.n	80093e8 <inc_lock+0xe0>
 80093d4:	4a12      	ldr	r2, [pc, #72]	; (8009420 <inc_lock+0x118>)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	011b      	lsls	r3, r3, #4
 80093da:	4413      	add	r3, r2
 80093dc:	330c      	adds	r3, #12
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d001      	beq.n	80093e8 <inc_lock+0xe0>
 80093e4:	2300      	movs	r3, #0
 80093e6:	e015      	b.n	8009414 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d108      	bne.n	8009400 <inc_lock+0xf8>
 80093ee:	4a0c      	ldr	r2, [pc, #48]	; (8009420 <inc_lock+0x118>)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	4413      	add	r3, r2
 80093f6:	330c      	adds	r3, #12
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	3301      	adds	r3, #1
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	e001      	b.n	8009404 <inc_lock+0xfc>
 8009400:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009404:	4906      	ldr	r1, [pc, #24]	; (8009420 <inc_lock+0x118>)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	011b      	lsls	r3, r3, #4
 800940a:	440b      	add	r3, r1
 800940c:	330c      	adds	r3, #12
 800940e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	3301      	adds	r3, #1
}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	20001b9c 	.word	0x20001b9c

08009424 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3b01      	subs	r3, #1
 8009430:	607b      	str	r3, [r7, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d825      	bhi.n	8009484 <dec_lock+0x60>
		n = Files[i].ctr;
 8009438:	4a17      	ldr	r2, [pc, #92]	; (8009498 <dec_lock+0x74>)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	011b      	lsls	r3, r3, #4
 800943e:	4413      	add	r3, r2
 8009440:	330c      	adds	r3, #12
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009446:	89fb      	ldrh	r3, [r7, #14]
 8009448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800944c:	d101      	bne.n	8009452 <dec_lock+0x2e>
 800944e:	2300      	movs	r3, #0
 8009450:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009452:	89fb      	ldrh	r3, [r7, #14]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <dec_lock+0x3a>
 8009458:	89fb      	ldrh	r3, [r7, #14]
 800945a:	3b01      	subs	r3, #1
 800945c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800945e:	4a0e      	ldr	r2, [pc, #56]	; (8009498 <dec_lock+0x74>)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	011b      	lsls	r3, r3, #4
 8009464:	4413      	add	r3, r2
 8009466:	330c      	adds	r3, #12
 8009468:	89fa      	ldrh	r2, [r7, #14]
 800946a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800946c:	89fb      	ldrh	r3, [r7, #14]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d105      	bne.n	800947e <dec_lock+0x5a>
 8009472:	4a09      	ldr	r2, [pc, #36]	; (8009498 <dec_lock+0x74>)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	011b      	lsls	r3, r3, #4
 8009478:	4413      	add	r3, r2
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	737b      	strb	r3, [r7, #13]
 8009482:	e001      	b.n	8009488 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009484:	2302      	movs	r3, #2
 8009486:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009488:	7b7b      	ldrb	r3, [r7, #13]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20001b9c 	.word	0x20001b9c

0800949c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80094a4:	2300      	movs	r3, #0
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	e010      	b.n	80094cc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80094aa:	4a0d      	ldr	r2, [pc, #52]	; (80094e0 <clear_lock+0x44>)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	011b      	lsls	r3, r3, #4
 80094b0:	4413      	add	r3, r2
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d105      	bne.n	80094c6 <clear_lock+0x2a>
 80094ba:	4a09      	ldr	r2, [pc, #36]	; (80094e0 <clear_lock+0x44>)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	011b      	lsls	r3, r3, #4
 80094c0:	4413      	add	r3, r2
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d9eb      	bls.n	80094aa <clear_lock+0xe>
	}
}
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	20001b9c 	.word	0x20001b9c

080094e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	78db      	ldrb	r3, [r3, #3]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d034      	beq.n	8009562 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7858      	ldrb	r0, [r3, #1]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009508:	2301      	movs	r3, #1
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	f7ff fd0e 	bl	8008f2c <disk_write>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <sync_window+0x38>
			res = FR_DISK_ERR;
 8009516:	2301      	movs	r3, #1
 8009518:	73fb      	strb	r3, [r7, #15]
 800951a:	e022      	b.n	8009562 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	1ad2      	subs	r2, r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	69db      	ldr	r3, [r3, #28]
 800952e:	429a      	cmp	r2, r3
 8009530:	d217      	bcs.n	8009562 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	789b      	ldrb	r3, [r3, #2]
 8009536:	613b      	str	r3, [r7, #16]
 8009538:	e010      	b.n	800955c <sync_window+0x78>
					wsect += fs->fsize;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	4413      	add	r3, r2
 8009542:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	7858      	ldrb	r0, [r3, #1]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800954e:	2301      	movs	r3, #1
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	f7ff fceb 	bl	8008f2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	3b01      	subs	r3, #1
 800955a:	613b      	str	r3, [r7, #16]
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	2b01      	cmp	r3, #1
 8009560:	d8eb      	bhi.n	800953a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009562:	7bfb      	ldrb	r3, [r7, #15]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009576:	2300      	movs	r3, #0
 8009578:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	429a      	cmp	r2, r3
 8009582:	d01b      	beq.n	80095bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ffad 	bl	80094e4 <sync_window>
 800958a:	4603      	mov	r3, r0
 800958c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800958e:	7bfb      	ldrb	r3, [r7, #15]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d113      	bne.n	80095bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	7858      	ldrb	r0, [r3, #1]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800959e:	2301      	movs	r3, #1
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	f7ff fca3 	bl	8008eec <disk_read>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d004      	beq.n	80095b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80095ac:	f04f 33ff 	mov.w	r3, #4294967295
 80095b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
	...

080095c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b084      	sub	sp, #16
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7ff ff87 	bl	80094e4 <sync_window>
 80095d6:	4603      	mov	r3, r0
 80095d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80095da:	7bfb      	ldrb	r3, [r7, #15]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d158      	bne.n	8009692 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	2b03      	cmp	r3, #3
 80095e6:	d148      	bne.n	800967a <sync_fs+0xb2>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	791b      	ldrb	r3, [r3, #4]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d144      	bne.n	800967a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	3334      	adds	r3, #52	; 0x34
 80095f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095f8:	2100      	movs	r1, #0
 80095fa:	4618      	mov	r0, r3
 80095fc:	f7ff fd77 	bl	80090ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3334      	adds	r3, #52	; 0x34
 8009604:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009608:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800960c:	4618      	mov	r0, r3
 800960e:	f7ff fd06 	bl	800901e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	3334      	adds	r3, #52	; 0x34
 8009616:	4921      	ldr	r1, [pc, #132]	; (800969c <sync_fs+0xd4>)
 8009618:	4618      	mov	r0, r3
 800961a:	f7ff fd1b 	bl	8009054 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3334      	adds	r3, #52	; 0x34
 8009622:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009626:	491e      	ldr	r1, [pc, #120]	; (80096a0 <sync_fs+0xd8>)
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fd13 	bl	8009054 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	3334      	adds	r3, #52	; 0x34
 8009632:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	695b      	ldr	r3, [r3, #20]
 800963a:	4619      	mov	r1, r3
 800963c:	4610      	mov	r0, r2
 800963e:	f7ff fd09 	bl	8009054 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3334      	adds	r3, #52	; 0x34
 8009646:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	4619      	mov	r1, r3
 8009650:	4610      	mov	r0, r2
 8009652:	f7ff fcff 	bl	8009054 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	7858      	ldrb	r0, [r3, #1]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800966e:	2301      	movs	r3, #1
 8009670:	f7ff fc5c 	bl	8008f2c <disk_write>
			fs->fsi_flag = 0;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	785b      	ldrb	r3, [r3, #1]
 800967e:	2200      	movs	r2, #0
 8009680:	2100      	movs	r1, #0
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff fc72 	bl	8008f6c <disk_ioctl>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <sync_fs+0xca>
 800968e:	2301      	movs	r3, #1
 8009690:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009692:	7bfb      	ldrb	r3, [r7, #15]
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	41615252 	.word	0x41615252
 80096a0:	61417272 	.word	0x61417272

080096a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	3b02      	subs	r3, #2
 80096b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	3b02      	subs	r3, #2
 80096ba:	683a      	ldr	r2, [r7, #0]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d301      	bcc.n	80096c4 <clust2sect+0x20>
 80096c0:	2300      	movs	r3, #0
 80096c2:	e008      	b.n	80096d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	895b      	ldrh	r3, [r3, #10]
 80096c8:	461a      	mov	r2, r3
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	fb03 f202 	mul.w	r2, r3, r2
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	4413      	add	r3, r2
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d904      	bls.n	8009702 <get_fat+0x20>
 80096f8:	693b      	ldr	r3, [r7, #16]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	683a      	ldr	r2, [r7, #0]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d302      	bcc.n	8009708 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009702:	2301      	movs	r3, #1
 8009704:	617b      	str	r3, [r7, #20]
 8009706:	e08f      	b.n	8009828 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009708:	f04f 33ff 	mov.w	r3, #4294967295
 800970c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	2b03      	cmp	r3, #3
 8009714:	d062      	beq.n	80097dc <get_fat+0xfa>
 8009716:	2b03      	cmp	r3, #3
 8009718:	dc7c      	bgt.n	8009814 <get_fat+0x132>
 800971a:	2b01      	cmp	r3, #1
 800971c:	d002      	beq.n	8009724 <get_fat+0x42>
 800971e:	2b02      	cmp	r3, #2
 8009720:	d042      	beq.n	80097a8 <get_fat+0xc6>
 8009722:	e077      	b.n	8009814 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	085b      	lsrs	r3, r3, #1
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	0a5b      	lsrs	r3, r3, #9
 800973a:	4413      	add	r3, r2
 800973c:	4619      	mov	r1, r3
 800973e:	6938      	ldr	r0, [r7, #16]
 8009740:	f7ff ff14 	bl	800956c <move_window>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d167      	bne.n	800981a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	60fa      	str	r2, [r7, #12]
 8009750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	4413      	add	r3, r2
 8009758:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800975c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	0a5b      	lsrs	r3, r3, #9
 8009766:	4413      	add	r3, r2
 8009768:	4619      	mov	r1, r3
 800976a:	6938      	ldr	r0, [r7, #16]
 800976c:	f7ff fefe 	bl	800956c <move_window>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d153      	bne.n	800981e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	4413      	add	r3, r2
 8009780:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009784:	021b      	lsls	r3, r3, #8
 8009786:	461a      	mov	r2, r3
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4313      	orrs	r3, r2
 800978c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <get_fat+0xbc>
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	091b      	lsrs	r3, r3, #4
 800979c:	e002      	b.n	80097a4 <get_fat+0xc2>
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097a4:	617b      	str	r3, [r7, #20]
			break;
 80097a6:	e03f      	b.n	8009828 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	0a1b      	lsrs	r3, r3, #8
 80097b0:	4413      	add	r3, r2
 80097b2:	4619      	mov	r1, r3
 80097b4:	6938      	ldr	r0, [r7, #16]
 80097b6:	f7ff fed9 	bl	800956c <move_window>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d130      	bne.n	8009822 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	005b      	lsls	r3, r3, #1
 80097ca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80097ce:	4413      	add	r3, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff fbe9 	bl	8008fa8 <ld_word>
 80097d6:	4603      	mov	r3, r0
 80097d8:	617b      	str	r3, [r7, #20]
			break;
 80097da:	e025      	b.n	8009828 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	09db      	lsrs	r3, r3, #7
 80097e4:	4413      	add	r3, r2
 80097e6:	4619      	mov	r1, r3
 80097e8:	6938      	ldr	r0, [r7, #16]
 80097ea:	f7ff febf 	bl	800956c <move_window>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d118      	bne.n	8009826 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009802:	4413      	add	r3, r2
 8009804:	4618      	mov	r0, r3
 8009806:	f7ff fbe7 	bl	8008fd8 <ld_dword>
 800980a:	4603      	mov	r3, r0
 800980c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009810:	617b      	str	r3, [r7, #20]
			break;
 8009812:	e009      	b.n	8009828 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009814:	2301      	movs	r3, #1
 8009816:	617b      	str	r3, [r7, #20]
 8009818:	e006      	b.n	8009828 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800981a:	bf00      	nop
 800981c:	e004      	b.n	8009828 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800981e:	bf00      	nop
 8009820:	e002      	b.n	8009828 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009822:	bf00      	nop
 8009824:	e000      	b.n	8009828 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009826:	bf00      	nop
		}
	}

	return val;
 8009828:	697b      	ldr	r3, [r7, #20]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3718      	adds	r7, #24
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}

08009832 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009832:	b590      	push	{r4, r7, lr}
 8009834:	b089      	sub	sp, #36	; 0x24
 8009836:	af00      	add	r7, sp, #0
 8009838:	60f8      	str	r0, [r7, #12]
 800983a:	60b9      	str	r1, [r7, #8]
 800983c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800983e:	2302      	movs	r3, #2
 8009840:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b01      	cmp	r3, #1
 8009846:	f240 80d2 	bls.w	80099ee <put_fat+0x1bc>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	429a      	cmp	r2, r3
 8009852:	f080 80cc 	bcs.w	80099ee <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2b03      	cmp	r3, #3
 800985c:	f000 8096 	beq.w	800998c <put_fat+0x15a>
 8009860:	2b03      	cmp	r3, #3
 8009862:	f300 80cd 	bgt.w	8009a00 <put_fat+0x1ce>
 8009866:	2b01      	cmp	r3, #1
 8009868:	d002      	beq.n	8009870 <put_fat+0x3e>
 800986a:	2b02      	cmp	r3, #2
 800986c:	d06e      	beq.n	800994c <put_fat+0x11a>
 800986e:	e0c7      	b.n	8009a00 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	61bb      	str	r3, [r7, #24]
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	085b      	lsrs	r3, r3, #1
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	4413      	add	r3, r2
 800987c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	0a5b      	lsrs	r3, r3, #9
 8009886:	4413      	add	r3, r2
 8009888:	4619      	mov	r1, r3
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f7ff fe6e 	bl	800956c <move_window>
 8009890:	4603      	mov	r3, r0
 8009892:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009894:	7ffb      	ldrb	r3, [r7, #31]
 8009896:	2b00      	cmp	r3, #0
 8009898:	f040 80ab 	bne.w	80099f2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	1c59      	adds	r1, r3, #1
 80098a6:	61b9      	str	r1, [r7, #24]
 80098a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ac:	4413      	add	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00d      	beq.n	80098d6 <put_fat+0xa4>
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	b25b      	sxtb	r3, r3
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	b25a      	sxtb	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	011b      	lsls	r3, r3, #4
 80098cc:	b25b      	sxtb	r3, r3
 80098ce:	4313      	orrs	r3, r2
 80098d0:	b25b      	sxtb	r3, r3
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	e001      	b.n	80098da <put_fat+0xa8>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	697a      	ldr	r2, [r7, #20]
 80098dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2201      	movs	r2, #1
 80098e2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	0a5b      	lsrs	r3, r3, #9
 80098ec:	4413      	add	r3, r2
 80098ee:	4619      	mov	r1, r3
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	f7ff fe3b 	bl	800956c <move_window>
 80098f6:	4603      	mov	r3, r0
 80098f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098fa:	7ffb      	ldrb	r3, [r7, #31]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d17a      	bne.n	80099f6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990c:	4413      	add	r3, r2
 800990e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f003 0301 	and.w	r3, r3, #1
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <put_fat+0xf0>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	091b      	lsrs	r3, r3, #4
 800991e:	b2db      	uxtb	r3, r3
 8009920:	e00e      	b.n	8009940 <put_fat+0x10e>
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	b25b      	sxtb	r3, r3
 8009928:	f023 030f 	bic.w	r3, r3, #15
 800992c:	b25a      	sxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	0a1b      	lsrs	r3, r3, #8
 8009932:	b25b      	sxtb	r3, r3
 8009934:	f003 030f 	and.w	r3, r3, #15
 8009938:	b25b      	sxtb	r3, r3
 800993a:	4313      	orrs	r3, r2
 800993c:	b25b      	sxtb	r3, r3
 800993e:	b2db      	uxtb	r3, r3
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	70da      	strb	r2, [r3, #3]
			break;
 800994a:	e059      	b.n	8009a00 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	0a1b      	lsrs	r3, r3, #8
 8009954:	4413      	add	r3, r2
 8009956:	4619      	mov	r1, r3
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7ff fe07 	bl	800956c <move_window>
 800995e:	4603      	mov	r3, r0
 8009960:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009962:	7ffb      	ldrb	r3, [r7, #31]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d148      	bne.n	80099fa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	005b      	lsls	r3, r3, #1
 8009972:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009976:	4413      	add	r3, r2
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	b292      	uxth	r2, r2
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff fb4d 	bl	800901e <st_word>
			fs->wflag = 1;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	2201      	movs	r2, #1
 8009988:	70da      	strb	r2, [r3, #3]
			break;
 800998a:	e039      	b.n	8009a00 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	09db      	lsrs	r3, r3, #7
 8009994:	4413      	add	r3, r2
 8009996:	4619      	mov	r1, r3
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7ff fde7 	bl	800956c <move_window>
 800999e:	4603      	mov	r3, r0
 80099a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099a2:	7ffb      	ldrb	r3, [r7, #31]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d12a      	bne.n	80099fe <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80099bc:	4413      	add	r3, r2
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff fb0a 	bl	8008fd8 <ld_dword>
 80099c4:	4603      	mov	r3, r0
 80099c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80099ca:	4323      	orrs	r3, r4
 80099cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80099dc:	4413      	add	r3, r2
 80099de:	6879      	ldr	r1, [r7, #4]
 80099e0:	4618      	mov	r0, r3
 80099e2:	f7ff fb37 	bl	8009054 <st_dword>
			fs->wflag = 1;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2201      	movs	r2, #1
 80099ea:	70da      	strb	r2, [r3, #3]
			break;
 80099ec:	e008      	b.n	8009a00 <put_fat+0x1ce>
		}
	}
 80099ee:	bf00      	nop
 80099f0:	e006      	b.n	8009a00 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80099f2:	bf00      	nop
 80099f4:	e004      	b.n	8009a00 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80099f6:	bf00      	nop
 80099f8:	e002      	b.n	8009a00 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80099fa:	bf00      	nop
 80099fc:	e000      	b.n	8009a00 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80099fe:	bf00      	nop
	return res;
 8009a00:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3724      	adds	r7, #36	; 0x24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd90      	pop	{r4, r7, pc}

08009a0a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b088      	sub	sp, #32
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d904      	bls.n	8009a30 <remove_chain+0x26>
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	68ba      	ldr	r2, [r7, #8]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d301      	bcc.n	8009a34 <remove_chain+0x2a>
 8009a30:	2302      	movs	r3, #2
 8009a32:	e04b      	b.n	8009acc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d00c      	beq.n	8009a54 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3e:	6879      	ldr	r1, [r7, #4]
 8009a40:	69b8      	ldr	r0, [r7, #24]
 8009a42:	f7ff fef6 	bl	8009832 <put_fat>
 8009a46:	4603      	mov	r3, r0
 8009a48:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009a4a:	7ffb      	ldrb	r3, [r7, #31]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d001      	beq.n	8009a54 <remove_chain+0x4a>
 8009a50:	7ffb      	ldrb	r3, [r7, #31]
 8009a52:	e03b      	b.n	8009acc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f7ff fe43 	bl	80096e2 <get_fat>
 8009a5c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d031      	beq.n	8009ac8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d101      	bne.n	8009a6e <remove_chain+0x64>
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	e02e      	b.n	8009acc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a74:	d101      	bne.n	8009a7a <remove_chain+0x70>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e028      	b.n	8009acc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	69b8      	ldr	r0, [r7, #24]
 8009a80:	f7ff fed7 	bl	8009832 <put_fat>
 8009a84:	4603      	mov	r3, r0
 8009a86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009a88:	7ffb      	ldrb	r3, [r7, #31]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <remove_chain+0x88>
 8009a8e:	7ffb      	ldrb	r3, [r7, #31]
 8009a90:	e01c      	b.n	8009acc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	695a      	ldr	r2, [r3, #20]
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	3b02      	subs	r3, #2
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d20b      	bcs.n	8009ab8 <remove_chain+0xae>
			fs->free_clst++;
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	695b      	ldr	r3, [r3, #20]
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009aaa:	69bb      	ldr	r3, [r7, #24]
 8009aac:	791b      	ldrb	r3, [r3, #4]
 8009aae:	f043 0301 	orr.w	r3, r3, #1
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d3c6      	bcc.n	8009a54 <remove_chain+0x4a>
 8009ac6:	e000      	b.n	8009aca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009ac8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3720      	adds	r7, #32
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d10d      	bne.n	8009b06 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d004      	beq.n	8009b00 <create_chain+0x2c>
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	699b      	ldr	r3, [r3, #24]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d31b      	bcc.n	8009b38 <create_chain+0x64>
 8009b00:	2301      	movs	r3, #1
 8009b02:	61bb      	str	r3, [r7, #24]
 8009b04:	e018      	b.n	8009b38 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff fdea 	bl	80096e2 <get_fat>
 8009b0e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d801      	bhi.n	8009b1a <create_chain+0x46>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e070      	b.n	8009bfc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b20:	d101      	bne.n	8009b26 <create_chain+0x52>
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	e06a      	b.n	8009bfc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	68fa      	ldr	r2, [r7, #12]
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d201      	bcs.n	8009b34 <create_chain+0x60>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	e063      	b.n	8009bfc <create_chain+0x128>
		scl = clst;
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	3301      	adds	r3, #1
 8009b40:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	69fa      	ldr	r2, [r7, #28]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d307      	bcc.n	8009b5c <create_chain+0x88>
				ncl = 2;
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009b50:	69fa      	ldr	r2, [r7, #28]
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d901      	bls.n	8009b5c <create_chain+0x88>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e04f      	b.n	8009bfc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009b5c:	69f9      	ldr	r1, [r7, #28]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f7ff fdbf 	bl	80096e2 <get_fat>
 8009b64:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d00e      	beq.n	8009b8a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d003      	beq.n	8009b7a <create_chain+0xa6>
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b78:	d101      	bne.n	8009b7e <create_chain+0xaa>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	e03e      	b.n	8009bfc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009b7e:	69fa      	ldr	r2, [r7, #28]
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d1da      	bne.n	8009b3c <create_chain+0x68>
 8009b86:	2300      	movs	r3, #0
 8009b88:	e038      	b.n	8009bfc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009b8a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b90:	69f9      	ldr	r1, [r7, #28]
 8009b92:	6938      	ldr	r0, [r7, #16]
 8009b94:	f7ff fe4d 	bl	8009832 <put_fat>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009b9c:	7dfb      	ldrb	r3, [r7, #23]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d109      	bne.n	8009bb6 <create_chain+0xe2>
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d006      	beq.n	8009bb6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009ba8:	69fa      	ldr	r2, [r7, #28]
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6938      	ldr	r0, [r7, #16]
 8009bae:	f7ff fe40 	bl	8009832 <put_fat>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009bb6:	7dfb      	ldrb	r3, [r7, #23]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d116      	bne.n	8009bea <create_chain+0x116>
		fs->last_clst = ncl;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	69fa      	ldr	r2, [r7, #28]
 8009bc0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	695a      	ldr	r2, [r3, #20]
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	699b      	ldr	r3, [r3, #24]
 8009bca:	3b02      	subs	r3, #2
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d804      	bhi.n	8009bda <create_chain+0x106>
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	1e5a      	subs	r2, r3, #1
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	791b      	ldrb	r3, [r3, #4]
 8009bde:	f043 0301 	orr.w	r3, r3, #1
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	711a      	strb	r2, [r3, #4]
 8009be8:	e007      	b.n	8009bfa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009bea:	7dfb      	ldrb	r3, [r7, #23]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d102      	bne.n	8009bf6 <create_chain+0x122>
 8009bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf4:	e000      	b.n	8009bf8 <create_chain+0x124>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009bfa:	69fb      	ldr	r3, [r7, #28]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3720      	adds	r7, #32
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b087      	sub	sp, #28
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	3304      	adds	r3, #4
 8009c1a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	0a5b      	lsrs	r3, r3, #9
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	8952      	ldrh	r2, [r2, #10]
 8009c24:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	1d1a      	adds	r2, r3, #4
 8009c2e:	613a      	str	r2, [r7, #16]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <clmt_clust+0x3a>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e010      	b.n	8009c60 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009c3e:	697a      	ldr	r2, [r7, #20]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	429a      	cmp	r2, r3
 8009c44:	d307      	bcc.n	8009c56 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009c46:	697a      	ldr	r2, [r7, #20]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	3304      	adds	r3, #4
 8009c52:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009c54:	e7e9      	b.n	8009c2a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009c56:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	4413      	add	r3, r2
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	371c      	adds	r7, #28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c82:	d204      	bcs.n	8009c8e <dir_sdi+0x22>
 8009c84:	683b      	ldr	r3, [r7, #0]
 8009c86:	f003 031f 	and.w	r3, r3, #31
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d001      	beq.n	8009c92 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009c8e:	2302      	movs	r3, #2
 8009c90:	e063      	b.n	8009d5a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d106      	bne.n	8009cb2 <dir_sdi+0x46>
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d902      	bls.n	8009cb2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10c      	bne.n	8009cd2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	095b      	lsrs	r3, r3, #5
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	8912      	ldrh	r2, [r2, #8]
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d301      	bcc.n	8009cc8 <dir_sdi+0x5c>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e048      	b.n	8009d5a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	61da      	str	r2, [r3, #28]
 8009cd0:	e029      	b.n	8009d26 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	895b      	ldrh	r3, [r3, #10]
 8009cd6:	025b      	lsls	r3, r3, #9
 8009cd8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009cda:	e019      	b.n	8009d10 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6979      	ldr	r1, [r7, #20]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff fcfe 	bl	80096e2 <get_fat>
 8009ce6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cee:	d101      	bne.n	8009cf4 <dir_sdi+0x88>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e032      	b.n	8009d5a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d904      	bls.n	8009d04 <dir_sdi+0x98>
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d301      	bcc.n	8009d08 <dir_sdi+0x9c>
 8009d04:	2302      	movs	r3, #2
 8009d06:	e028      	b.n	8009d5a <dir_sdi+0xee>
			ofs -= csz;
 8009d08:	683a      	ldr	r2, [r7, #0]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d2e1      	bcs.n	8009cdc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009d18:	6979      	ldr	r1, [r7, #20]
 8009d1a:	6938      	ldr	r0, [r7, #16]
 8009d1c:	f7ff fcc2 	bl	80096a4 <clust2sect>
 8009d20:	4602      	mov	r2, r0
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	697a      	ldr	r2, [r7, #20]
 8009d2a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <dir_sdi+0xcc>
 8009d34:	2302      	movs	r3, #2
 8009d36:	e010      	b.n	8009d5a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	69da      	ldr	r2, [r3, #28]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	0a5b      	lsrs	r3, r3, #9
 8009d40:	441a      	add	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d52:	441a      	add	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b086      	sub	sp, #24
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	695b      	ldr	r3, [r3, #20]
 8009d76:	3320      	adds	r3, #32
 8009d78:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	69db      	ldr	r3, [r3, #28]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d003      	beq.n	8009d8a <dir_next+0x28>
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d88:	d301      	bcc.n	8009d8e <dir_next+0x2c>
 8009d8a:	2304      	movs	r3, #4
 8009d8c:	e0aa      	b.n	8009ee4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f040 8098 	bne.w	8009eca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	69db      	ldr	r3, [r3, #28]
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10b      	bne.n	8009dc4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	095b      	lsrs	r3, r3, #5
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	8912      	ldrh	r2, [r2, #8]
 8009db4:	4293      	cmp	r3, r2
 8009db6:	f0c0 8088 	bcc.w	8009eca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	61da      	str	r2, [r3, #28]
 8009dc0:	2304      	movs	r3, #4
 8009dc2:	e08f      	b.n	8009ee4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	0a5b      	lsrs	r3, r3, #9
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	8952      	ldrh	r2, [r2, #10]
 8009dcc:	3a01      	subs	r2, #1
 8009dce:	4013      	ands	r3, r2
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d17a      	bne.n	8009eca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7ff fc80 	bl	80096e2 <get_fat>
 8009de2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d801      	bhi.n	8009dee <dir_next+0x8c>
 8009dea:	2302      	movs	r3, #2
 8009dec:	e07a      	b.n	8009ee4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009df4:	d101      	bne.n	8009dfa <dir_next+0x98>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e074      	b.n	8009ee4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	699b      	ldr	r3, [r3, #24]
 8009dfe:	697a      	ldr	r2, [r7, #20]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d358      	bcc.n	8009eb6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d104      	bne.n	8009e14 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	61da      	str	r2, [r3, #28]
 8009e10:	2304      	movs	r3, #4
 8009e12:	e067      	b.n	8009ee4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	699b      	ldr	r3, [r3, #24]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f7ff fe59 	bl	8009ad4 <create_chain>
 8009e22:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d101      	bne.n	8009e2e <dir_next+0xcc>
 8009e2a:	2307      	movs	r3, #7
 8009e2c:	e05a      	b.n	8009ee4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d101      	bne.n	8009e38 <dir_next+0xd6>
 8009e34:	2302      	movs	r3, #2
 8009e36:	e055      	b.n	8009ee4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3e:	d101      	bne.n	8009e44 <dir_next+0xe2>
 8009e40:	2301      	movs	r3, #1
 8009e42:	e04f      	b.n	8009ee4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009e44:	68f8      	ldr	r0, [r7, #12]
 8009e46:	f7ff fb4d 	bl	80094e4 <sync_window>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <dir_next+0xf2>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e047      	b.n	8009ee4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3334      	adds	r3, #52	; 0x34
 8009e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff f945 	bl	80090ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e64:	2300      	movs	r3, #0
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	6979      	ldr	r1, [r7, #20]
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f7ff fc1a 	bl	80096a4 <clust2sect>
 8009e70:	4602      	mov	r2, r0
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	631a      	str	r2, [r3, #48]	; 0x30
 8009e76:	e012      	b.n	8009e9e <dir_next+0x13c>
						fs->wflag = 1;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f7ff fb30 	bl	80094e4 <sync_window>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <dir_next+0x12c>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e02a      	b.n	8009ee4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	3301      	adds	r3, #1
 8009e92:	613b      	str	r3, [r7, #16]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e98:	1c5a      	adds	r2, r3, #1
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	631a      	str	r2, [r3, #48]	; 0x30
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	895b      	ldrh	r3, [r3, #10]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d3e6      	bcc.n	8009e78 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	1ad2      	subs	r2, r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	697a      	ldr	r2, [r7, #20]
 8009eba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009ebc:	6979      	ldr	r1, [r7, #20]
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f7ff fbf0 	bl	80096a4 <clust2sect>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68ba      	ldr	r2, [r7, #8]
 8009ece:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009edc:	441a      	add	r2, r3
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3718      	adds	r7, #24
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b086      	sub	sp, #24
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009efc:	2100      	movs	r1, #0
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7ff feb4 	bl	8009c6c <dir_sdi>
 8009f04:	4603      	mov	r3, r0
 8009f06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d12b      	bne.n	8009f66 <dir_alloc+0x7a>
		n = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	4619      	mov	r1, r3
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f7ff fb27 	bl	800956c <move_window>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d11d      	bne.n	8009f64 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a1b      	ldr	r3, [r3, #32]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2be5      	cmp	r3, #229	; 0xe5
 8009f30:	d004      	beq.n	8009f3c <dir_alloc+0x50>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d107      	bne.n	8009f4c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	613b      	str	r3, [r7, #16]
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d102      	bne.n	8009f50 <dir_alloc+0x64>
 8009f4a:	e00c      	b.n	8009f66 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009f50:	2101      	movs	r1, #1
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7ff ff05 	bl	8009d62 <dir_next>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0d7      	beq.n	8009f12 <dir_alloc+0x26>
 8009f62:	e000      	b.n	8009f66 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009f64:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d101      	bne.n	8009f70 <dir_alloc+0x84>
 8009f6c:	2307      	movs	r3, #7
 8009f6e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3718      	adds	r7, #24
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	331a      	adds	r3, #26
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f7ff f80d 	bl	8008fa8 <ld_word>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	d109      	bne.n	8009fae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	3314      	adds	r3, #20
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7ff f802 	bl	8008fa8 <ld_word>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	041b      	lsls	r3, r3, #16
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009fae:	68fb      	ldr	r3, [r7, #12]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	60b9      	str	r1, [r7, #8]
 8009fc2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	331a      	adds	r3, #26
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	b292      	uxth	r2, r2
 8009fcc:	4611      	mov	r1, r2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7ff f825 	bl	800901e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d109      	bne.n	8009ff0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	f103 0214 	add.w	r2, r3, #20
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	0c1b      	lsrs	r3, r3, #16
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	4619      	mov	r1, r3
 8009fea:	4610      	mov	r0, r2
 8009fec:	f7ff f817 	bl	800901e <st_word>
	}
}
 8009ff0:	bf00      	nop
 8009ff2:	3710      	adds	r7, #16
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800a002:	2304      	movs	r3, #4
 800a004:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800a00c:	e03c      	b.n	800a088 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	4619      	mov	r1, r3
 800a014:	6938      	ldr	r0, [r7, #16]
 800a016:	f7ff faa9 	bl	800956c <move_window>
 800a01a:	4603      	mov	r3, r0
 800a01c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d136      	bne.n	800a092 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d102      	bne.n	800a038 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800a032:	2304      	movs	r3, #4
 800a034:	75fb      	strb	r3, [r7, #23]
 800a036:	e031      	b.n	800a09c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	330b      	adds	r3, #11
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a044:	73bb      	strb	r3, [r7, #14]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	7bba      	ldrb	r2, [r7, #14]
 800a04a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800a04c:	7bfb      	ldrb	r3, [r7, #15]
 800a04e:	2be5      	cmp	r3, #229	; 0xe5
 800a050:	d011      	beq.n	800a076 <dir_read+0x7e>
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	2b2e      	cmp	r3, #46	; 0x2e
 800a056:	d00e      	beq.n	800a076 <dir_read+0x7e>
 800a058:	7bbb      	ldrb	r3, [r7, #14]
 800a05a:	2b0f      	cmp	r3, #15
 800a05c:	d00b      	beq.n	800a076 <dir_read+0x7e>
 800a05e:	7bbb      	ldrb	r3, [r7, #14]
 800a060:	f023 0320 	bic.w	r3, r3, #32
 800a064:	2b08      	cmp	r3, #8
 800a066:	bf0c      	ite	eq
 800a068:	2301      	moveq	r3, #1
 800a06a:	2300      	movne	r3, #0
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	461a      	mov	r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	4293      	cmp	r3, r2
 800a074:	d00f      	beq.n	800a096 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800a076:	2100      	movs	r1, #0
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f7ff fe72 	bl	8009d62 <dir_next>
 800a07e:	4603      	mov	r3, r0
 800a080:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a082:	7dfb      	ldrb	r3, [r7, #23]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d108      	bne.n	800a09a <dir_read+0xa2>
	while (dp->sect) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	69db      	ldr	r3, [r3, #28]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1be      	bne.n	800a00e <dir_read+0x16>
 800a090:	e004      	b.n	800a09c <dir_read+0xa4>
		if (res != FR_OK) break;
 800a092:	bf00      	nop
 800a094:	e002      	b.n	800a09c <dir_read+0xa4>
				break;
 800a096:	bf00      	nop
 800a098:	e000      	b.n	800a09c <dir_read+0xa4>
		if (res != FR_OK) break;
 800a09a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d002      	beq.n	800a0a8 <dir_read+0xb0>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	61da      	str	r2, [r3, #28]
	return res;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b086      	sub	sp, #24
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a0c0:	2100      	movs	r1, #0
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f7ff fdd2 	bl	8009c6c <dir_sdi>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a0cc:	7dfb      	ldrb	r3, [r7, #23]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <dir_find+0x24>
 800a0d2:	7dfb      	ldrb	r3, [r7, #23]
 800a0d4:	e03e      	b.n	800a154 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	69db      	ldr	r3, [r3, #28]
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6938      	ldr	r0, [r7, #16]
 800a0de:	f7ff fa45 	bl	800956c <move_window>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a0e6:	7dfb      	ldrb	r3, [r7, #23]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d12f      	bne.n	800a14c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a1b      	ldr	r3, [r3, #32]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a0f4:	7bfb      	ldrb	r3, [r7, #15]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d102      	bne.n	800a100 <dir_find+0x4e>
 800a0fa:	2304      	movs	r3, #4
 800a0fc:	75fb      	strb	r3, [r7, #23]
 800a0fe:	e028      	b.n	800a152 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a1b      	ldr	r3, [r3, #32]
 800a104:	330b      	adds	r3, #11
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	330b      	adds	r3, #11
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	f003 0308 	and.w	r3, r3, #8
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10a      	bne.n	800a138 <dir_find+0x86>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a18      	ldr	r0, [r3, #32]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	3324      	adds	r3, #36	; 0x24
 800a12a:	220b      	movs	r2, #11
 800a12c:	4619      	mov	r1, r3
 800a12e:	f7fe fff9 	bl	8009124 <mem_cmp>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00b      	beq.n	800a150 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a138:	2100      	movs	r1, #0
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff fe11 	bl	8009d62 <dir_next>
 800a140:	4603      	mov	r3, r0
 800a142:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0c5      	beq.n	800a0d6 <dir_find+0x24>
 800a14a:	e002      	b.n	800a152 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a14c:	bf00      	nop
 800a14e:	e000      	b.n	800a152 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a150:	bf00      	nop

	return res;
 800a152:	7dfb      	ldrb	r3, [r7, #23]
}
 800a154:	4618      	mov	r0, r3
 800a156:	3718      	adds	r7, #24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b084      	sub	sp, #16
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a16a:	2101      	movs	r1, #1
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff febd 	bl	8009eec <dir_alloc>
 800a172:	4603      	mov	r3, r0
 800a174:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a176:	7bfb      	ldrb	r3, [r7, #15]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d11c      	bne.n	800a1b6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	69db      	ldr	r3, [r3, #28]
 800a180:	4619      	mov	r1, r3
 800a182:	68b8      	ldr	r0, [r7, #8]
 800a184:	f7ff f9f2 	bl	800956c <move_window>
 800a188:	4603      	mov	r3, r0
 800a18a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d111      	bne.n	800a1b6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6a1b      	ldr	r3, [r3, #32]
 800a196:	2220      	movs	r2, #32
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f7fe ffa7 	bl	80090ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a18      	ldr	r0, [r3, #32]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3324      	adds	r3, #36	; 0x24
 800a1a8:	220b      	movs	r2, #11
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	f7fe ff7e 	bl	80090ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	69db      	ldr	r3, [r3, #28]
 800a1d2:	4619      	mov	r1, r3
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f7ff f9c9 	bl	800956c <move_window>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800a1de:	7afb      	ldrb	r3, [r7, #11]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d106      	bne.n	800a1f2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a1b      	ldr	r3, [r3, #32]
 800a1e8:	22e5      	movs	r2, #229	; 0xe5
 800a1ea:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800a1f2:	7afb      	ldrb	r3, [r7, #11]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2200      	movs	r2, #0
 800a20a:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d04e      	beq.n	800a2b2 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800a214:	2300      	movs	r3, #0
 800a216:	613b      	str	r3, [r7, #16]
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800a21c:	e021      	b.n	800a262 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a1a      	ldr	r2, [r3, #32]
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	1c59      	adds	r1, r3, #1
 800a226:	6179      	str	r1, [r7, #20]
 800a228:	4413      	add	r3, r2
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800a22e:	7bfb      	ldrb	r3, [r7, #15]
 800a230:	2b20      	cmp	r3, #32
 800a232:	d100      	bne.n	800a236 <get_fileinfo+0x3a>
 800a234:	e015      	b.n	800a262 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800a236:	7bfb      	ldrb	r3, [r7, #15]
 800a238:	2b05      	cmp	r3, #5
 800a23a:	d101      	bne.n	800a240 <get_fileinfo+0x44>
 800a23c:	23e5      	movs	r3, #229	; 0xe5
 800a23e:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	2b09      	cmp	r3, #9
 800a244:	d106      	bne.n	800a254 <get_fileinfo+0x58>
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	613a      	str	r2, [r7, #16]
 800a24c:	683a      	ldr	r2, [r7, #0]
 800a24e:	4413      	add	r3, r2
 800a250:	222e      	movs	r2, #46	; 0x2e
 800a252:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	613a      	str	r2, [r7, #16]
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	4413      	add	r3, r2
 800a25e:	7bfa      	ldrb	r2, [r7, #15]
 800a260:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	2b0a      	cmp	r3, #10
 800a266:	d9da      	bls.n	800a21e <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	4413      	add	r3, r2
 800a26e:	3309      	adds	r3, #9
 800a270:	2200      	movs	r2, #0
 800a272:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	7ada      	ldrb	r2, [r3, #11]
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	331c      	adds	r3, #28
 800a284:	4618      	mov	r0, r3
 800a286:	f7fe fea7 	bl	8008fd8 <ld_dword>
 800a28a:	4602      	mov	r2, r0
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6a1b      	ldr	r3, [r3, #32]
 800a294:	3316      	adds	r3, #22
 800a296:	4618      	mov	r0, r3
 800a298:	f7fe fe9e 	bl	8008fd8 <ld_dword>
 800a29c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	80da      	strh	r2, [r3, #6]
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	0c1b      	lsrs	r3, r3, #16
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	809a      	strh	r2, [r3, #4]
 800a2b0:	e000      	b.n	800a2b4 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800a2b2:	bf00      	nop
}
 800a2b4:	3718      	adds	r7, #24
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
	...

0800a2bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b088      	sub	sp, #32
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	3324      	adds	r3, #36	; 0x24
 800a2d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a2d2:	220b      	movs	r2, #11
 800a2d4:	2120      	movs	r1, #32
 800a2d6:	68b8      	ldr	r0, [r7, #8]
 800a2d8:	f7fe ff09 	bl	80090ee <mem_set>
	si = i = 0; ni = 8;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	613b      	str	r3, [r7, #16]
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	61fb      	str	r3, [r7, #28]
 800a2e4:	2308      	movs	r3, #8
 800a2e6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	61fa      	str	r2, [r7, #28]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	781b      	ldrb	r3, [r3, #0]
 800a2f4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a2f6:	7efb      	ldrb	r3, [r7, #27]
 800a2f8:	2b20      	cmp	r3, #32
 800a2fa:	d94e      	bls.n	800a39a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a2fc:	7efb      	ldrb	r3, [r7, #27]
 800a2fe:	2b2f      	cmp	r3, #47	; 0x2f
 800a300:	d006      	beq.n	800a310 <create_name+0x54>
 800a302:	7efb      	ldrb	r3, [r7, #27]
 800a304:	2b5c      	cmp	r3, #92	; 0x5c
 800a306:	d110      	bne.n	800a32a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a308:	e002      	b.n	800a310 <create_name+0x54>
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	3301      	adds	r3, #1
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	69fb      	ldr	r3, [r7, #28]
 800a314:	4413      	add	r3, r2
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b2f      	cmp	r3, #47	; 0x2f
 800a31a:	d0f6      	beq.n	800a30a <create_name+0x4e>
 800a31c:	68fa      	ldr	r2, [r7, #12]
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	4413      	add	r3, r2
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	2b5c      	cmp	r3, #92	; 0x5c
 800a326:	d0f0      	beq.n	800a30a <create_name+0x4e>
			break;
 800a328:	e038      	b.n	800a39c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a32a:	7efb      	ldrb	r3, [r7, #27]
 800a32c:	2b2e      	cmp	r3, #46	; 0x2e
 800a32e:	d003      	beq.n	800a338 <create_name+0x7c>
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	429a      	cmp	r2, r3
 800a336:	d30c      	bcc.n	800a352 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b0b      	cmp	r3, #11
 800a33c:	d002      	beq.n	800a344 <create_name+0x88>
 800a33e:	7efb      	ldrb	r3, [r7, #27]
 800a340:	2b2e      	cmp	r3, #46	; 0x2e
 800a342:	d001      	beq.n	800a348 <create_name+0x8c>
 800a344:	2306      	movs	r3, #6
 800a346:	e044      	b.n	800a3d2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a348:	2308      	movs	r3, #8
 800a34a:	613b      	str	r3, [r7, #16]
 800a34c:	230b      	movs	r3, #11
 800a34e:	617b      	str	r3, [r7, #20]
			continue;
 800a350:	e022      	b.n	800a398 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a352:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a356:	2b00      	cmp	r3, #0
 800a358:	da04      	bge.n	800a364 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a35a:	7efb      	ldrb	r3, [r7, #27]
 800a35c:	3b80      	subs	r3, #128	; 0x80
 800a35e:	4a1f      	ldr	r2, [pc, #124]	; (800a3dc <create_name+0x120>)
 800a360:	5cd3      	ldrb	r3, [r2, r3]
 800a362:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a364:	7efb      	ldrb	r3, [r7, #27]
 800a366:	4619      	mov	r1, r3
 800a368:	481d      	ldr	r0, [pc, #116]	; (800a3e0 <create_name+0x124>)
 800a36a:	f7fe ff02 	bl	8009172 <chk_chr>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d001      	beq.n	800a378 <create_name+0xbc>
 800a374:	2306      	movs	r3, #6
 800a376:	e02c      	b.n	800a3d2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a378:	7efb      	ldrb	r3, [r7, #27]
 800a37a:	2b60      	cmp	r3, #96	; 0x60
 800a37c:	d905      	bls.n	800a38a <create_name+0xce>
 800a37e:	7efb      	ldrb	r3, [r7, #27]
 800a380:	2b7a      	cmp	r3, #122	; 0x7a
 800a382:	d802      	bhi.n	800a38a <create_name+0xce>
 800a384:	7efb      	ldrb	r3, [r7, #27]
 800a386:	3b20      	subs	r3, #32
 800a388:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	613a      	str	r2, [r7, #16]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	4413      	add	r3, r2
 800a394:	7efa      	ldrb	r2, [r7, #27]
 800a396:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a398:	e7a6      	b.n	800a2e8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a39a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	441a      	add	r2, r3
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <create_name+0xf4>
 800a3ac:	2306      	movs	r3, #6
 800a3ae:	e010      	b.n	800a3d2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2be5      	cmp	r3, #229	; 0xe5
 800a3b6:	d102      	bne.n	800a3be <create_name+0x102>
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2205      	movs	r2, #5
 800a3bc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a3be:	7efb      	ldrb	r3, [r7, #27]
 800a3c0:	2b20      	cmp	r3, #32
 800a3c2:	d801      	bhi.n	800a3c8 <create_name+0x10c>
 800a3c4:	2204      	movs	r2, #4
 800a3c6:	e000      	b.n	800a3ca <create_name+0x10e>
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	330b      	adds	r3, #11
 800a3ce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a3d0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3720      	adds	r7, #32
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	08011058 	.word	0x08011058
 800a3e0:	08010fdc 	.word	0x08010fdc

0800a3e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a3f8:	e002      	b.n	800a400 <follow_path+0x1c>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b2f      	cmp	r3, #47	; 0x2f
 800a406:	d0f8      	beq.n	800a3fa <follow_path+0x16>
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	2b5c      	cmp	r3, #92	; 0x5c
 800a40e:	d0f4      	beq.n	800a3fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	2200      	movs	r2, #0
 800a414:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	2b1f      	cmp	r3, #31
 800a41c:	d80a      	bhi.n	800a434 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2280      	movs	r2, #128	; 0x80
 800a422:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a426:	2100      	movs	r1, #0
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fc1f 	bl	8009c6c <dir_sdi>
 800a42e:	4603      	mov	r3, r0
 800a430:	75fb      	strb	r3, [r7, #23]
 800a432:	e043      	b.n	800a4bc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a434:	463b      	mov	r3, r7
 800a436:	4619      	mov	r1, r3
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff ff3f 	bl	800a2bc <create_name>
 800a43e:	4603      	mov	r3, r0
 800a440:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d134      	bne.n	800a4b2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff fe32 	bl	800a0b2 <dir_find>
 800a44e:	4603      	mov	r3, r0
 800a450:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a458:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00a      	beq.n	800a476 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	2b04      	cmp	r3, #4
 800a464:	d127      	bne.n	800a4b6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a466:	7afb      	ldrb	r3, [r7, #11]
 800a468:	f003 0304 	and.w	r3, r3, #4
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d122      	bne.n	800a4b6 <follow_path+0xd2>
 800a470:	2305      	movs	r3, #5
 800a472:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a474:	e01f      	b.n	800a4b6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a476:	7afb      	ldrb	r3, [r7, #11]
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d11c      	bne.n	800a4ba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	799b      	ldrb	r3, [r3, #6]
 800a484:	f003 0310 	and.w	r3, r3, #16
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d102      	bne.n	800a492 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a48c:	2305      	movs	r3, #5
 800a48e:	75fb      	strb	r3, [r7, #23]
 800a490:	e014      	b.n	800a4bc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	695b      	ldr	r3, [r3, #20]
 800a49c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4a0:	4413      	add	r3, r2
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7ff fd68 	bl	8009f7a <ld_clust>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4b0:	e7c0      	b.n	800a434 <follow_path+0x50>
			if (res != FR_OK) break;
 800a4b2:	bf00      	nop
 800a4b4:	e002      	b.n	800a4bc <follow_path+0xd8>
				break;
 800a4b6:	bf00      	nop
 800a4b8:	e000      	b.n	800a4bc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4ba:	bf00      	nop
			}
		}
	}

	return res;
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3718      	adds	r7, #24
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b087      	sub	sp, #28
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d031      	beq.n	800a540 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	617b      	str	r3, [r7, #20]
 800a4e2:	e002      	b.n	800a4ea <get_ldnumber+0x24>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	617b      	str	r3, [r7, #20]
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d903      	bls.n	800a4fa <get_ldnumber+0x34>
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b3a      	cmp	r3, #58	; 0x3a
 800a4f8:	d1f4      	bne.n	800a4e4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	781b      	ldrb	r3, [r3, #0]
 800a4fe:	2b3a      	cmp	r3, #58	; 0x3a
 800a500:	d11c      	bne.n	800a53c <get_ldnumber+0x76>
			tp = *path;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	60fa      	str	r2, [r7, #12]
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	3b30      	subs	r3, #48	; 0x30
 800a512:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	2b09      	cmp	r3, #9
 800a518:	d80e      	bhi.n	800a538 <get_ldnumber+0x72>
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	429a      	cmp	r2, r3
 800a520:	d10a      	bne.n	800a538 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d107      	bne.n	800a538 <get_ldnumber+0x72>
					vol = (int)i;
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	3301      	adds	r3, #1
 800a530:	617b      	str	r3, [r7, #20]
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	e002      	b.n	800a542 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a53c:	2300      	movs	r3, #0
 800a53e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a540:	693b      	ldr	r3, [r7, #16]
}
 800a542:	4618      	mov	r0, r3
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
	...

0800a550 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	70da      	strb	r2, [r3, #3]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f04f 32ff 	mov.w	r2, #4294967295
 800a566:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f7fe fffe 	bl	800956c <move_window>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	d001      	beq.n	800a57a <check_fs+0x2a>
 800a576:	2304      	movs	r3, #4
 800a578:	e038      	b.n	800a5ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3334      	adds	r3, #52	; 0x34
 800a57e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a582:	4618      	mov	r0, r3
 800a584:	f7fe fd10 	bl	8008fa8 <ld_word>
 800a588:	4603      	mov	r3, r0
 800a58a:	461a      	mov	r2, r3
 800a58c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a590:	429a      	cmp	r2, r3
 800a592:	d001      	beq.n	800a598 <check_fs+0x48>
 800a594:	2303      	movs	r3, #3
 800a596:	e029      	b.n	800a5ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a59e:	2be9      	cmp	r3, #233	; 0xe9
 800a5a0:	d009      	beq.n	800a5b6 <check_fs+0x66>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5a8:	2beb      	cmp	r3, #235	; 0xeb
 800a5aa:	d11e      	bne.n	800a5ea <check_fs+0x9a>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a5b2:	2b90      	cmp	r3, #144	; 0x90
 800a5b4:	d119      	bne.n	800a5ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	3334      	adds	r3, #52	; 0x34
 800a5ba:	3336      	adds	r3, #54	; 0x36
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7fe fd0b 	bl	8008fd8 <ld_dword>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5c8:	4a0a      	ldr	r2, [pc, #40]	; (800a5f4 <check_fs+0xa4>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d101      	bne.n	800a5d2 <check_fs+0x82>
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e00c      	b.n	800a5ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	3334      	adds	r3, #52	; 0x34
 800a5d6:	3352      	adds	r3, #82	; 0x52
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f7fe fcfd 	bl	8008fd8 <ld_dword>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	4a05      	ldr	r2, [pc, #20]	; (800a5f8 <check_fs+0xa8>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d101      	bne.n	800a5ea <check_fs+0x9a>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	e000      	b.n	800a5ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a5ea:	2302      	movs	r3, #2
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3708      	adds	r7, #8
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}
 800a5f4:	00544146 	.word	0x00544146
 800a5f8:	33544146 	.word	0x33544146

0800a5fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b096      	sub	sp, #88	; 0x58
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	4613      	mov	r3, r2
 800a608:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	2200      	movs	r2, #0
 800a60e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7ff ff58 	bl	800a4c6 <get_ldnumber>
 800a616:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	da01      	bge.n	800a622 <find_volume+0x26>
 800a61e:	230b      	movs	r3, #11
 800a620:	e235      	b.n	800aa8e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a622:	4aa5      	ldr	r2, [pc, #660]	; (800a8b8 <find_volume+0x2bc>)
 800a624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a62a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d101      	bne.n	800a636 <find_volume+0x3a>
 800a632:	230c      	movs	r3, #12
 800a634:	e22b      	b.n	800aa8e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800a636:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a638:	f7fe fdb6 	bl	80091a8 <lock_fs>
 800a63c:	4603      	mov	r3, r0
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d101      	bne.n	800a646 <find_volume+0x4a>
 800a642:	230f      	movs	r3, #15
 800a644:	e223      	b.n	800aa8e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a64a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	f023 0301 	bic.w	r3, r3, #1
 800a652:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d01a      	beq.n	800a692 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65e:	785b      	ldrb	r3, [r3, #1]
 800a660:	4618      	mov	r0, r3
 800a662:	f7fe fc03 	bl	8008e6c <disk_status>
 800a666:	4603      	mov	r3, r0
 800a668:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a66c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a670:	f003 0301 	and.w	r3, r3, #1
 800a674:	2b00      	cmp	r3, #0
 800a676:	d10c      	bne.n	800a692 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <find_volume+0x92>
 800a67e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a682:	f003 0304 	and.w	r3, r3, #4
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a68a:	230a      	movs	r3, #10
 800a68c:	e1ff      	b.n	800aa8e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800a68e:	2300      	movs	r3, #0
 800a690:	e1fd      	b.n	800aa8e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a69a:	b2da      	uxtb	r2, r3
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	785b      	ldrb	r3, [r3, #1]
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fe fbfb 	bl	8008ea0 <disk_initialize>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a6b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e1e6      	b.n	800aa8e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a6c0:	79fb      	ldrb	r3, [r7, #7]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d007      	beq.n	800a6d6 <find_volume+0xda>
 800a6c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6ca:	f003 0304 	and.w	r3, r3, #4
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a6d2:	230a      	movs	r3, #10
 800a6d4:	e1db      	b.n	800aa8e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a6da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6de:	f7ff ff37 	bl	800a550 <check_fs>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a6e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6ec:	2b02      	cmp	r3, #2
 800a6ee:	d149      	bne.n	800a784 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	643b      	str	r3, [r7, #64]	; 0x40
 800a6f4:	e01e      	b.n	800a734 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6fe:	011b      	lsls	r3, r3, #4
 800a700:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a704:	4413      	add	r3, r2
 800a706:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	3304      	adds	r3, #4
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d006      	beq.n	800a720 <find_volume+0x124>
 800a712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a714:	3308      	adds	r3, #8
 800a716:	4618      	mov	r0, r3
 800a718:	f7fe fc5e 	bl	8008fd8 <ld_dword>
 800a71c:	4602      	mov	r2, r0
 800a71e:	e000      	b.n	800a722 <find_volume+0x126>
 800a720:	2200      	movs	r2, #0
 800a722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	3358      	adds	r3, #88	; 0x58
 800a728:	443b      	add	r3, r7
 800a72a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a72e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a730:	3301      	adds	r3, #1
 800a732:	643b      	str	r3, [r7, #64]	; 0x40
 800a734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a736:	2b03      	cmp	r3, #3
 800a738:	d9dd      	bls.n	800a6f6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a73a:	2300      	movs	r3, #0
 800a73c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d002      	beq.n	800a74a <find_volume+0x14e>
 800a744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a746:	3b01      	subs	r3, #1
 800a748:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a74a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	3358      	adds	r3, #88	; 0x58
 800a750:	443b      	add	r3, r7
 800a752:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a756:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d005      	beq.n	800a76a <find_volume+0x16e>
 800a75e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a760:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a762:	f7ff fef5 	bl	800a550 <check_fs>
 800a766:	4603      	mov	r3, r0
 800a768:	e000      	b.n	800a76c <find_volume+0x170>
 800a76a:	2303      	movs	r3, #3
 800a76c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a774:	2b01      	cmp	r3, #1
 800a776:	d905      	bls.n	800a784 <find_volume+0x188>
 800a778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a77a:	3301      	adds	r3, #1
 800a77c:	643b      	str	r3, [r7, #64]	; 0x40
 800a77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a780:	2b03      	cmp	r3, #3
 800a782:	d9e2      	bls.n	800a74a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a788:	2b04      	cmp	r3, #4
 800a78a:	d101      	bne.n	800a790 <find_volume+0x194>
 800a78c:	2301      	movs	r3, #1
 800a78e:	e17e      	b.n	800aa8e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a794:	2b01      	cmp	r3, #1
 800a796:	d901      	bls.n	800a79c <find_volume+0x1a0>
 800a798:	230d      	movs	r3, #13
 800a79a:	e178      	b.n	800aa8e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a79e:	3334      	adds	r3, #52	; 0x34
 800a7a0:	330b      	adds	r3, #11
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe fc00 	bl	8008fa8 <ld_word>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7ae:	d001      	beq.n	800a7b4 <find_volume+0x1b8>
 800a7b0:	230d      	movs	r3, #13
 800a7b2:	e16c      	b.n	800aa8e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	3334      	adds	r3, #52	; 0x34
 800a7b8:	3316      	adds	r3, #22
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fe fbf4 	bl	8008fa8 <ld_word>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a7c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d106      	bne.n	800a7d8 <find_volume+0x1dc>
 800a7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7cc:	3334      	adds	r3, #52	; 0x34
 800a7ce:	3324      	adds	r3, #36	; 0x24
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fe fc01 	bl	8008fd8 <ld_dword>
 800a7d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7dc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ea:	789b      	ldrb	r3, [r3, #2]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d005      	beq.n	800a7fc <find_volume+0x200>
 800a7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f2:	789b      	ldrb	r3, [r3, #2]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d001      	beq.n	800a7fc <find_volume+0x200>
 800a7f8:	230d      	movs	r3, #13
 800a7fa:	e148      	b.n	800aa8e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	789b      	ldrb	r3, [r3, #2]
 800a800:	461a      	mov	r2, r3
 800a802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a804:	fb02 f303 	mul.w	r3, r2, r3
 800a808:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a810:	b29a      	uxth	r2, r3
 800a812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a814:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	895b      	ldrh	r3, [r3, #10]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d008      	beq.n	800a830 <find_volume+0x234>
 800a81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a820:	895b      	ldrh	r3, [r3, #10]
 800a822:	461a      	mov	r2, r3
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	895b      	ldrh	r3, [r3, #10]
 800a828:	3b01      	subs	r3, #1
 800a82a:	4013      	ands	r3, r2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <find_volume+0x238>
 800a830:	230d      	movs	r3, #13
 800a832:	e12c      	b.n	800aa8e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	3334      	adds	r3, #52	; 0x34
 800a838:	3311      	adds	r3, #17
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fe fbb4 	bl	8008fa8 <ld_word>
 800a840:	4603      	mov	r3, r0
 800a842:	461a      	mov	r2, r3
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84a:	891b      	ldrh	r3, [r3, #8]
 800a84c:	f003 030f 	and.w	r3, r3, #15
 800a850:	b29b      	uxth	r3, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <find_volume+0x25e>
 800a856:	230d      	movs	r3, #13
 800a858:	e119      	b.n	800aa8e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	3334      	adds	r3, #52	; 0x34
 800a85e:	3313      	adds	r3, #19
 800a860:	4618      	mov	r0, r3
 800a862:	f7fe fba1 	bl	8008fa8 <ld_word>
 800a866:	4603      	mov	r3, r0
 800a868:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a86a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <find_volume+0x282>
 800a870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a872:	3334      	adds	r3, #52	; 0x34
 800a874:	3320      	adds	r3, #32
 800a876:	4618      	mov	r0, r3
 800a878:	f7fe fbae 	bl	8008fd8 <ld_dword>
 800a87c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	3334      	adds	r3, #52	; 0x34
 800a882:	330e      	adds	r3, #14
 800a884:	4618      	mov	r0, r3
 800a886:	f7fe fb8f 	bl	8008fa8 <ld_word>
 800a88a:	4603      	mov	r3, r0
 800a88c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a88e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <find_volume+0x29c>
 800a894:	230d      	movs	r3, #13
 800a896:	e0fa      	b.n	800aa8e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a898:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a89a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a89c:	4413      	add	r3, r2
 800a89e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8a0:	8912      	ldrh	r2, [r2, #8]
 800a8a2:	0912      	lsrs	r2, r2, #4
 800a8a4:	b292      	uxth	r2, r2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a8aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d204      	bcs.n	800a8bc <find_volume+0x2c0>
 800a8b2:	230d      	movs	r3, #13
 800a8b4:	e0eb      	b.n	800aa8e <find_volume+0x492>
 800a8b6:	bf00      	nop
 800a8b8:	20001b94 	.word	0x20001b94
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a8bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	1ad3      	subs	r3, r2, r3
 800a8c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8c4:	8952      	ldrh	r2, [r2, #10]
 800a8c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ca:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <find_volume+0x2da>
 800a8d2:	230d      	movs	r3, #13
 800a8d4:	e0db      	b.n	800aa8e <find_volume+0x492>
		fmt = FS_FAT32;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d802      	bhi.n	800a8ec <find_volume+0x2f0>
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d802      	bhi.n	800a8fc <find_volume+0x300>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fe:	1c9a      	adds	r2, r3, #2
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a906:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a908:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a90a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a90c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a90e:	441a      	add	r2, r3
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a918:	441a      	add	r2, r3
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a91e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a922:	2b03      	cmp	r3, #3
 800a924:	d11e      	bne.n	800a964 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a928:	3334      	adds	r3, #52	; 0x34
 800a92a:	332a      	adds	r3, #42	; 0x2a
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fe fb3b 	bl	8008fa8 <ld_word>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d001      	beq.n	800a93c <find_volume+0x340>
 800a938:	230d      	movs	r3, #13
 800a93a:	e0a8      	b.n	800aa8e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	891b      	ldrh	r3, [r3, #8]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d001      	beq.n	800a948 <find_volume+0x34c>
 800a944:	230d      	movs	r3, #13
 800a946:	e0a2      	b.n	800aa8e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	3334      	adds	r3, #52	; 0x34
 800a94c:	332c      	adds	r3, #44	; 0x2c
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe fb42 	bl	8008fd8 <ld_dword>
 800a954:	4602      	mov	r2, r0
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	647b      	str	r3, [r7, #68]	; 0x44
 800a962:	e01f      	b.n	800a9a4 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	891b      	ldrh	r3, [r3, #8]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <find_volume+0x374>
 800a96c:	230d      	movs	r3, #13
 800a96e:	e08e      	b.n	800aa8e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a976:	441a      	add	r2, r3
 800a978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a97c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a980:	2b02      	cmp	r3, #2
 800a982:	d103      	bne.n	800a98c <find_volume+0x390>
 800a984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	e00a      	b.n	800a9a2 <find_volume+0x3a6>
 800a98c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98e:	699a      	ldr	r2, [r3, #24]
 800a990:	4613      	mov	r3, r2
 800a992:	005b      	lsls	r3, r3, #1
 800a994:	4413      	add	r3, r2
 800a996:	085a      	lsrs	r2, r3, #1
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	f003 0301 	and.w	r3, r3, #1
 800a9a0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a9a2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	69da      	ldr	r2, [r3, #28]
 800a9a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9aa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a9ae:	0a5b      	lsrs	r3, r3, #9
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d201      	bcs.n	800a9b8 <find_volume+0x3bc>
 800a9b4:	230d      	movs	r3, #13
 800a9b6:	e06a      	b.n	800aa8e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a9be:	615a      	str	r2, [r3, #20]
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	695a      	ldr	r2, [r3, #20]
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ca:	2280      	movs	r2, #128	; 0x80
 800a9cc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a9ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9d2:	2b03      	cmp	r3, #3
 800a9d4:	d149      	bne.n	800aa6a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d8:	3334      	adds	r3, #52	; 0x34
 800a9da:	3330      	adds	r3, #48	; 0x30
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe fae3 	bl	8008fa8 <ld_word>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d140      	bne.n	800aa6a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a9e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9f0:	f7fe fdbc 	bl	800956c <move_window>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d137      	bne.n	800aa6a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa02:	3334      	adds	r3, #52	; 0x34
 800aa04:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe facd 	bl	8008fa8 <ld_word>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	461a      	mov	r2, r3
 800aa12:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa16:	429a      	cmp	r2, r3
 800aa18:	d127      	bne.n	800aa6a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aa1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1c:	3334      	adds	r3, #52	; 0x34
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fe fada 	bl	8008fd8 <ld_dword>
 800aa24:	4603      	mov	r3, r0
 800aa26:	4a1c      	ldr	r2, [pc, #112]	; (800aa98 <find_volume+0x49c>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d11e      	bne.n	800aa6a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2e:	3334      	adds	r3, #52	; 0x34
 800aa30:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe facf 	bl	8008fd8 <ld_dword>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	4a17      	ldr	r2, [pc, #92]	; (800aa9c <find_volume+0x4a0>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d113      	bne.n	800aa6a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa44:	3334      	adds	r3, #52	; 0x34
 800aa46:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fac4 	bl	8008fd8 <ld_dword>
 800aa50:	4602      	mov	r2, r0
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa58:	3334      	adds	r3, #52	; 0x34
 800aa5a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f7fe faba 	bl	8008fd8 <ld_dword>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aa70:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa72:	4b0b      	ldr	r3, [pc, #44]	; (800aaa0 <find_volume+0x4a4>)
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	3301      	adds	r3, #1
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <find_volume+0x4a4>)
 800aa7c:	801a      	strh	r2, [r3, #0]
 800aa7e:	4b08      	ldr	r3, [pc, #32]	; (800aaa0 <find_volume+0x4a4>)
 800aa80:	881a      	ldrh	r2, [r3, #0]
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aa86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa88:	f7fe fd08 	bl	800949c <clear_lock>
#endif
	return FR_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3758      	adds	r7, #88	; 0x58
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	41615252 	.word	0x41615252
 800aa9c:	61417272 	.word	0x61417272
 800aaa0:	20001b98 	.word	0x20001b98

0800aaa4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aaae:	2309      	movs	r3, #9
 800aab0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d02e      	beq.n	800ab16 <validate+0x72>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d02a      	beq.n	800ab16 <validate+0x72>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d025      	beq.n	800ab16 <validate+0x72>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	889a      	ldrh	r2, [r3, #4]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	88db      	ldrh	r3, [r3, #6]
 800aad4:	429a      	cmp	r2, r3
 800aad6:	d11e      	bne.n	800ab16 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe fb63 	bl	80091a8 <lock_fs>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d014      	beq.n	800ab12 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	785b      	ldrb	r3, [r3, #1]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f7fe f9bc 	bl	8008e6c <disk_status>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <validate+0x60>
				res = FR_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	73fb      	strb	r3, [r7, #15]
 800ab02:	e008      	b.n	800ab16 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2100      	movs	r1, #0
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fb62 	bl	80091d4 <unlock_fs>
 800ab10:	e001      	b.n	800ab16 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ab12:	230f      	movs	r3, #15
 800ab14:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ab16:	7bfb      	ldrb	r3, [r7, #15]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <validate+0x7e>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	e000      	b.n	800ab24 <validate+0x80>
 800ab22:	2300      	movs	r3, #0
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	6013      	str	r3, [r2, #0]
	return res;
 800ab28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}
	...

0800ab34 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b088      	sub	sp, #32
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ab46:	f107 0310 	add.w	r3, r7, #16
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff fcbb 	bl	800a4c6 <get_ldnumber>
 800ab50:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	da01      	bge.n	800ab5c <f_mount+0x28>
 800ab58:	230b      	movs	r3, #11
 800ab5a:	e048      	b.n	800abee <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab5c:	4a26      	ldr	r2, [pc, #152]	; (800abf8 <f_mount+0xc4>)
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab64:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00f      	beq.n	800ab8c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ab6c:	69b8      	ldr	r0, [r7, #24]
 800ab6e:	f7fe fc95 	bl	800949c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ab72:	69bb      	ldr	r3, [r7, #24]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 feb5 	bl	800b8e6 <ff_del_syncobj>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <f_mount+0x52>
 800ab82:	2302      	movs	r3, #2
 800ab84:	e033      	b.n	800abee <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab86:	69bb      	ldr	r3, [r7, #24]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00f      	beq.n	800abb2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2200      	movs	r2, #0
 800ab96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	b2da      	uxtb	r2, r3
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	330c      	adds	r3, #12
 800aba0:	4619      	mov	r1, r3
 800aba2:	4610      	mov	r0, r2
 800aba4:	f000 fe7f 	bl	800b8a6 <ff_cre_syncobj>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <f_mount+0x7e>
 800abae:	2302      	movs	r3, #2
 800abb0:	e01d      	b.n	800abee <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	4910      	ldr	r1, [pc, #64]	; (800abf8 <f_mount+0xc4>)
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <f_mount+0x94>
 800abc2:	79fb      	ldrb	r3, [r7, #7]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d001      	beq.n	800abcc <f_mount+0x98>
 800abc8:	2300      	movs	r3, #0
 800abca:	e010      	b.n	800abee <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800abcc:	f107 010c 	add.w	r1, r7, #12
 800abd0:	f107 0308 	add.w	r3, r7, #8
 800abd4:	2200      	movs	r2, #0
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff fd10 	bl	800a5fc <find_volume>
 800abdc:	4603      	mov	r3, r0
 800abde:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	7dfa      	ldrb	r2, [r7, #23]
 800abe4:	4611      	mov	r1, r2
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe faf4 	bl	80091d4 <unlock_fs>
 800abec:	7dfb      	ldrb	r3, [r7, #23]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3720      	adds	r7, #32
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	20001b94 	.word	0x20001b94

0800abfc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b098      	sub	sp, #96	; 0x60
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	4613      	mov	r3, r2
 800ac08:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d101      	bne.n	800ac14 <f_open+0x18>
 800ac10:	2309      	movs	r3, #9
 800ac12:	e1b4      	b.n	800af7e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ac14:	79fb      	ldrb	r3, [r7, #7]
 800ac16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac1a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ac1c:	79fa      	ldrb	r2, [r7, #7]
 800ac1e:	f107 0110 	add.w	r1, r7, #16
 800ac22:	f107 0308 	add.w	r3, r7, #8
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7ff fce8 	bl	800a5fc <find_volume>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ac32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f040 8191 	bne.w	800af5e <f_open+0x362>
		dj.obj.fs = fs;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	f107 0314 	add.w	r3, r7, #20
 800ac46:	4611      	mov	r1, r2
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f7ff fbcb 	bl	800a3e4 <follow_path>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ac54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d11a      	bne.n	800ac92 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ac5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ac60:	b25b      	sxtb	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	da03      	bge.n	800ac6e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ac66:	2306      	movs	r3, #6
 800ac68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac6c:	e011      	b.n	800ac92 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac6e:	79fb      	ldrb	r3, [r7, #7]
 800ac70:	f023 0301 	bic.w	r3, r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bf14      	ite	ne
 800ac78:	2301      	movne	r3, #1
 800ac7a:	2300      	moveq	r3, #0
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	461a      	mov	r2, r3
 800ac80:	f107 0314 	add.w	r3, r7, #20
 800ac84:	4611      	mov	r1, r2
 800ac86:	4618      	mov	r0, r3
 800ac88:	f7fe fac0 	bl	800920c <chk_lock>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac92:	79fb      	ldrb	r3, [r7, #7]
 800ac94:	f003 031c 	and.w	r3, r3, #28
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d07f      	beq.n	800ad9c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ac9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d017      	beq.n	800acd4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aca4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aca8:	2b04      	cmp	r3, #4
 800acaa:	d10e      	bne.n	800acca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800acac:	f7fe fb0a 	bl	80092c4 <enq_lock>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d006      	beq.n	800acc4 <f_open+0xc8>
 800acb6:	f107 0314 	add.w	r3, r7, #20
 800acba:	4618      	mov	r0, r3
 800acbc:	f7ff fa4e 	bl	800a15c <dir_register>
 800acc0:	4603      	mov	r3, r0
 800acc2:	e000      	b.n	800acc6 <f_open+0xca>
 800acc4:	2312      	movs	r3, #18
 800acc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800acca:	79fb      	ldrb	r3, [r7, #7]
 800accc:	f043 0308 	orr.w	r3, r3, #8
 800acd0:	71fb      	strb	r3, [r7, #7]
 800acd2:	e010      	b.n	800acf6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800acd4:	7ebb      	ldrb	r3, [r7, #26]
 800acd6:	f003 0311 	and.w	r3, r3, #17
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <f_open+0xea>
					res = FR_DENIED;
 800acde:	2307      	movs	r3, #7
 800ace0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ace4:	e007      	b.n	800acf6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ace6:	79fb      	ldrb	r3, [r7, #7]
 800ace8:	f003 0304 	and.w	r3, r3, #4
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <f_open+0xfa>
 800acf0:	2308      	movs	r3, #8
 800acf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800acf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d168      	bne.n	800add0 <f_open+0x1d4>
 800acfe:	79fb      	ldrb	r3, [r7, #7]
 800ad00:	f003 0308 	and.w	r3, r3, #8
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d063      	beq.n	800add0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800ad08:	f7fe f852 	bl	8008db0 <get_fattime>
 800ad0c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ad0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad10:	330e      	adds	r3, #14
 800ad12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe f99d 	bl	8009054 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1c:	3316      	adds	r3, #22
 800ad1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7fe f997 	bl	8009054 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad28:	330b      	adds	r3, #11
 800ad2a:	2220      	movs	r2, #32
 800ad2c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad32:	4611      	mov	r1, r2
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff f920 	bl	8009f7a <ld_clust>
 800ad3a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad40:	2200      	movs	r2, #0
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7ff f938 	bl	8009fb8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ad48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad4a:	331c      	adds	r3, #28
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe f980 	bl	8009054 <st_dword>
					fs->wflag = 1;
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	2201      	movs	r2, #1
 800ad58:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ad5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d037      	beq.n	800add0 <f_open+0x1d4>
						dw = fs->winsect;
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad64:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ad66:	f107 0314 	add.w	r3, r7, #20
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fe fe4b 	bl	8009a0a <remove_chain>
 800ad74:	4603      	mov	r3, r0
 800ad76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ad7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d126      	bne.n	800add0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7fe fbf0 	bl	800956c <move_window>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad96:	3a01      	subs	r2, #1
 800ad98:	611a      	str	r2, [r3, #16]
 800ad9a:	e019      	b.n	800add0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ad9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d115      	bne.n	800add0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ada4:	7ebb      	ldrb	r3, [r7, #26]
 800ada6:	f003 0310 	and.w	r3, r3, #16
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d003      	beq.n	800adb6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800adae:	2304      	movs	r3, #4
 800adb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800adb4:	e00c      	b.n	800add0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d007      	beq.n	800add0 <f_open+0x1d4>
 800adc0:	7ebb      	ldrb	r3, [r7, #26]
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d002      	beq.n	800add0 <f_open+0x1d4>
						res = FR_DENIED;
 800adca:	2307      	movs	r3, #7
 800adcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800add0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800add4:	2b00      	cmp	r3, #0
 800add6:	d128      	bne.n	800ae2a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800add8:	79fb      	ldrb	r3, [r7, #7]
 800adda:	f003 0308 	and.w	r3, r3, #8
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d003      	beq.n	800adea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ade2:	79fb      	ldrb	r3, [r7, #7]
 800ade4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ade8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800adf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800adf8:	79fb      	ldrb	r3, [r7, #7]
 800adfa:	f023 0301 	bic.w	r3, r3, #1
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bf14      	ite	ne
 800ae02:	2301      	movne	r3, #1
 800ae04:	2300      	moveq	r3, #0
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	461a      	mov	r2, r3
 800ae0a:	f107 0314 	add.w	r3, r7, #20
 800ae0e:	4611      	mov	r1, r2
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fa79 	bl	8009308 <inc_lock>
 800ae16:	4602      	mov	r2, r0
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d102      	bne.n	800ae2a <f_open+0x22e>
 800ae24:	2302      	movs	r3, #2
 800ae26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ae2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f040 8095 	bne.w	800af5e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7ff f89d 	bl	8009f7a <ld_clust>
 800ae40:	4602      	mov	r2, r0
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ae46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae48:	331c      	adds	r3, #28
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe f8c4 	bl	8008fd8 <ld_dword>
 800ae50:	4602      	mov	r2, r0
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	88da      	ldrh	r2, [r3, #6]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	79fa      	ldrb	r2, [r7, #7]
 800ae6e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3330      	adds	r3, #48	; 0x30
 800ae86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ae8a:	2100      	movs	r1, #0
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fe f92e 	bl	80090ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	f003 0320 	and.w	r3, r3, #32
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d060      	beq.n	800af5e <f_open+0x362>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d05c      	beq.n	800af5e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	68da      	ldr	r2, [r3, #12]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	895b      	ldrh	r3, [r3, #10]
 800aeb0:	025b      	lsls	r3, r3, #9
 800aeb2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	657b      	str	r3, [r7, #84]	; 0x54
 800aec0:	e016      	b.n	800aef0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fe fc0b 	bl	80096e2 <get_fat>
 800aecc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d802      	bhi.n	800aeda <f_open+0x2de>
 800aed4:	2302      	movs	r3, #2
 800aed6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aeda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee0:	d102      	bne.n	800aee8 <f_open+0x2ec>
 800aee2:	2301      	movs	r3, #1
 800aee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aee8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aeea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeec:	1ad3      	subs	r3, r2, r3
 800aeee:	657b      	str	r3, [r7, #84]	; 0x54
 800aef0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d103      	bne.n	800af00 <f_open+0x304>
 800aef8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d8e0      	bhi.n	800aec2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800af06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d127      	bne.n	800af5e <f_open+0x362>
 800af0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af14:	2b00      	cmp	r3, #0
 800af16:	d022      	beq.n	800af5e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800af18:	693b      	ldr	r3, [r7, #16]
 800af1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fe fbc1 	bl	80096a4 <clust2sect>
 800af22:	6478      	str	r0, [r7, #68]	; 0x44
 800af24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <f_open+0x336>
						res = FR_INT_ERR;
 800af2a:	2302      	movs	r3, #2
 800af2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800af30:	e015      	b.n	800af5e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800af32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af34:	0a5a      	lsrs	r2, r3, #9
 800af36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af38:	441a      	add	r2, r3
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	7858      	ldrb	r0, [r3, #1]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a1a      	ldr	r2, [r3, #32]
 800af4c:	2301      	movs	r3, #1
 800af4e:	f7fd ffcd 	bl	8008eec <disk_read>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d002      	beq.n	800af5e <f_open+0x362>
 800af58:	2301      	movs	r3, #1
 800af5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800af5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af62:	2b00      	cmp	r3, #0
 800af64:	d002      	beq.n	800af6c <f_open+0x370>
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2200      	movs	r2, #0
 800af6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800af72:	4611      	mov	r1, r2
 800af74:	4618      	mov	r0, r3
 800af76:	f7fe f92d 	bl	80091d4 <unlock_fs>
 800af7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3760      	adds	r7, #96	; 0x60
 800af82:	46bd      	mov	sp, r7
 800af84:	bd80      	pop	{r7, pc}

0800af86 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b08c      	sub	sp, #48	; 0x30
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	60b9      	str	r1, [r7, #8]
 800af90:	607a      	str	r2, [r7, #4]
 800af92:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2200      	movs	r2, #0
 800af9c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f107 0210 	add.w	r2, r7, #16
 800afa4:	4611      	mov	r1, r2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff fd7c 	bl	800aaa4 <validate>
 800afac:	4603      	mov	r3, r0
 800afae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800afb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d107      	bne.n	800afca <f_write+0x44>
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	7d5b      	ldrb	r3, [r3, #21]
 800afbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800afc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d009      	beq.n	800afde <f_write+0x58>
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800afd0:	4611      	mov	r1, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe f8fe 	bl	80091d4 <unlock_fs>
 800afd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afdc:	e173      	b.n	800b2c6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	7d1b      	ldrb	r3, [r3, #20]
 800afe2:	f003 0302 	and.w	r3, r3, #2
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <f_write+0x72>
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2107      	movs	r1, #7
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fe f8f0 	bl	80091d4 <unlock_fs>
 800aff4:	2307      	movs	r3, #7
 800aff6:	e166      	b.n	800b2c6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	699a      	ldr	r2, [r3, #24]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	441a      	add	r2, r3
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	429a      	cmp	r2, r3
 800b006:	f080 814b 	bcs.w	800b2a0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	699b      	ldr	r3, [r3, #24]
 800b00e:	43db      	mvns	r3, r3
 800b010:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b012:	e145      	b.n	800b2a0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f040 8101 	bne.w	800b224 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	0a5b      	lsrs	r3, r3, #9
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	8952      	ldrh	r2, [r2, #10]
 800b02c:	3a01      	subs	r2, #1
 800b02e:	4013      	ands	r3, r2
 800b030:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d14d      	bne.n	800b0d4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10c      	bne.n	800b05a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d11a      	bne.n	800b082 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2100      	movs	r1, #0
 800b050:	4618      	mov	r0, r3
 800b052:	f7fe fd3f 	bl	8009ad4 <create_chain>
 800b056:	62b8      	str	r0, [r7, #40]	; 0x28
 800b058:	e013      	b.n	800b082 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d007      	beq.n	800b072 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	699b      	ldr	r3, [r3, #24]
 800b066:	4619      	mov	r1, r3
 800b068:	68f8      	ldr	r0, [r7, #12]
 800b06a:	f7fe fdcb 	bl	8009c04 <clmt_clust>
 800b06e:	62b8      	str	r0, [r7, #40]	; 0x28
 800b070:	e007      	b.n	800b082 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b072:	68fa      	ldr	r2, [r7, #12]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	69db      	ldr	r3, [r3, #28]
 800b078:	4619      	mov	r1, r3
 800b07a:	4610      	mov	r0, r2
 800b07c:	f7fe fd2a 	bl	8009ad4 <create_chain>
 800b080:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 8110 	beq.w	800b2aa <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d109      	bne.n	800b0a4 <f_write+0x11e>
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2202      	movs	r2, #2
 800b094:	755a      	strb	r2, [r3, #21]
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2102      	movs	r1, #2
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe f89a 	bl	80091d4 <unlock_fs>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e110      	b.n	800b2c6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0aa:	d109      	bne.n	800b0c0 <f_write+0x13a>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	755a      	strb	r2, [r3, #21]
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	2101      	movs	r1, #1
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7fe f88c 	bl	80091d4 <unlock_fs>
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e102      	b.n	800b2c6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0c4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d102      	bne.n	800b0d4 <f_write+0x14e>
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0d2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	7d1b      	ldrb	r3, [r3, #20]
 800b0d8:	b25b      	sxtb	r3, r3
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	da1d      	bge.n	800b11a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	7858      	ldrb	r0, [r3, #1]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6a1a      	ldr	r2, [r3, #32]
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	f7fd ff1d 	bl	8008f2c <disk_write>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d009      	beq.n	800b10c <f_write+0x186>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	755a      	strb	r2, [r3, #21]
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2101      	movs	r1, #1
 800b102:	4618      	mov	r0, r3
 800b104:	f7fe f866 	bl	80091d4 <unlock_fs>
 800b108:	2301      	movs	r3, #1
 800b10a:	e0dc      	b.n	800b2c6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	7d1b      	ldrb	r3, [r3, #20]
 800b110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b114:	b2da      	uxtb	r2, r3
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	69db      	ldr	r3, [r3, #28]
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f7fe fabe 	bl	80096a4 <clust2sect>
 800b128:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d109      	bne.n	800b144 <f_write+0x1be>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2202      	movs	r2, #2
 800b134:	755a      	strb	r2, [r3, #21]
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	2102      	movs	r1, #2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f7fe f84a 	bl	80091d4 <unlock_fs>
 800b140:	2302      	movs	r3, #2
 800b142:	e0c0      	b.n	800b2c6 <f_write+0x340>
			sect += csect;
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	4413      	add	r3, r2
 800b14a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	0a5b      	lsrs	r3, r3, #9
 800b150:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d041      	beq.n	800b1dc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	4413      	add	r3, r2
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	8952      	ldrh	r2, [r2, #10]
 800b162:	4293      	cmp	r3, r2
 800b164:	d905      	bls.n	800b172 <f_write+0x1ec>
					cc = fs->csize - csect;
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	895b      	ldrh	r3, [r3, #10]
 800b16a:	461a      	mov	r2, r3
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	7858      	ldrb	r0, [r3, #1]
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	697a      	ldr	r2, [r7, #20]
 800b17a:	69f9      	ldr	r1, [r7, #28]
 800b17c:	f7fd fed6 	bl	8008f2c <disk_write>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d009      	beq.n	800b19a <f_write+0x214>
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2201      	movs	r2, #1
 800b18a:	755a      	strb	r2, [r3, #21]
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	2101      	movs	r1, #1
 800b190:	4618      	mov	r0, r3
 800b192:	f7fe f81f 	bl	80091d4 <unlock_fs>
 800b196:	2301      	movs	r3, #1
 800b198:	e095      	b.n	800b2c6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	6a1a      	ldr	r2, [r3, #32]
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	1ad3      	subs	r3, r2, r3
 800b1a2:	6a3a      	ldr	r2, [r7, #32]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d915      	bls.n	800b1d4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6a1a      	ldr	r2, [r3, #32]
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	1ad3      	subs	r3, r2, r3
 800b1b6:	025b      	lsls	r3, r3, #9
 800b1b8:	69fa      	ldr	r2, [r7, #28]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	f7fd ff73 	bl	80090ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	7d1b      	ldrb	r3, [r3, #20]
 800b1ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1ce:	b2da      	uxtb	r2, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	025b      	lsls	r3, r3, #9
 800b1d8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b1da:	e044      	b.n	800b266 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a1b      	ldr	r3, [r3, #32]
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d01b      	beq.n	800b21e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	699a      	ldr	r2, [r3, #24]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d215      	bcs.n	800b21e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	7858      	ldrb	r0, [r3, #1]
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	697a      	ldr	r2, [r7, #20]
 800b200:	f7fd fe74 	bl	8008eec <disk_read>
 800b204:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b206:	2b00      	cmp	r3, #0
 800b208:	d009      	beq.n	800b21e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2201      	movs	r2, #1
 800b20e:	755a      	strb	r2, [r3, #21]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	2101      	movs	r1, #1
 800b214:	4618      	mov	r0, r3
 800b216:	f7fd ffdd 	bl	80091d4 <unlock_fs>
 800b21a:	2301      	movs	r3, #1
 800b21c:	e053      	b.n	800b2c6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	699b      	ldr	r3, [r3, #24]
 800b228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b230:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	429a      	cmp	r2, r3
 800b238:	d901      	bls.n	800b23e <f_write+0x2b8>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	699b      	ldr	r3, [r3, #24]
 800b248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b24c:	4413      	add	r3, r2
 800b24e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b250:	69f9      	ldr	r1, [r7, #28]
 800b252:	4618      	mov	r0, r3
 800b254:	f7fd ff2a 	bl	80090ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	7d1b      	ldrb	r3, [r3, #20]
 800b25c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b260:	b2da      	uxtb	r2, r3
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b266:	69fa      	ldr	r2, [r7, #28]
 800b268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26a:	4413      	add	r3, r2
 800b26c:	61fb      	str	r3, [r7, #28]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	699a      	ldr	r2, [r3, #24]
 800b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b274:	441a      	add	r2, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	619a      	str	r2, [r3, #24]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	68da      	ldr	r2, [r3, #12]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	429a      	cmp	r2, r3
 800b284:	bf38      	it	cc
 800b286:	461a      	movcc	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	60da      	str	r2, [r3, #12]
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	441a      	add	r2, r3
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	601a      	str	r2, [r3, #0]
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f47f aeb6 	bne.w	800b014 <f_write+0x8e>
 800b2a8:	e000      	b.n	800b2ac <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b2aa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	7d1b      	ldrb	r3, [r3, #20]
 800b2b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	2100      	movs	r1, #0
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7fd ff88 	bl	80091d4 <unlock_fs>
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3730      	adds	r7, #48	; 0x30
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}

0800b2ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b2ce:	b580      	push	{r7, lr}
 800b2d0:	b086      	sub	sp, #24
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f107 0208 	add.w	r2, r7, #8
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7ff fbe0 	bl	800aaa4 <validate>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d16d      	bne.n	800b3ca <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	7d1b      	ldrb	r3, [r3, #20]
 800b2f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d067      	beq.n	800b3ca <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	7d1b      	ldrb	r3, [r3, #20]
 800b2fe:	b25b      	sxtb	r3, r3
 800b300:	2b00      	cmp	r3, #0
 800b302:	da1a      	bge.n	800b33a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	7858      	ldrb	r0, [r3, #1]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a1a      	ldr	r2, [r3, #32]
 800b312:	2301      	movs	r3, #1
 800b314:	f7fd fe0a 	bl	8008f2c <disk_write>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d006      	beq.n	800b32c <f_sync+0x5e>
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2101      	movs	r1, #1
 800b322:	4618      	mov	r0, r3
 800b324:	f7fd ff56 	bl	80091d4 <unlock_fs>
 800b328:	2301      	movs	r3, #1
 800b32a:	e055      	b.n	800b3d8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	7d1b      	ldrb	r3, [r3, #20]
 800b330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b334:	b2da      	uxtb	r2, r3
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b33a:	f7fd fd39 	bl	8008db0 <get_fattime>
 800b33e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	4619      	mov	r1, r3
 800b348:	4610      	mov	r0, r2
 800b34a:	f7fe f90f 	bl	800956c <move_window>
 800b34e:	4603      	mov	r3, r0
 800b350:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d138      	bne.n	800b3ca <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b35c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	330b      	adds	r3, #11
 800b362:	781a      	ldrb	r2, [r3, #0]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	330b      	adds	r3, #11
 800b368:	f042 0220 	orr.w	r2, r2, #32
 800b36c:	b2d2      	uxtb	r2, r2
 800b36e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6818      	ldr	r0, [r3, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	461a      	mov	r2, r3
 800b37a:	68f9      	ldr	r1, [r7, #12]
 800b37c:	f7fe fe1c 	bl	8009fb8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f103 021c 	add.w	r2, r3, #28
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	4619      	mov	r1, r3
 800b38c:	4610      	mov	r0, r2
 800b38e:	f7fd fe61 	bl	8009054 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	3316      	adds	r3, #22
 800b396:	6939      	ldr	r1, [r7, #16]
 800b398:	4618      	mov	r0, r3
 800b39a:	f7fd fe5b 	bl	8009054 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3312      	adds	r3, #18
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f7fd fe3a 	bl	800901e <st_word>
					fs->wflag = 1;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe f908 	bl	80095c8 <sync_fs>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	7d1b      	ldrb	r3, [r3, #20]
 800b3c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3c4:	b2da      	uxtb	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	7dfa      	ldrb	r2, [r7, #23]
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7fd feff 	bl	80091d4 <unlock_fs>
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff ff70 	bl	800b2ce <f_sync>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d11d      	bne.n	800b434 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f107 0208 	add.w	r2, r7, #8
 800b3fe:	4611      	mov	r1, r2
 800b400:	4618      	mov	r0, r3
 800b402:	f7ff fb4f 	bl	800aaa4 <validate>
 800b406:	4603      	mov	r3, r0
 800b408:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d111      	bne.n	800b434 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe f805 	bl	8009424 <dec_lock>
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b41e:	7bfb      	ldrb	r3, [r7, #15]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d102      	bne.n	800b42a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2100      	movs	r1, #0
 800b42e:	4618      	mov	r0, r3
 800b430:	f7fd fed0 	bl	80091d4 <unlock_fs>
#endif
		}
	}
	return res;
 800b434:	7bfb      	ldrb	r3, [r7, #15]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b086      	sub	sp, #24
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <f_opendir+0x14>
 800b44e:	2309      	movs	r3, #9
 800b450:	e06a      	b.n	800b528 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800b456:	f107 010c 	add.w	r1, r7, #12
 800b45a:	463b      	mov	r3, r7
 800b45c:	2200      	movs	r2, #0
 800b45e:	4618      	mov	r0, r3
 800b460:	f7ff f8cc 	bl	800a5fc <find_volume>
 800b464:	4603      	mov	r3, r0
 800b466:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b468:	7dfb      	ldrb	r3, [r7, #23]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d14f      	bne.n	800b50e <f_opendir+0xd0>
		obj->fs = fs;
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7fe ffb3 	bl	800a3e4 <follow_path>
 800b47e:	4603      	mov	r3, r0
 800b480:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d13d      	bne.n	800b504 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b48e:	b25b      	sxtb	r3, r3
 800b490:	2b00      	cmp	r3, #0
 800b492:	db12      	blt.n	800b4ba <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	799b      	ldrb	r3, [r3, #6]
 800b498:	f003 0310 	and.w	r3, r3, #16
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00a      	beq.n	800b4b6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800b4a0:	68fa      	ldr	r2, [r7, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	4610      	mov	r0, r2
 800b4aa:	f7fe fd66 	bl	8009f7a <ld_clust>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	609a      	str	r2, [r3, #8]
 800b4b4:	e001      	b.n	800b4ba <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800b4b6:	2305      	movs	r3, #5
 800b4b8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d121      	bne.n	800b504 <f_opendir+0xc6>
				obj->id = fs->id;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	88da      	ldrh	r2, [r3, #6]
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7fe fbce 	bl	8009c6c <dir_sdi>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800b4d4:	7dfb      	ldrb	r3, [r7, #23]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d114      	bne.n	800b504 <f_opendir+0xc6>
					if (obj->sclust) {
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d00d      	beq.n	800b4fe <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800b4e2:	2100      	movs	r1, #0
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f7fd ff0f 	bl	8009308 <inc_lock>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	691b      	ldr	r3, [r3, #16]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d105      	bne.n	800b504 <f_opendir+0xc6>
 800b4f8:	2312      	movs	r3, #18
 800b4fa:	75fb      	strb	r3, [r7, #23]
 800b4fc:	e002      	b.n	800b504 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	2200      	movs	r2, #0
 800b502:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800b504:	7dfb      	ldrb	r3, [r7, #23]
 800b506:	2b04      	cmp	r3, #4
 800b508:	d101      	bne.n	800b50e <f_opendir+0xd0>
 800b50a:	2305      	movs	r3, #5
 800b50c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <f_opendir+0xdc>
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	2200      	movs	r2, #0
 800b518:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	7dfa      	ldrb	r2, [r7, #23]
 800b51e:	4611      	mov	r1, r2
 800b520:	4618      	mov	r0, r3
 800b522:	f7fd fe57 	bl	80091d4 <unlock_fs>
 800b526:	7dfb      	ldrb	r3, [r7, #23]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f107 0208 	add.w	r2, r7, #8
 800b53e:	4611      	mov	r1, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff faaf 	bl	800aaa4 <validate>
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d115      	bne.n	800b57c <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	691b      	ldr	r3, [r3, #16]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d006      	beq.n	800b566 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fd ff61 	bl	8009424 <dec_lock>
 800b562:	4603      	mov	r3, r0
 800b564:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800b566:	7bfb      	ldrb	r3, [r7, #15]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d102      	bne.n	800b572 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	2100      	movs	r1, #0
 800b576:	4618      	mov	r0, r3
 800b578:	f7fd fe2c 	bl	80091d4 <unlock_fs>
#endif
	}
	return res;
 800b57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
 800b58e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f107 0208 	add.w	r2, r7, #8
 800b596:	4611      	mov	r1, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f7ff fa83 	bl	800aaa4 <validate>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d126      	bne.n	800b5f6 <f_readdir+0x70>
		if (!fno) {
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d106      	bne.n	800b5bc <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7fe fb5b 	bl	8009c6c <dir_sdi>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	73fb      	strb	r3, [r7, #15]
 800b5ba:	e01c      	b.n	800b5f6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800b5bc:	2100      	movs	r1, #0
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7fe fd1a 	bl	8009ff8 <dir_read>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	2b04      	cmp	r3, #4
 800b5cc:	d101      	bne.n	800b5d2 <f_readdir+0x4c>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800b5d2:	7bfb      	ldrb	r3, [r7, #15]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10e      	bne.n	800b5f6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f7fe fe0e 	bl	800a1fc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f7fe fbbd 	bl	8009d62 <dir_next>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800b5ec:	7bfb      	ldrb	r3, [r7, #15]
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d101      	bne.n	800b5f6 <f_readdir+0x70>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	7bfa      	ldrb	r2, [r7, #15]
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7fd fde9 	bl	80091d4 <unlock_fs>
 800b602:	7bfb      	ldrb	r3, [r7, #15]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3710      	adds	r7, #16
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b090      	sub	sp, #64	; 0x40
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800b616:	f107 010c 	add.w	r1, r7, #12
 800b61a:	1d3b      	adds	r3, r7, #4
 800b61c:	2200      	movs	r2, #0
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fe ffec 	bl	800a5fc <find_volume>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800b62a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d11f      	bne.n	800b672 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	f107 030c 	add.w	r3, r7, #12
 800b638:	4611      	mov	r1, r2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fe fed2 	bl	800a3e4 <follow_path>
 800b640:	4603      	mov	r3, r0
 800b642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800b646:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d111      	bne.n	800b672 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800b64e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b652:	b25b      	sxtb	r3, r3
 800b654:	2b00      	cmp	r3, #0
 800b656:	da03      	bge.n	800b660 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800b658:	2306      	movs	r3, #6
 800b65a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b65e:	e008      	b.n	800b672 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d005      	beq.n	800b672 <f_stat+0x66>
 800b666:	f107 030c 	add.w	r3, r7, #12
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe fdc5 	bl	800a1fc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b678:	4611      	mov	r1, r2
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fd fdaa 	bl	80091d4 <unlock_fs>
 800b680:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b684:	4618      	mov	r0, r3
 800b686:	3740      	adds	r7, #64	; 0x40
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b09e      	sub	sp, #120	; 0x78
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800b694:	2300      	movs	r3, #0
 800b696:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b698:	f107 010c 	add.w	r1, r7, #12
 800b69c:	1d3b      	adds	r3, r7, #4
 800b69e:	2202      	movs	r2, #2
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe ffab 	bl	800a5fc <find_volume>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800b6b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f040 808e 	bne.w	800b7d6 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe fe8e 	bl	800a3e4 <follow_path>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800b6ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d108      	bne.n	800b6e8 <f_unlink+0x5c>
 800b6d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b6da:	2102      	movs	r1, #2
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fd fd95 	bl	800920c <chk_lock>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800b6e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d172      	bne.n	800b7d6 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800b6f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b6f4:	b25b      	sxtb	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	da03      	bge.n	800b702 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800b6fa:	2306      	movs	r3, #6
 800b6fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800b700:	e008      	b.n	800b714 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800b702:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b706:	f003 0301 	and.w	r3, r3, #1
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d002      	beq.n	800b714 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800b70e:	2307      	movs	r3, #7
 800b710:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800b714:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d134      	bne.n	800b786 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b720:	4611      	mov	r1, r2
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fc29 	bl	8009f7a <ld_clust>
 800b728:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800b72a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800b72e:	f003 0310 	and.w	r3, r3, #16
 800b732:	2b00      	cmp	r3, #0
 800b734:	d027      	beq.n	800b786 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800b73a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b73c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800b73e:	f107 0310 	add.w	r3, r7, #16
 800b742:	2100      	movs	r1, #0
 800b744:	4618      	mov	r0, r3
 800b746:	f7fe fa91 	bl	8009c6c <dir_sdi>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800b750:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b754:	2b00      	cmp	r3, #0
 800b756:	d116      	bne.n	800b786 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800b758:	f107 0310 	add.w	r3, r7, #16
 800b75c:	2100      	movs	r1, #0
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe fc4a 	bl	8009ff8 <dir_read>
 800b764:	4603      	mov	r3, r0
 800b766:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800b76a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d102      	bne.n	800b778 <f_unlink+0xec>
 800b772:	2307      	movs	r3, #7
 800b774:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800b778:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b77c:	2b04      	cmp	r3, #4
 800b77e:	d102      	bne.n	800b786 <f_unlink+0xfa>
 800b780:	2300      	movs	r3, #0
 800b782:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800b786:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d123      	bne.n	800b7d6 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800b78e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b792:	4618      	mov	r0, r3
 800b794:	f7fe fd14 	bl	800a1c0 <dir_remove>
 800b798:	4603      	mov	r3, r0
 800b79a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800b79e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d10c      	bne.n	800b7c0 <f_unlink+0x134>
 800b7a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d009      	beq.n	800b7c0 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800b7ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fe f928 	bl	8009a0a <remove_chain>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800b7c0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <f_unlink+0x14a>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fd fefc 	bl	80095c8 <sync_fs>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 800b7dc:	4611      	mov	r1, r2
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7fd fcf8 	bl	80091d4 <unlock_fs>
 800b7e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3778      	adds	r7, #120	; 0x78
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}

0800b7f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b087      	sub	sp, #28
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b7fe:	2301      	movs	r3, #1
 800b800:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b806:	4b1f      	ldr	r3, [pc, #124]	; (800b884 <FATFS_LinkDriverEx+0x94>)
 800b808:	7a5b      	ldrb	r3, [r3, #9]
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d131      	bne.n	800b874 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b810:	4b1c      	ldr	r3, [pc, #112]	; (800b884 <FATFS_LinkDriverEx+0x94>)
 800b812:	7a5b      	ldrb	r3, [r3, #9]
 800b814:	b2db      	uxtb	r3, r3
 800b816:	461a      	mov	r2, r3
 800b818:	4b1a      	ldr	r3, [pc, #104]	; (800b884 <FATFS_LinkDriverEx+0x94>)
 800b81a:	2100      	movs	r1, #0
 800b81c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b81e:	4b19      	ldr	r3, [pc, #100]	; (800b884 <FATFS_LinkDriverEx+0x94>)
 800b820:	7a5b      	ldrb	r3, [r3, #9]
 800b822:	b2db      	uxtb	r3, r3
 800b824:	4a17      	ldr	r2, [pc, #92]	; (800b884 <FATFS_LinkDriverEx+0x94>)
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4413      	add	r3, r2
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b82e:	4b15      	ldr	r3, [pc, #84]	; (800b884 <FATFS_LinkDriverEx+0x94>)
 800b830:	7a5b      	ldrb	r3, [r3, #9]
 800b832:	b2db      	uxtb	r3, r3
 800b834:	461a      	mov	r2, r3
 800b836:	4b13      	ldr	r3, [pc, #76]	; (800b884 <FATFS_LinkDriverEx+0x94>)
 800b838:	4413      	add	r3, r2
 800b83a:	79fa      	ldrb	r2, [r7, #7]
 800b83c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b83e:	4b11      	ldr	r3, [pc, #68]	; (800b884 <FATFS_LinkDriverEx+0x94>)
 800b840:	7a5b      	ldrb	r3, [r3, #9]
 800b842:	b2db      	uxtb	r3, r3
 800b844:	1c5a      	adds	r2, r3, #1
 800b846:	b2d1      	uxtb	r1, r2
 800b848:	4a0e      	ldr	r2, [pc, #56]	; (800b884 <FATFS_LinkDriverEx+0x94>)
 800b84a:	7251      	strb	r1, [r2, #9]
 800b84c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b84e:	7dbb      	ldrb	r3, [r7, #22]
 800b850:	3330      	adds	r3, #48	; 0x30
 800b852:	b2da      	uxtb	r2, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	3301      	adds	r3, #1
 800b85c:	223a      	movs	r2, #58	; 0x3a
 800b85e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	3302      	adds	r3, #2
 800b864:	222f      	movs	r2, #47	; 0x2f
 800b866:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	3303      	adds	r3, #3
 800b86c:	2200      	movs	r2, #0
 800b86e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b874:	7dfb      	ldrb	r3, [r7, #23]
}
 800b876:	4618      	mov	r0, r3
 800b878:	371c      	adds	r7, #28
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	20001bbc 	.word	0x20001bbc

0800b888 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
 800b890:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b892:	2200      	movs	r2, #0
 800b894:	6839      	ldr	r1, [r7, #0]
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f7ff ffaa 	bl	800b7f0 <FATFS_LinkDriverEx>
 800b89c:	4603      	mov	r3, r0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b086      	sub	sp, #24
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	6039      	str	r1, [r7, #0]
 800b8b0:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60fb      	str	r3, [r7, #12]
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b8ba:	f107 030c 	add.w	r3, r7, #12
 800b8be:	2101      	movs	r1, #1
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f000 f84e 	bl	800b962 <osSemaphoreCreate>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	bf14      	ite	ne
 800b8d4:	2301      	movne	r3, #1
 800b8d6:	2300      	moveq	r3, #0
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	617b      	str	r3, [r7, #20]

    return ret;
 800b8dc:	697b      	ldr	r3, [r7, #20]
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3718      	adds	r7, #24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b082      	sub	sp, #8
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f8ee 	bl	800bad0 <osSemaphoreDelete>
#endif
    return 1;
 800b8f4:	2301      	movs	r3, #1
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3708      	adds	r7, #8
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b084      	sub	sp, #16
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b906:	2300      	movs	r3, #0
 800b908:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800b90a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f85a 	bl	800b9c8 <osSemaphoreWait>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800b91a:	2301      	movs	r3, #1
 800b91c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b91e:	68fb      	ldr	r3, [r7, #12]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 f897 	bl	800ba64 <osSemaphoreRelease>
#endif
}
 800b936:	bf00      	nop
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b93e:	b480      	push	{r7}
 800b940:	b083      	sub	sp, #12
 800b942:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b944:	f3ef 8305 	mrs	r3, IPSR
 800b948:	607b      	str	r3, [r7, #4]
  return(result);
 800b94a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	bf14      	ite	ne
 800b950:	2301      	movne	r3, #1
 800b952:	2300      	moveq	r3, #0
 800b954:	b2db      	uxtb	r3, r3
}
 800b956:	4618      	mov	r0, r3
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b962:	b580      	push	{r7, lr}
 800b964:	b086      	sub	sp, #24
 800b966:	af02      	add	r7, sp, #8
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00f      	beq.n	800b994 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	2b01      	cmp	r3, #1
 800b978:	d10a      	bne.n	800b990 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	2203      	movs	r2, #3
 800b980:	9200      	str	r2, [sp, #0]
 800b982:	2200      	movs	r2, #0
 800b984:	2100      	movs	r1, #0
 800b986:	2001      	movs	r0, #1
 800b988:	f000 f9d2 	bl	800bd30 <xQueueGenericCreateStatic>
 800b98c:	4603      	mov	r3, r0
 800b98e:	e016      	b.n	800b9be <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b990:	2300      	movs	r3, #0
 800b992:	e014      	b.n	800b9be <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2b01      	cmp	r3, #1
 800b998:	d110      	bne.n	800b9bc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b99a:	2203      	movs	r2, #3
 800b99c:	2100      	movs	r1, #0
 800b99e:	2001      	movs	r0, #1
 800b9a0:	f000 fa3e 	bl	800be20 <xQueueGenericCreate>
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d005      	beq.n	800b9b8 <osSemaphoreCreate+0x56>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f000 fac0 	bl	800bf38 <xQueueGenericSend>
      return sema;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	e000      	b.n	800b9be <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b9bc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
	...

0800b9c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b084      	sub	sp, #16
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d101      	bne.n	800b9e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b9dc:	2380      	movs	r3, #128	; 0x80
 800b9de:	e03a      	b.n	800ba56 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d103      	bne.n	800b9f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b9ec:	f04f 33ff 	mov.w	r3, #4294967295
 800b9f0:	60fb      	str	r3, [r7, #12]
 800b9f2:	e009      	b.n	800ba08 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d006      	beq.n	800ba08 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d101      	bne.n	800ba08 <osSemaphoreWait+0x40>
      ticks = 1;
 800ba04:	2301      	movs	r3, #1
 800ba06:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ba08:	f7ff ff99 	bl	800b93e <inHandlerMode>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d017      	beq.n	800ba42 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ba12:	f107 0308 	add.w	r3, r7, #8
 800ba16:	461a      	mov	r2, r3
 800ba18:	2100      	movs	r1, #0
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f000 fe9e 	bl	800c75c <xQueueReceiveFromISR>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d001      	beq.n	800ba2a <osSemaphoreWait+0x62>
      return osErrorOS;
 800ba26:	23ff      	movs	r3, #255	; 0xff
 800ba28:	e015      	b.n	800ba56 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d011      	beq.n	800ba54 <osSemaphoreWait+0x8c>
 800ba30:	4b0b      	ldr	r3, [pc, #44]	; (800ba60 <osSemaphoreWait+0x98>)
 800ba32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba36:	601a      	str	r2, [r3, #0]
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	f3bf 8f6f 	isb	sy
 800ba40:	e008      	b.n	800ba54 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ba42:	68f9      	ldr	r1, [r7, #12]
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f000 fd7d 	bl	800c544 <xQueueSemaphoreTake>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d001      	beq.n	800ba54 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ba50:	23ff      	movs	r3, #255	; 0xff
 800ba52:	e000      	b.n	800ba56 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	e000ed04 	.word	0xe000ed04

0800ba64 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b084      	sub	sp, #16
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ba70:	2300      	movs	r3, #0
 800ba72:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ba74:	f7ff ff63 	bl	800b93e <inHandlerMode>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d016      	beq.n	800baac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ba7e:	f107 0308 	add.w	r3, r7, #8
 800ba82:	4619      	mov	r1, r3
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fbf0 	bl	800c26a <xQueueGiveFromISR>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d001      	beq.n	800ba94 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ba90:	23ff      	movs	r3, #255	; 0xff
 800ba92:	e017      	b.n	800bac4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d013      	beq.n	800bac2 <osSemaphoreRelease+0x5e>
 800ba9a:	4b0c      	ldr	r3, [pc, #48]	; (800bacc <osSemaphoreRelease+0x68>)
 800ba9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	f3bf 8f4f 	dsb	sy
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	e00a      	b.n	800bac2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800baac:	2300      	movs	r3, #0
 800baae:	2200      	movs	r2, #0
 800bab0:	2100      	movs	r1, #0
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fa40 	bl	800bf38 <xQueueGenericSend>
 800bab8:	4603      	mov	r3, r0
 800baba:	2b01      	cmp	r3, #1
 800babc:	d001      	beq.n	800bac2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800babe:	23ff      	movs	r3, #255	; 0xff
 800bac0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bac2:	68fb      	ldr	r3, [r7, #12]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3710      	adds	r7, #16
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	e000ed04 	.word	0xe000ed04

0800bad0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bad8:	f7ff ff31 	bl	800b93e <inHandlerMode>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800bae2:	2382      	movs	r3, #130	; 0x82
 800bae4:	e003      	b.n	800baee <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 feb8 	bl	800c85c <vQueueDelete>

  return osOK; 
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f103 0208 	add.w	r2, r3, #8
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bb0e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f103 0208 	add.w	r2, r3, #8
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f103 0208 	add.w	r2, r3, #8
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb2a:	bf00      	nop
 800bb2c:	370c      	adds	r7, #12
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr

0800bb36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb36:	b480      	push	{r7}
 800bb38:	b083      	sub	sp, #12
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bb44:	bf00      	nop
 800bb46:	370c      	adds	r7, #12
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	689a      	ldr	r2, [r3, #8]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	1c5a      	adds	r2, r3, #1
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	601a      	str	r2, [r3, #0]
}
 800bb8c:	bf00      	nop
 800bb8e:	3714      	adds	r7, #20
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d103      	bne.n	800bbb8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	60fb      	str	r3, [r7, #12]
 800bbb6:	e00c      	b.n	800bbd2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	e002      	b.n	800bbc6 <vListInsert+0x2e>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	60fb      	str	r3, [r7, #12]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68ba      	ldr	r2, [r7, #8]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d2f6      	bcs.n	800bbc0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	685a      	ldr	r2, [r3, #4]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	601a      	str	r2, [r3, #0]
}
 800bbfe:	bf00      	nop
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b085      	sub	sp, #20
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	6892      	ldr	r2, [r2, #8]
 800bc20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	6852      	ldr	r2, [r2, #4]
 800bc2a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d103      	bne.n	800bc3e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	2200      	movs	r2, #0
 800bc42:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	1e5a      	subs	r2, r3, #1
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
	...

0800bc60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bc86:	bf00      	nop
 800bc88:	e7fe      	b.n	800bc88 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bc8a:	f002 fca3 	bl	800e5d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc96:	68f9      	ldr	r1, [r7, #12]
 800bc98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bc9a:	fb01 f303 	mul.w	r3, r1, r3
 800bc9e:	441a      	add	r2, r3
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcba:	3b01      	subs	r3, #1
 800bcbc:	68f9      	ldr	r1, [r7, #12]
 800bcbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcc0:	fb01 f303 	mul.w	r3, r1, r3
 800bcc4:	441a      	add	r2, r3
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	22ff      	movs	r2, #255	; 0xff
 800bcce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	22ff      	movs	r2, #255	; 0xff
 800bcd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d114      	bne.n	800bd0a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d01a      	beq.n	800bd1e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	3310      	adds	r3, #16
 800bcec:	4618      	mov	r0, r3
 800bcee:	f001 fbd5 	bl	800d49c <xTaskRemoveFromEventList>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d012      	beq.n	800bd1e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bcf8:	4b0c      	ldr	r3, [pc, #48]	; (800bd2c <xQueueGenericReset+0xcc>)
 800bcfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcfe:	601a      	str	r2, [r3, #0]
 800bd00:	f3bf 8f4f 	dsb	sy
 800bd04:	f3bf 8f6f 	isb	sy
 800bd08:	e009      	b.n	800bd1e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3310      	adds	r3, #16
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff fef1 	bl	800baf6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	3324      	adds	r3, #36	; 0x24
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff feec 	bl	800baf6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd1e:	f002 fc89 	bl	800e634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd22:	2301      	movs	r3, #1
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	e000ed04 	.word	0xe000ed04

0800bd30 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b08e      	sub	sp, #56	; 0x38
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	60b9      	str	r1, [r7, #8]
 800bd3a:	607a      	str	r2, [r7, #4]
 800bd3c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10a      	bne.n	800bd5a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10a      	bne.n	800bd76 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd72:	bf00      	nop
 800bd74:	e7fe      	b.n	800bd74 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <xQueueGenericCreateStatic+0x52>
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d001      	beq.n	800bd86 <xQueueGenericCreateStatic+0x56>
 800bd82:	2301      	movs	r3, #1
 800bd84:	e000      	b.n	800bd88 <xQueueGenericCreateStatic+0x58>
 800bd86:	2300      	movs	r3, #0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10a      	bne.n	800bda2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	623b      	str	r3, [r7, #32]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d102      	bne.n	800bdae <xQueueGenericCreateStatic+0x7e>
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d101      	bne.n	800bdb2 <xQueueGenericCreateStatic+0x82>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e000      	b.n	800bdb4 <xQueueGenericCreateStatic+0x84>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10a      	bne.n	800bdce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	61fb      	str	r3, [r7, #28]
}
 800bdca:	bf00      	nop
 800bdcc:	e7fe      	b.n	800bdcc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bdce:	2348      	movs	r3, #72	; 0x48
 800bdd0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	2b48      	cmp	r3, #72	; 0x48
 800bdd6:	d00a      	beq.n	800bdee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bdd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bddc:	f383 8811 	msr	BASEPRI, r3
 800bde0:	f3bf 8f6f 	isb	sy
 800bde4:	f3bf 8f4f 	dsb	sy
 800bde8:	61bb      	str	r3, [r7, #24]
}
 800bdea:	bf00      	nop
 800bdec:	e7fe      	b.n	800bdec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bdee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00d      	beq.n	800be16 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800be06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	4613      	mov	r3, r2
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	68b9      	ldr	r1, [r7, #8]
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f000 f83f 	bl	800be94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be18:	4618      	mov	r0, r3
 800be1a:	3730      	adds	r7, #48	; 0x30
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08a      	sub	sp, #40	; 0x28
 800be24:	af02      	add	r7, sp, #8
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	4613      	mov	r3, r2
 800be2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10a      	bne.n	800be4a <xQueueGenericCreate+0x2a>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	613b      	str	r3, [r7, #16]
}
 800be46:	bf00      	nop
 800be48:	e7fe      	b.n	800be48 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	68ba      	ldr	r2, [r7, #8]
 800be4e:	fb02 f303 	mul.w	r3, r2, r3
 800be52:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	3348      	adds	r3, #72	; 0x48
 800be58:	4618      	mov	r0, r3
 800be5a:	f002 fcdd 	bl	800e818 <pvPortMalloc>
 800be5e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800be60:	69bb      	ldr	r3, [r7, #24]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d011      	beq.n	800be8a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	3348      	adds	r3, #72	; 0x48
 800be6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be78:	79fa      	ldrb	r2, [r7, #7]
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	4613      	mov	r3, r2
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	68b9      	ldr	r1, [r7, #8]
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f000 f805 	bl	800be94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be8a:	69bb      	ldr	r3, [r7, #24]
	}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3720      	adds	r7, #32
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}

0800be94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
 800bea0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d103      	bne.n	800beb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	601a      	str	r2, [r3, #0]
 800beae:	e002      	b.n	800beb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	68fa      	ldr	r2, [r7, #12]
 800beba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bec2:	2101      	movs	r1, #1
 800bec4:	69b8      	ldr	r0, [r7, #24]
 800bec6:	f7ff fecb 	bl	800bc60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800beca:	bf00      	nop
 800becc:	3710      	adds	r7, #16
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b082      	sub	sp, #8
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00e      	beq.n	800befe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2200      	movs	r2, #0
 800bef0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bef2:	2300      	movs	r3, #0
 800bef4:	2200      	movs	r2, #0
 800bef6:	2100      	movs	r1, #0
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f81d 	bl	800bf38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b086      	sub	sp, #24
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bf10:	2301      	movs	r3, #1
 800bf12:	617b      	str	r3, [r7, #20]
 800bf14:	2300      	movs	r3, #0
 800bf16:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bf18:	79fb      	ldrb	r3, [r7, #7]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	6939      	ldr	r1, [r7, #16]
 800bf1e:	6978      	ldr	r0, [r7, #20]
 800bf20:	f7ff ff7e 	bl	800be20 <xQueueGenericCreate>
 800bf24:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f7ff ffd3 	bl	800bed2 <prvInitialiseMutex>

		return xNewQueue;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
	}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3718      	adds	r7, #24
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
	...

0800bf38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b08e      	sub	sp, #56	; 0x38
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
 800bf44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bf46:	2300      	movs	r3, #0
 800bf48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10a      	bne.n	800bf6a <xQueueGenericSend+0x32>
	__asm volatile
 800bf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf58:	f383 8811 	msr	BASEPRI, r3
 800bf5c:	f3bf 8f6f 	isb	sy
 800bf60:	f3bf 8f4f 	dsb	sy
 800bf64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf66:	bf00      	nop
 800bf68:	e7fe      	b.n	800bf68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d103      	bne.n	800bf78 <xQueueGenericSend+0x40>
 800bf70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d101      	bne.n	800bf7c <xQueueGenericSend+0x44>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e000      	b.n	800bf7e <xQueueGenericSend+0x46>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10a      	bne.n	800bf98 <xQueueGenericSend+0x60>
	__asm volatile
 800bf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf94:	bf00      	nop
 800bf96:	e7fe      	b.n	800bf96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	2b02      	cmp	r3, #2
 800bf9c:	d103      	bne.n	800bfa6 <xQueueGenericSend+0x6e>
 800bf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d101      	bne.n	800bfaa <xQueueGenericSend+0x72>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e000      	b.n	800bfac <xQueueGenericSend+0x74>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <xQueueGenericSend+0x8e>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	623b      	str	r3, [r7, #32]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfc6:	f001 fc25 	bl	800d814 <xTaskGetSchedulerState>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d102      	bne.n	800bfd6 <xQueueGenericSend+0x9e>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d101      	bne.n	800bfda <xQueueGenericSend+0xa2>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e000      	b.n	800bfdc <xQueueGenericSend+0xa4>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d10a      	bne.n	800bff6 <xQueueGenericSend+0xbe>
	__asm volatile
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	61fb      	str	r3, [r7, #28]
}
 800bff2:	bf00      	nop
 800bff4:	e7fe      	b.n	800bff4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bff6:	f002 faed 	bl	800e5d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c002:	429a      	cmp	r2, r3
 800c004:	d302      	bcc.n	800c00c <xQueueGenericSend+0xd4>
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d129      	bne.n	800c060 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c00c:	683a      	ldr	r2, [r7, #0]
 800c00e:	68b9      	ldr	r1, [r7, #8]
 800c010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c012:	f000 fc5e 	bl	800c8d2 <prvCopyDataToQueue>
 800c016:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d010      	beq.n	800c042 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c022:	3324      	adds	r3, #36	; 0x24
 800c024:	4618      	mov	r0, r3
 800c026:	f001 fa39 	bl	800d49c <xTaskRemoveFromEventList>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d013      	beq.n	800c058 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c030:	4b3f      	ldr	r3, [pc, #252]	; (800c130 <xQueueGenericSend+0x1f8>)
 800c032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c036:	601a      	str	r2, [r3, #0]
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	e00a      	b.n	800c058 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c048:	4b39      	ldr	r3, [pc, #228]	; (800c130 <xQueueGenericSend+0x1f8>)
 800c04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c04e:	601a      	str	r2, [r3, #0]
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c058:	f002 faec 	bl	800e634 <vPortExitCritical>
				return pdPASS;
 800c05c:	2301      	movs	r3, #1
 800c05e:	e063      	b.n	800c128 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d103      	bne.n	800c06e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c066:	f002 fae5 	bl	800e634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c06a:	2300      	movs	r3, #0
 800c06c:	e05c      	b.n	800c128 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c070:	2b00      	cmp	r3, #0
 800c072:	d106      	bne.n	800c082 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c074:	f107 0314 	add.w	r3, r7, #20
 800c078:	4618      	mov	r0, r3
 800c07a:	f001 fa71 	bl	800d560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c07e:	2301      	movs	r3, #1
 800c080:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c082:	f002 fad7 	bl	800e634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c086:	f000 ffeb 	bl	800d060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c08a:	f002 faa3 	bl	800e5d4 <vPortEnterCritical>
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c094:	b25b      	sxtb	r3, r3
 800c096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c09a:	d103      	bne.n	800c0a4 <xQueueGenericSend+0x16c>
 800c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0aa:	b25b      	sxtb	r3, r3
 800c0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b0:	d103      	bne.n	800c0ba <xQueueGenericSend+0x182>
 800c0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0ba:	f002 fabb 	bl	800e634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0be:	1d3a      	adds	r2, r7, #4
 800c0c0:	f107 0314 	add.w	r3, r7, #20
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f001 fa60 	bl	800d58c <xTaskCheckForTimeOut>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d124      	bne.n	800c11c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c0d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0d4:	f000 fcf5 	bl	800cac2 <prvIsQueueFull>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d018      	beq.n	800c110 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	3310      	adds	r3, #16
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	4611      	mov	r1, r2
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f001 f988 	bl	800d3fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c0ee:	f000 fc80 	bl	800c9f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c0f2:	f000 ffc3 	bl	800d07c <xTaskResumeAll>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f47f af7c 	bne.w	800bff6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c0fe:	4b0c      	ldr	r3, [pc, #48]	; (800c130 <xQueueGenericSend+0x1f8>)
 800c100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	e772      	b.n	800bff6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c112:	f000 fc6e 	bl	800c9f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c116:	f000 ffb1 	bl	800d07c <xTaskResumeAll>
 800c11a:	e76c      	b.n	800bff6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c11e:	f000 fc68 	bl	800c9f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c122:	f000 ffab 	bl	800d07c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c126:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3738      	adds	r7, #56	; 0x38
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b090      	sub	sp, #64	; 0x40
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d10a      	bne.n	800c162 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c15e:	bf00      	nop
 800c160:	e7fe      	b.n	800c160 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d103      	bne.n	800c170 <xQueueGenericSendFromISR+0x3c>
 800c168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <xQueueGenericSendFromISR+0x40>
 800c170:	2301      	movs	r3, #1
 800c172:	e000      	b.n	800c176 <xQueueGenericSendFromISR+0x42>
 800c174:	2300      	movs	r3, #0
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10a      	bne.n	800c190 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c18c:	bf00      	nop
 800c18e:	e7fe      	b.n	800c18e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	2b02      	cmp	r3, #2
 800c194:	d103      	bne.n	800c19e <xQueueGenericSendFromISR+0x6a>
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d101      	bne.n	800c1a2 <xQueueGenericSendFromISR+0x6e>
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e000      	b.n	800c1a4 <xQueueGenericSendFromISR+0x70>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d10a      	bne.n	800c1be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ac:	f383 8811 	msr	BASEPRI, r3
 800c1b0:	f3bf 8f6f 	isb	sy
 800c1b4:	f3bf 8f4f 	dsb	sy
 800c1b8:	623b      	str	r3, [r7, #32]
}
 800c1ba:	bf00      	nop
 800c1bc:	e7fe      	b.n	800c1bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1be:	f002 faeb 	bl	800e798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c1c2:	f3ef 8211 	mrs	r2, BASEPRI
 800c1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	61fa      	str	r2, [r7, #28]
 800c1d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c1da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d302      	bcc.n	800c1f0 <xQueueGenericSendFromISR+0xbc>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	d12f      	bne.n	800c250 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c200:	683a      	ldr	r2, [r7, #0]
 800c202:	68b9      	ldr	r1, [r7, #8]
 800c204:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c206:	f000 fb64 	bl	800c8d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c20a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c212:	d112      	bne.n	800c23a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d016      	beq.n	800c24a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21e:	3324      	adds	r3, #36	; 0x24
 800c220:	4618      	mov	r0, r3
 800c222:	f001 f93b 	bl	800d49c <xTaskRemoveFromEventList>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00e      	beq.n	800c24a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d00b      	beq.n	800c24a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2201      	movs	r2, #1
 800c236:	601a      	str	r2, [r3, #0]
 800c238:	e007      	b.n	800c24a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c23a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c23e:	3301      	adds	r3, #1
 800c240:	b2db      	uxtb	r3, r3
 800c242:	b25a      	sxtb	r2, r3
 800c244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c24a:	2301      	movs	r3, #1
 800c24c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c24e:	e001      	b.n	800c254 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c250:	2300      	movs	r3, #0
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c256:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c25e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c262:	4618      	mov	r0, r3
 800c264:	3740      	adds	r7, #64	; 0x40
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b08e      	sub	sp, #56	; 0x38
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10a      	bne.n	800c294 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	623b      	str	r3, [r7, #32]
}
 800c290:	bf00      	nop
 800c292:	e7fe      	b.n	800c292 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00a      	beq.n	800c2b2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a0:	f383 8811 	msr	BASEPRI, r3
 800c2a4:	f3bf 8f6f 	isb	sy
 800c2a8:	f3bf 8f4f 	dsb	sy
 800c2ac:	61fb      	str	r3, [r7, #28]
}
 800c2ae:	bf00      	nop
 800c2b0:	e7fe      	b.n	800c2b0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d103      	bne.n	800c2c2 <xQueueGiveFromISR+0x58>
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d101      	bne.n	800c2c6 <xQueueGiveFromISR+0x5c>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e000      	b.n	800c2c8 <xQueueGiveFromISR+0x5e>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10a      	bne.n	800c2e2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	61bb      	str	r3, [r7, #24]
}
 800c2de:	bf00      	nop
 800c2e0:	e7fe      	b.n	800c2e0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c2e2:	f002 fa59 	bl	800e798 <vPortValidateInterruptPriority>
	__asm volatile
 800c2e6:	f3ef 8211 	mrs	r2, BASEPRI
 800c2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ee:	f383 8811 	msr	BASEPRI, r3
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	f3bf 8f4f 	dsb	sy
 800c2fa:	617a      	str	r2, [r7, #20]
 800c2fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c2fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c300:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c306:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c30e:	429a      	cmp	r2, r3
 800c310:	d22b      	bcs.n	800c36a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c322:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c324:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c32c:	d112      	bne.n	800c354 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c332:	2b00      	cmp	r3, #0
 800c334:	d016      	beq.n	800c364 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c338:	3324      	adds	r3, #36	; 0x24
 800c33a:	4618      	mov	r0, r3
 800c33c:	f001 f8ae 	bl	800d49c <xTaskRemoveFromEventList>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00e      	beq.n	800c364 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00b      	beq.n	800c364 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	2201      	movs	r2, #1
 800c350:	601a      	str	r2, [r3, #0]
 800c352:	e007      	b.n	800c364 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c358:	3301      	adds	r3, #1
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	b25a      	sxtb	r2, r3
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c364:	2301      	movs	r3, #1
 800c366:	637b      	str	r3, [r7, #52]	; 0x34
 800c368:	e001      	b.n	800c36e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c36a:	2300      	movs	r3, #0
 800c36c:	637b      	str	r3, [r7, #52]	; 0x34
 800c36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c370:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f383 8811 	msr	BASEPRI, r3
}
 800c378:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3738      	adds	r7, #56	; 0x38
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b08c      	sub	sp, #48	; 0x30
 800c388:	af00      	add	r7, sp, #0
 800c38a:	60f8      	str	r0, [r7, #12]
 800c38c:	60b9      	str	r1, [r7, #8]
 800c38e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c390:	2300      	movs	r3, #0
 800c392:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d10a      	bne.n	800c3b4 <xQueueReceive+0x30>
	__asm volatile
 800c39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a2:	f383 8811 	msr	BASEPRI, r3
 800c3a6:	f3bf 8f6f 	isb	sy
 800c3aa:	f3bf 8f4f 	dsb	sy
 800c3ae:	623b      	str	r3, [r7, #32]
}
 800c3b0:	bf00      	nop
 800c3b2:	e7fe      	b.n	800c3b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d103      	bne.n	800c3c2 <xQueueReceive+0x3e>
 800c3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d101      	bne.n	800c3c6 <xQueueReceive+0x42>
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e000      	b.n	800c3c8 <xQueueReceive+0x44>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10a      	bne.n	800c3e2 <xQueueReceive+0x5e>
	__asm volatile
 800c3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d0:	f383 8811 	msr	BASEPRI, r3
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	61fb      	str	r3, [r7, #28]
}
 800c3de:	bf00      	nop
 800c3e0:	e7fe      	b.n	800c3e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3e2:	f001 fa17 	bl	800d814 <xTaskGetSchedulerState>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <xQueueReceive+0x6e>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d101      	bne.n	800c3f6 <xQueueReceive+0x72>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e000      	b.n	800c3f8 <xQueueReceive+0x74>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10a      	bne.n	800c412 <xQueueReceive+0x8e>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	61bb      	str	r3, [r7, #24]
}
 800c40e:	bf00      	nop
 800c410:	e7fe      	b.n	800c410 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c412:	f002 f8df 	bl	800e5d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c41a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d01f      	beq.n	800c462 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c422:	68b9      	ldr	r1, [r7, #8]
 800c424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c426:	f000 fabe 	bl	800c9a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42c:	1e5a      	subs	r2, r3, #1
 800c42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c430:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00f      	beq.n	800c45a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43c:	3310      	adds	r3, #16
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 f82c 	bl	800d49c <xTaskRemoveFromEventList>
 800c444:	4603      	mov	r3, r0
 800c446:	2b00      	cmp	r3, #0
 800c448:	d007      	beq.n	800c45a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c44a:	4b3d      	ldr	r3, [pc, #244]	; (800c540 <xQueueReceive+0x1bc>)
 800c44c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c450:	601a      	str	r2, [r3, #0]
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c45a:	f002 f8eb 	bl	800e634 <vPortExitCritical>
				return pdPASS;
 800c45e:	2301      	movs	r3, #1
 800c460:	e069      	b.n	800c536 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d103      	bne.n	800c470 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c468:	f002 f8e4 	bl	800e634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c46c:	2300      	movs	r3, #0
 800c46e:	e062      	b.n	800c536 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c472:	2b00      	cmp	r3, #0
 800c474:	d106      	bne.n	800c484 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c476:	f107 0310 	add.w	r3, r7, #16
 800c47a:	4618      	mov	r0, r3
 800c47c:	f001 f870 	bl	800d560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c480:	2301      	movs	r3, #1
 800c482:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c484:	f002 f8d6 	bl	800e634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c488:	f000 fdea 	bl	800d060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c48c:	f002 f8a2 	bl	800e5d4 <vPortEnterCritical>
 800c490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c496:	b25b      	sxtb	r3, r3
 800c498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c49c:	d103      	bne.n	800c4a6 <xQueueReceive+0x122>
 800c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4ac:	b25b      	sxtb	r3, r3
 800c4ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b2:	d103      	bne.n	800c4bc <xQueueReceive+0x138>
 800c4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4bc:	f002 f8ba 	bl	800e634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4c0:	1d3a      	adds	r2, r7, #4
 800c4c2:	f107 0310 	add.w	r3, r7, #16
 800c4c6:	4611      	mov	r1, r2
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f001 f85f 	bl	800d58c <xTaskCheckForTimeOut>
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d123      	bne.n	800c51c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4d6:	f000 fade 	bl	800ca96 <prvIsQueueEmpty>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d017      	beq.n	800c510 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e2:	3324      	adds	r3, #36	; 0x24
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	4611      	mov	r1, r2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f000 ff87 	bl	800d3fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4f0:	f000 fa7f 	bl	800c9f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4f4:	f000 fdc2 	bl	800d07c <xTaskResumeAll>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d189      	bne.n	800c412 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c4fe:	4b10      	ldr	r3, [pc, #64]	; (800c540 <xQueueReceive+0x1bc>)
 800c500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c504:	601a      	str	r2, [r3, #0]
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	f3bf 8f6f 	isb	sy
 800c50e:	e780      	b.n	800c412 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c512:	f000 fa6e 	bl	800c9f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c516:	f000 fdb1 	bl	800d07c <xTaskResumeAll>
 800c51a:	e77a      	b.n	800c412 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c51c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c51e:	f000 fa68 	bl	800c9f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c522:	f000 fdab 	bl	800d07c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c528:	f000 fab5 	bl	800ca96 <prvIsQueueEmpty>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f43f af6f 	beq.w	800c412 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c534:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c536:	4618      	mov	r0, r3
 800c538:	3730      	adds	r7, #48	; 0x30
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	e000ed04 	.word	0xe000ed04

0800c544 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08e      	sub	sp, #56	; 0x38
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c54e:	2300      	movs	r3, #0
 800c550:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c556:	2300      	movs	r3, #0
 800c558:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10a      	bne.n	800c576 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c564:	f383 8811 	msr	BASEPRI, r3
 800c568:	f3bf 8f6f 	isb	sy
 800c56c:	f3bf 8f4f 	dsb	sy
 800c570:	623b      	str	r3, [r7, #32]
}
 800c572:	bf00      	nop
 800c574:	e7fe      	b.n	800c574 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00a      	beq.n	800c594 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	61fb      	str	r3, [r7, #28]
}
 800c590:	bf00      	nop
 800c592:	e7fe      	b.n	800c592 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c594:	f001 f93e 	bl	800d814 <xTaskGetSchedulerState>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d102      	bne.n	800c5a4 <xQueueSemaphoreTake+0x60>
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <xQueueSemaphoreTake+0x64>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e000      	b.n	800c5aa <xQueueSemaphoreTake+0x66>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10a      	bne.n	800c5c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	61bb      	str	r3, [r7, #24]
}
 800c5c0:	bf00      	nop
 800c5c2:	e7fe      	b.n	800c5c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5c4:	f002 f806 	bl	800e5d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d024      	beq.n	800c61e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d6:	1e5a      	subs	r2, r3, #1
 800c5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d104      	bne.n	800c5ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c5e4:	f001 fabe 	bl	800db64 <pvTaskIncrementMutexHeldCount>
 800c5e8:	4602      	mov	r2, r0
 800c5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00f      	beq.n	800c616 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	3310      	adds	r3, #16
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 ff4e 	bl	800d49c <xTaskRemoveFromEventList>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d007      	beq.n	800c616 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c606:	4b54      	ldr	r3, [pc, #336]	; (800c758 <xQueueSemaphoreTake+0x214>)
 800c608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c60c:	601a      	str	r2, [r3, #0]
 800c60e:	f3bf 8f4f 	dsb	sy
 800c612:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c616:	f002 f80d 	bl	800e634 <vPortExitCritical>
				return pdPASS;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e097      	b.n	800c74e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d111      	bne.n	800c648 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c626:	2b00      	cmp	r3, #0
 800c628:	d00a      	beq.n	800c640 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	617b      	str	r3, [r7, #20]
}
 800c63c:	bf00      	nop
 800c63e:	e7fe      	b.n	800c63e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c640:	f001 fff8 	bl	800e634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c644:	2300      	movs	r3, #0
 800c646:	e082      	b.n	800c74e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d106      	bne.n	800c65c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c64e:	f107 030c 	add.w	r3, r7, #12
 800c652:	4618      	mov	r0, r3
 800c654:	f000 ff84 	bl	800d560 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c658:	2301      	movs	r3, #1
 800c65a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c65c:	f001 ffea 	bl	800e634 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c660:	f000 fcfe 	bl	800d060 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c664:	f001 ffb6 	bl	800e5d4 <vPortEnterCritical>
 800c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c66e:	b25b      	sxtb	r3, r3
 800c670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c674:	d103      	bne.n	800c67e <xQueueSemaphoreTake+0x13a>
 800c676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c678:	2200      	movs	r2, #0
 800c67a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c680:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c684:	b25b      	sxtb	r3, r3
 800c686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c68a:	d103      	bne.n	800c694 <xQueueSemaphoreTake+0x150>
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	2200      	movs	r2, #0
 800c690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c694:	f001 ffce 	bl	800e634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c698:	463a      	mov	r2, r7
 800c69a:	f107 030c 	add.w	r3, r7, #12
 800c69e:	4611      	mov	r1, r2
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 ff73 	bl	800d58c <xTaskCheckForTimeOut>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d132      	bne.n	800c712 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6ae:	f000 f9f2 	bl	800ca96 <prvIsQueueEmpty>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d026      	beq.n	800c706 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d109      	bne.n	800c6d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c6c0:	f001 ff88 	bl	800e5d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f001 f8c1 	bl	800d850 <xTaskPriorityInherit>
 800c6ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c6d0:	f001 ffb0 	bl	800e634 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d6:	3324      	adds	r3, #36	; 0x24
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	4611      	mov	r1, r2
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f000 fe8d 	bl	800d3fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6e4:	f000 f985 	bl	800c9f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6e8:	f000 fcc8 	bl	800d07c <xTaskResumeAll>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f47f af68 	bne.w	800c5c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c6f4:	4b18      	ldr	r3, [pc, #96]	; (800c758 <xQueueSemaphoreTake+0x214>)
 800c6f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6fa:	601a      	str	r2, [r3, #0]
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	e75e      	b.n	800c5c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c708:	f000 f973 	bl	800c9f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c70c:	f000 fcb6 	bl	800d07c <xTaskResumeAll>
 800c710:	e758      	b.n	800c5c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c712:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c714:	f000 f96d 	bl	800c9f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c718:	f000 fcb0 	bl	800d07c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c71c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c71e:	f000 f9ba 	bl	800ca96 <prvIsQueueEmpty>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	f43f af4d 	beq.w	800c5c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00d      	beq.n	800c74c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c730:	f001 ff50 	bl	800e5d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c734:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c736:	f000 f8b4 	bl	800c8a2 <prvGetDisinheritPriorityAfterTimeout>
 800c73a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c742:	4618      	mov	r0, r3
 800c744:	f001 f980 	bl	800da48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c748:	f001 ff74 	bl	800e634 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c74c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c74e:	4618      	mov	r0, r3
 800c750:	3738      	adds	r7, #56	; 0x38
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}
 800c756:	bf00      	nop
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08e      	sub	sp, #56	; 0x38
 800c760:	af00      	add	r7, sp, #0
 800c762:	60f8      	str	r0, [r7, #12]
 800c764:	60b9      	str	r1, [r7, #8]
 800c766:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d10a      	bne.n	800c788 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c776:	f383 8811 	msr	BASEPRI, r3
 800c77a:	f3bf 8f6f 	isb	sy
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	623b      	str	r3, [r7, #32]
}
 800c784:	bf00      	nop
 800c786:	e7fe      	b.n	800c786 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d103      	bne.n	800c796 <xQueueReceiveFromISR+0x3a>
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <xQueueReceiveFromISR+0x3e>
 800c796:	2301      	movs	r3, #1
 800c798:	e000      	b.n	800c79c <xQueueReceiveFromISR+0x40>
 800c79a:	2300      	movs	r3, #0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d10a      	bne.n	800c7b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a4:	f383 8811 	msr	BASEPRI, r3
 800c7a8:	f3bf 8f6f 	isb	sy
 800c7ac:	f3bf 8f4f 	dsb	sy
 800c7b0:	61fb      	str	r3, [r7, #28]
}
 800c7b2:	bf00      	nop
 800c7b4:	e7fe      	b.n	800c7b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7b6:	f001 ffef 	bl	800e798 <vPortValidateInterruptPriority>
	__asm volatile
 800c7ba:	f3ef 8211 	mrs	r2, BASEPRI
 800c7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c2:	f383 8811 	msr	BASEPRI, r3
 800c7c6:	f3bf 8f6f 	isb	sy
 800c7ca:	f3bf 8f4f 	dsb	sy
 800c7ce:	61ba      	str	r2, [r7, #24]
 800c7d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c7d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d02f      	beq.n	800c842 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7ec:	68b9      	ldr	r1, [r7, #8]
 800c7ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7f0:	f000 f8d9 	bl	800c9a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f6:	1e5a      	subs	r2, r3, #1
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c800:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c804:	d112      	bne.n	800c82c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	691b      	ldr	r3, [r3, #16]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d016      	beq.n	800c83c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	3310      	adds	r3, #16
 800c812:	4618      	mov	r0, r3
 800c814:	f000 fe42 	bl	800d49c <xTaskRemoveFromEventList>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d00e      	beq.n	800c83c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00b      	beq.n	800c83c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	e007      	b.n	800c83c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c830:	3301      	adds	r3, #1
 800c832:	b2db      	uxtb	r3, r3
 800c834:	b25a      	sxtb	r2, r3
 800c836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c83c:	2301      	movs	r3, #1
 800c83e:	637b      	str	r3, [r7, #52]	; 0x34
 800c840:	e001      	b.n	800c846 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c842:	2300      	movs	r3, #0
 800c844:	637b      	str	r3, [r7, #52]	; 0x34
 800c846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c848:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	f383 8811 	msr	BASEPRI, r3
}
 800c850:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c854:	4618      	mov	r0, r3
 800c856:	3738      	adds	r7, #56	; 0x38
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10a      	bne.n	800c884 <vQueueDelete+0x28>
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	60bb      	str	r3, [r7, #8]
}
 800c880:	bf00      	nop
 800c882:	e7fe      	b.n	800c882 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f000 f95f 	bl	800cb48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c890:	2b00      	cmp	r3, #0
 800c892:	d102      	bne.n	800c89a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f002 f88b 	bl	800e9b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c89a:	bf00      	nop
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b085      	sub	sp, #20
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d006      	beq.n	800c8c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f1c3 0307 	rsb	r3, r3, #7
 800c8bc:	60fb      	str	r3, [r7, #12]
 800c8be:	e001      	b.n	800c8c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
	}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b086      	sub	sp, #24
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	60f8      	str	r0, [r7, #12]
 800c8da:	60b9      	str	r1, [r7, #8]
 800c8dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10d      	bne.n	800c90c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d14d      	bne.n	800c994 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f001 f81d 	bl	800d93c <xTaskPriorityDisinherit>
 800c902:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	609a      	str	r2, [r3, #8]
 800c90a:	e043      	b.n	800c994 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d119      	bne.n	800c946 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6858      	ldr	r0, [r3, #4]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91a:	461a      	mov	r2, r3
 800c91c:	68b9      	ldr	r1, [r7, #8]
 800c91e:	f002 f98f 	bl	800ec40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	685a      	ldr	r2, [r3, #4]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c92a:	441a      	add	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d32b      	bcc.n	800c994 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	605a      	str	r2, [r3, #4]
 800c944:	e026      	b.n	800c994 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	68d8      	ldr	r0, [r3, #12]
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94e:	461a      	mov	r2, r3
 800c950:	68b9      	ldr	r1, [r7, #8]
 800c952:	f002 f975 	bl	800ec40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	68da      	ldr	r2, [r3, #12]
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c95e:	425b      	negs	r3, r3
 800c960:	441a      	add	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	68da      	ldr	r2, [r3, #12]
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d207      	bcs.n	800c982 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	689a      	ldr	r2, [r3, #8]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97a:	425b      	negs	r3, r3
 800c97c:	441a      	add	r2, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2b02      	cmp	r3, #2
 800c986:	d105      	bne.n	800c994 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d002      	beq.n	800c994 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	3b01      	subs	r3, #1
 800c992:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	1c5a      	adds	r2, r3, #1
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c99c:	697b      	ldr	r3, [r7, #20]
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
 800c9ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d018      	beq.n	800c9ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	68da      	ldr	r2, [r3, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c0:	441a      	add	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68da      	ldr	r2, [r3, #12]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d303      	bcc.n	800c9da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68d9      	ldr	r1, [r3, #12]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	6838      	ldr	r0, [r7, #0]
 800c9e6:	f002 f92b 	bl	800ec40 <memcpy>
	}
}
 800c9ea:	bf00      	nop
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b084      	sub	sp, #16
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9fa:	f001 fdeb 	bl	800e5d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca04:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca06:	e011      	b.n	800ca2c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d012      	beq.n	800ca36 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3324      	adds	r3, #36	; 0x24
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 fd41 	bl	800d49c <xTaskRemoveFromEventList>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d001      	beq.n	800ca24 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ca20:	f000 fe16 	bl	800d650 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	dce9      	bgt.n	800ca08 <prvUnlockQueue+0x16>
 800ca34:	e000      	b.n	800ca38 <prvUnlockQueue+0x46>
					break;
 800ca36:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	22ff      	movs	r2, #255	; 0xff
 800ca3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca40:	f001 fdf8 	bl	800e634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca44:	f001 fdc6 	bl	800e5d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca4e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca50:	e011      	b.n	800ca76 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d012      	beq.n	800ca80 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	3310      	adds	r3, #16
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 fd1c 	bl	800d49c <xTaskRemoveFromEventList>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca6a:	f000 fdf1 	bl	800d650 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca6e:	7bbb      	ldrb	r3, [r7, #14]
 800ca70:	3b01      	subs	r3, #1
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	dce9      	bgt.n	800ca52 <prvUnlockQueue+0x60>
 800ca7e:	e000      	b.n	800ca82 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca80:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	22ff      	movs	r2, #255	; 0xff
 800ca86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca8a:	f001 fdd3 	bl	800e634 <vPortExitCritical>
}
 800ca8e:	bf00      	nop
 800ca90:	3710      	adds	r7, #16
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}

0800ca96 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca96:	b580      	push	{r7, lr}
 800ca98:	b084      	sub	sp, #16
 800ca9a:	af00      	add	r7, sp, #0
 800ca9c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca9e:	f001 fd99 	bl	800e5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d102      	bne.n	800cab0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800caaa:	2301      	movs	r3, #1
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	e001      	b.n	800cab4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cab0:	2300      	movs	r3, #0
 800cab2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cab4:	f001 fdbe 	bl	800e634 <vPortExitCritical>

	return xReturn;
 800cab8:	68fb      	ldr	r3, [r7, #12]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b084      	sub	sp, #16
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800caca:	f001 fd83 	bl	800e5d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d102      	bne.n	800cae0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cada:	2301      	movs	r3, #1
 800cadc:	60fb      	str	r3, [r7, #12]
 800cade:	e001      	b.n	800cae4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cae0:	2300      	movs	r3, #0
 800cae2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cae4:	f001 fda6 	bl	800e634 <vPortExitCritical>

	return xReturn;
 800cae8:	68fb      	ldr	r3, [r7, #12]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3710      	adds	r7, #16
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
	...

0800caf4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cafe:	2300      	movs	r3, #0
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	e014      	b.n	800cb2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cb04:	4a0f      	ldr	r2, [pc, #60]	; (800cb44 <vQueueAddToRegistry+0x50>)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d10b      	bne.n	800cb28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cb10:	490c      	ldr	r1, [pc, #48]	; (800cb44 <vQueueAddToRegistry+0x50>)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	683a      	ldr	r2, [r7, #0]
 800cb16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cb1a:	4a0a      	ldr	r2, [pc, #40]	; (800cb44 <vQueueAddToRegistry+0x50>)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	00db      	lsls	r3, r3, #3
 800cb20:	4413      	add	r3, r2
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cb26:	e006      	b.n	800cb36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	60fb      	str	r3, [r7, #12]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2b07      	cmp	r3, #7
 800cb32:	d9e7      	bls.n	800cb04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cb34:	bf00      	nop
 800cb36:	bf00      	nop
 800cb38:	3714      	adds	r7, #20
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	20001bc8 	.word	0x20001bc8

0800cb48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb50:	2300      	movs	r3, #0
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	e016      	b.n	800cb84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cb56:	4a10      	ldr	r2, [pc, #64]	; (800cb98 <vQueueUnregisterQueue+0x50>)
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	00db      	lsls	r3, r3, #3
 800cb5c:	4413      	add	r3, r2
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d10b      	bne.n	800cb7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cb66:	4a0c      	ldr	r2, [pc, #48]	; (800cb98 <vQueueUnregisterQueue+0x50>)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb70:	4a09      	ldr	r2, [pc, #36]	; (800cb98 <vQueueUnregisterQueue+0x50>)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	00db      	lsls	r3, r3, #3
 800cb76:	4413      	add	r3, r2
 800cb78:	2200      	movs	r2, #0
 800cb7a:	605a      	str	r2, [r3, #4]
				break;
 800cb7c:	e006      	b.n	800cb8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3301      	adds	r3, #1
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b07      	cmp	r3, #7
 800cb88:	d9e5      	bls.n	800cb56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb8a:	bf00      	nop
 800cb8c:	bf00      	nop
 800cb8e:	3714      	adds	r7, #20
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr
 800cb98:	20001bc8 	.word	0x20001bc8

0800cb9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cbac:	f001 fd12 	bl	800e5d4 <vPortEnterCritical>
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbb6:	b25b      	sxtb	r3, r3
 800cbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbbc:	d103      	bne.n	800cbc6 <vQueueWaitForMessageRestricted+0x2a>
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbcc:	b25b      	sxtb	r3, r3
 800cbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbd2:	d103      	bne.n	800cbdc <vQueueWaitForMessageRestricted+0x40>
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbdc:	f001 fd2a 	bl	800e634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d106      	bne.n	800cbf6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	3324      	adds	r3, #36	; 0x24
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	68b9      	ldr	r1, [r7, #8]
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f000 fc27 	bl	800d444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbf6:	6978      	ldr	r0, [r7, #20]
 800cbf8:	f7ff fefb 	bl	800c9f2 <prvUnlockQueue>
	}
 800cbfc:	bf00      	nop
 800cbfe:	3718      	adds	r7, #24
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b08e      	sub	sp, #56	; 0x38
 800cc08:	af04      	add	r7, sp, #16
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
 800cc10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d10a      	bne.n	800cc2e <xTaskCreateStatic+0x2a>
	__asm volatile
 800cc18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc1c:	f383 8811 	msr	BASEPRI, r3
 800cc20:	f3bf 8f6f 	isb	sy
 800cc24:	f3bf 8f4f 	dsb	sy
 800cc28:	623b      	str	r3, [r7, #32]
}
 800cc2a:	bf00      	nop
 800cc2c:	e7fe      	b.n	800cc2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10a      	bne.n	800cc4a <xTaskCreateStatic+0x46>
	__asm volatile
 800cc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc38:	f383 8811 	msr	BASEPRI, r3
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	f3bf 8f4f 	dsb	sy
 800cc44:	61fb      	str	r3, [r7, #28]
}
 800cc46:	bf00      	nop
 800cc48:	e7fe      	b.n	800cc48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc4a:	2354      	movs	r3, #84	; 0x54
 800cc4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	2b54      	cmp	r3, #84	; 0x54
 800cc52:	d00a      	beq.n	800cc6a <xTaskCreateStatic+0x66>
	__asm volatile
 800cc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	61bb      	str	r3, [r7, #24]
}
 800cc66:	bf00      	nop
 800cc68:	e7fe      	b.n	800cc68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d01e      	beq.n	800ccb0 <xTaskCreateStatic+0xac>
 800cc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d01b      	beq.n	800ccb0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc84:	2202      	movs	r2, #2
 800cc86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	9303      	str	r3, [sp, #12]
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc90:	9302      	str	r3, [sp, #8]
 800cc92:	f107 0314 	add.w	r3, r7, #20
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9a:	9300      	str	r3, [sp, #0]
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	68b9      	ldr	r1, [r7, #8]
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f000 f850 	bl	800cd48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ccaa:	f000 f8d5 	bl	800ce58 <prvAddNewTaskToReadyList>
 800ccae:	e001      	b.n	800ccb4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ccb4:	697b      	ldr	r3, [r7, #20]
	}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3728      	adds	r7, #40	; 0x28
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b08c      	sub	sp, #48	; 0x30
 800ccc2:	af04      	add	r7, sp, #16
 800ccc4:	60f8      	str	r0, [r7, #12]
 800ccc6:	60b9      	str	r1, [r7, #8]
 800ccc8:	603b      	str	r3, [r7, #0]
 800ccca:	4613      	mov	r3, r2
 800cccc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ccce:	88fb      	ldrh	r3, [r7, #6]
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f001 fda0 	bl	800e818 <pvPortMalloc>
 800ccd8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d00e      	beq.n	800ccfe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cce0:	2054      	movs	r0, #84	; 0x54
 800cce2:	f001 fd99 	bl	800e818 <pvPortMalloc>
 800cce6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d003      	beq.n	800ccf6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccee:	69fb      	ldr	r3, [r7, #28]
 800ccf0:	697a      	ldr	r2, [r7, #20]
 800ccf2:	631a      	str	r2, [r3, #48]	; 0x30
 800ccf4:	e005      	b.n	800cd02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ccf6:	6978      	ldr	r0, [r7, #20]
 800ccf8:	f001 fe5a 	bl	800e9b0 <vPortFree>
 800ccfc:	e001      	b.n	800cd02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d017      	beq.n	800cd38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd10:	88fa      	ldrh	r2, [r7, #6]
 800cd12:	2300      	movs	r3, #0
 800cd14:	9303      	str	r3, [sp, #12]
 800cd16:	69fb      	ldr	r3, [r7, #28]
 800cd18:	9302      	str	r3, [sp, #8]
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd20:	9300      	str	r3, [sp, #0]
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	68b9      	ldr	r1, [r7, #8]
 800cd26:	68f8      	ldr	r0, [r7, #12]
 800cd28:	f000 f80e 	bl	800cd48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd2c:	69f8      	ldr	r0, [r7, #28]
 800cd2e:	f000 f893 	bl	800ce58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd32:	2301      	movs	r3, #1
 800cd34:	61bb      	str	r3, [r7, #24]
 800cd36:	e002      	b.n	800cd3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd38:	f04f 33ff 	mov.w	r3, #4294967295
 800cd3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd3e:	69bb      	ldr	r3, [r7, #24]
	}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3720      	adds	r7, #32
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b088      	sub	sp, #32
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd60:	3b01      	subs	r3, #1
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	f023 0307 	bic.w	r3, r3, #7
 800cd6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd70:	69bb      	ldr	r3, [r7, #24]
 800cd72:	f003 0307 	and.w	r3, r3, #7
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d00a      	beq.n	800cd90 <prvInitialiseNewTask+0x48>
	__asm volatile
 800cd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7e:	f383 8811 	msr	BASEPRI, r3
 800cd82:	f3bf 8f6f 	isb	sy
 800cd86:	f3bf 8f4f 	dsb	sy
 800cd8a:	617b      	str	r3, [r7, #20]
}
 800cd8c:	bf00      	nop
 800cd8e:	e7fe      	b.n	800cd8e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d01f      	beq.n	800cdd6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd96:	2300      	movs	r3, #0
 800cd98:	61fb      	str	r3, [r7, #28]
 800cd9a:	e012      	b.n	800cdc2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	4413      	add	r3, r2
 800cda2:	7819      	ldrb	r1, [r3, #0]
 800cda4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cda6:	69fb      	ldr	r3, [r7, #28]
 800cda8:	4413      	add	r3, r2
 800cdaa:	3334      	adds	r3, #52	; 0x34
 800cdac:	460a      	mov	r2, r1
 800cdae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cdb0:	68ba      	ldr	r2, [r7, #8]
 800cdb2:	69fb      	ldr	r3, [r7, #28]
 800cdb4:	4413      	add	r3, r2
 800cdb6:	781b      	ldrb	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d006      	beq.n	800cdca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	61fb      	str	r3, [r7, #28]
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	2b0f      	cmp	r3, #15
 800cdc6:	d9e9      	bls.n	800cd9c <prvInitialiseNewTask+0x54>
 800cdc8:	e000      	b.n	800cdcc <prvInitialiseNewTask+0x84>
			{
				break;
 800cdca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cdd4:	e003      	b.n	800cdde <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde0:	2b06      	cmp	r3, #6
 800cde2:	d901      	bls.n	800cde8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cde4:	2306      	movs	r3, #6
 800cde6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdf2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfc:	3304      	adds	r3, #4
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f7fe fe99 	bl	800bb36 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	3318      	adds	r3, #24
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fe fe94 	bl	800bb36 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce16:	f1c3 0207 	rsb	r2, r3, #7
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce26:	2200      	movs	r2, #0
 800ce28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	68f9      	ldr	r1, [r7, #12]
 800ce36:	69b8      	ldr	r0, [r7, #24]
 800ce38:	f001 fa9c 	bl	800e374 <pxPortInitialiseStack>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce4e:	bf00      	nop
 800ce50:	3720      	adds	r7, #32
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
	...

0800ce58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce60:	f001 fbb8 	bl	800e5d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce64:	4b2a      	ldr	r3, [pc, #168]	; (800cf10 <prvAddNewTaskToReadyList+0xb8>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	4a29      	ldr	r2, [pc, #164]	; (800cf10 <prvAddNewTaskToReadyList+0xb8>)
 800ce6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce6e:	4b29      	ldr	r3, [pc, #164]	; (800cf14 <prvAddNewTaskToReadyList+0xbc>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d109      	bne.n	800ce8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce76:	4a27      	ldr	r2, [pc, #156]	; (800cf14 <prvAddNewTaskToReadyList+0xbc>)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce7c:	4b24      	ldr	r3, [pc, #144]	; (800cf10 <prvAddNewTaskToReadyList+0xb8>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d110      	bne.n	800cea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce84:	f000 fc08 	bl	800d698 <prvInitialiseTaskLists>
 800ce88:	e00d      	b.n	800cea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce8a:	4b23      	ldr	r3, [pc, #140]	; (800cf18 <prvAddNewTaskToReadyList+0xc0>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d109      	bne.n	800cea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce92:	4b20      	ldr	r3, [pc, #128]	; (800cf14 <prvAddNewTaskToReadyList+0xbc>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d802      	bhi.n	800cea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cea0:	4a1c      	ldr	r2, [pc, #112]	; (800cf14 <prvAddNewTaskToReadyList+0xbc>)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cea6:	4b1d      	ldr	r3, [pc, #116]	; (800cf1c <prvAddNewTaskToReadyList+0xc4>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	4a1b      	ldr	r2, [pc, #108]	; (800cf1c <prvAddNewTaskToReadyList+0xc4>)
 800ceae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb4:	2201      	movs	r2, #1
 800ceb6:	409a      	lsls	r2, r3
 800ceb8:	4b19      	ldr	r3, [pc, #100]	; (800cf20 <prvAddNewTaskToReadyList+0xc8>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4313      	orrs	r3, r2
 800cebe:	4a18      	ldr	r2, [pc, #96]	; (800cf20 <prvAddNewTaskToReadyList+0xc8>)
 800cec0:	6013      	str	r3, [r2, #0]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec6:	4613      	mov	r3, r2
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	4413      	add	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4a15      	ldr	r2, [pc, #84]	; (800cf24 <prvAddNewTaskToReadyList+0xcc>)
 800ced0:	441a      	add	r2, r3
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	3304      	adds	r3, #4
 800ced6:	4619      	mov	r1, r3
 800ced8:	4610      	mov	r0, r2
 800ceda:	f7fe fe39 	bl	800bb50 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cede:	f001 fba9 	bl	800e634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cee2:	4b0d      	ldr	r3, [pc, #52]	; (800cf18 <prvAddNewTaskToReadyList+0xc0>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00e      	beq.n	800cf08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ceea:	4b0a      	ldr	r3, [pc, #40]	; (800cf14 <prvAddNewTaskToReadyList+0xbc>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d207      	bcs.n	800cf08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cef8:	4b0b      	ldr	r3, [pc, #44]	; (800cf28 <prvAddNewTaskToReadyList+0xd0>)
 800cefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cefe:	601a      	str	r2, [r3, #0]
 800cf00:	f3bf 8f4f 	dsb	sy
 800cf04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf08:	bf00      	nop
 800cf0a:	3708      	adds	r7, #8
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}
 800cf10:	20001d08 	.word	0x20001d08
 800cf14:	20001c08 	.word	0x20001c08
 800cf18:	20001d14 	.word	0x20001d14
 800cf1c:	20001d24 	.word	0x20001d24
 800cf20:	20001d10 	.word	0x20001d10
 800cf24:	20001c0c 	.word	0x20001c0c
 800cf28:	e000ed04 	.word	0xe000ed04

0800cf2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf34:	2300      	movs	r3, #0
 800cf36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d017      	beq.n	800cf6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf3e:	4b13      	ldr	r3, [pc, #76]	; (800cf8c <vTaskDelay+0x60>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d00a      	beq.n	800cf5c <vTaskDelay+0x30>
	__asm volatile
 800cf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf4a:	f383 8811 	msr	BASEPRI, r3
 800cf4e:	f3bf 8f6f 	isb	sy
 800cf52:	f3bf 8f4f 	dsb	sy
 800cf56:	60bb      	str	r3, [r7, #8]
}
 800cf58:	bf00      	nop
 800cf5a:	e7fe      	b.n	800cf5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf5c:	f000 f880 	bl	800d060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf60:	2100      	movs	r1, #0
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 fe12 	bl	800db8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf68:	f000 f888 	bl	800d07c <xTaskResumeAll>
 800cf6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d107      	bne.n	800cf84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf74:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <vTaskDelay+0x64>)
 800cf76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	f3bf 8f4f 	dsb	sy
 800cf80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf84:	bf00      	nop
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	20001d30 	.word	0x20001d30
 800cf90:	e000ed04 	.word	0xe000ed04

0800cf94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b08a      	sub	sp, #40	; 0x28
 800cf98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfa2:	463a      	mov	r2, r7
 800cfa4:	1d39      	adds	r1, r7, #4
 800cfa6:	f107 0308 	add.w	r3, r7, #8
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7f5 f85a 	bl	8002064 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	68ba      	ldr	r2, [r7, #8]
 800cfb6:	9202      	str	r2, [sp, #8]
 800cfb8:	9301      	str	r3, [sp, #4]
 800cfba:	2300      	movs	r3, #0
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	460a      	mov	r2, r1
 800cfc2:	4921      	ldr	r1, [pc, #132]	; (800d048 <vTaskStartScheduler+0xb4>)
 800cfc4:	4821      	ldr	r0, [pc, #132]	; (800d04c <vTaskStartScheduler+0xb8>)
 800cfc6:	f7ff fe1d 	bl	800cc04 <xTaskCreateStatic>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	4a20      	ldr	r2, [pc, #128]	; (800d050 <vTaskStartScheduler+0xbc>)
 800cfce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cfd0:	4b1f      	ldr	r3, [pc, #124]	; (800d050 <vTaskStartScheduler+0xbc>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	617b      	str	r3, [r7, #20]
 800cfdc:	e001      	b.n	800cfe2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d102      	bne.n	800cfee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cfe8:	f000 fe36 	bl	800dc58 <xTimerCreateTimerTask>
 800cfec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d116      	bne.n	800d022 <vTaskStartScheduler+0x8e>
	__asm volatile
 800cff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff8:	f383 8811 	msr	BASEPRI, r3
 800cffc:	f3bf 8f6f 	isb	sy
 800d000:	f3bf 8f4f 	dsb	sy
 800d004:	613b      	str	r3, [r7, #16]
}
 800d006:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d008:	4b12      	ldr	r3, [pc, #72]	; (800d054 <vTaskStartScheduler+0xc0>)
 800d00a:	f04f 32ff 	mov.w	r2, #4294967295
 800d00e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d010:	4b11      	ldr	r3, [pc, #68]	; (800d058 <vTaskStartScheduler+0xc4>)
 800d012:	2201      	movs	r2, #1
 800d014:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d016:	4b11      	ldr	r3, [pc, #68]	; (800d05c <vTaskStartScheduler+0xc8>)
 800d018:	2200      	movs	r2, #0
 800d01a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d01c:	f001 fa38 	bl	800e490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d020:	e00e      	b.n	800d040 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d028:	d10a      	bne.n	800d040 <vTaskStartScheduler+0xac>
	__asm volatile
 800d02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	60fb      	str	r3, [r7, #12]
}
 800d03c:	bf00      	nop
 800d03e:	e7fe      	b.n	800d03e <vTaskStartScheduler+0xaa>
}
 800d040:	bf00      	nop
 800d042:	3718      	adds	r7, #24
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}
 800d048:	08011020 	.word	0x08011020
 800d04c:	0800d669 	.word	0x0800d669
 800d050:	20001d2c 	.word	0x20001d2c
 800d054:	20001d28 	.word	0x20001d28
 800d058:	20001d14 	.word	0x20001d14
 800d05c:	20001d0c 	.word	0x20001d0c

0800d060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d060:	b480      	push	{r7}
 800d062:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d064:	4b04      	ldr	r3, [pc, #16]	; (800d078 <vTaskSuspendAll+0x18>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3301      	adds	r3, #1
 800d06a:	4a03      	ldr	r2, [pc, #12]	; (800d078 <vTaskSuspendAll+0x18>)
 800d06c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d06e:	bf00      	nop
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr
 800d078:	20001d30 	.word	0x20001d30

0800d07c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d082:	2300      	movs	r3, #0
 800d084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d086:	2300      	movs	r3, #0
 800d088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d08a:	4b41      	ldr	r3, [pc, #260]	; (800d190 <xTaskResumeAll+0x114>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10a      	bne.n	800d0a8 <xTaskResumeAll+0x2c>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	603b      	str	r3, [r7, #0]
}
 800d0a4:	bf00      	nop
 800d0a6:	e7fe      	b.n	800d0a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0a8:	f001 fa94 	bl	800e5d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0ac:	4b38      	ldr	r3, [pc, #224]	; (800d190 <xTaskResumeAll+0x114>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	4a37      	ldr	r2, [pc, #220]	; (800d190 <xTaskResumeAll+0x114>)
 800d0b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0b6:	4b36      	ldr	r3, [pc, #216]	; (800d190 <xTaskResumeAll+0x114>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d161      	bne.n	800d182 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0be:	4b35      	ldr	r3, [pc, #212]	; (800d194 <xTaskResumeAll+0x118>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d05d      	beq.n	800d182 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0c6:	e02e      	b.n	800d126 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0c8:	4b33      	ldr	r3, [pc, #204]	; (800d198 <xTaskResumeAll+0x11c>)
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	3318      	adds	r3, #24
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7fe fd98 	bl	800bc0a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	3304      	adds	r3, #4
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe fd93 	bl	800bc0a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e8:	2201      	movs	r2, #1
 800d0ea:	409a      	lsls	r2, r3
 800d0ec:	4b2b      	ldr	r3, [pc, #172]	; (800d19c <xTaskResumeAll+0x120>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4313      	orrs	r3, r2
 800d0f2:	4a2a      	ldr	r2, [pc, #168]	; (800d19c <xTaskResumeAll+0x120>)
 800d0f4:	6013      	str	r3, [r2, #0]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0fa:	4613      	mov	r3, r2
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	4413      	add	r3, r2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	4a27      	ldr	r2, [pc, #156]	; (800d1a0 <xTaskResumeAll+0x124>)
 800d104:	441a      	add	r2, r3
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3304      	adds	r3, #4
 800d10a:	4619      	mov	r1, r3
 800d10c:	4610      	mov	r0, r2
 800d10e:	f7fe fd1f 	bl	800bb50 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d116:	4b23      	ldr	r3, [pc, #140]	; (800d1a4 <xTaskResumeAll+0x128>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d302      	bcc.n	800d126 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d120:	4b21      	ldr	r3, [pc, #132]	; (800d1a8 <xTaskResumeAll+0x12c>)
 800d122:	2201      	movs	r2, #1
 800d124:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d126:	4b1c      	ldr	r3, [pc, #112]	; (800d198 <xTaskResumeAll+0x11c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d1cc      	bne.n	800d0c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d001      	beq.n	800d138 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d134:	f000 fb4e 	bl	800d7d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d138:	4b1c      	ldr	r3, [pc, #112]	; (800d1ac <xTaskResumeAll+0x130>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d010      	beq.n	800d166 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d144:	f000 f846 	bl	800d1d4 <xTaskIncrementTick>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d002      	beq.n	800d154 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d14e:	4b16      	ldr	r3, [pc, #88]	; (800d1a8 <xTaskResumeAll+0x12c>)
 800d150:	2201      	movs	r2, #1
 800d152:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	3b01      	subs	r3, #1
 800d158:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1f1      	bne.n	800d144 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d160:	4b12      	ldr	r3, [pc, #72]	; (800d1ac <xTaskResumeAll+0x130>)
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d166:	4b10      	ldr	r3, [pc, #64]	; (800d1a8 <xTaskResumeAll+0x12c>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d009      	beq.n	800d182 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d16e:	2301      	movs	r3, #1
 800d170:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d172:	4b0f      	ldr	r3, [pc, #60]	; (800d1b0 <xTaskResumeAll+0x134>)
 800d174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d178:	601a      	str	r2, [r3, #0]
 800d17a:	f3bf 8f4f 	dsb	sy
 800d17e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d182:	f001 fa57 	bl	800e634 <vPortExitCritical>

	return xAlreadyYielded;
 800d186:	68bb      	ldr	r3, [r7, #8]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3710      	adds	r7, #16
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20001d30 	.word	0x20001d30
 800d194:	20001d08 	.word	0x20001d08
 800d198:	20001cc8 	.word	0x20001cc8
 800d19c:	20001d10 	.word	0x20001d10
 800d1a0:	20001c0c 	.word	0x20001c0c
 800d1a4:	20001c08 	.word	0x20001c08
 800d1a8:	20001d1c 	.word	0x20001d1c
 800d1ac:	20001d18 	.word	0x20001d18
 800d1b0:	e000ed04 	.word	0xe000ed04

0800d1b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1ba:	4b05      	ldr	r3, [pc, #20]	; (800d1d0 <xTaskGetTickCount+0x1c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1c0:	687b      	ldr	r3, [r7, #4]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	20001d0c 	.word	0x20001d0c

0800d1d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b086      	sub	sp, #24
 800d1d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1de:	4b4e      	ldr	r3, [pc, #312]	; (800d318 <xTaskIncrementTick+0x144>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f040 808e 	bne.w	800d304 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1e8:	4b4c      	ldr	r3, [pc, #304]	; (800d31c <xTaskIncrementTick+0x148>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1f0:	4a4a      	ldr	r2, [pc, #296]	; (800d31c <xTaskIncrementTick+0x148>)
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d120      	bne.n	800d23e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1fc:	4b48      	ldr	r3, [pc, #288]	; (800d320 <xTaskIncrementTick+0x14c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00a      	beq.n	800d21c <xTaskIncrementTick+0x48>
	__asm volatile
 800d206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	603b      	str	r3, [r7, #0]
}
 800d218:	bf00      	nop
 800d21a:	e7fe      	b.n	800d21a <xTaskIncrementTick+0x46>
 800d21c:	4b40      	ldr	r3, [pc, #256]	; (800d320 <xTaskIncrementTick+0x14c>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	60fb      	str	r3, [r7, #12]
 800d222:	4b40      	ldr	r3, [pc, #256]	; (800d324 <xTaskIncrementTick+0x150>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	4a3e      	ldr	r2, [pc, #248]	; (800d320 <xTaskIncrementTick+0x14c>)
 800d228:	6013      	str	r3, [r2, #0]
 800d22a:	4a3e      	ldr	r2, [pc, #248]	; (800d324 <xTaskIncrementTick+0x150>)
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6013      	str	r3, [r2, #0]
 800d230:	4b3d      	ldr	r3, [pc, #244]	; (800d328 <xTaskIncrementTick+0x154>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	3301      	adds	r3, #1
 800d236:	4a3c      	ldr	r2, [pc, #240]	; (800d328 <xTaskIncrementTick+0x154>)
 800d238:	6013      	str	r3, [r2, #0]
 800d23a:	f000 facb 	bl	800d7d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d23e:	4b3b      	ldr	r3, [pc, #236]	; (800d32c <xTaskIncrementTick+0x158>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	429a      	cmp	r2, r3
 800d246:	d348      	bcc.n	800d2da <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d248:	4b35      	ldr	r3, [pc, #212]	; (800d320 <xTaskIncrementTick+0x14c>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d104      	bne.n	800d25c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d252:	4b36      	ldr	r3, [pc, #216]	; (800d32c <xTaskIncrementTick+0x158>)
 800d254:	f04f 32ff 	mov.w	r2, #4294967295
 800d258:	601a      	str	r2, [r3, #0]
					break;
 800d25a:	e03e      	b.n	800d2da <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d25c:	4b30      	ldr	r3, [pc, #192]	; (800d320 <xTaskIncrementTick+0x14c>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	68db      	ldr	r3, [r3, #12]
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d26c:	693a      	ldr	r2, [r7, #16]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	429a      	cmp	r2, r3
 800d272:	d203      	bcs.n	800d27c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d274:	4a2d      	ldr	r2, [pc, #180]	; (800d32c <xTaskIncrementTick+0x158>)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d27a:	e02e      	b.n	800d2da <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	3304      	adds	r3, #4
 800d280:	4618      	mov	r0, r3
 800d282:	f7fe fcc2 	bl	800bc0a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d004      	beq.n	800d298 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	3318      	adds	r3, #24
 800d292:	4618      	mov	r0, r3
 800d294:	f7fe fcb9 	bl	800bc0a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d29c:	2201      	movs	r2, #1
 800d29e:	409a      	lsls	r2, r3
 800d2a0:	4b23      	ldr	r3, [pc, #140]	; (800d330 <xTaskIncrementTick+0x15c>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	4a22      	ldr	r2, [pc, #136]	; (800d330 <xTaskIncrementTick+0x15c>)
 800d2a8:	6013      	str	r3, [r2, #0]
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ae:	4613      	mov	r3, r2
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	4413      	add	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4a1f      	ldr	r2, [pc, #124]	; (800d334 <xTaskIncrementTick+0x160>)
 800d2b8:	441a      	add	r2, r3
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	4619      	mov	r1, r3
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	f7fe fc45 	bl	800bb50 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ca:	4b1b      	ldr	r3, [pc, #108]	; (800d338 <xTaskIncrementTick+0x164>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d3b9      	bcc.n	800d248 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2d8:	e7b6      	b.n	800d248 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2da:	4b17      	ldr	r3, [pc, #92]	; (800d338 <xTaskIncrementTick+0x164>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2e0:	4914      	ldr	r1, [pc, #80]	; (800d334 <xTaskIncrementTick+0x160>)
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	440b      	add	r3, r1
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d901      	bls.n	800d2f6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d2f6:	4b11      	ldr	r3, [pc, #68]	; (800d33c <xTaskIncrementTick+0x168>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d007      	beq.n	800d30e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d2fe:	2301      	movs	r3, #1
 800d300:	617b      	str	r3, [r7, #20]
 800d302:	e004      	b.n	800d30e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d304:	4b0e      	ldr	r3, [pc, #56]	; (800d340 <xTaskIncrementTick+0x16c>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	3301      	adds	r3, #1
 800d30a:	4a0d      	ldr	r2, [pc, #52]	; (800d340 <xTaskIncrementTick+0x16c>)
 800d30c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d30e:	697b      	ldr	r3, [r7, #20]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3718      	adds	r7, #24
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	20001d30 	.word	0x20001d30
 800d31c:	20001d0c 	.word	0x20001d0c
 800d320:	20001cc0 	.word	0x20001cc0
 800d324:	20001cc4 	.word	0x20001cc4
 800d328:	20001d20 	.word	0x20001d20
 800d32c:	20001d28 	.word	0x20001d28
 800d330:	20001d10 	.word	0x20001d10
 800d334:	20001c0c 	.word	0x20001c0c
 800d338:	20001c08 	.word	0x20001c08
 800d33c:	20001d1c 	.word	0x20001d1c
 800d340:	20001d18 	.word	0x20001d18

0800d344 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d344:	b480      	push	{r7}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d34a:	4b27      	ldr	r3, [pc, #156]	; (800d3e8 <vTaskSwitchContext+0xa4>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d003      	beq.n	800d35a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d352:	4b26      	ldr	r3, [pc, #152]	; (800d3ec <vTaskSwitchContext+0xa8>)
 800d354:	2201      	movs	r2, #1
 800d356:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d358:	e03f      	b.n	800d3da <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800d35a:	4b24      	ldr	r3, [pc, #144]	; (800d3ec <vTaskSwitchContext+0xa8>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d360:	4b23      	ldr	r3, [pc, #140]	; (800d3f0 <vTaskSwitchContext+0xac>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	fab3 f383 	clz	r3, r3
 800d36c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d36e:	7afb      	ldrb	r3, [r7, #11]
 800d370:	f1c3 031f 	rsb	r3, r3, #31
 800d374:	617b      	str	r3, [r7, #20]
 800d376:	491f      	ldr	r1, [pc, #124]	; (800d3f4 <vTaskSwitchContext+0xb0>)
 800d378:	697a      	ldr	r2, [r7, #20]
 800d37a:	4613      	mov	r3, r2
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4413      	add	r3, r2
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	440b      	add	r3, r1
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10a      	bne.n	800d3a0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800d38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38e:	f383 8811 	msr	BASEPRI, r3
 800d392:	f3bf 8f6f 	isb	sy
 800d396:	f3bf 8f4f 	dsb	sy
 800d39a:	607b      	str	r3, [r7, #4]
}
 800d39c:	bf00      	nop
 800d39e:	e7fe      	b.n	800d39e <vTaskSwitchContext+0x5a>
 800d3a0:	697a      	ldr	r2, [r7, #20]
 800d3a2:	4613      	mov	r3, r2
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4413      	add	r3, r2
 800d3a8:	009b      	lsls	r3, r3, #2
 800d3aa:	4a12      	ldr	r2, [pc, #72]	; (800d3f4 <vTaskSwitchContext+0xb0>)
 800d3ac:	4413      	add	r3, r2
 800d3ae:	613b      	str	r3, [r7, #16]
 800d3b0:	693b      	ldr	r3, [r7, #16]
 800d3b2:	685b      	ldr	r3, [r3, #4]
 800d3b4:	685a      	ldr	r2, [r3, #4]
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	605a      	str	r2, [r3, #4]
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	685a      	ldr	r2, [r3, #4]
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d104      	bne.n	800d3d0 <vTaskSwitchContext+0x8c>
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	605a      	str	r2, [r3, #4]
 800d3d0:	693b      	ldr	r3, [r7, #16]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	4a08      	ldr	r2, [pc, #32]	; (800d3f8 <vTaskSwitchContext+0xb4>)
 800d3d8:	6013      	str	r3, [r2, #0]
}
 800d3da:	bf00      	nop
 800d3dc:	371c      	adds	r7, #28
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	20001d30 	.word	0x20001d30
 800d3ec:	20001d1c 	.word	0x20001d1c
 800d3f0:	20001d10 	.word	0x20001d10
 800d3f4:	20001c0c 	.word	0x20001c0c
 800d3f8:	20001c08 	.word	0x20001c08

0800d3fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10a      	bne.n	800d422 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d40c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d410:	f383 8811 	msr	BASEPRI, r3
 800d414:	f3bf 8f6f 	isb	sy
 800d418:	f3bf 8f4f 	dsb	sy
 800d41c:	60fb      	str	r3, [r7, #12]
}
 800d41e:	bf00      	nop
 800d420:	e7fe      	b.n	800d420 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d422:	4b07      	ldr	r3, [pc, #28]	; (800d440 <vTaskPlaceOnEventList+0x44>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	3318      	adds	r3, #24
 800d428:	4619      	mov	r1, r3
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f7fe fbb4 	bl	800bb98 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d430:	2101      	movs	r1, #1
 800d432:	6838      	ldr	r0, [r7, #0]
 800d434:	f000 fbaa 	bl	800db8c <prvAddCurrentTaskToDelayedList>
}
 800d438:	bf00      	nop
 800d43a:	3710      	adds	r7, #16
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	20001c08 	.word	0x20001c08

0800d444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10a      	bne.n	800d46c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45a:	f383 8811 	msr	BASEPRI, r3
 800d45e:	f3bf 8f6f 	isb	sy
 800d462:	f3bf 8f4f 	dsb	sy
 800d466:	617b      	str	r3, [r7, #20]
}
 800d468:	bf00      	nop
 800d46a:	e7fe      	b.n	800d46a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d46c:	4b0a      	ldr	r3, [pc, #40]	; (800d498 <vTaskPlaceOnEventListRestricted+0x54>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	3318      	adds	r3, #24
 800d472:	4619      	mov	r1, r3
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f7fe fb6b 	bl	800bb50 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d002      	beq.n	800d486 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d480:	f04f 33ff 	mov.w	r3, #4294967295
 800d484:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d486:	6879      	ldr	r1, [r7, #4]
 800d488:	68b8      	ldr	r0, [r7, #8]
 800d48a:	f000 fb7f 	bl	800db8c <prvAddCurrentTaskToDelayedList>
	}
 800d48e:	bf00      	nop
 800d490:	3718      	adds	r7, #24
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	20001c08 	.word	0x20001c08

0800d49c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10a      	bne.n	800d4c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f3bf 8f6f 	isb	sy
 800d4be:	f3bf 8f4f 	dsb	sy
 800d4c2:	60fb      	str	r3, [r7, #12]
}
 800d4c4:	bf00      	nop
 800d4c6:	e7fe      	b.n	800d4c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	3318      	adds	r3, #24
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7fe fb9c 	bl	800bc0a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d4d2:	4b1d      	ldr	r3, [pc, #116]	; (800d548 <xTaskRemoveFromEventList+0xac>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d11c      	bne.n	800d514 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	3304      	adds	r3, #4
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fe fb93 	bl	800bc0a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	409a      	lsls	r2, r3
 800d4ec:	4b17      	ldr	r3, [pc, #92]	; (800d54c <xTaskRemoveFromEventList+0xb0>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	4a16      	ldr	r2, [pc, #88]	; (800d54c <xTaskRemoveFromEventList+0xb0>)
 800d4f4:	6013      	str	r3, [r2, #0]
 800d4f6:	693b      	ldr	r3, [r7, #16]
 800d4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4fa:	4613      	mov	r3, r2
 800d4fc:	009b      	lsls	r3, r3, #2
 800d4fe:	4413      	add	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4a13      	ldr	r2, [pc, #76]	; (800d550 <xTaskRemoveFromEventList+0xb4>)
 800d504:	441a      	add	r2, r3
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	3304      	adds	r3, #4
 800d50a:	4619      	mov	r1, r3
 800d50c:	4610      	mov	r0, r2
 800d50e:	f7fe fb1f 	bl	800bb50 <vListInsertEnd>
 800d512:	e005      	b.n	800d520 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	3318      	adds	r3, #24
 800d518:	4619      	mov	r1, r3
 800d51a:	480e      	ldr	r0, [pc, #56]	; (800d554 <xTaskRemoveFromEventList+0xb8>)
 800d51c:	f7fe fb18 	bl	800bb50 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d524:	4b0c      	ldr	r3, [pc, #48]	; (800d558 <xTaskRemoveFromEventList+0xbc>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d905      	bls.n	800d53a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d52e:	2301      	movs	r3, #1
 800d530:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d532:	4b0a      	ldr	r3, [pc, #40]	; (800d55c <xTaskRemoveFromEventList+0xc0>)
 800d534:	2201      	movs	r2, #1
 800d536:	601a      	str	r2, [r3, #0]
 800d538:	e001      	b.n	800d53e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d53a:	2300      	movs	r3, #0
 800d53c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d53e:	697b      	ldr	r3, [r7, #20]
}
 800d540:	4618      	mov	r0, r3
 800d542:	3718      	adds	r7, #24
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20001d30 	.word	0x20001d30
 800d54c:	20001d10 	.word	0x20001d10
 800d550:	20001c0c 	.word	0x20001c0c
 800d554:	20001cc8 	.word	0x20001cc8
 800d558:	20001c08 	.word	0x20001c08
 800d55c:	20001d1c 	.word	0x20001d1c

0800d560 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d568:	4b06      	ldr	r3, [pc, #24]	; (800d584 <vTaskInternalSetTimeOutState+0x24>)
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d570:	4b05      	ldr	r3, [pc, #20]	; (800d588 <vTaskInternalSetTimeOutState+0x28>)
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	605a      	str	r2, [r3, #4]
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	20001d20 	.word	0x20001d20
 800d588:	20001d0c 	.word	0x20001d0c

0800d58c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b088      	sub	sp, #32
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10a      	bne.n	800d5b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a0:	f383 8811 	msr	BASEPRI, r3
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	613b      	str	r3, [r7, #16]
}
 800d5ae:	bf00      	nop
 800d5b0:	e7fe      	b.n	800d5b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d10a      	bne.n	800d5ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5bc:	f383 8811 	msr	BASEPRI, r3
 800d5c0:	f3bf 8f6f 	isb	sy
 800d5c4:	f3bf 8f4f 	dsb	sy
 800d5c8:	60fb      	str	r3, [r7, #12]
}
 800d5ca:	bf00      	nop
 800d5cc:	e7fe      	b.n	800d5cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d5ce:	f001 f801 	bl	800e5d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d5d2:	4b1d      	ldr	r3, [pc, #116]	; (800d648 <xTaskCheckForTimeOut+0xbc>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	69ba      	ldr	r2, [r7, #24]
 800d5de:	1ad3      	subs	r3, r2, r3
 800d5e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5ea:	d102      	bne.n	800d5f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	61fb      	str	r3, [r7, #28]
 800d5f0:	e023      	b.n	800d63a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	4b15      	ldr	r3, [pc, #84]	; (800d64c <xTaskCheckForTimeOut+0xc0>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d007      	beq.n	800d60e <xTaskCheckForTimeOut+0x82>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	69ba      	ldr	r2, [r7, #24]
 800d604:	429a      	cmp	r2, r3
 800d606:	d302      	bcc.n	800d60e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d608:	2301      	movs	r3, #1
 800d60a:	61fb      	str	r3, [r7, #28]
 800d60c:	e015      	b.n	800d63a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	697a      	ldr	r2, [r7, #20]
 800d614:	429a      	cmp	r2, r3
 800d616:	d20b      	bcs.n	800d630 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	1ad2      	subs	r2, r2, r3
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f7ff ff9b 	bl	800d560 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d62a:	2300      	movs	r3, #0
 800d62c:	61fb      	str	r3, [r7, #28]
 800d62e:	e004      	b.n	800d63a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	2200      	movs	r2, #0
 800d634:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d636:	2301      	movs	r3, #1
 800d638:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d63a:	f000 fffb 	bl	800e634 <vPortExitCritical>

	return xReturn;
 800d63e:	69fb      	ldr	r3, [r7, #28]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3720      	adds	r7, #32
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	20001d0c 	.word	0x20001d0c
 800d64c:	20001d20 	.word	0x20001d20

0800d650 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d650:	b480      	push	{r7}
 800d652:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d654:	4b03      	ldr	r3, [pc, #12]	; (800d664 <vTaskMissedYield+0x14>)
 800d656:	2201      	movs	r2, #1
 800d658:	601a      	str	r2, [r3, #0]
}
 800d65a:	bf00      	nop
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr
 800d664:	20001d1c 	.word	0x20001d1c

0800d668 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d670:	f000 f852 	bl	800d718 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d674:	4b06      	ldr	r3, [pc, #24]	; (800d690 <prvIdleTask+0x28>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d9f9      	bls.n	800d670 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d67c:	4b05      	ldr	r3, [pc, #20]	; (800d694 <prvIdleTask+0x2c>)
 800d67e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d682:	601a      	str	r2, [r3, #0]
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d68c:	e7f0      	b.n	800d670 <prvIdleTask+0x8>
 800d68e:	bf00      	nop
 800d690:	20001c0c 	.word	0x20001c0c
 800d694:	e000ed04 	.word	0xe000ed04

0800d698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d69e:	2300      	movs	r3, #0
 800d6a0:	607b      	str	r3, [r7, #4]
 800d6a2:	e00c      	b.n	800d6be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	4a12      	ldr	r2, [pc, #72]	; (800d6f8 <prvInitialiseTaskLists+0x60>)
 800d6b0:	4413      	add	r3, r2
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f7fe fa1f 	bl	800baf6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	607b      	str	r3, [r7, #4]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b06      	cmp	r3, #6
 800d6c2:	d9ef      	bls.n	800d6a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d6c4:	480d      	ldr	r0, [pc, #52]	; (800d6fc <prvInitialiseTaskLists+0x64>)
 800d6c6:	f7fe fa16 	bl	800baf6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d6ca:	480d      	ldr	r0, [pc, #52]	; (800d700 <prvInitialiseTaskLists+0x68>)
 800d6cc:	f7fe fa13 	bl	800baf6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d6d0:	480c      	ldr	r0, [pc, #48]	; (800d704 <prvInitialiseTaskLists+0x6c>)
 800d6d2:	f7fe fa10 	bl	800baf6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d6d6:	480c      	ldr	r0, [pc, #48]	; (800d708 <prvInitialiseTaskLists+0x70>)
 800d6d8:	f7fe fa0d 	bl	800baf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d6dc:	480b      	ldr	r0, [pc, #44]	; (800d70c <prvInitialiseTaskLists+0x74>)
 800d6de:	f7fe fa0a 	bl	800baf6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d6e2:	4b0b      	ldr	r3, [pc, #44]	; (800d710 <prvInitialiseTaskLists+0x78>)
 800d6e4:	4a05      	ldr	r2, [pc, #20]	; (800d6fc <prvInitialiseTaskLists+0x64>)
 800d6e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d6e8:	4b0a      	ldr	r3, [pc, #40]	; (800d714 <prvInitialiseTaskLists+0x7c>)
 800d6ea:	4a05      	ldr	r2, [pc, #20]	; (800d700 <prvInitialiseTaskLists+0x68>)
 800d6ec:	601a      	str	r2, [r3, #0]
}
 800d6ee:	bf00      	nop
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	20001c0c 	.word	0x20001c0c
 800d6fc:	20001c98 	.word	0x20001c98
 800d700:	20001cac 	.word	0x20001cac
 800d704:	20001cc8 	.word	0x20001cc8
 800d708:	20001cdc 	.word	0x20001cdc
 800d70c:	20001cf4 	.word	0x20001cf4
 800d710:	20001cc0 	.word	0x20001cc0
 800d714:	20001cc4 	.word	0x20001cc4

0800d718 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d71e:	e019      	b.n	800d754 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d720:	f000 ff58 	bl	800e5d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d724:	4b10      	ldr	r3, [pc, #64]	; (800d768 <prvCheckTasksWaitingTermination+0x50>)
 800d726:	68db      	ldr	r3, [r3, #12]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	3304      	adds	r3, #4
 800d730:	4618      	mov	r0, r3
 800d732:	f7fe fa6a 	bl	800bc0a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d736:	4b0d      	ldr	r3, [pc, #52]	; (800d76c <prvCheckTasksWaitingTermination+0x54>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	3b01      	subs	r3, #1
 800d73c:	4a0b      	ldr	r2, [pc, #44]	; (800d76c <prvCheckTasksWaitingTermination+0x54>)
 800d73e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d740:	4b0b      	ldr	r3, [pc, #44]	; (800d770 <prvCheckTasksWaitingTermination+0x58>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	3b01      	subs	r3, #1
 800d746:	4a0a      	ldr	r2, [pc, #40]	; (800d770 <prvCheckTasksWaitingTermination+0x58>)
 800d748:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d74a:	f000 ff73 	bl	800e634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 f810 	bl	800d774 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d754:	4b06      	ldr	r3, [pc, #24]	; (800d770 <prvCheckTasksWaitingTermination+0x58>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1e1      	bne.n	800d720 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d75c:	bf00      	nop
 800d75e:	bf00      	nop
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	20001cdc 	.word	0x20001cdc
 800d76c:	20001d08 	.word	0x20001d08
 800d770:	20001cf0 	.word	0x20001cf0

0800d774 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d782:	2b00      	cmp	r3, #0
 800d784:	d108      	bne.n	800d798 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d78a:	4618      	mov	r0, r3
 800d78c:	f001 f910 	bl	800e9b0 <vPortFree>
				vPortFree( pxTCB );
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f001 f90d 	bl	800e9b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d796:	e018      	b.n	800d7ca <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d103      	bne.n	800d7aa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f001 f904 	bl	800e9b0 <vPortFree>
	}
 800d7a8:	e00f      	b.n	800d7ca <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d00a      	beq.n	800d7ca <prvDeleteTCB+0x56>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	60fb      	str	r3, [r7, #12]
}
 800d7c6:	bf00      	nop
 800d7c8:	e7fe      	b.n	800d7c8 <prvDeleteTCB+0x54>
	}
 800d7ca:	bf00      	nop
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}
	...

0800d7d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7da:	4b0c      	ldr	r3, [pc, #48]	; (800d80c <prvResetNextTaskUnblockTime+0x38>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d104      	bne.n	800d7ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d7e4:	4b0a      	ldr	r3, [pc, #40]	; (800d810 <prvResetNextTaskUnblockTime+0x3c>)
 800d7e6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d7ec:	e008      	b.n	800d800 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7ee:	4b07      	ldr	r3, [pc, #28]	; (800d80c <prvResetNextTaskUnblockTime+0x38>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	68db      	ldr	r3, [r3, #12]
 800d7f4:	68db      	ldr	r3, [r3, #12]
 800d7f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	4a04      	ldr	r2, [pc, #16]	; (800d810 <prvResetNextTaskUnblockTime+0x3c>)
 800d7fe:	6013      	str	r3, [r2, #0]
}
 800d800:	bf00      	nop
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	20001cc0 	.word	0x20001cc0
 800d810:	20001d28 	.word	0x20001d28

0800d814 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d81a:	4b0b      	ldr	r3, [pc, #44]	; (800d848 <xTaskGetSchedulerState+0x34>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d102      	bne.n	800d828 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d822:	2301      	movs	r3, #1
 800d824:	607b      	str	r3, [r7, #4]
 800d826:	e008      	b.n	800d83a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d828:	4b08      	ldr	r3, [pc, #32]	; (800d84c <xTaskGetSchedulerState+0x38>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d102      	bne.n	800d836 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d830:	2302      	movs	r3, #2
 800d832:	607b      	str	r3, [r7, #4]
 800d834:	e001      	b.n	800d83a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d836:	2300      	movs	r3, #0
 800d838:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d83a:	687b      	ldr	r3, [r7, #4]
	}
 800d83c:	4618      	mov	r0, r3
 800d83e:	370c      	adds	r7, #12
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr
 800d848:	20001d14 	.word	0x20001d14
 800d84c:	20001d30 	.word	0x20001d30

0800d850 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d85c:	2300      	movs	r3, #0
 800d85e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d05e      	beq.n	800d924 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d86a:	4b31      	ldr	r3, [pc, #196]	; (800d930 <xTaskPriorityInherit+0xe0>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d870:	429a      	cmp	r2, r3
 800d872:	d24e      	bcs.n	800d912 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	699b      	ldr	r3, [r3, #24]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	db06      	blt.n	800d88a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d87c:	4b2c      	ldr	r3, [pc, #176]	; (800d930 <xTaskPriorityInherit+0xe0>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d882:	f1c3 0207 	rsb	r2, r3, #7
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	6959      	ldr	r1, [r3, #20]
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d892:	4613      	mov	r3, r2
 800d894:	009b      	lsls	r3, r3, #2
 800d896:	4413      	add	r3, r2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	4a26      	ldr	r2, [pc, #152]	; (800d934 <xTaskPriorityInherit+0xe4>)
 800d89c:	4413      	add	r3, r2
 800d89e:	4299      	cmp	r1, r3
 800d8a0:	d12f      	bne.n	800d902 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fe f9af 	bl	800bc0a <uxListRemove>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d10a      	bne.n	800d8c8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8bc:	43da      	mvns	r2, r3
 800d8be:	4b1e      	ldr	r3, [pc, #120]	; (800d938 <xTaskPriorityInherit+0xe8>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	4a1c      	ldr	r2, [pc, #112]	; (800d938 <xTaskPriorityInherit+0xe8>)
 800d8c6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d8c8:	4b19      	ldr	r3, [pc, #100]	; (800d930 <xTaskPriorityInherit+0xe0>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	409a      	lsls	r2, r3
 800d8da:	4b17      	ldr	r3, [pc, #92]	; (800d938 <xTaskPriorityInherit+0xe8>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	4313      	orrs	r3, r2
 800d8e0:	4a15      	ldr	r2, [pc, #84]	; (800d938 <xTaskPriorityInherit+0xe8>)
 800d8e2:	6013      	str	r3, [r2, #0]
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	4413      	add	r3, r2
 800d8ee:	009b      	lsls	r3, r3, #2
 800d8f0:	4a10      	ldr	r2, [pc, #64]	; (800d934 <xTaskPriorityInherit+0xe4>)
 800d8f2:	441a      	add	r2, r3
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	3304      	adds	r3, #4
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	4610      	mov	r0, r2
 800d8fc:	f7fe f928 	bl	800bb50 <vListInsertEnd>
 800d900:	e004      	b.n	800d90c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d902:	4b0b      	ldr	r3, [pc, #44]	; (800d930 <xTaskPriorityInherit+0xe0>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d90c:	2301      	movs	r3, #1
 800d90e:	60fb      	str	r3, [r7, #12]
 800d910:	e008      	b.n	800d924 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d916:	4b06      	ldr	r3, [pc, #24]	; (800d930 <xTaskPriorityInherit+0xe0>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d201      	bcs.n	800d924 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d920:	2301      	movs	r3, #1
 800d922:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d924:	68fb      	ldr	r3, [r7, #12]
	}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	20001c08 	.word	0x20001c08
 800d934:	20001c0c 	.word	0x20001c0c
 800d938:	20001d10 	.word	0x20001d10

0800d93c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d948:	2300      	movs	r3, #0
 800d94a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d06e      	beq.n	800da30 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d952:	4b3a      	ldr	r3, [pc, #232]	; (800da3c <xTaskPriorityDisinherit+0x100>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	693a      	ldr	r2, [r7, #16]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d00a      	beq.n	800d972 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	60fb      	str	r3, [r7, #12]
}
 800d96e:	bf00      	nop
 800d970:	e7fe      	b.n	800d970 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10a      	bne.n	800d990 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d97e:	f383 8811 	msr	BASEPRI, r3
 800d982:	f3bf 8f6f 	isb	sy
 800d986:	f3bf 8f4f 	dsb	sy
 800d98a:	60bb      	str	r3, [r7, #8]
}
 800d98c:	bf00      	nop
 800d98e:	e7fe      	b.n	800d98e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d994:	1e5a      	subs	r2, r3, #1
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d99e:	693b      	ldr	r3, [r7, #16]
 800d9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d044      	beq.n	800da30 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d9a6:	693b      	ldr	r3, [r7, #16]
 800d9a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d140      	bne.n	800da30 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	3304      	adds	r3, #4
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe f929 	bl	800bc0a <uxListRemove>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d115      	bne.n	800d9ea <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d9be:	693b      	ldr	r3, [r7, #16]
 800d9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9c2:	491f      	ldr	r1, [pc, #124]	; (800da40 <xTaskPriorityDisinherit+0x104>)
 800d9c4:	4613      	mov	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	4413      	add	r3, r2
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	440b      	add	r3, r1
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10a      	bne.n	800d9ea <xTaskPriorityDisinherit+0xae>
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	2201      	movs	r2, #1
 800d9da:	fa02 f303 	lsl.w	r3, r2, r3
 800d9de:	43da      	mvns	r2, r3
 800d9e0:	4b18      	ldr	r3, [pc, #96]	; (800da44 <xTaskPriorityDisinherit+0x108>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4013      	ands	r3, r2
 800d9e6:	4a17      	ldr	r2, [pc, #92]	; (800da44 <xTaskPriorityDisinherit+0x108>)
 800d9e8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d9ea:	693b      	ldr	r3, [r7, #16]
 800d9ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f6:	f1c3 0207 	rsb	r2, r3, #7
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da02:	2201      	movs	r2, #1
 800da04:	409a      	lsls	r2, r3
 800da06:	4b0f      	ldr	r3, [pc, #60]	; (800da44 <xTaskPriorityDisinherit+0x108>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4313      	orrs	r3, r2
 800da0c:	4a0d      	ldr	r2, [pc, #52]	; (800da44 <xTaskPriorityDisinherit+0x108>)
 800da0e:	6013      	str	r3, [r2, #0]
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da14:	4613      	mov	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4413      	add	r3, r2
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	4a08      	ldr	r2, [pc, #32]	; (800da40 <xTaskPriorityDisinherit+0x104>)
 800da1e:	441a      	add	r2, r3
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	3304      	adds	r3, #4
 800da24:	4619      	mov	r1, r3
 800da26:	4610      	mov	r0, r2
 800da28:	f7fe f892 	bl	800bb50 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800da2c:	2301      	movs	r3, #1
 800da2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800da30:	697b      	ldr	r3, [r7, #20]
	}
 800da32:	4618      	mov	r0, r3
 800da34:	3718      	adds	r7, #24
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20001c08 	.word	0x20001c08
 800da40:	20001c0c 	.word	0x20001c0c
 800da44:	20001d10 	.word	0x20001d10

0800da48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800da56:	2301      	movs	r3, #1
 800da58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d077      	beq.n	800db50 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800da60:	69bb      	ldr	r3, [r7, #24]
 800da62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10a      	bne.n	800da7e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800da68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da6c:	f383 8811 	msr	BASEPRI, r3
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	f3bf 8f4f 	dsb	sy
 800da78:	60fb      	str	r3, [r7, #12]
}
 800da7a:	bf00      	nop
 800da7c:	e7fe      	b.n	800da7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800da7e:	69bb      	ldr	r3, [r7, #24]
 800da80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da82:	683a      	ldr	r2, [r7, #0]
 800da84:	429a      	cmp	r2, r3
 800da86:	d902      	bls.n	800da8e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	61fb      	str	r3, [r7, #28]
 800da8c:	e002      	b.n	800da94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da92:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da98:	69fa      	ldr	r2, [r7, #28]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d058      	beq.n	800db50 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daa2:	697a      	ldr	r2, [r7, #20]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d153      	bne.n	800db50 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800daa8:	4b2b      	ldr	r3, [pc, #172]	; (800db58 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	69ba      	ldr	r2, [r7, #24]
 800daae:	429a      	cmp	r2, r3
 800dab0:	d10a      	bne.n	800dac8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800dab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	60bb      	str	r3, [r7, #8]
}
 800dac4:	bf00      	nop
 800dac6:	e7fe      	b.n	800dac6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dacc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	69fa      	ldr	r2, [r7, #28]
 800dad2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	699b      	ldr	r3, [r3, #24]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	db04      	blt.n	800dae6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	f1c3 0207 	rsb	r2, r3, #7
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dae6:	69bb      	ldr	r3, [r7, #24]
 800dae8:	6959      	ldr	r1, [r3, #20]
 800daea:	693a      	ldr	r2, [r7, #16]
 800daec:	4613      	mov	r3, r2
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	4413      	add	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4a19      	ldr	r2, [pc, #100]	; (800db5c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800daf6:	4413      	add	r3, r2
 800daf8:	4299      	cmp	r1, r3
 800dafa:	d129      	bne.n	800db50 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dafc:	69bb      	ldr	r3, [r7, #24]
 800dafe:	3304      	adds	r3, #4
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe f882 	bl	800bc0a <uxListRemove>
 800db06:	4603      	mov	r3, r0
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d10a      	bne.n	800db22 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800db0c:	69bb      	ldr	r3, [r7, #24]
 800db0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db10:	2201      	movs	r2, #1
 800db12:	fa02 f303 	lsl.w	r3, r2, r3
 800db16:	43da      	mvns	r2, r3
 800db18:	4b11      	ldr	r3, [pc, #68]	; (800db60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4013      	ands	r3, r2
 800db1e:	4a10      	ldr	r2, [pc, #64]	; (800db60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db20:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db26:	2201      	movs	r2, #1
 800db28:	409a      	lsls	r2, r3
 800db2a:	4b0d      	ldr	r3, [pc, #52]	; (800db60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	4313      	orrs	r3, r2
 800db30:	4a0b      	ldr	r2, [pc, #44]	; (800db60 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800db32:	6013      	str	r3, [r2, #0]
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db38:	4613      	mov	r3, r2
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	4413      	add	r3, r2
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4a06      	ldr	r2, [pc, #24]	; (800db5c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800db42:	441a      	add	r2, r3
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	3304      	adds	r3, #4
 800db48:	4619      	mov	r1, r3
 800db4a:	4610      	mov	r0, r2
 800db4c:	f7fe f800 	bl	800bb50 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db50:	bf00      	nop
 800db52:	3720      	adds	r7, #32
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	20001c08 	.word	0x20001c08
 800db5c:	20001c0c 	.word	0x20001c0c
 800db60:	20001d10 	.word	0x20001d10

0800db64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800db64:	b480      	push	{r7}
 800db66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800db68:	4b07      	ldr	r3, [pc, #28]	; (800db88 <pvTaskIncrementMutexHeldCount+0x24>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d004      	beq.n	800db7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800db70:	4b05      	ldr	r3, [pc, #20]	; (800db88 <pvTaskIncrementMutexHeldCount+0x24>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db76:	3201      	adds	r2, #1
 800db78:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800db7a:	4b03      	ldr	r3, [pc, #12]	; (800db88 <pvTaskIncrementMutexHeldCount+0x24>)
 800db7c:	681b      	ldr	r3, [r3, #0]
	}
 800db7e:	4618      	mov	r0, r3
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr
 800db88:	20001c08 	.word	0x20001c08

0800db8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800db96:	4b29      	ldr	r3, [pc, #164]	; (800dc3c <prvAddCurrentTaskToDelayedList+0xb0>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db9c:	4b28      	ldr	r3, [pc, #160]	; (800dc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	3304      	adds	r3, #4
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7fe f831 	bl	800bc0a <uxListRemove>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10b      	bne.n	800dbc6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dbae:	4b24      	ldr	r3, [pc, #144]	; (800dc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbba:	43da      	mvns	r2, r3
 800dbbc:	4b21      	ldr	r3, [pc, #132]	; (800dc44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4013      	ands	r3, r2
 800dbc2:	4a20      	ldr	r2, [pc, #128]	; (800dc44 <prvAddCurrentTaskToDelayedList+0xb8>)
 800dbc4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbcc:	d10a      	bne.n	800dbe4 <prvAddCurrentTaskToDelayedList+0x58>
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d007      	beq.n	800dbe4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbd4:	4b1a      	ldr	r3, [pc, #104]	; (800dc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3304      	adds	r3, #4
 800dbda:	4619      	mov	r1, r3
 800dbdc:	481a      	ldr	r0, [pc, #104]	; (800dc48 <prvAddCurrentTaskToDelayedList+0xbc>)
 800dbde:	f7fd ffb7 	bl	800bb50 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dbe2:	e026      	b.n	800dc32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4413      	add	r3, r2
 800dbea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dbec:	4b14      	ldr	r3, [pc, #80]	; (800dc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d209      	bcs.n	800dc10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbfc:	4b13      	ldr	r3, [pc, #76]	; (800dc4c <prvAddCurrentTaskToDelayedList+0xc0>)
 800dbfe:	681a      	ldr	r2, [r3, #0]
 800dc00:	4b0f      	ldr	r3, [pc, #60]	; (800dc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	3304      	adds	r3, #4
 800dc06:	4619      	mov	r1, r3
 800dc08:	4610      	mov	r0, r2
 800dc0a:	f7fd ffc5 	bl	800bb98 <vListInsert>
}
 800dc0e:	e010      	b.n	800dc32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc10:	4b0f      	ldr	r3, [pc, #60]	; (800dc50 <prvAddCurrentTaskToDelayedList+0xc4>)
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	4b0a      	ldr	r3, [pc, #40]	; (800dc40 <prvAddCurrentTaskToDelayedList+0xb4>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	3304      	adds	r3, #4
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	f7fd ffbb 	bl	800bb98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc22:	4b0c      	ldr	r3, [pc, #48]	; (800dc54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d202      	bcs.n	800dc32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800dc2c:	4a09      	ldr	r2, [pc, #36]	; (800dc54 <prvAddCurrentTaskToDelayedList+0xc8>)
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	6013      	str	r3, [r2, #0]
}
 800dc32:	bf00      	nop
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	20001d0c 	.word	0x20001d0c
 800dc40:	20001c08 	.word	0x20001c08
 800dc44:	20001d10 	.word	0x20001d10
 800dc48:	20001cf4 	.word	0x20001cf4
 800dc4c:	20001cc4 	.word	0x20001cc4
 800dc50:	20001cc0 	.word	0x20001cc0
 800dc54:	20001d28 	.word	0x20001d28

0800dc58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b08a      	sub	sp, #40	; 0x28
 800dc5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dc62:	f000 fb47 	bl	800e2f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dc66:	4b1c      	ldr	r3, [pc, #112]	; (800dcd8 <xTimerCreateTimerTask+0x80>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d021      	beq.n	800dcb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dc72:	2300      	movs	r3, #0
 800dc74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dc76:	1d3a      	adds	r2, r7, #4
 800dc78:	f107 0108 	add.w	r1, r7, #8
 800dc7c:	f107 030c 	add.w	r3, r7, #12
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7f4 fa09 	bl	8002098 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dc86:	6879      	ldr	r1, [r7, #4]
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	68fa      	ldr	r2, [r7, #12]
 800dc8c:	9202      	str	r2, [sp, #8]
 800dc8e:	9301      	str	r3, [sp, #4]
 800dc90:	2306      	movs	r3, #6
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	2300      	movs	r3, #0
 800dc96:	460a      	mov	r2, r1
 800dc98:	4910      	ldr	r1, [pc, #64]	; (800dcdc <xTimerCreateTimerTask+0x84>)
 800dc9a:	4811      	ldr	r0, [pc, #68]	; (800dce0 <xTimerCreateTimerTask+0x88>)
 800dc9c:	f7fe ffb2 	bl	800cc04 <xTaskCreateStatic>
 800dca0:	4603      	mov	r3, r0
 800dca2:	4a10      	ldr	r2, [pc, #64]	; (800dce4 <xTimerCreateTimerTask+0x8c>)
 800dca4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dca6:	4b0f      	ldr	r3, [pc, #60]	; (800dce4 <xTimerCreateTimerTask+0x8c>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d001      	beq.n	800dcb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d10a      	bne.n	800dcce <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbc:	f383 8811 	msr	BASEPRI, r3
 800dcc0:	f3bf 8f6f 	isb	sy
 800dcc4:	f3bf 8f4f 	dsb	sy
 800dcc8:	613b      	str	r3, [r7, #16]
}
 800dcca:	bf00      	nop
 800dccc:	e7fe      	b.n	800dccc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dcce:	697b      	ldr	r3, [r7, #20]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3718      	adds	r7, #24
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}
 800dcd8:	20001d64 	.word	0x20001d64
 800dcdc:	08011028 	.word	0x08011028
 800dce0:	0800ded5 	.word	0x0800ded5
 800dce4:	20001d68 	.word	0x20001d68

0800dce8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b088      	sub	sp, #32
 800dcec:	af02      	add	r7, sp, #8
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
 800dcf4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800dcf6:	2028      	movs	r0, #40	; 0x28
 800dcf8:	f000 fd8e 	bl	800e818 <pvPortMalloc>
 800dcfc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d00d      	beq.n	800dd20 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	2200      	movs	r2, #0
 800dd08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	9301      	str	r3, [sp, #4]
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	9300      	str	r3, [sp, #0]
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	687a      	ldr	r2, [r7, #4]
 800dd18:	68b9      	ldr	r1, [r7, #8]
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f000 f805 	bl	800dd2a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800dd20:	697b      	ldr	r3, [r7, #20]
	}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b086      	sub	sp, #24
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	60f8      	str	r0, [r7, #12]
 800dd32:	60b9      	str	r1, [r7, #8]
 800dd34:	607a      	str	r2, [r7, #4]
 800dd36:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d10a      	bne.n	800dd54 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	617b      	str	r3, [r7, #20]
}
 800dd50:	bf00      	nop
 800dd52:	e7fe      	b.n	800dd52 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800dd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d01e      	beq.n	800dd98 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dd5a:	f000 facb 	bl	800e2f4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd60:	68fa      	ldr	r2, [r7, #12]
 800dd62:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd6c:	683a      	ldr	r2, [r7, #0]
 800dd6e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd72:	6a3a      	ldr	r2, [r7, #32]
 800dd74:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd78:	3304      	adds	r3, #4
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fd fedb 	bl	800bb36 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d008      	beq.n	800dd98 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800dd8c:	f043 0304 	orr.w	r3, r3, #4
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800dd98:	bf00      	nop
 800dd9a:	3718      	adds	r7, #24
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b08a      	sub	sp, #40	; 0x28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
 800ddac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10a      	bne.n	800ddce <xTimerGenericCommand+0x2e>
	__asm volatile
 800ddb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbc:	f383 8811 	msr	BASEPRI, r3
 800ddc0:	f3bf 8f6f 	isb	sy
 800ddc4:	f3bf 8f4f 	dsb	sy
 800ddc8:	623b      	str	r3, [r7, #32]
}
 800ddca:	bf00      	nop
 800ddcc:	e7fe      	b.n	800ddcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ddce:	4b1a      	ldr	r3, [pc, #104]	; (800de38 <xTimerGenericCommand+0x98>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d02a      	beq.n	800de2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	2b05      	cmp	r3, #5
 800dde6:	dc18      	bgt.n	800de1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dde8:	f7ff fd14 	bl	800d814 <xTaskGetSchedulerState>
 800ddec:	4603      	mov	r3, r0
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d109      	bne.n	800de06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ddf2:	4b11      	ldr	r3, [pc, #68]	; (800de38 <xTimerGenericCommand+0x98>)
 800ddf4:	6818      	ldr	r0, [r3, #0]
 800ddf6:	f107 0114 	add.w	r1, r7, #20
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddfe:	f7fe f89b 	bl	800bf38 <xQueueGenericSend>
 800de02:	6278      	str	r0, [r7, #36]	; 0x24
 800de04:	e012      	b.n	800de2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800de06:	4b0c      	ldr	r3, [pc, #48]	; (800de38 <xTimerGenericCommand+0x98>)
 800de08:	6818      	ldr	r0, [r3, #0]
 800de0a:	f107 0114 	add.w	r1, r7, #20
 800de0e:	2300      	movs	r3, #0
 800de10:	2200      	movs	r2, #0
 800de12:	f7fe f891 	bl	800bf38 <xQueueGenericSend>
 800de16:	6278      	str	r0, [r7, #36]	; 0x24
 800de18:	e008      	b.n	800de2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800de1a:	4b07      	ldr	r3, [pc, #28]	; (800de38 <xTimerGenericCommand+0x98>)
 800de1c:	6818      	ldr	r0, [r3, #0]
 800de1e:	f107 0114 	add.w	r1, r7, #20
 800de22:	2300      	movs	r3, #0
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	f7fe f985 	bl	800c134 <xQueueGenericSendFromISR>
 800de2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800de2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3728      	adds	r7, #40	; 0x28
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}
 800de36:	bf00      	nop
 800de38:	20001d64 	.word	0x20001d64

0800de3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b088      	sub	sp, #32
 800de40:	af02      	add	r7, sp, #8
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de46:	4b22      	ldr	r3, [pc, #136]	; (800ded0 <prvProcessExpiredTimer+0x94>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	68db      	ldr	r3, [r3, #12]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800de50:	697b      	ldr	r3, [r7, #20]
 800de52:	3304      	adds	r3, #4
 800de54:	4618      	mov	r0, r3
 800de56:	f7fd fed8 	bl	800bc0a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de60:	f003 0304 	and.w	r3, r3, #4
 800de64:	2b00      	cmp	r3, #0
 800de66:	d022      	beq.n	800deae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	699a      	ldr	r2, [r3, #24]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	18d1      	adds	r1, r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	683a      	ldr	r2, [r7, #0]
 800de74:	6978      	ldr	r0, [r7, #20]
 800de76:	f000 f8d1 	bl	800e01c <prvInsertTimerInActiveList>
 800de7a:	4603      	mov	r3, r0
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d01f      	beq.n	800dec0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de80:	2300      	movs	r3, #0
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	2300      	movs	r3, #0
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	2100      	movs	r1, #0
 800de8a:	6978      	ldr	r0, [r7, #20]
 800de8c:	f7ff ff88 	bl	800dda0 <xTimerGenericCommand>
 800de90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d113      	bne.n	800dec0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800de98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de9c:	f383 8811 	msr	BASEPRI, r3
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	60fb      	str	r3, [r7, #12]
}
 800deaa:	bf00      	nop
 800deac:	e7fe      	b.n	800deac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800deb4:	f023 0301 	bic.w	r3, r3, #1
 800deb8:	b2da      	uxtb	r2, r3
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	6a1b      	ldr	r3, [r3, #32]
 800dec4:	6978      	ldr	r0, [r7, #20]
 800dec6:	4798      	blx	r3
}
 800dec8:	bf00      	nop
 800deca:	3718      	adds	r7, #24
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	20001d5c 	.word	0x20001d5c

0800ded4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dedc:	f107 0308 	add.w	r3, r7, #8
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 f857 	bl	800df94 <prvGetNextExpireTime>
 800dee6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	4619      	mov	r1, r3
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f000 f803 	bl	800def8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800def2:	f000 f8d5 	bl	800e0a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800def6:	e7f1      	b.n	800dedc <prvTimerTask+0x8>

0800def8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800df02:	f7ff f8ad 	bl	800d060 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df06:	f107 0308 	add.w	r3, r7, #8
 800df0a:	4618      	mov	r0, r3
 800df0c:	f000 f866 	bl	800dfdc <prvSampleTimeNow>
 800df10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d130      	bne.n	800df7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d10a      	bne.n	800df34 <prvProcessTimerOrBlockTask+0x3c>
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	429a      	cmp	r2, r3
 800df24:	d806      	bhi.n	800df34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800df26:	f7ff f8a9 	bl	800d07c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800df2a:	68f9      	ldr	r1, [r7, #12]
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f7ff ff85 	bl	800de3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800df32:	e024      	b.n	800df7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d008      	beq.n	800df4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800df3a:	4b13      	ldr	r3, [pc, #76]	; (800df88 <prvProcessTimerOrBlockTask+0x90>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	2b00      	cmp	r3, #0
 800df42:	d101      	bne.n	800df48 <prvProcessTimerOrBlockTask+0x50>
 800df44:	2301      	movs	r3, #1
 800df46:	e000      	b.n	800df4a <prvProcessTimerOrBlockTask+0x52>
 800df48:	2300      	movs	r3, #0
 800df4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800df4c:	4b0f      	ldr	r3, [pc, #60]	; (800df8c <prvProcessTimerOrBlockTask+0x94>)
 800df4e:	6818      	ldr	r0, [r3, #0]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	1ad3      	subs	r3, r2, r3
 800df56:	683a      	ldr	r2, [r7, #0]
 800df58:	4619      	mov	r1, r3
 800df5a:	f7fe fe1f 	bl	800cb9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800df5e:	f7ff f88d 	bl	800d07c <xTaskResumeAll>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d10a      	bne.n	800df7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800df68:	4b09      	ldr	r3, [pc, #36]	; (800df90 <prvProcessTimerOrBlockTask+0x98>)
 800df6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df6e:	601a      	str	r2, [r3, #0]
 800df70:	f3bf 8f4f 	dsb	sy
 800df74:	f3bf 8f6f 	isb	sy
}
 800df78:	e001      	b.n	800df7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800df7a:	f7ff f87f 	bl	800d07c <xTaskResumeAll>
}
 800df7e:	bf00      	nop
 800df80:	3710      	adds	r7, #16
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	20001d60 	.word	0x20001d60
 800df8c:	20001d64 	.word	0x20001d64
 800df90:	e000ed04 	.word	0xe000ed04

0800df94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800df9c:	4b0e      	ldr	r3, [pc, #56]	; (800dfd8 <prvGetNextExpireTime+0x44>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d101      	bne.n	800dfaa <prvGetNextExpireTime+0x16>
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	e000      	b.n	800dfac <prvGetNextExpireTime+0x18>
 800dfaa:	2200      	movs	r2, #0
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d105      	bne.n	800dfc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dfb8:	4b07      	ldr	r3, [pc, #28]	; (800dfd8 <prvGetNextExpireTime+0x44>)
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	68db      	ldr	r3, [r3, #12]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	60fb      	str	r3, [r7, #12]
 800dfc2:	e001      	b.n	800dfc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3714      	adds	r7, #20
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
 800dfd6:	bf00      	nop
 800dfd8:	20001d5c 	.word	0x20001d5c

0800dfdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dfe4:	f7ff f8e6 	bl	800d1b4 <xTaskGetTickCount>
 800dfe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dfea:	4b0b      	ldr	r3, [pc, #44]	; (800e018 <prvSampleTimeNow+0x3c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d205      	bcs.n	800e000 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dff4:	f000 f91a 	bl	800e22c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2201      	movs	r2, #1
 800dffc:	601a      	str	r2, [r3, #0]
 800dffe:	e002      	b.n	800e006 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2200      	movs	r2, #0
 800e004:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e006:	4a04      	ldr	r2, [pc, #16]	; (800e018 <prvSampleTimeNow+0x3c>)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e00c:	68fb      	ldr	r3, [r7, #12]
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3710      	adds	r7, #16
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	20001d6c 	.word	0x20001d6c

0800e01c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	60b9      	str	r1, [r7, #8]
 800e026:	607a      	str	r2, [r7, #4]
 800e028:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e02a:	2300      	movs	r3, #0
 800e02c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	68ba      	ldr	r2, [r7, #8]
 800e032:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	68fa      	ldr	r2, [r7, #12]
 800e038:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e03a:	68ba      	ldr	r2, [r7, #8]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	429a      	cmp	r2, r3
 800e040:	d812      	bhi.n	800e068 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	1ad2      	subs	r2, r2, r3
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	699b      	ldr	r3, [r3, #24]
 800e04c:	429a      	cmp	r2, r3
 800e04e:	d302      	bcc.n	800e056 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e050:	2301      	movs	r3, #1
 800e052:	617b      	str	r3, [r7, #20]
 800e054:	e01b      	b.n	800e08e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e056:	4b10      	ldr	r3, [pc, #64]	; (800e098 <prvInsertTimerInActiveList+0x7c>)
 800e058:	681a      	ldr	r2, [r3, #0]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	3304      	adds	r3, #4
 800e05e:	4619      	mov	r1, r3
 800e060:	4610      	mov	r0, r2
 800e062:	f7fd fd99 	bl	800bb98 <vListInsert>
 800e066:	e012      	b.n	800e08e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d206      	bcs.n	800e07e <prvInsertTimerInActiveList+0x62>
 800e070:	68ba      	ldr	r2, [r7, #8]
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	429a      	cmp	r2, r3
 800e076:	d302      	bcc.n	800e07e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e078:	2301      	movs	r3, #1
 800e07a:	617b      	str	r3, [r7, #20]
 800e07c:	e007      	b.n	800e08e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e07e:	4b07      	ldr	r3, [pc, #28]	; (800e09c <prvInsertTimerInActiveList+0x80>)
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	3304      	adds	r3, #4
 800e086:	4619      	mov	r1, r3
 800e088:	4610      	mov	r0, r2
 800e08a:	f7fd fd85 	bl	800bb98 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e08e:	697b      	ldr	r3, [r7, #20]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3718      	adds	r7, #24
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	20001d60 	.word	0x20001d60
 800e09c:	20001d5c 	.word	0x20001d5c

0800e0a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b08c      	sub	sp, #48	; 0x30
 800e0a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0a6:	e0ae      	b.n	800e206 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	f2c0 80aa 	blt.w	800e204 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b6:	695b      	ldr	r3, [r3, #20]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d004      	beq.n	800e0c6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	3304      	adds	r3, #4
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7fd fda2 	bl	800bc0a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e0c6:	1d3b      	adds	r3, r7, #4
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7ff ff87 	bl	800dfdc <prvSampleTimeNow>
 800e0ce:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	2b09      	cmp	r3, #9
 800e0d4:	f200 8097 	bhi.w	800e206 <prvProcessReceivedCommands+0x166>
 800e0d8:	a201      	add	r2, pc, #4	; (adr r2, 800e0e0 <prvProcessReceivedCommands+0x40>)
 800e0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0de:	bf00      	nop
 800e0e0:	0800e109 	.word	0x0800e109
 800e0e4:	0800e109 	.word	0x0800e109
 800e0e8:	0800e109 	.word	0x0800e109
 800e0ec:	0800e17d 	.word	0x0800e17d
 800e0f0:	0800e191 	.word	0x0800e191
 800e0f4:	0800e1db 	.word	0x0800e1db
 800e0f8:	0800e109 	.word	0x0800e109
 800e0fc:	0800e109 	.word	0x0800e109
 800e100:	0800e17d 	.word	0x0800e17d
 800e104:	0800e191 	.word	0x0800e191
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e10e:	f043 0301 	orr.w	r3, r3, #1
 800e112:	b2da      	uxtb	r2, r3
 800e114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e116:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	18d1      	adds	r1, r2, r3
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	6a3a      	ldr	r2, [r7, #32]
 800e126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e128:	f7ff ff78 	bl	800e01c <prvInsertTimerInActiveList>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d069      	beq.n	800e206 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e134:	6a1b      	ldr	r3, [r3, #32]
 800e136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e138:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e140:	f003 0304 	and.w	r3, r3, #4
 800e144:	2b00      	cmp	r3, #0
 800e146:	d05e      	beq.n	800e206 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e148:	68fa      	ldr	r2, [r7, #12]
 800e14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	441a      	add	r2, r3
 800e150:	2300      	movs	r3, #0
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	2300      	movs	r3, #0
 800e156:	2100      	movs	r1, #0
 800e158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e15a:	f7ff fe21 	bl	800dda0 <xTimerGenericCommand>
 800e15e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800e160:	69fb      	ldr	r3, [r7, #28]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d14f      	bne.n	800e206 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800e166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	61bb      	str	r3, [r7, #24]
}
 800e178:	bf00      	nop
 800e17a:	e7fe      	b.n	800e17a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e182:	f023 0301 	bic.w	r3, r3, #1
 800e186:	b2da      	uxtb	r2, r3
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800e18e:	e03a      	b.n	800e206 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e192:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e196:	f043 0301 	orr.w	r3, r3, #1
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e19e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e1a2:	68fa      	ldr	r2, [r7, #12]
 800e1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d10a      	bne.n	800e1c6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	617b      	str	r3, [r7, #20]
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c8:	699a      	ldr	r2, [r3, #24]
 800e1ca:	6a3b      	ldr	r3, [r7, #32]
 800e1cc:	18d1      	adds	r1, r2, r3
 800e1ce:	6a3b      	ldr	r3, [r7, #32]
 800e1d0:	6a3a      	ldr	r2, [r7, #32]
 800e1d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1d4:	f7ff ff22 	bl	800e01c <prvInsertTimerInActiveList>
					break;
 800e1d8:	e015      	b.n	800e206 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1e0:	f003 0302 	and.w	r3, r3, #2
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d103      	bne.n	800e1f0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800e1e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ea:	f000 fbe1 	bl	800e9b0 <vPortFree>
 800e1ee:	e00a      	b.n	800e206 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e1f6:	f023 0301 	bic.w	r3, r3, #1
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e202:	e000      	b.n	800e206 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e204:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e206:	4b08      	ldr	r3, [pc, #32]	; (800e228 <prvProcessReceivedCommands+0x188>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f107 0108 	add.w	r1, r7, #8
 800e20e:	2200      	movs	r2, #0
 800e210:	4618      	mov	r0, r3
 800e212:	f7fe f8b7 	bl	800c384 <xQueueReceive>
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f47f af45 	bne.w	800e0a8 <prvProcessReceivedCommands+0x8>
	}
}
 800e21e:	bf00      	nop
 800e220:	bf00      	nop
 800e222:	3728      	adds	r7, #40	; 0x28
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	20001d64 	.word	0x20001d64

0800e22c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b088      	sub	sp, #32
 800e230:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e232:	e048      	b.n	800e2c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e234:	4b2d      	ldr	r3, [pc, #180]	; (800e2ec <prvSwitchTimerLists+0xc0>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e23e:	4b2b      	ldr	r3, [pc, #172]	; (800e2ec <prvSwitchTimerLists+0xc0>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	68db      	ldr	r3, [r3, #12]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	3304      	adds	r3, #4
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7fd fcdc 	bl	800bc0a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6a1b      	ldr	r3, [r3, #32]
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e260:	f003 0304 	and.w	r3, r3, #4
 800e264:	2b00      	cmp	r3, #0
 800e266:	d02e      	beq.n	800e2c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	699b      	ldr	r3, [r3, #24]
 800e26c:	693a      	ldr	r2, [r7, #16]
 800e26e:	4413      	add	r3, r2
 800e270:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	429a      	cmp	r2, r3
 800e278:	d90e      	bls.n	800e298 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	68fa      	ldr	r2, [r7, #12]
 800e284:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e286:	4b19      	ldr	r3, [pc, #100]	; (800e2ec <prvSwitchTimerLists+0xc0>)
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	3304      	adds	r3, #4
 800e28e:	4619      	mov	r1, r3
 800e290:	4610      	mov	r0, r2
 800e292:	f7fd fc81 	bl	800bb98 <vListInsert>
 800e296:	e016      	b.n	800e2c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e298:	2300      	movs	r3, #0
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	2300      	movs	r3, #0
 800e29e:	693a      	ldr	r2, [r7, #16]
 800e2a0:	2100      	movs	r1, #0
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff fd7c 	bl	800dda0 <xTimerGenericCommand>
 800e2a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10a      	bne.n	800e2c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	f383 8811 	msr	BASEPRI, r3
 800e2b8:	f3bf 8f6f 	isb	sy
 800e2bc:	f3bf 8f4f 	dsb	sy
 800e2c0:	603b      	str	r3, [r7, #0]
}
 800e2c2:	bf00      	nop
 800e2c4:	e7fe      	b.n	800e2c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e2c6:	4b09      	ldr	r3, [pc, #36]	; (800e2ec <prvSwitchTimerLists+0xc0>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d1b1      	bne.n	800e234 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e2d0:	4b06      	ldr	r3, [pc, #24]	; (800e2ec <prvSwitchTimerLists+0xc0>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e2d6:	4b06      	ldr	r3, [pc, #24]	; (800e2f0 <prvSwitchTimerLists+0xc4>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	4a04      	ldr	r2, [pc, #16]	; (800e2ec <prvSwitchTimerLists+0xc0>)
 800e2dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e2de:	4a04      	ldr	r2, [pc, #16]	; (800e2f0 <prvSwitchTimerLists+0xc4>)
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	6013      	str	r3, [r2, #0]
}
 800e2e4:	bf00      	nop
 800e2e6:	3718      	adds	r7, #24
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	20001d5c 	.word	0x20001d5c
 800e2f0:	20001d60 	.word	0x20001d60

0800e2f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e2fa:	f000 f96b 	bl	800e5d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e2fe:	4b15      	ldr	r3, [pc, #84]	; (800e354 <prvCheckForValidListAndQueue+0x60>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d120      	bne.n	800e348 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e306:	4814      	ldr	r0, [pc, #80]	; (800e358 <prvCheckForValidListAndQueue+0x64>)
 800e308:	f7fd fbf5 	bl	800baf6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e30c:	4813      	ldr	r0, [pc, #76]	; (800e35c <prvCheckForValidListAndQueue+0x68>)
 800e30e:	f7fd fbf2 	bl	800baf6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e312:	4b13      	ldr	r3, [pc, #76]	; (800e360 <prvCheckForValidListAndQueue+0x6c>)
 800e314:	4a10      	ldr	r2, [pc, #64]	; (800e358 <prvCheckForValidListAndQueue+0x64>)
 800e316:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e318:	4b12      	ldr	r3, [pc, #72]	; (800e364 <prvCheckForValidListAndQueue+0x70>)
 800e31a:	4a10      	ldr	r2, [pc, #64]	; (800e35c <prvCheckForValidListAndQueue+0x68>)
 800e31c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e31e:	2300      	movs	r3, #0
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	4b11      	ldr	r3, [pc, #68]	; (800e368 <prvCheckForValidListAndQueue+0x74>)
 800e324:	4a11      	ldr	r2, [pc, #68]	; (800e36c <prvCheckForValidListAndQueue+0x78>)
 800e326:	210c      	movs	r1, #12
 800e328:	200a      	movs	r0, #10
 800e32a:	f7fd fd01 	bl	800bd30 <xQueueGenericCreateStatic>
 800e32e:	4603      	mov	r3, r0
 800e330:	4a08      	ldr	r2, [pc, #32]	; (800e354 <prvCheckForValidListAndQueue+0x60>)
 800e332:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e334:	4b07      	ldr	r3, [pc, #28]	; (800e354 <prvCheckForValidListAndQueue+0x60>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d005      	beq.n	800e348 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e33c:	4b05      	ldr	r3, [pc, #20]	; (800e354 <prvCheckForValidListAndQueue+0x60>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	490b      	ldr	r1, [pc, #44]	; (800e370 <prvCheckForValidListAndQueue+0x7c>)
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe fbd6 	bl	800caf4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e348:	f000 f974 	bl	800e634 <vPortExitCritical>
}
 800e34c:	bf00      	nop
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	20001d64 	.word	0x20001d64
 800e358:	20001d34 	.word	0x20001d34
 800e35c:	20001d48 	.word	0x20001d48
 800e360:	20001d5c 	.word	0x20001d5c
 800e364:	20001d60 	.word	0x20001d60
 800e368:	20001de8 	.word	0x20001de8
 800e36c:	20001d70 	.word	0x20001d70
 800e370:	08011030 	.word	0x08011030

0800e374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e374:	b480      	push	{r7}
 800e376:	b085      	sub	sp, #20
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	3b04      	subs	r3, #4
 800e384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e38c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	3b04      	subs	r3, #4
 800e392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e394:	68bb      	ldr	r3, [r7, #8]
 800e396:	f023 0201 	bic.w	r2, r3, #1
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	3b04      	subs	r3, #4
 800e3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3a4:	4a0c      	ldr	r2, [pc, #48]	; (800e3d8 <pxPortInitialiseStack+0x64>)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	3b14      	subs	r3, #20
 800e3ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	3b04      	subs	r3, #4
 800e3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f06f 0202 	mvn.w	r2, #2
 800e3c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	3b20      	subs	r3, #32
 800e3c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3714      	adds	r7, #20
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr
 800e3d8:	0800e3dd 	.word	0x0800e3dd

0800e3dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e3e6:	4b12      	ldr	r3, [pc, #72]	; (800e430 <prvTaskExitError+0x54>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ee:	d00a      	beq.n	800e406 <prvTaskExitError+0x2a>
	__asm volatile
 800e3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	60fb      	str	r3, [r7, #12]
}
 800e402:	bf00      	nop
 800e404:	e7fe      	b.n	800e404 <prvTaskExitError+0x28>
	__asm volatile
 800e406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40a:	f383 8811 	msr	BASEPRI, r3
 800e40e:	f3bf 8f6f 	isb	sy
 800e412:	f3bf 8f4f 	dsb	sy
 800e416:	60bb      	str	r3, [r7, #8]
}
 800e418:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e41a:	bf00      	nop
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0fc      	beq.n	800e41c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e422:	bf00      	nop
 800e424:	bf00      	nop
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr
 800e430:	2000003c 	.word	0x2000003c
	...

0800e440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e440:	4b07      	ldr	r3, [pc, #28]	; (800e460 <pxCurrentTCBConst2>)
 800e442:	6819      	ldr	r1, [r3, #0]
 800e444:	6808      	ldr	r0, [r1, #0]
 800e446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e44a:	f380 8809 	msr	PSP, r0
 800e44e:	f3bf 8f6f 	isb	sy
 800e452:	f04f 0000 	mov.w	r0, #0
 800e456:	f380 8811 	msr	BASEPRI, r0
 800e45a:	4770      	bx	lr
 800e45c:	f3af 8000 	nop.w

0800e460 <pxCurrentTCBConst2>:
 800e460:	20001c08 	.word	0x20001c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e464:	bf00      	nop
 800e466:	bf00      	nop

0800e468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e468:	4808      	ldr	r0, [pc, #32]	; (800e48c <prvPortStartFirstTask+0x24>)
 800e46a:	6800      	ldr	r0, [r0, #0]
 800e46c:	6800      	ldr	r0, [r0, #0]
 800e46e:	f380 8808 	msr	MSP, r0
 800e472:	f04f 0000 	mov.w	r0, #0
 800e476:	f380 8814 	msr	CONTROL, r0
 800e47a:	b662      	cpsie	i
 800e47c:	b661      	cpsie	f
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	df00      	svc	0
 800e488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e48a:	bf00      	nop
 800e48c:	e000ed08 	.word	0xe000ed08

0800e490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e496:	4b46      	ldr	r3, [pc, #280]	; (800e5b0 <xPortStartScheduler+0x120>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	4a46      	ldr	r2, [pc, #280]	; (800e5b4 <xPortStartScheduler+0x124>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d10a      	bne.n	800e4b6 <xPortStartScheduler+0x26>
	__asm volatile
 800e4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a4:	f383 8811 	msr	BASEPRI, r3
 800e4a8:	f3bf 8f6f 	isb	sy
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	613b      	str	r3, [r7, #16]
}
 800e4b2:	bf00      	nop
 800e4b4:	e7fe      	b.n	800e4b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e4b6:	4b3e      	ldr	r3, [pc, #248]	; (800e5b0 <xPortStartScheduler+0x120>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	4a3f      	ldr	r2, [pc, #252]	; (800e5b8 <xPortStartScheduler+0x128>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d10a      	bne.n	800e4d6 <xPortStartScheduler+0x46>
	__asm volatile
 800e4c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4c4:	f383 8811 	msr	BASEPRI, r3
 800e4c8:	f3bf 8f6f 	isb	sy
 800e4cc:	f3bf 8f4f 	dsb	sy
 800e4d0:	60fb      	str	r3, [r7, #12]
}
 800e4d2:	bf00      	nop
 800e4d4:	e7fe      	b.n	800e4d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4d6:	4b39      	ldr	r3, [pc, #228]	; (800e5bc <xPortStartScheduler+0x12c>)
 800e4d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	b2db      	uxtb	r3, r3
 800e4e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	22ff      	movs	r2, #255	; 0xff
 800e4e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4e8:	697b      	ldr	r3, [r7, #20]
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e4f0:	78fb      	ldrb	r3, [r7, #3]
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	4b31      	ldr	r3, [pc, #196]	; (800e5c0 <xPortStartScheduler+0x130>)
 800e4fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e4fe:	4b31      	ldr	r3, [pc, #196]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e500:	2207      	movs	r2, #7
 800e502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e504:	e009      	b.n	800e51a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e506:	4b2f      	ldr	r3, [pc, #188]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	3b01      	subs	r3, #1
 800e50c:	4a2d      	ldr	r2, [pc, #180]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e50e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e510:	78fb      	ldrb	r3, [r7, #3]
 800e512:	b2db      	uxtb	r3, r3
 800e514:	005b      	lsls	r3, r3, #1
 800e516:	b2db      	uxtb	r3, r3
 800e518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e51a:	78fb      	ldrb	r3, [r7, #3]
 800e51c:	b2db      	uxtb	r3, r3
 800e51e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e522:	2b80      	cmp	r3, #128	; 0x80
 800e524:	d0ef      	beq.n	800e506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e526:	4b27      	ldr	r3, [pc, #156]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	f1c3 0307 	rsb	r3, r3, #7
 800e52e:	2b04      	cmp	r3, #4
 800e530:	d00a      	beq.n	800e548 <xPortStartScheduler+0xb8>
	__asm volatile
 800e532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e536:	f383 8811 	msr	BASEPRI, r3
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	60bb      	str	r3, [r7, #8]
}
 800e544:	bf00      	nop
 800e546:	e7fe      	b.n	800e546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e548:	4b1e      	ldr	r3, [pc, #120]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	021b      	lsls	r3, r3, #8
 800e54e:	4a1d      	ldr	r2, [pc, #116]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e552:	4b1c      	ldr	r3, [pc, #112]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e55a:	4a1a      	ldr	r2, [pc, #104]	; (800e5c4 <xPortStartScheduler+0x134>)
 800e55c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	b2da      	uxtb	r2, r3
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e566:	4b18      	ldr	r3, [pc, #96]	; (800e5c8 <xPortStartScheduler+0x138>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a17      	ldr	r2, [pc, #92]	; (800e5c8 <xPortStartScheduler+0x138>)
 800e56c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e572:	4b15      	ldr	r3, [pc, #84]	; (800e5c8 <xPortStartScheduler+0x138>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a14      	ldr	r2, [pc, #80]	; (800e5c8 <xPortStartScheduler+0x138>)
 800e578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e57c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e57e:	f000 f8dd 	bl	800e73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e582:	4b12      	ldr	r3, [pc, #72]	; (800e5cc <xPortStartScheduler+0x13c>)
 800e584:	2200      	movs	r2, #0
 800e586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e588:	f000 f8fc 	bl	800e784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e58c:	4b10      	ldr	r3, [pc, #64]	; (800e5d0 <xPortStartScheduler+0x140>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	4a0f      	ldr	r2, [pc, #60]	; (800e5d0 <xPortStartScheduler+0x140>)
 800e592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e598:	f7ff ff66 	bl	800e468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e59c:	f7fe fed2 	bl	800d344 <vTaskSwitchContext>
	prvTaskExitError();
 800e5a0:	f7ff ff1c 	bl	800e3dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5a4:	2300      	movs	r3, #0
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3718      	adds	r7, #24
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	e000ed00 	.word	0xe000ed00
 800e5b4:	410fc271 	.word	0x410fc271
 800e5b8:	410fc270 	.word	0x410fc270
 800e5bc:	e000e400 	.word	0xe000e400
 800e5c0:	20001e30 	.word	0x20001e30
 800e5c4:	20001e34 	.word	0x20001e34
 800e5c8:	e000ed20 	.word	0xe000ed20
 800e5cc:	2000003c 	.word	0x2000003c
 800e5d0:	e000ef34 	.word	0xe000ef34

0800e5d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b083      	sub	sp, #12
 800e5d8:	af00      	add	r7, sp, #0
	__asm volatile
 800e5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	607b      	str	r3, [r7, #4]
}
 800e5ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5ee:	4b0f      	ldr	r3, [pc, #60]	; (800e62c <vPortEnterCritical+0x58>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	3301      	adds	r3, #1
 800e5f4:	4a0d      	ldr	r2, [pc, #52]	; (800e62c <vPortEnterCritical+0x58>)
 800e5f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e5f8:	4b0c      	ldr	r3, [pc, #48]	; (800e62c <vPortEnterCritical+0x58>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d10f      	bne.n	800e620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e600:	4b0b      	ldr	r3, [pc, #44]	; (800e630 <vPortEnterCritical+0x5c>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	b2db      	uxtb	r3, r3
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00a      	beq.n	800e620 <vPortEnterCritical+0x4c>
	__asm volatile
 800e60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e60e:	f383 8811 	msr	BASEPRI, r3
 800e612:	f3bf 8f6f 	isb	sy
 800e616:	f3bf 8f4f 	dsb	sy
 800e61a:	603b      	str	r3, [r7, #0]
}
 800e61c:	bf00      	nop
 800e61e:	e7fe      	b.n	800e61e <vPortEnterCritical+0x4a>
	}
}
 800e620:	bf00      	nop
 800e622:	370c      	adds	r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	2000003c 	.word	0x2000003c
 800e630:	e000ed04 	.word	0xe000ed04

0800e634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e63a:	4b12      	ldr	r3, [pc, #72]	; (800e684 <vPortExitCritical+0x50>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d10a      	bne.n	800e658 <vPortExitCritical+0x24>
	__asm volatile
 800e642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e646:	f383 8811 	msr	BASEPRI, r3
 800e64a:	f3bf 8f6f 	isb	sy
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	607b      	str	r3, [r7, #4]
}
 800e654:	bf00      	nop
 800e656:	e7fe      	b.n	800e656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e658:	4b0a      	ldr	r3, [pc, #40]	; (800e684 <vPortExitCritical+0x50>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	4a09      	ldr	r2, [pc, #36]	; (800e684 <vPortExitCritical+0x50>)
 800e660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e662:	4b08      	ldr	r3, [pc, #32]	; (800e684 <vPortExitCritical+0x50>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d105      	bne.n	800e676 <vPortExitCritical+0x42>
 800e66a:	2300      	movs	r3, #0
 800e66c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	f383 8811 	msr	BASEPRI, r3
}
 800e674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e676:	bf00      	nop
 800e678:	370c      	adds	r7, #12
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr
 800e682:	bf00      	nop
 800e684:	2000003c 	.word	0x2000003c
	...

0800e690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e690:	f3ef 8009 	mrs	r0, PSP
 800e694:	f3bf 8f6f 	isb	sy
 800e698:	4b15      	ldr	r3, [pc, #84]	; (800e6f0 <pxCurrentTCBConst>)
 800e69a:	681a      	ldr	r2, [r3, #0]
 800e69c:	f01e 0f10 	tst.w	lr, #16
 800e6a0:	bf08      	it	eq
 800e6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6aa:	6010      	str	r0, [r2, #0]
 800e6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e6b4:	f380 8811 	msr	BASEPRI, r0
 800e6b8:	f3bf 8f4f 	dsb	sy
 800e6bc:	f3bf 8f6f 	isb	sy
 800e6c0:	f7fe fe40 	bl	800d344 <vTaskSwitchContext>
 800e6c4:	f04f 0000 	mov.w	r0, #0
 800e6c8:	f380 8811 	msr	BASEPRI, r0
 800e6cc:	bc09      	pop	{r0, r3}
 800e6ce:	6819      	ldr	r1, [r3, #0]
 800e6d0:	6808      	ldr	r0, [r1, #0]
 800e6d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6d6:	f01e 0f10 	tst.w	lr, #16
 800e6da:	bf08      	it	eq
 800e6dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6e0:	f380 8809 	msr	PSP, r0
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	f3af 8000 	nop.w

0800e6f0 <pxCurrentTCBConst>:
 800e6f0:	20001c08 	.word	0x20001c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e6f4:	bf00      	nop
 800e6f6:	bf00      	nop

0800e6f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	607b      	str	r3, [r7, #4]
}
 800e710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e712:	f7fe fd5f 	bl	800d1d4 <xTaskIncrementTick>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d003      	beq.n	800e724 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e71c:	4b06      	ldr	r3, [pc, #24]	; (800e738 <SysTick_Handler+0x40>)
 800e71e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e722:	601a      	str	r2, [r3, #0]
 800e724:	2300      	movs	r3, #0
 800e726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	f383 8811 	msr	BASEPRI, r3
}
 800e72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e730:	bf00      	nop
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	e000ed04 	.word	0xe000ed04

0800e73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e73c:	b480      	push	{r7}
 800e73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e740:	4b0b      	ldr	r3, [pc, #44]	; (800e770 <vPortSetupTimerInterrupt+0x34>)
 800e742:	2200      	movs	r2, #0
 800e744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e746:	4b0b      	ldr	r3, [pc, #44]	; (800e774 <vPortSetupTimerInterrupt+0x38>)
 800e748:	2200      	movs	r2, #0
 800e74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e74c:	4b0a      	ldr	r3, [pc, #40]	; (800e778 <vPortSetupTimerInterrupt+0x3c>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	4a0a      	ldr	r2, [pc, #40]	; (800e77c <vPortSetupTimerInterrupt+0x40>)
 800e752:	fba2 2303 	umull	r2, r3, r2, r3
 800e756:	099b      	lsrs	r3, r3, #6
 800e758:	4a09      	ldr	r2, [pc, #36]	; (800e780 <vPortSetupTimerInterrupt+0x44>)
 800e75a:	3b01      	subs	r3, #1
 800e75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e75e:	4b04      	ldr	r3, [pc, #16]	; (800e770 <vPortSetupTimerInterrupt+0x34>)
 800e760:	2207      	movs	r2, #7
 800e762:	601a      	str	r2, [r3, #0]
}
 800e764:	bf00      	nop
 800e766:	46bd      	mov	sp, r7
 800e768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76c:	4770      	bx	lr
 800e76e:	bf00      	nop
 800e770:	e000e010 	.word	0xe000e010
 800e774:	e000e018 	.word	0xe000e018
 800e778:	2000001c 	.word	0x2000001c
 800e77c:	10624dd3 	.word	0x10624dd3
 800e780:	e000e014 	.word	0xe000e014

0800e784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e794 <vPortEnableVFP+0x10>
 800e788:	6801      	ldr	r1, [r0, #0]
 800e78a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e78e:	6001      	str	r1, [r0, #0]
 800e790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e792:	bf00      	nop
 800e794:	e000ed88 	.word	0xe000ed88

0800e798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e79e:	f3ef 8305 	mrs	r3, IPSR
 800e7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2b0f      	cmp	r3, #15
 800e7a8:	d914      	bls.n	800e7d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e7aa:	4a17      	ldr	r2, [pc, #92]	; (800e808 <vPortValidateInterruptPriority+0x70>)
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e7b4:	4b15      	ldr	r3, [pc, #84]	; (800e80c <vPortValidateInterruptPriority+0x74>)
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	7afa      	ldrb	r2, [r7, #11]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d20a      	bcs.n	800e7d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	607b      	str	r3, [r7, #4]
}
 800e7d0:	bf00      	nop
 800e7d2:	e7fe      	b.n	800e7d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e7d4:	4b0e      	ldr	r3, [pc, #56]	; (800e810 <vPortValidateInterruptPriority+0x78>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e7dc:	4b0d      	ldr	r3, [pc, #52]	; (800e814 <vPortValidateInterruptPriority+0x7c>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d90a      	bls.n	800e7fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	603b      	str	r3, [r7, #0]
}
 800e7f6:	bf00      	nop
 800e7f8:	e7fe      	b.n	800e7f8 <vPortValidateInterruptPriority+0x60>
	}
 800e7fa:	bf00      	nop
 800e7fc:	3714      	adds	r7, #20
 800e7fe:	46bd      	mov	sp, r7
 800e800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e804:	4770      	bx	lr
 800e806:	bf00      	nop
 800e808:	e000e3f0 	.word	0xe000e3f0
 800e80c:	20001e30 	.word	0x20001e30
 800e810:	e000ed0c 	.word	0xe000ed0c
 800e814:	20001e34 	.word	0x20001e34

0800e818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b08a      	sub	sp, #40	; 0x28
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e820:	2300      	movs	r3, #0
 800e822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e824:	f7fe fc1c 	bl	800d060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e828:	4b5b      	ldr	r3, [pc, #364]	; (800e998 <pvPortMalloc+0x180>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d101      	bne.n	800e834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e830:	f000 f920 	bl	800ea74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e834:	4b59      	ldr	r3, [pc, #356]	; (800e99c <pvPortMalloc+0x184>)
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	4013      	ands	r3, r2
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	f040 8093 	bne.w	800e968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d01d      	beq.n	800e884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e848:	2208      	movs	r2, #8
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4413      	add	r3, r2
 800e84e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f003 0307 	and.w	r3, r3, #7
 800e856:	2b00      	cmp	r3, #0
 800e858:	d014      	beq.n	800e884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f023 0307 	bic.w	r3, r3, #7
 800e860:	3308      	adds	r3, #8
 800e862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f003 0307 	and.w	r3, r3, #7
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00a      	beq.n	800e884 <pvPortMalloc+0x6c>
	__asm volatile
 800e86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e872:	f383 8811 	msr	BASEPRI, r3
 800e876:	f3bf 8f6f 	isb	sy
 800e87a:	f3bf 8f4f 	dsb	sy
 800e87e:	617b      	str	r3, [r7, #20]
}
 800e880:	bf00      	nop
 800e882:	e7fe      	b.n	800e882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d06e      	beq.n	800e968 <pvPortMalloc+0x150>
 800e88a:	4b45      	ldr	r3, [pc, #276]	; (800e9a0 <pvPortMalloc+0x188>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	429a      	cmp	r2, r3
 800e892:	d869      	bhi.n	800e968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e894:	4b43      	ldr	r3, [pc, #268]	; (800e9a4 <pvPortMalloc+0x18c>)
 800e896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e898:	4b42      	ldr	r3, [pc, #264]	; (800e9a4 <pvPortMalloc+0x18c>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e89e:	e004      	b.n	800e8aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	d903      	bls.n	800e8bc <pvPortMalloc+0xa4>
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1f1      	bne.n	800e8a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e8bc:	4b36      	ldr	r3, [pc, #216]	; (800e998 <pvPortMalloc+0x180>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d050      	beq.n	800e968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e8c6:	6a3b      	ldr	r3, [r7, #32]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2208      	movs	r2, #8
 800e8cc:	4413      	add	r3, r2
 800e8ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d2:	681a      	ldr	r2, [r3, #0]
 800e8d4:	6a3b      	ldr	r3, [r7, #32]
 800e8d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	1ad2      	subs	r2, r2, r3
 800e8e0:	2308      	movs	r3, #8
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d91f      	bls.n	800e928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	f003 0307 	and.w	r3, r3, #7
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d00a      	beq.n	800e910 <pvPortMalloc+0xf8>
	__asm volatile
 800e8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8fe:	f383 8811 	msr	BASEPRI, r3
 800e902:	f3bf 8f6f 	isb	sy
 800e906:	f3bf 8f4f 	dsb	sy
 800e90a:	613b      	str	r3, [r7, #16]
}
 800e90c:	bf00      	nop
 800e90e:	e7fe      	b.n	800e90e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	1ad2      	subs	r2, r2, r3
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e922:	69b8      	ldr	r0, [r7, #24]
 800e924:	f000 f908 	bl	800eb38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e928:	4b1d      	ldr	r3, [pc, #116]	; (800e9a0 <pvPortMalloc+0x188>)
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	4a1b      	ldr	r2, [pc, #108]	; (800e9a0 <pvPortMalloc+0x188>)
 800e934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e936:	4b1a      	ldr	r3, [pc, #104]	; (800e9a0 <pvPortMalloc+0x188>)
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	4b1b      	ldr	r3, [pc, #108]	; (800e9a8 <pvPortMalloc+0x190>)
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	429a      	cmp	r2, r3
 800e940:	d203      	bcs.n	800e94a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e942:	4b17      	ldr	r3, [pc, #92]	; (800e9a0 <pvPortMalloc+0x188>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	4a18      	ldr	r2, [pc, #96]	; (800e9a8 <pvPortMalloc+0x190>)
 800e948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	685a      	ldr	r2, [r3, #4]
 800e94e:	4b13      	ldr	r3, [pc, #76]	; (800e99c <pvPortMalloc+0x184>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	431a      	orrs	r2, r3
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95a:	2200      	movs	r2, #0
 800e95c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e95e:	4b13      	ldr	r3, [pc, #76]	; (800e9ac <pvPortMalloc+0x194>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	3301      	adds	r3, #1
 800e964:	4a11      	ldr	r2, [pc, #68]	; (800e9ac <pvPortMalloc+0x194>)
 800e966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e968:	f7fe fb88 	bl	800d07c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	f003 0307 	and.w	r3, r3, #7
 800e972:	2b00      	cmp	r3, #0
 800e974:	d00a      	beq.n	800e98c <pvPortMalloc+0x174>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	60fb      	str	r3, [r7, #12]
}
 800e988:	bf00      	nop
 800e98a:	e7fe      	b.n	800e98a <pvPortMalloc+0x172>
	return pvReturn;
 800e98c:	69fb      	ldr	r3, [r7, #28]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	3728      	adds	r7, #40	; 0x28
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	20005a40 	.word	0x20005a40
 800e99c:	20005a54 	.word	0x20005a54
 800e9a0:	20005a44 	.word	0x20005a44
 800e9a4:	20005a38 	.word	0x20005a38
 800e9a8:	20005a48 	.word	0x20005a48
 800e9ac:	20005a4c 	.word	0x20005a4c

0800e9b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d04d      	beq.n	800ea5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e9c2:	2308      	movs	r3, #8
 800e9c4:	425b      	negs	r3, r3
 800e9c6:	697a      	ldr	r2, [r7, #20]
 800e9c8:	4413      	add	r3, r2
 800e9ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e9cc:	697b      	ldr	r3, [r7, #20]
 800e9ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	685a      	ldr	r2, [r3, #4]
 800e9d4:	4b24      	ldr	r3, [pc, #144]	; (800ea68 <vPortFree+0xb8>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4013      	ands	r3, r2
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d10a      	bne.n	800e9f4 <vPortFree+0x44>
	__asm volatile
 800e9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9e2:	f383 8811 	msr	BASEPRI, r3
 800e9e6:	f3bf 8f6f 	isb	sy
 800e9ea:	f3bf 8f4f 	dsb	sy
 800e9ee:	60fb      	str	r3, [r7, #12]
}
 800e9f0:	bf00      	nop
 800e9f2:	e7fe      	b.n	800e9f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00a      	beq.n	800ea12 <vPortFree+0x62>
	__asm volatile
 800e9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea00:	f383 8811 	msr	BASEPRI, r3
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	f3bf 8f4f 	dsb	sy
 800ea0c:	60bb      	str	r3, [r7, #8]
}
 800ea0e:	bf00      	nop
 800ea10:	e7fe      	b.n	800ea10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ea12:	693b      	ldr	r3, [r7, #16]
 800ea14:	685a      	ldr	r2, [r3, #4]
 800ea16:	4b14      	ldr	r3, [pc, #80]	; (800ea68 <vPortFree+0xb8>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4013      	ands	r3, r2
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d01e      	beq.n	800ea5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d11a      	bne.n	800ea5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	685a      	ldr	r2, [r3, #4]
 800ea2c:	4b0e      	ldr	r3, [pc, #56]	; (800ea68 <vPortFree+0xb8>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	43db      	mvns	r3, r3
 800ea32:	401a      	ands	r2, r3
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ea38:	f7fe fb12 	bl	800d060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	685a      	ldr	r2, [r3, #4]
 800ea40:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <vPortFree+0xbc>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4413      	add	r3, r2
 800ea46:	4a09      	ldr	r2, [pc, #36]	; (800ea6c <vPortFree+0xbc>)
 800ea48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ea4a:	6938      	ldr	r0, [r7, #16]
 800ea4c:	f000 f874 	bl	800eb38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ea50:	4b07      	ldr	r3, [pc, #28]	; (800ea70 <vPortFree+0xc0>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3301      	adds	r3, #1
 800ea56:	4a06      	ldr	r2, [pc, #24]	; (800ea70 <vPortFree+0xc0>)
 800ea58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ea5a:	f7fe fb0f 	bl	800d07c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ea5e:	bf00      	nop
 800ea60:	3718      	adds	r7, #24
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	20005a54 	.word	0x20005a54
 800ea6c:	20005a44 	.word	0x20005a44
 800ea70:	20005a50 	.word	0x20005a50

0800ea74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	b085      	sub	sp, #20
 800ea78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ea7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea80:	4b27      	ldr	r3, [pc, #156]	; (800eb20 <prvHeapInit+0xac>)
 800ea82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	f003 0307 	and.w	r3, r3, #7
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00c      	beq.n	800eaa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	3307      	adds	r3, #7
 800ea92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f023 0307 	bic.w	r3, r3, #7
 800ea9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea9c:	68ba      	ldr	r2, [r7, #8]
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	4a1f      	ldr	r2, [pc, #124]	; (800eb20 <prvHeapInit+0xac>)
 800eaa4:	4413      	add	r3, r2
 800eaa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eaac:	4a1d      	ldr	r2, [pc, #116]	; (800eb24 <prvHeapInit+0xb0>)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800eab2:	4b1c      	ldr	r3, [pc, #112]	; (800eb24 <prvHeapInit+0xb0>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	68ba      	ldr	r2, [r7, #8]
 800eabc:	4413      	add	r3, r2
 800eabe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800eac0:	2208      	movs	r2, #8
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	1a9b      	subs	r3, r3, r2
 800eac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	f023 0307 	bic.w	r3, r3, #7
 800eace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	4a15      	ldr	r2, [pc, #84]	; (800eb28 <prvHeapInit+0xb4>)
 800ead4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ead6:	4b14      	ldr	r3, [pc, #80]	; (800eb28 <prvHeapInit+0xb4>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2200      	movs	r2, #0
 800eadc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800eade:	4b12      	ldr	r3, [pc, #72]	; (800eb28 <prvHeapInit+0xb4>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2200      	movs	r2, #0
 800eae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	1ad2      	subs	r2, r2, r3
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eaf4:	4b0c      	ldr	r3, [pc, #48]	; (800eb28 <prvHeapInit+0xb4>)
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	4a0a      	ldr	r2, [pc, #40]	; (800eb2c <prvHeapInit+0xb8>)
 800eb02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	4a09      	ldr	r2, [pc, #36]	; (800eb30 <prvHeapInit+0xbc>)
 800eb0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eb0c:	4b09      	ldr	r3, [pc, #36]	; (800eb34 <prvHeapInit+0xc0>)
 800eb0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eb12:	601a      	str	r2, [r3, #0]
}
 800eb14:	bf00      	nop
 800eb16:	3714      	adds	r7, #20
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr
 800eb20:	20001e38 	.word	0x20001e38
 800eb24:	20005a38 	.word	0x20005a38
 800eb28:	20005a40 	.word	0x20005a40
 800eb2c:	20005a48 	.word	0x20005a48
 800eb30:	20005a44 	.word	0x20005a44
 800eb34:	20005a54 	.word	0x20005a54

0800eb38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eb40:	4b28      	ldr	r3, [pc, #160]	; (800ebe4 <prvInsertBlockIntoFreeList+0xac>)
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	e002      	b.n	800eb4c <prvInsertBlockIntoFreeList+0x14>
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	60fb      	str	r3, [r7, #12]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d8f7      	bhi.n	800eb46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	4413      	add	r3, r2
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d108      	bne.n	800eb7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	685a      	ldr	r2, [r3, #4]
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	441a      	add	r2, r3
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	68ba      	ldr	r2, [r7, #8]
 800eb84:	441a      	add	r2, r3
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d118      	bne.n	800ebc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681a      	ldr	r2, [r3, #0]
 800eb92:	4b15      	ldr	r3, [pc, #84]	; (800ebe8 <prvInsertBlockIntoFreeList+0xb0>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d00d      	beq.n	800ebb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	685a      	ldr	r2, [r3, #4]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	441a      	add	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	601a      	str	r2, [r3, #0]
 800ebb4:	e008      	b.n	800ebc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ebb6:	4b0c      	ldr	r3, [pc, #48]	; (800ebe8 <prvInsertBlockIntoFreeList+0xb0>)
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	601a      	str	r2, [r3, #0]
 800ebbe:	e003      	b.n	800ebc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ebc8:	68fa      	ldr	r2, [r7, #12]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d002      	beq.n	800ebd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ebd6:	bf00      	nop
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	20005a38 	.word	0x20005a38
 800ebe8:	20005a40 	.word	0x20005a40

0800ebec <__errno>:
 800ebec:	4b01      	ldr	r3, [pc, #4]	; (800ebf4 <__errno+0x8>)
 800ebee:	6818      	ldr	r0, [r3, #0]
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	20000040 	.word	0x20000040

0800ebf8 <__libc_init_array>:
 800ebf8:	b570      	push	{r4, r5, r6, lr}
 800ebfa:	4d0d      	ldr	r5, [pc, #52]	; (800ec30 <__libc_init_array+0x38>)
 800ebfc:	4c0d      	ldr	r4, [pc, #52]	; (800ec34 <__libc_init_array+0x3c>)
 800ebfe:	1b64      	subs	r4, r4, r5
 800ec00:	10a4      	asrs	r4, r4, #2
 800ec02:	2600      	movs	r6, #0
 800ec04:	42a6      	cmp	r6, r4
 800ec06:	d109      	bne.n	800ec1c <__libc_init_array+0x24>
 800ec08:	4d0b      	ldr	r5, [pc, #44]	; (800ec38 <__libc_init_array+0x40>)
 800ec0a:	4c0c      	ldr	r4, [pc, #48]	; (800ec3c <__libc_init_array+0x44>)
 800ec0c:	f001 ff6e 	bl	8010aec <_init>
 800ec10:	1b64      	subs	r4, r4, r5
 800ec12:	10a4      	asrs	r4, r4, #2
 800ec14:	2600      	movs	r6, #0
 800ec16:	42a6      	cmp	r6, r4
 800ec18:	d105      	bne.n	800ec26 <__libc_init_array+0x2e>
 800ec1a:	bd70      	pop	{r4, r5, r6, pc}
 800ec1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec20:	4798      	blx	r3
 800ec22:	3601      	adds	r6, #1
 800ec24:	e7ee      	b.n	800ec04 <__libc_init_array+0xc>
 800ec26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec2a:	4798      	blx	r3
 800ec2c:	3601      	adds	r6, #1
 800ec2e:	e7f2      	b.n	800ec16 <__libc_init_array+0x1e>
 800ec30:	08011360 	.word	0x08011360
 800ec34:	08011360 	.word	0x08011360
 800ec38:	08011360 	.word	0x08011360
 800ec3c:	08011364 	.word	0x08011364

0800ec40 <memcpy>:
 800ec40:	440a      	add	r2, r1
 800ec42:	4291      	cmp	r1, r2
 800ec44:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec48:	d100      	bne.n	800ec4c <memcpy+0xc>
 800ec4a:	4770      	bx	lr
 800ec4c:	b510      	push	{r4, lr}
 800ec4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec56:	4291      	cmp	r1, r2
 800ec58:	d1f9      	bne.n	800ec4e <memcpy+0xe>
 800ec5a:	bd10      	pop	{r4, pc}

0800ec5c <memset>:
 800ec5c:	4402      	add	r2, r0
 800ec5e:	4603      	mov	r3, r0
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d100      	bne.n	800ec66 <memset+0xa>
 800ec64:	4770      	bx	lr
 800ec66:	f803 1b01 	strb.w	r1, [r3], #1
 800ec6a:	e7f9      	b.n	800ec60 <memset+0x4>

0800ec6c <siprintf>:
 800ec6c:	b40e      	push	{r1, r2, r3}
 800ec6e:	b500      	push	{lr}
 800ec70:	b09c      	sub	sp, #112	; 0x70
 800ec72:	ab1d      	add	r3, sp, #116	; 0x74
 800ec74:	9002      	str	r0, [sp, #8]
 800ec76:	9006      	str	r0, [sp, #24]
 800ec78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec7c:	4809      	ldr	r0, [pc, #36]	; (800eca4 <siprintf+0x38>)
 800ec7e:	9107      	str	r1, [sp, #28]
 800ec80:	9104      	str	r1, [sp, #16]
 800ec82:	4909      	ldr	r1, [pc, #36]	; (800eca8 <siprintf+0x3c>)
 800ec84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec88:	9105      	str	r1, [sp, #20]
 800ec8a:	6800      	ldr	r0, [r0, #0]
 800ec8c:	9301      	str	r3, [sp, #4]
 800ec8e:	a902      	add	r1, sp, #8
 800ec90:	f000 f868 	bl	800ed64 <_svfiprintf_r>
 800ec94:	9b02      	ldr	r3, [sp, #8]
 800ec96:	2200      	movs	r2, #0
 800ec98:	701a      	strb	r2, [r3, #0]
 800ec9a:	b01c      	add	sp, #112	; 0x70
 800ec9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800eca0:	b003      	add	sp, #12
 800eca2:	4770      	bx	lr
 800eca4:	20000040 	.word	0x20000040
 800eca8:	ffff0208 	.word	0xffff0208

0800ecac <__ssputs_r>:
 800ecac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb0:	688e      	ldr	r6, [r1, #8]
 800ecb2:	429e      	cmp	r6, r3
 800ecb4:	4682      	mov	sl, r0
 800ecb6:	460c      	mov	r4, r1
 800ecb8:	4690      	mov	r8, r2
 800ecba:	461f      	mov	r7, r3
 800ecbc:	d838      	bhi.n	800ed30 <__ssputs_r+0x84>
 800ecbe:	898a      	ldrh	r2, [r1, #12]
 800ecc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ecc4:	d032      	beq.n	800ed2c <__ssputs_r+0x80>
 800ecc6:	6825      	ldr	r5, [r4, #0]
 800ecc8:	6909      	ldr	r1, [r1, #16]
 800ecca:	eba5 0901 	sub.w	r9, r5, r1
 800ecce:	6965      	ldr	r5, [r4, #20]
 800ecd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ecd8:	3301      	adds	r3, #1
 800ecda:	444b      	add	r3, r9
 800ecdc:	106d      	asrs	r5, r5, #1
 800ecde:	429d      	cmp	r5, r3
 800ece0:	bf38      	it	cc
 800ece2:	461d      	movcc	r5, r3
 800ece4:	0553      	lsls	r3, r2, #21
 800ece6:	d531      	bpl.n	800ed4c <__ssputs_r+0xa0>
 800ece8:	4629      	mov	r1, r5
 800ecea:	f000 fb55 	bl	800f398 <_malloc_r>
 800ecee:	4606      	mov	r6, r0
 800ecf0:	b950      	cbnz	r0, 800ed08 <__ssputs_r+0x5c>
 800ecf2:	230c      	movs	r3, #12
 800ecf4:	f8ca 3000 	str.w	r3, [sl]
 800ecf8:	89a3      	ldrh	r3, [r4, #12]
 800ecfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecfe:	81a3      	strh	r3, [r4, #12]
 800ed00:	f04f 30ff 	mov.w	r0, #4294967295
 800ed04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed08:	6921      	ldr	r1, [r4, #16]
 800ed0a:	464a      	mov	r2, r9
 800ed0c:	f7ff ff98 	bl	800ec40 <memcpy>
 800ed10:	89a3      	ldrh	r3, [r4, #12]
 800ed12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed1a:	81a3      	strh	r3, [r4, #12]
 800ed1c:	6126      	str	r6, [r4, #16]
 800ed1e:	6165      	str	r5, [r4, #20]
 800ed20:	444e      	add	r6, r9
 800ed22:	eba5 0509 	sub.w	r5, r5, r9
 800ed26:	6026      	str	r6, [r4, #0]
 800ed28:	60a5      	str	r5, [r4, #8]
 800ed2a:	463e      	mov	r6, r7
 800ed2c:	42be      	cmp	r6, r7
 800ed2e:	d900      	bls.n	800ed32 <__ssputs_r+0x86>
 800ed30:	463e      	mov	r6, r7
 800ed32:	6820      	ldr	r0, [r4, #0]
 800ed34:	4632      	mov	r2, r6
 800ed36:	4641      	mov	r1, r8
 800ed38:	f000 faa8 	bl	800f28c <memmove>
 800ed3c:	68a3      	ldr	r3, [r4, #8]
 800ed3e:	1b9b      	subs	r3, r3, r6
 800ed40:	60a3      	str	r3, [r4, #8]
 800ed42:	6823      	ldr	r3, [r4, #0]
 800ed44:	4433      	add	r3, r6
 800ed46:	6023      	str	r3, [r4, #0]
 800ed48:	2000      	movs	r0, #0
 800ed4a:	e7db      	b.n	800ed04 <__ssputs_r+0x58>
 800ed4c:	462a      	mov	r2, r5
 800ed4e:	f000 fb97 	bl	800f480 <_realloc_r>
 800ed52:	4606      	mov	r6, r0
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d1e1      	bne.n	800ed1c <__ssputs_r+0x70>
 800ed58:	6921      	ldr	r1, [r4, #16]
 800ed5a:	4650      	mov	r0, sl
 800ed5c:	f000 fab0 	bl	800f2c0 <_free_r>
 800ed60:	e7c7      	b.n	800ecf2 <__ssputs_r+0x46>
	...

0800ed64 <_svfiprintf_r>:
 800ed64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed68:	4698      	mov	r8, r3
 800ed6a:	898b      	ldrh	r3, [r1, #12]
 800ed6c:	061b      	lsls	r3, r3, #24
 800ed6e:	b09d      	sub	sp, #116	; 0x74
 800ed70:	4607      	mov	r7, r0
 800ed72:	460d      	mov	r5, r1
 800ed74:	4614      	mov	r4, r2
 800ed76:	d50e      	bpl.n	800ed96 <_svfiprintf_r+0x32>
 800ed78:	690b      	ldr	r3, [r1, #16]
 800ed7a:	b963      	cbnz	r3, 800ed96 <_svfiprintf_r+0x32>
 800ed7c:	2140      	movs	r1, #64	; 0x40
 800ed7e:	f000 fb0b 	bl	800f398 <_malloc_r>
 800ed82:	6028      	str	r0, [r5, #0]
 800ed84:	6128      	str	r0, [r5, #16]
 800ed86:	b920      	cbnz	r0, 800ed92 <_svfiprintf_r+0x2e>
 800ed88:	230c      	movs	r3, #12
 800ed8a:	603b      	str	r3, [r7, #0]
 800ed8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed90:	e0d1      	b.n	800ef36 <_svfiprintf_r+0x1d2>
 800ed92:	2340      	movs	r3, #64	; 0x40
 800ed94:	616b      	str	r3, [r5, #20]
 800ed96:	2300      	movs	r3, #0
 800ed98:	9309      	str	r3, [sp, #36]	; 0x24
 800ed9a:	2320      	movs	r3, #32
 800ed9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eda0:	f8cd 800c 	str.w	r8, [sp, #12]
 800eda4:	2330      	movs	r3, #48	; 0x30
 800eda6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ef50 <_svfiprintf_r+0x1ec>
 800edaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edae:	f04f 0901 	mov.w	r9, #1
 800edb2:	4623      	mov	r3, r4
 800edb4:	469a      	mov	sl, r3
 800edb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edba:	b10a      	cbz	r2, 800edc0 <_svfiprintf_r+0x5c>
 800edbc:	2a25      	cmp	r2, #37	; 0x25
 800edbe:	d1f9      	bne.n	800edb4 <_svfiprintf_r+0x50>
 800edc0:	ebba 0b04 	subs.w	fp, sl, r4
 800edc4:	d00b      	beq.n	800edde <_svfiprintf_r+0x7a>
 800edc6:	465b      	mov	r3, fp
 800edc8:	4622      	mov	r2, r4
 800edca:	4629      	mov	r1, r5
 800edcc:	4638      	mov	r0, r7
 800edce:	f7ff ff6d 	bl	800ecac <__ssputs_r>
 800edd2:	3001      	adds	r0, #1
 800edd4:	f000 80aa 	beq.w	800ef2c <_svfiprintf_r+0x1c8>
 800edd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edda:	445a      	add	r2, fp
 800eddc:	9209      	str	r2, [sp, #36]	; 0x24
 800edde:	f89a 3000 	ldrb.w	r3, [sl]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f000 80a2 	beq.w	800ef2c <_svfiprintf_r+0x1c8>
 800ede8:	2300      	movs	r3, #0
 800edea:	f04f 32ff 	mov.w	r2, #4294967295
 800edee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edf2:	f10a 0a01 	add.w	sl, sl, #1
 800edf6:	9304      	str	r3, [sp, #16]
 800edf8:	9307      	str	r3, [sp, #28]
 800edfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edfe:	931a      	str	r3, [sp, #104]	; 0x68
 800ee00:	4654      	mov	r4, sl
 800ee02:	2205      	movs	r2, #5
 800ee04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee08:	4851      	ldr	r0, [pc, #324]	; (800ef50 <_svfiprintf_r+0x1ec>)
 800ee0a:	f7f1 fb79 	bl	8000500 <memchr>
 800ee0e:	9a04      	ldr	r2, [sp, #16]
 800ee10:	b9d8      	cbnz	r0, 800ee4a <_svfiprintf_r+0xe6>
 800ee12:	06d0      	lsls	r0, r2, #27
 800ee14:	bf44      	itt	mi
 800ee16:	2320      	movmi	r3, #32
 800ee18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee1c:	0711      	lsls	r1, r2, #28
 800ee1e:	bf44      	itt	mi
 800ee20:	232b      	movmi	r3, #43	; 0x2b
 800ee22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee26:	f89a 3000 	ldrb.w	r3, [sl]
 800ee2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ee2c:	d015      	beq.n	800ee5a <_svfiprintf_r+0xf6>
 800ee2e:	9a07      	ldr	r2, [sp, #28]
 800ee30:	4654      	mov	r4, sl
 800ee32:	2000      	movs	r0, #0
 800ee34:	f04f 0c0a 	mov.w	ip, #10
 800ee38:	4621      	mov	r1, r4
 800ee3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee3e:	3b30      	subs	r3, #48	; 0x30
 800ee40:	2b09      	cmp	r3, #9
 800ee42:	d94e      	bls.n	800eee2 <_svfiprintf_r+0x17e>
 800ee44:	b1b0      	cbz	r0, 800ee74 <_svfiprintf_r+0x110>
 800ee46:	9207      	str	r2, [sp, #28]
 800ee48:	e014      	b.n	800ee74 <_svfiprintf_r+0x110>
 800ee4a:	eba0 0308 	sub.w	r3, r0, r8
 800ee4e:	fa09 f303 	lsl.w	r3, r9, r3
 800ee52:	4313      	orrs	r3, r2
 800ee54:	9304      	str	r3, [sp, #16]
 800ee56:	46a2      	mov	sl, r4
 800ee58:	e7d2      	b.n	800ee00 <_svfiprintf_r+0x9c>
 800ee5a:	9b03      	ldr	r3, [sp, #12]
 800ee5c:	1d19      	adds	r1, r3, #4
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	9103      	str	r1, [sp, #12]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	bfbb      	ittet	lt
 800ee66:	425b      	neglt	r3, r3
 800ee68:	f042 0202 	orrlt.w	r2, r2, #2
 800ee6c:	9307      	strge	r3, [sp, #28]
 800ee6e:	9307      	strlt	r3, [sp, #28]
 800ee70:	bfb8      	it	lt
 800ee72:	9204      	strlt	r2, [sp, #16]
 800ee74:	7823      	ldrb	r3, [r4, #0]
 800ee76:	2b2e      	cmp	r3, #46	; 0x2e
 800ee78:	d10c      	bne.n	800ee94 <_svfiprintf_r+0x130>
 800ee7a:	7863      	ldrb	r3, [r4, #1]
 800ee7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ee7e:	d135      	bne.n	800eeec <_svfiprintf_r+0x188>
 800ee80:	9b03      	ldr	r3, [sp, #12]
 800ee82:	1d1a      	adds	r2, r3, #4
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	9203      	str	r2, [sp, #12]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	bfb8      	it	lt
 800ee8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee90:	3402      	adds	r4, #2
 800ee92:	9305      	str	r3, [sp, #20]
 800ee94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ef60 <_svfiprintf_r+0x1fc>
 800ee98:	7821      	ldrb	r1, [r4, #0]
 800ee9a:	2203      	movs	r2, #3
 800ee9c:	4650      	mov	r0, sl
 800ee9e:	f7f1 fb2f 	bl	8000500 <memchr>
 800eea2:	b140      	cbz	r0, 800eeb6 <_svfiprintf_r+0x152>
 800eea4:	2340      	movs	r3, #64	; 0x40
 800eea6:	eba0 000a 	sub.w	r0, r0, sl
 800eeaa:	fa03 f000 	lsl.w	r0, r3, r0
 800eeae:	9b04      	ldr	r3, [sp, #16]
 800eeb0:	4303      	orrs	r3, r0
 800eeb2:	3401      	adds	r4, #1
 800eeb4:	9304      	str	r3, [sp, #16]
 800eeb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeba:	4826      	ldr	r0, [pc, #152]	; (800ef54 <_svfiprintf_r+0x1f0>)
 800eebc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eec0:	2206      	movs	r2, #6
 800eec2:	f7f1 fb1d 	bl	8000500 <memchr>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d038      	beq.n	800ef3c <_svfiprintf_r+0x1d8>
 800eeca:	4b23      	ldr	r3, [pc, #140]	; (800ef58 <_svfiprintf_r+0x1f4>)
 800eecc:	bb1b      	cbnz	r3, 800ef16 <_svfiprintf_r+0x1b2>
 800eece:	9b03      	ldr	r3, [sp, #12]
 800eed0:	3307      	adds	r3, #7
 800eed2:	f023 0307 	bic.w	r3, r3, #7
 800eed6:	3308      	adds	r3, #8
 800eed8:	9303      	str	r3, [sp, #12]
 800eeda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eedc:	4433      	add	r3, r6
 800eede:	9309      	str	r3, [sp, #36]	; 0x24
 800eee0:	e767      	b.n	800edb2 <_svfiprintf_r+0x4e>
 800eee2:	fb0c 3202 	mla	r2, ip, r2, r3
 800eee6:	460c      	mov	r4, r1
 800eee8:	2001      	movs	r0, #1
 800eeea:	e7a5      	b.n	800ee38 <_svfiprintf_r+0xd4>
 800eeec:	2300      	movs	r3, #0
 800eeee:	3401      	adds	r4, #1
 800eef0:	9305      	str	r3, [sp, #20]
 800eef2:	4619      	mov	r1, r3
 800eef4:	f04f 0c0a 	mov.w	ip, #10
 800eef8:	4620      	mov	r0, r4
 800eefa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eefe:	3a30      	subs	r2, #48	; 0x30
 800ef00:	2a09      	cmp	r2, #9
 800ef02:	d903      	bls.n	800ef0c <_svfiprintf_r+0x1a8>
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d0c5      	beq.n	800ee94 <_svfiprintf_r+0x130>
 800ef08:	9105      	str	r1, [sp, #20]
 800ef0a:	e7c3      	b.n	800ee94 <_svfiprintf_r+0x130>
 800ef0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef10:	4604      	mov	r4, r0
 800ef12:	2301      	movs	r3, #1
 800ef14:	e7f0      	b.n	800eef8 <_svfiprintf_r+0x194>
 800ef16:	ab03      	add	r3, sp, #12
 800ef18:	9300      	str	r3, [sp, #0]
 800ef1a:	462a      	mov	r2, r5
 800ef1c:	4b0f      	ldr	r3, [pc, #60]	; (800ef5c <_svfiprintf_r+0x1f8>)
 800ef1e:	a904      	add	r1, sp, #16
 800ef20:	4638      	mov	r0, r7
 800ef22:	f3af 8000 	nop.w
 800ef26:	1c42      	adds	r2, r0, #1
 800ef28:	4606      	mov	r6, r0
 800ef2a:	d1d6      	bne.n	800eeda <_svfiprintf_r+0x176>
 800ef2c:	89ab      	ldrh	r3, [r5, #12]
 800ef2e:	065b      	lsls	r3, r3, #25
 800ef30:	f53f af2c 	bmi.w	800ed8c <_svfiprintf_r+0x28>
 800ef34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef36:	b01d      	add	sp, #116	; 0x74
 800ef38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef3c:	ab03      	add	r3, sp, #12
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	462a      	mov	r2, r5
 800ef42:	4b06      	ldr	r3, [pc, #24]	; (800ef5c <_svfiprintf_r+0x1f8>)
 800ef44:	a904      	add	r1, sp, #16
 800ef46:	4638      	mov	r0, r7
 800ef48:	f000 f87a 	bl	800f040 <_printf_i>
 800ef4c:	e7eb      	b.n	800ef26 <_svfiprintf_r+0x1c2>
 800ef4e:	bf00      	nop
 800ef50:	080110d8 	.word	0x080110d8
 800ef54:	080110e2 	.word	0x080110e2
 800ef58:	00000000 	.word	0x00000000
 800ef5c:	0800ecad 	.word	0x0800ecad
 800ef60:	080110de 	.word	0x080110de

0800ef64 <_printf_common>:
 800ef64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef68:	4616      	mov	r6, r2
 800ef6a:	4699      	mov	r9, r3
 800ef6c:	688a      	ldr	r2, [r1, #8]
 800ef6e:	690b      	ldr	r3, [r1, #16]
 800ef70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef74:	4293      	cmp	r3, r2
 800ef76:	bfb8      	it	lt
 800ef78:	4613      	movlt	r3, r2
 800ef7a:	6033      	str	r3, [r6, #0]
 800ef7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef80:	4607      	mov	r7, r0
 800ef82:	460c      	mov	r4, r1
 800ef84:	b10a      	cbz	r2, 800ef8a <_printf_common+0x26>
 800ef86:	3301      	adds	r3, #1
 800ef88:	6033      	str	r3, [r6, #0]
 800ef8a:	6823      	ldr	r3, [r4, #0]
 800ef8c:	0699      	lsls	r1, r3, #26
 800ef8e:	bf42      	ittt	mi
 800ef90:	6833      	ldrmi	r3, [r6, #0]
 800ef92:	3302      	addmi	r3, #2
 800ef94:	6033      	strmi	r3, [r6, #0]
 800ef96:	6825      	ldr	r5, [r4, #0]
 800ef98:	f015 0506 	ands.w	r5, r5, #6
 800ef9c:	d106      	bne.n	800efac <_printf_common+0x48>
 800ef9e:	f104 0a19 	add.w	sl, r4, #25
 800efa2:	68e3      	ldr	r3, [r4, #12]
 800efa4:	6832      	ldr	r2, [r6, #0]
 800efa6:	1a9b      	subs	r3, r3, r2
 800efa8:	42ab      	cmp	r3, r5
 800efaa:	dc26      	bgt.n	800effa <_printf_common+0x96>
 800efac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800efb0:	1e13      	subs	r3, r2, #0
 800efb2:	6822      	ldr	r2, [r4, #0]
 800efb4:	bf18      	it	ne
 800efb6:	2301      	movne	r3, #1
 800efb8:	0692      	lsls	r2, r2, #26
 800efba:	d42b      	bmi.n	800f014 <_printf_common+0xb0>
 800efbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efc0:	4649      	mov	r1, r9
 800efc2:	4638      	mov	r0, r7
 800efc4:	47c0      	blx	r8
 800efc6:	3001      	adds	r0, #1
 800efc8:	d01e      	beq.n	800f008 <_printf_common+0xa4>
 800efca:	6823      	ldr	r3, [r4, #0]
 800efcc:	68e5      	ldr	r5, [r4, #12]
 800efce:	6832      	ldr	r2, [r6, #0]
 800efd0:	f003 0306 	and.w	r3, r3, #6
 800efd4:	2b04      	cmp	r3, #4
 800efd6:	bf08      	it	eq
 800efd8:	1aad      	subeq	r5, r5, r2
 800efda:	68a3      	ldr	r3, [r4, #8]
 800efdc:	6922      	ldr	r2, [r4, #16]
 800efde:	bf0c      	ite	eq
 800efe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efe4:	2500      	movne	r5, #0
 800efe6:	4293      	cmp	r3, r2
 800efe8:	bfc4      	itt	gt
 800efea:	1a9b      	subgt	r3, r3, r2
 800efec:	18ed      	addgt	r5, r5, r3
 800efee:	2600      	movs	r6, #0
 800eff0:	341a      	adds	r4, #26
 800eff2:	42b5      	cmp	r5, r6
 800eff4:	d11a      	bne.n	800f02c <_printf_common+0xc8>
 800eff6:	2000      	movs	r0, #0
 800eff8:	e008      	b.n	800f00c <_printf_common+0xa8>
 800effa:	2301      	movs	r3, #1
 800effc:	4652      	mov	r2, sl
 800effe:	4649      	mov	r1, r9
 800f000:	4638      	mov	r0, r7
 800f002:	47c0      	blx	r8
 800f004:	3001      	adds	r0, #1
 800f006:	d103      	bne.n	800f010 <_printf_common+0xac>
 800f008:	f04f 30ff 	mov.w	r0, #4294967295
 800f00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f010:	3501      	adds	r5, #1
 800f012:	e7c6      	b.n	800efa2 <_printf_common+0x3e>
 800f014:	18e1      	adds	r1, r4, r3
 800f016:	1c5a      	adds	r2, r3, #1
 800f018:	2030      	movs	r0, #48	; 0x30
 800f01a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f01e:	4422      	add	r2, r4
 800f020:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f024:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f028:	3302      	adds	r3, #2
 800f02a:	e7c7      	b.n	800efbc <_printf_common+0x58>
 800f02c:	2301      	movs	r3, #1
 800f02e:	4622      	mov	r2, r4
 800f030:	4649      	mov	r1, r9
 800f032:	4638      	mov	r0, r7
 800f034:	47c0      	blx	r8
 800f036:	3001      	adds	r0, #1
 800f038:	d0e6      	beq.n	800f008 <_printf_common+0xa4>
 800f03a:	3601      	adds	r6, #1
 800f03c:	e7d9      	b.n	800eff2 <_printf_common+0x8e>
	...

0800f040 <_printf_i>:
 800f040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f044:	7e0f      	ldrb	r7, [r1, #24]
 800f046:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f048:	2f78      	cmp	r7, #120	; 0x78
 800f04a:	4691      	mov	r9, r2
 800f04c:	4680      	mov	r8, r0
 800f04e:	460c      	mov	r4, r1
 800f050:	469a      	mov	sl, r3
 800f052:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f056:	d807      	bhi.n	800f068 <_printf_i+0x28>
 800f058:	2f62      	cmp	r7, #98	; 0x62
 800f05a:	d80a      	bhi.n	800f072 <_printf_i+0x32>
 800f05c:	2f00      	cmp	r7, #0
 800f05e:	f000 80d8 	beq.w	800f212 <_printf_i+0x1d2>
 800f062:	2f58      	cmp	r7, #88	; 0x58
 800f064:	f000 80a3 	beq.w	800f1ae <_printf_i+0x16e>
 800f068:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f06c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f070:	e03a      	b.n	800f0e8 <_printf_i+0xa8>
 800f072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f076:	2b15      	cmp	r3, #21
 800f078:	d8f6      	bhi.n	800f068 <_printf_i+0x28>
 800f07a:	a101      	add	r1, pc, #4	; (adr r1, 800f080 <_printf_i+0x40>)
 800f07c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f080:	0800f0d9 	.word	0x0800f0d9
 800f084:	0800f0ed 	.word	0x0800f0ed
 800f088:	0800f069 	.word	0x0800f069
 800f08c:	0800f069 	.word	0x0800f069
 800f090:	0800f069 	.word	0x0800f069
 800f094:	0800f069 	.word	0x0800f069
 800f098:	0800f0ed 	.word	0x0800f0ed
 800f09c:	0800f069 	.word	0x0800f069
 800f0a0:	0800f069 	.word	0x0800f069
 800f0a4:	0800f069 	.word	0x0800f069
 800f0a8:	0800f069 	.word	0x0800f069
 800f0ac:	0800f1f9 	.word	0x0800f1f9
 800f0b0:	0800f11d 	.word	0x0800f11d
 800f0b4:	0800f1db 	.word	0x0800f1db
 800f0b8:	0800f069 	.word	0x0800f069
 800f0bc:	0800f069 	.word	0x0800f069
 800f0c0:	0800f21b 	.word	0x0800f21b
 800f0c4:	0800f069 	.word	0x0800f069
 800f0c8:	0800f11d 	.word	0x0800f11d
 800f0cc:	0800f069 	.word	0x0800f069
 800f0d0:	0800f069 	.word	0x0800f069
 800f0d4:	0800f1e3 	.word	0x0800f1e3
 800f0d8:	682b      	ldr	r3, [r5, #0]
 800f0da:	1d1a      	adds	r2, r3, #4
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	602a      	str	r2, [r5, #0]
 800f0e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	e0a3      	b.n	800f234 <_printf_i+0x1f4>
 800f0ec:	6820      	ldr	r0, [r4, #0]
 800f0ee:	6829      	ldr	r1, [r5, #0]
 800f0f0:	0606      	lsls	r6, r0, #24
 800f0f2:	f101 0304 	add.w	r3, r1, #4
 800f0f6:	d50a      	bpl.n	800f10e <_printf_i+0xce>
 800f0f8:	680e      	ldr	r6, [r1, #0]
 800f0fa:	602b      	str	r3, [r5, #0]
 800f0fc:	2e00      	cmp	r6, #0
 800f0fe:	da03      	bge.n	800f108 <_printf_i+0xc8>
 800f100:	232d      	movs	r3, #45	; 0x2d
 800f102:	4276      	negs	r6, r6
 800f104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f108:	485e      	ldr	r0, [pc, #376]	; (800f284 <_printf_i+0x244>)
 800f10a:	230a      	movs	r3, #10
 800f10c:	e019      	b.n	800f142 <_printf_i+0x102>
 800f10e:	680e      	ldr	r6, [r1, #0]
 800f110:	602b      	str	r3, [r5, #0]
 800f112:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f116:	bf18      	it	ne
 800f118:	b236      	sxthne	r6, r6
 800f11a:	e7ef      	b.n	800f0fc <_printf_i+0xbc>
 800f11c:	682b      	ldr	r3, [r5, #0]
 800f11e:	6820      	ldr	r0, [r4, #0]
 800f120:	1d19      	adds	r1, r3, #4
 800f122:	6029      	str	r1, [r5, #0]
 800f124:	0601      	lsls	r1, r0, #24
 800f126:	d501      	bpl.n	800f12c <_printf_i+0xec>
 800f128:	681e      	ldr	r6, [r3, #0]
 800f12a:	e002      	b.n	800f132 <_printf_i+0xf2>
 800f12c:	0646      	lsls	r6, r0, #25
 800f12e:	d5fb      	bpl.n	800f128 <_printf_i+0xe8>
 800f130:	881e      	ldrh	r6, [r3, #0]
 800f132:	4854      	ldr	r0, [pc, #336]	; (800f284 <_printf_i+0x244>)
 800f134:	2f6f      	cmp	r7, #111	; 0x6f
 800f136:	bf0c      	ite	eq
 800f138:	2308      	moveq	r3, #8
 800f13a:	230a      	movne	r3, #10
 800f13c:	2100      	movs	r1, #0
 800f13e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f142:	6865      	ldr	r5, [r4, #4]
 800f144:	60a5      	str	r5, [r4, #8]
 800f146:	2d00      	cmp	r5, #0
 800f148:	bfa2      	ittt	ge
 800f14a:	6821      	ldrge	r1, [r4, #0]
 800f14c:	f021 0104 	bicge.w	r1, r1, #4
 800f150:	6021      	strge	r1, [r4, #0]
 800f152:	b90e      	cbnz	r6, 800f158 <_printf_i+0x118>
 800f154:	2d00      	cmp	r5, #0
 800f156:	d04d      	beq.n	800f1f4 <_printf_i+0x1b4>
 800f158:	4615      	mov	r5, r2
 800f15a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f15e:	fb03 6711 	mls	r7, r3, r1, r6
 800f162:	5dc7      	ldrb	r7, [r0, r7]
 800f164:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f168:	4637      	mov	r7, r6
 800f16a:	42bb      	cmp	r3, r7
 800f16c:	460e      	mov	r6, r1
 800f16e:	d9f4      	bls.n	800f15a <_printf_i+0x11a>
 800f170:	2b08      	cmp	r3, #8
 800f172:	d10b      	bne.n	800f18c <_printf_i+0x14c>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	07de      	lsls	r6, r3, #31
 800f178:	d508      	bpl.n	800f18c <_printf_i+0x14c>
 800f17a:	6923      	ldr	r3, [r4, #16]
 800f17c:	6861      	ldr	r1, [r4, #4]
 800f17e:	4299      	cmp	r1, r3
 800f180:	bfde      	ittt	le
 800f182:	2330      	movle	r3, #48	; 0x30
 800f184:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f188:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f18c:	1b52      	subs	r2, r2, r5
 800f18e:	6122      	str	r2, [r4, #16]
 800f190:	f8cd a000 	str.w	sl, [sp]
 800f194:	464b      	mov	r3, r9
 800f196:	aa03      	add	r2, sp, #12
 800f198:	4621      	mov	r1, r4
 800f19a:	4640      	mov	r0, r8
 800f19c:	f7ff fee2 	bl	800ef64 <_printf_common>
 800f1a0:	3001      	adds	r0, #1
 800f1a2:	d14c      	bne.n	800f23e <_printf_i+0x1fe>
 800f1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a8:	b004      	add	sp, #16
 800f1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1ae:	4835      	ldr	r0, [pc, #212]	; (800f284 <_printf_i+0x244>)
 800f1b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f1b4:	6829      	ldr	r1, [r5, #0]
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f1bc:	6029      	str	r1, [r5, #0]
 800f1be:	061d      	lsls	r5, r3, #24
 800f1c0:	d514      	bpl.n	800f1ec <_printf_i+0x1ac>
 800f1c2:	07df      	lsls	r7, r3, #31
 800f1c4:	bf44      	itt	mi
 800f1c6:	f043 0320 	orrmi.w	r3, r3, #32
 800f1ca:	6023      	strmi	r3, [r4, #0]
 800f1cc:	b91e      	cbnz	r6, 800f1d6 <_printf_i+0x196>
 800f1ce:	6823      	ldr	r3, [r4, #0]
 800f1d0:	f023 0320 	bic.w	r3, r3, #32
 800f1d4:	6023      	str	r3, [r4, #0]
 800f1d6:	2310      	movs	r3, #16
 800f1d8:	e7b0      	b.n	800f13c <_printf_i+0xfc>
 800f1da:	6823      	ldr	r3, [r4, #0]
 800f1dc:	f043 0320 	orr.w	r3, r3, #32
 800f1e0:	6023      	str	r3, [r4, #0]
 800f1e2:	2378      	movs	r3, #120	; 0x78
 800f1e4:	4828      	ldr	r0, [pc, #160]	; (800f288 <_printf_i+0x248>)
 800f1e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f1ea:	e7e3      	b.n	800f1b4 <_printf_i+0x174>
 800f1ec:	0659      	lsls	r1, r3, #25
 800f1ee:	bf48      	it	mi
 800f1f0:	b2b6      	uxthmi	r6, r6
 800f1f2:	e7e6      	b.n	800f1c2 <_printf_i+0x182>
 800f1f4:	4615      	mov	r5, r2
 800f1f6:	e7bb      	b.n	800f170 <_printf_i+0x130>
 800f1f8:	682b      	ldr	r3, [r5, #0]
 800f1fa:	6826      	ldr	r6, [r4, #0]
 800f1fc:	6961      	ldr	r1, [r4, #20]
 800f1fe:	1d18      	adds	r0, r3, #4
 800f200:	6028      	str	r0, [r5, #0]
 800f202:	0635      	lsls	r5, r6, #24
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	d501      	bpl.n	800f20c <_printf_i+0x1cc>
 800f208:	6019      	str	r1, [r3, #0]
 800f20a:	e002      	b.n	800f212 <_printf_i+0x1d2>
 800f20c:	0670      	lsls	r0, r6, #25
 800f20e:	d5fb      	bpl.n	800f208 <_printf_i+0x1c8>
 800f210:	8019      	strh	r1, [r3, #0]
 800f212:	2300      	movs	r3, #0
 800f214:	6123      	str	r3, [r4, #16]
 800f216:	4615      	mov	r5, r2
 800f218:	e7ba      	b.n	800f190 <_printf_i+0x150>
 800f21a:	682b      	ldr	r3, [r5, #0]
 800f21c:	1d1a      	adds	r2, r3, #4
 800f21e:	602a      	str	r2, [r5, #0]
 800f220:	681d      	ldr	r5, [r3, #0]
 800f222:	6862      	ldr	r2, [r4, #4]
 800f224:	2100      	movs	r1, #0
 800f226:	4628      	mov	r0, r5
 800f228:	f7f1 f96a 	bl	8000500 <memchr>
 800f22c:	b108      	cbz	r0, 800f232 <_printf_i+0x1f2>
 800f22e:	1b40      	subs	r0, r0, r5
 800f230:	6060      	str	r0, [r4, #4]
 800f232:	6863      	ldr	r3, [r4, #4]
 800f234:	6123      	str	r3, [r4, #16]
 800f236:	2300      	movs	r3, #0
 800f238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f23c:	e7a8      	b.n	800f190 <_printf_i+0x150>
 800f23e:	6923      	ldr	r3, [r4, #16]
 800f240:	462a      	mov	r2, r5
 800f242:	4649      	mov	r1, r9
 800f244:	4640      	mov	r0, r8
 800f246:	47d0      	blx	sl
 800f248:	3001      	adds	r0, #1
 800f24a:	d0ab      	beq.n	800f1a4 <_printf_i+0x164>
 800f24c:	6823      	ldr	r3, [r4, #0]
 800f24e:	079b      	lsls	r3, r3, #30
 800f250:	d413      	bmi.n	800f27a <_printf_i+0x23a>
 800f252:	68e0      	ldr	r0, [r4, #12]
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	4298      	cmp	r0, r3
 800f258:	bfb8      	it	lt
 800f25a:	4618      	movlt	r0, r3
 800f25c:	e7a4      	b.n	800f1a8 <_printf_i+0x168>
 800f25e:	2301      	movs	r3, #1
 800f260:	4632      	mov	r2, r6
 800f262:	4649      	mov	r1, r9
 800f264:	4640      	mov	r0, r8
 800f266:	47d0      	blx	sl
 800f268:	3001      	adds	r0, #1
 800f26a:	d09b      	beq.n	800f1a4 <_printf_i+0x164>
 800f26c:	3501      	adds	r5, #1
 800f26e:	68e3      	ldr	r3, [r4, #12]
 800f270:	9903      	ldr	r1, [sp, #12]
 800f272:	1a5b      	subs	r3, r3, r1
 800f274:	42ab      	cmp	r3, r5
 800f276:	dcf2      	bgt.n	800f25e <_printf_i+0x21e>
 800f278:	e7eb      	b.n	800f252 <_printf_i+0x212>
 800f27a:	2500      	movs	r5, #0
 800f27c:	f104 0619 	add.w	r6, r4, #25
 800f280:	e7f5      	b.n	800f26e <_printf_i+0x22e>
 800f282:	bf00      	nop
 800f284:	080110e9 	.word	0x080110e9
 800f288:	080110fa 	.word	0x080110fa

0800f28c <memmove>:
 800f28c:	4288      	cmp	r0, r1
 800f28e:	b510      	push	{r4, lr}
 800f290:	eb01 0402 	add.w	r4, r1, r2
 800f294:	d902      	bls.n	800f29c <memmove+0x10>
 800f296:	4284      	cmp	r4, r0
 800f298:	4623      	mov	r3, r4
 800f29a:	d807      	bhi.n	800f2ac <memmove+0x20>
 800f29c:	1e43      	subs	r3, r0, #1
 800f29e:	42a1      	cmp	r1, r4
 800f2a0:	d008      	beq.n	800f2b4 <memmove+0x28>
 800f2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2aa:	e7f8      	b.n	800f29e <memmove+0x12>
 800f2ac:	4402      	add	r2, r0
 800f2ae:	4601      	mov	r1, r0
 800f2b0:	428a      	cmp	r2, r1
 800f2b2:	d100      	bne.n	800f2b6 <memmove+0x2a>
 800f2b4:	bd10      	pop	{r4, pc}
 800f2b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2be:	e7f7      	b.n	800f2b0 <memmove+0x24>

0800f2c0 <_free_r>:
 800f2c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f2c2:	2900      	cmp	r1, #0
 800f2c4:	d044      	beq.n	800f350 <_free_r+0x90>
 800f2c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2ca:	9001      	str	r0, [sp, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f1a1 0404 	sub.w	r4, r1, #4
 800f2d2:	bfb8      	it	lt
 800f2d4:	18e4      	addlt	r4, r4, r3
 800f2d6:	f000 f913 	bl	800f500 <__malloc_lock>
 800f2da:	4a1e      	ldr	r2, [pc, #120]	; (800f354 <_free_r+0x94>)
 800f2dc:	9801      	ldr	r0, [sp, #4]
 800f2de:	6813      	ldr	r3, [r2, #0]
 800f2e0:	b933      	cbnz	r3, 800f2f0 <_free_r+0x30>
 800f2e2:	6063      	str	r3, [r4, #4]
 800f2e4:	6014      	str	r4, [r2, #0]
 800f2e6:	b003      	add	sp, #12
 800f2e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f2ec:	f000 b90e 	b.w	800f50c <__malloc_unlock>
 800f2f0:	42a3      	cmp	r3, r4
 800f2f2:	d908      	bls.n	800f306 <_free_r+0x46>
 800f2f4:	6825      	ldr	r5, [r4, #0]
 800f2f6:	1961      	adds	r1, r4, r5
 800f2f8:	428b      	cmp	r3, r1
 800f2fa:	bf01      	itttt	eq
 800f2fc:	6819      	ldreq	r1, [r3, #0]
 800f2fe:	685b      	ldreq	r3, [r3, #4]
 800f300:	1949      	addeq	r1, r1, r5
 800f302:	6021      	streq	r1, [r4, #0]
 800f304:	e7ed      	b.n	800f2e2 <_free_r+0x22>
 800f306:	461a      	mov	r2, r3
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	b10b      	cbz	r3, 800f310 <_free_r+0x50>
 800f30c:	42a3      	cmp	r3, r4
 800f30e:	d9fa      	bls.n	800f306 <_free_r+0x46>
 800f310:	6811      	ldr	r1, [r2, #0]
 800f312:	1855      	adds	r5, r2, r1
 800f314:	42a5      	cmp	r5, r4
 800f316:	d10b      	bne.n	800f330 <_free_r+0x70>
 800f318:	6824      	ldr	r4, [r4, #0]
 800f31a:	4421      	add	r1, r4
 800f31c:	1854      	adds	r4, r2, r1
 800f31e:	42a3      	cmp	r3, r4
 800f320:	6011      	str	r1, [r2, #0]
 800f322:	d1e0      	bne.n	800f2e6 <_free_r+0x26>
 800f324:	681c      	ldr	r4, [r3, #0]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	6053      	str	r3, [r2, #4]
 800f32a:	4421      	add	r1, r4
 800f32c:	6011      	str	r1, [r2, #0]
 800f32e:	e7da      	b.n	800f2e6 <_free_r+0x26>
 800f330:	d902      	bls.n	800f338 <_free_r+0x78>
 800f332:	230c      	movs	r3, #12
 800f334:	6003      	str	r3, [r0, #0]
 800f336:	e7d6      	b.n	800f2e6 <_free_r+0x26>
 800f338:	6825      	ldr	r5, [r4, #0]
 800f33a:	1961      	adds	r1, r4, r5
 800f33c:	428b      	cmp	r3, r1
 800f33e:	bf04      	itt	eq
 800f340:	6819      	ldreq	r1, [r3, #0]
 800f342:	685b      	ldreq	r3, [r3, #4]
 800f344:	6063      	str	r3, [r4, #4]
 800f346:	bf04      	itt	eq
 800f348:	1949      	addeq	r1, r1, r5
 800f34a:	6021      	streq	r1, [r4, #0]
 800f34c:	6054      	str	r4, [r2, #4]
 800f34e:	e7ca      	b.n	800f2e6 <_free_r+0x26>
 800f350:	b003      	add	sp, #12
 800f352:	bd30      	pop	{r4, r5, pc}
 800f354:	20005a58 	.word	0x20005a58

0800f358 <sbrk_aligned>:
 800f358:	b570      	push	{r4, r5, r6, lr}
 800f35a:	4e0e      	ldr	r6, [pc, #56]	; (800f394 <sbrk_aligned+0x3c>)
 800f35c:	460c      	mov	r4, r1
 800f35e:	6831      	ldr	r1, [r6, #0]
 800f360:	4605      	mov	r5, r0
 800f362:	b911      	cbnz	r1, 800f36a <sbrk_aligned+0x12>
 800f364:	f000 f8bc 	bl	800f4e0 <_sbrk_r>
 800f368:	6030      	str	r0, [r6, #0]
 800f36a:	4621      	mov	r1, r4
 800f36c:	4628      	mov	r0, r5
 800f36e:	f000 f8b7 	bl	800f4e0 <_sbrk_r>
 800f372:	1c43      	adds	r3, r0, #1
 800f374:	d00a      	beq.n	800f38c <sbrk_aligned+0x34>
 800f376:	1cc4      	adds	r4, r0, #3
 800f378:	f024 0403 	bic.w	r4, r4, #3
 800f37c:	42a0      	cmp	r0, r4
 800f37e:	d007      	beq.n	800f390 <sbrk_aligned+0x38>
 800f380:	1a21      	subs	r1, r4, r0
 800f382:	4628      	mov	r0, r5
 800f384:	f000 f8ac 	bl	800f4e0 <_sbrk_r>
 800f388:	3001      	adds	r0, #1
 800f38a:	d101      	bne.n	800f390 <sbrk_aligned+0x38>
 800f38c:	f04f 34ff 	mov.w	r4, #4294967295
 800f390:	4620      	mov	r0, r4
 800f392:	bd70      	pop	{r4, r5, r6, pc}
 800f394:	20005a5c 	.word	0x20005a5c

0800f398 <_malloc_r>:
 800f398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f39c:	1ccd      	adds	r5, r1, #3
 800f39e:	f025 0503 	bic.w	r5, r5, #3
 800f3a2:	3508      	adds	r5, #8
 800f3a4:	2d0c      	cmp	r5, #12
 800f3a6:	bf38      	it	cc
 800f3a8:	250c      	movcc	r5, #12
 800f3aa:	2d00      	cmp	r5, #0
 800f3ac:	4607      	mov	r7, r0
 800f3ae:	db01      	blt.n	800f3b4 <_malloc_r+0x1c>
 800f3b0:	42a9      	cmp	r1, r5
 800f3b2:	d905      	bls.n	800f3c0 <_malloc_r+0x28>
 800f3b4:	230c      	movs	r3, #12
 800f3b6:	603b      	str	r3, [r7, #0]
 800f3b8:	2600      	movs	r6, #0
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c0:	4e2e      	ldr	r6, [pc, #184]	; (800f47c <_malloc_r+0xe4>)
 800f3c2:	f000 f89d 	bl	800f500 <__malloc_lock>
 800f3c6:	6833      	ldr	r3, [r6, #0]
 800f3c8:	461c      	mov	r4, r3
 800f3ca:	bb34      	cbnz	r4, 800f41a <_malloc_r+0x82>
 800f3cc:	4629      	mov	r1, r5
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	f7ff ffc2 	bl	800f358 <sbrk_aligned>
 800f3d4:	1c43      	adds	r3, r0, #1
 800f3d6:	4604      	mov	r4, r0
 800f3d8:	d14d      	bne.n	800f476 <_malloc_r+0xde>
 800f3da:	6834      	ldr	r4, [r6, #0]
 800f3dc:	4626      	mov	r6, r4
 800f3de:	2e00      	cmp	r6, #0
 800f3e0:	d140      	bne.n	800f464 <_malloc_r+0xcc>
 800f3e2:	6823      	ldr	r3, [r4, #0]
 800f3e4:	4631      	mov	r1, r6
 800f3e6:	4638      	mov	r0, r7
 800f3e8:	eb04 0803 	add.w	r8, r4, r3
 800f3ec:	f000 f878 	bl	800f4e0 <_sbrk_r>
 800f3f0:	4580      	cmp	r8, r0
 800f3f2:	d13a      	bne.n	800f46a <_malloc_r+0xd2>
 800f3f4:	6821      	ldr	r1, [r4, #0]
 800f3f6:	3503      	adds	r5, #3
 800f3f8:	1a6d      	subs	r5, r5, r1
 800f3fa:	f025 0503 	bic.w	r5, r5, #3
 800f3fe:	3508      	adds	r5, #8
 800f400:	2d0c      	cmp	r5, #12
 800f402:	bf38      	it	cc
 800f404:	250c      	movcc	r5, #12
 800f406:	4629      	mov	r1, r5
 800f408:	4638      	mov	r0, r7
 800f40a:	f7ff ffa5 	bl	800f358 <sbrk_aligned>
 800f40e:	3001      	adds	r0, #1
 800f410:	d02b      	beq.n	800f46a <_malloc_r+0xd2>
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	442b      	add	r3, r5
 800f416:	6023      	str	r3, [r4, #0]
 800f418:	e00e      	b.n	800f438 <_malloc_r+0xa0>
 800f41a:	6822      	ldr	r2, [r4, #0]
 800f41c:	1b52      	subs	r2, r2, r5
 800f41e:	d41e      	bmi.n	800f45e <_malloc_r+0xc6>
 800f420:	2a0b      	cmp	r2, #11
 800f422:	d916      	bls.n	800f452 <_malloc_r+0xba>
 800f424:	1961      	adds	r1, r4, r5
 800f426:	42a3      	cmp	r3, r4
 800f428:	6025      	str	r5, [r4, #0]
 800f42a:	bf18      	it	ne
 800f42c:	6059      	strne	r1, [r3, #4]
 800f42e:	6863      	ldr	r3, [r4, #4]
 800f430:	bf08      	it	eq
 800f432:	6031      	streq	r1, [r6, #0]
 800f434:	5162      	str	r2, [r4, r5]
 800f436:	604b      	str	r3, [r1, #4]
 800f438:	4638      	mov	r0, r7
 800f43a:	f104 060b 	add.w	r6, r4, #11
 800f43e:	f000 f865 	bl	800f50c <__malloc_unlock>
 800f442:	f026 0607 	bic.w	r6, r6, #7
 800f446:	1d23      	adds	r3, r4, #4
 800f448:	1af2      	subs	r2, r6, r3
 800f44a:	d0b6      	beq.n	800f3ba <_malloc_r+0x22>
 800f44c:	1b9b      	subs	r3, r3, r6
 800f44e:	50a3      	str	r3, [r4, r2]
 800f450:	e7b3      	b.n	800f3ba <_malloc_r+0x22>
 800f452:	6862      	ldr	r2, [r4, #4]
 800f454:	42a3      	cmp	r3, r4
 800f456:	bf0c      	ite	eq
 800f458:	6032      	streq	r2, [r6, #0]
 800f45a:	605a      	strne	r2, [r3, #4]
 800f45c:	e7ec      	b.n	800f438 <_malloc_r+0xa0>
 800f45e:	4623      	mov	r3, r4
 800f460:	6864      	ldr	r4, [r4, #4]
 800f462:	e7b2      	b.n	800f3ca <_malloc_r+0x32>
 800f464:	4634      	mov	r4, r6
 800f466:	6876      	ldr	r6, [r6, #4]
 800f468:	e7b9      	b.n	800f3de <_malloc_r+0x46>
 800f46a:	230c      	movs	r3, #12
 800f46c:	603b      	str	r3, [r7, #0]
 800f46e:	4638      	mov	r0, r7
 800f470:	f000 f84c 	bl	800f50c <__malloc_unlock>
 800f474:	e7a1      	b.n	800f3ba <_malloc_r+0x22>
 800f476:	6025      	str	r5, [r4, #0]
 800f478:	e7de      	b.n	800f438 <_malloc_r+0xa0>
 800f47a:	bf00      	nop
 800f47c:	20005a58 	.word	0x20005a58

0800f480 <_realloc_r>:
 800f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f484:	4680      	mov	r8, r0
 800f486:	4614      	mov	r4, r2
 800f488:	460e      	mov	r6, r1
 800f48a:	b921      	cbnz	r1, 800f496 <_realloc_r+0x16>
 800f48c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f490:	4611      	mov	r1, r2
 800f492:	f7ff bf81 	b.w	800f398 <_malloc_r>
 800f496:	b92a      	cbnz	r2, 800f4a4 <_realloc_r+0x24>
 800f498:	f7ff ff12 	bl	800f2c0 <_free_r>
 800f49c:	4625      	mov	r5, r4
 800f49e:	4628      	mov	r0, r5
 800f4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a4:	f000 f838 	bl	800f518 <_malloc_usable_size_r>
 800f4a8:	4284      	cmp	r4, r0
 800f4aa:	4607      	mov	r7, r0
 800f4ac:	d802      	bhi.n	800f4b4 <_realloc_r+0x34>
 800f4ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f4b2:	d812      	bhi.n	800f4da <_realloc_r+0x5a>
 800f4b4:	4621      	mov	r1, r4
 800f4b6:	4640      	mov	r0, r8
 800f4b8:	f7ff ff6e 	bl	800f398 <_malloc_r>
 800f4bc:	4605      	mov	r5, r0
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d0ed      	beq.n	800f49e <_realloc_r+0x1e>
 800f4c2:	42bc      	cmp	r4, r7
 800f4c4:	4622      	mov	r2, r4
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	bf28      	it	cs
 800f4ca:	463a      	movcs	r2, r7
 800f4cc:	f7ff fbb8 	bl	800ec40 <memcpy>
 800f4d0:	4631      	mov	r1, r6
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	f7ff fef4 	bl	800f2c0 <_free_r>
 800f4d8:	e7e1      	b.n	800f49e <_realloc_r+0x1e>
 800f4da:	4635      	mov	r5, r6
 800f4dc:	e7df      	b.n	800f49e <_realloc_r+0x1e>
	...

0800f4e0 <_sbrk_r>:
 800f4e0:	b538      	push	{r3, r4, r5, lr}
 800f4e2:	4d06      	ldr	r5, [pc, #24]	; (800f4fc <_sbrk_r+0x1c>)
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	4604      	mov	r4, r0
 800f4e8:	4608      	mov	r0, r1
 800f4ea:	602b      	str	r3, [r5, #0]
 800f4ec:	f7f4 fbf2 	bl	8003cd4 <_sbrk>
 800f4f0:	1c43      	adds	r3, r0, #1
 800f4f2:	d102      	bne.n	800f4fa <_sbrk_r+0x1a>
 800f4f4:	682b      	ldr	r3, [r5, #0]
 800f4f6:	b103      	cbz	r3, 800f4fa <_sbrk_r+0x1a>
 800f4f8:	6023      	str	r3, [r4, #0]
 800f4fa:	bd38      	pop	{r3, r4, r5, pc}
 800f4fc:	20005a60 	.word	0x20005a60

0800f500 <__malloc_lock>:
 800f500:	4801      	ldr	r0, [pc, #4]	; (800f508 <__malloc_lock+0x8>)
 800f502:	f000 b811 	b.w	800f528 <__retarget_lock_acquire_recursive>
 800f506:	bf00      	nop
 800f508:	20005a64 	.word	0x20005a64

0800f50c <__malloc_unlock>:
 800f50c:	4801      	ldr	r0, [pc, #4]	; (800f514 <__malloc_unlock+0x8>)
 800f50e:	f000 b80c 	b.w	800f52a <__retarget_lock_release_recursive>
 800f512:	bf00      	nop
 800f514:	20005a64 	.word	0x20005a64

0800f518 <_malloc_usable_size_r>:
 800f518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f51c:	1f18      	subs	r0, r3, #4
 800f51e:	2b00      	cmp	r3, #0
 800f520:	bfbc      	itt	lt
 800f522:	580b      	ldrlt	r3, [r1, r0]
 800f524:	18c0      	addlt	r0, r0, r3
 800f526:	4770      	bx	lr

0800f528 <__retarget_lock_acquire_recursive>:
 800f528:	4770      	bx	lr

0800f52a <__retarget_lock_release_recursive>:
 800f52a:	4770      	bx	lr
 800f52c:	0000      	movs	r0, r0
	...

0800f530 <sin>:
 800f530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f532:	ec53 2b10 	vmov	r2, r3, d0
 800f536:	4828      	ldr	r0, [pc, #160]	; (800f5d8 <sin+0xa8>)
 800f538:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f53c:	4281      	cmp	r1, r0
 800f53e:	dc07      	bgt.n	800f550 <sin+0x20>
 800f540:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f5d0 <sin+0xa0>
 800f544:	2000      	movs	r0, #0
 800f546:	b005      	add	sp, #20
 800f548:	f85d eb04 	ldr.w	lr, [sp], #4
 800f54c:	f000 bf5c 	b.w	8010408 <__kernel_sin>
 800f550:	4822      	ldr	r0, [pc, #136]	; (800f5dc <sin+0xac>)
 800f552:	4281      	cmp	r1, r0
 800f554:	dd09      	ble.n	800f56a <sin+0x3a>
 800f556:	ee10 0a10 	vmov	r0, s0
 800f55a:	4619      	mov	r1, r3
 800f55c:	f7f1 f824 	bl	80005a8 <__aeabi_dsub>
 800f560:	ec41 0b10 	vmov	d0, r0, r1
 800f564:	b005      	add	sp, #20
 800f566:	f85d fb04 	ldr.w	pc, [sp], #4
 800f56a:	4668      	mov	r0, sp
 800f56c:	f000 f924 	bl	800f7b8 <__ieee754_rem_pio2>
 800f570:	f000 0003 	and.w	r0, r0, #3
 800f574:	2801      	cmp	r0, #1
 800f576:	d00c      	beq.n	800f592 <sin+0x62>
 800f578:	2802      	cmp	r0, #2
 800f57a:	d011      	beq.n	800f5a0 <sin+0x70>
 800f57c:	b9f0      	cbnz	r0, 800f5bc <sin+0x8c>
 800f57e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f582:	ed9d 0b00 	vldr	d0, [sp]
 800f586:	2001      	movs	r0, #1
 800f588:	f000 ff3e 	bl	8010408 <__kernel_sin>
 800f58c:	ec51 0b10 	vmov	r0, r1, d0
 800f590:	e7e6      	b.n	800f560 <sin+0x30>
 800f592:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f596:	ed9d 0b00 	vldr	d0, [sp]
 800f59a:	f000 fb1d 	bl	800fbd8 <__kernel_cos>
 800f59e:	e7f5      	b.n	800f58c <sin+0x5c>
 800f5a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5a4:	ed9d 0b00 	vldr	d0, [sp]
 800f5a8:	2001      	movs	r0, #1
 800f5aa:	f000 ff2d 	bl	8010408 <__kernel_sin>
 800f5ae:	ec53 2b10 	vmov	r2, r3, d0
 800f5b2:	ee10 0a10 	vmov	r0, s0
 800f5b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f5ba:	e7d1      	b.n	800f560 <sin+0x30>
 800f5bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f5c0:	ed9d 0b00 	vldr	d0, [sp]
 800f5c4:	f000 fb08 	bl	800fbd8 <__kernel_cos>
 800f5c8:	e7f1      	b.n	800f5ae <sin+0x7e>
 800f5ca:	bf00      	nop
 800f5cc:	f3af 8000 	nop.w
	...
 800f5d8:	3fe921fb 	.word	0x3fe921fb
 800f5dc:	7fefffff 	.word	0x7fefffff

0800f5e0 <atan2>:
 800f5e0:	f000 b81e 	b.w	800f620 <__ieee754_atan2>

0800f5e4 <sqrtf>:
 800f5e4:	b508      	push	{r3, lr}
 800f5e6:	ed2d 8b02 	vpush	{d8}
 800f5ea:	eeb0 8a40 	vmov.f32	s16, s0
 800f5ee:	f000 faef 	bl	800fbd0 <__ieee754_sqrtf>
 800f5f2:	eeb4 8a48 	vcmp.f32	s16, s16
 800f5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5fa:	d60c      	bvs.n	800f616 <sqrtf+0x32>
 800f5fc:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f61c <sqrtf+0x38>
 800f600:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f608:	d505      	bpl.n	800f616 <sqrtf+0x32>
 800f60a:	f7ff faef 	bl	800ebec <__errno>
 800f60e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f612:	2321      	movs	r3, #33	; 0x21
 800f614:	6003      	str	r3, [r0, #0]
 800f616:	ecbd 8b02 	vpop	{d8}
 800f61a:	bd08      	pop	{r3, pc}
 800f61c:	00000000 	.word	0x00000000

0800f620 <__ieee754_atan2>:
 800f620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f624:	ec57 6b11 	vmov	r6, r7, d1
 800f628:	4273      	negs	r3, r6
 800f62a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800f7b0 <__ieee754_atan2+0x190>
 800f62e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f632:	4333      	orrs	r3, r6
 800f634:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800f638:	4573      	cmp	r3, lr
 800f63a:	ec51 0b10 	vmov	r0, r1, d0
 800f63e:	ee11 8a10 	vmov	r8, s2
 800f642:	d80a      	bhi.n	800f65a <__ieee754_atan2+0x3a>
 800f644:	4244      	negs	r4, r0
 800f646:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f64a:	4304      	orrs	r4, r0
 800f64c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800f650:	4574      	cmp	r4, lr
 800f652:	ee10 9a10 	vmov	r9, s0
 800f656:	468c      	mov	ip, r1
 800f658:	d907      	bls.n	800f66a <__ieee754_atan2+0x4a>
 800f65a:	4632      	mov	r2, r6
 800f65c:	463b      	mov	r3, r7
 800f65e:	f7f0 ffa5 	bl	80005ac <__adddf3>
 800f662:	ec41 0b10 	vmov	d0, r0, r1
 800f666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f66a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800f66e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800f672:	4334      	orrs	r4, r6
 800f674:	d103      	bne.n	800f67e <__ieee754_atan2+0x5e>
 800f676:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f67a:	f000 bf85 	b.w	8010588 <atan>
 800f67e:	17bc      	asrs	r4, r7, #30
 800f680:	f004 0402 	and.w	r4, r4, #2
 800f684:	ea53 0909 	orrs.w	r9, r3, r9
 800f688:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800f68c:	d107      	bne.n	800f69e <__ieee754_atan2+0x7e>
 800f68e:	2c02      	cmp	r4, #2
 800f690:	d060      	beq.n	800f754 <__ieee754_atan2+0x134>
 800f692:	2c03      	cmp	r4, #3
 800f694:	d1e5      	bne.n	800f662 <__ieee754_atan2+0x42>
 800f696:	a142      	add	r1, pc, #264	; (adr r1, 800f7a0 <__ieee754_atan2+0x180>)
 800f698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69c:	e7e1      	b.n	800f662 <__ieee754_atan2+0x42>
 800f69e:	ea52 0808 	orrs.w	r8, r2, r8
 800f6a2:	d106      	bne.n	800f6b2 <__ieee754_atan2+0x92>
 800f6a4:	f1bc 0f00 	cmp.w	ip, #0
 800f6a8:	da5f      	bge.n	800f76a <__ieee754_atan2+0x14a>
 800f6aa:	a13f      	add	r1, pc, #252	; (adr r1, 800f7a8 <__ieee754_atan2+0x188>)
 800f6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6b0:	e7d7      	b.n	800f662 <__ieee754_atan2+0x42>
 800f6b2:	4572      	cmp	r2, lr
 800f6b4:	d10f      	bne.n	800f6d6 <__ieee754_atan2+0xb6>
 800f6b6:	4293      	cmp	r3, r2
 800f6b8:	f104 34ff 	add.w	r4, r4, #4294967295
 800f6bc:	d107      	bne.n	800f6ce <__ieee754_atan2+0xae>
 800f6be:	2c02      	cmp	r4, #2
 800f6c0:	d84c      	bhi.n	800f75c <__ieee754_atan2+0x13c>
 800f6c2:	4b35      	ldr	r3, [pc, #212]	; (800f798 <__ieee754_atan2+0x178>)
 800f6c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800f6c8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f6cc:	e7c9      	b.n	800f662 <__ieee754_atan2+0x42>
 800f6ce:	2c02      	cmp	r4, #2
 800f6d0:	d848      	bhi.n	800f764 <__ieee754_atan2+0x144>
 800f6d2:	4b32      	ldr	r3, [pc, #200]	; (800f79c <__ieee754_atan2+0x17c>)
 800f6d4:	e7f6      	b.n	800f6c4 <__ieee754_atan2+0xa4>
 800f6d6:	4573      	cmp	r3, lr
 800f6d8:	d0e4      	beq.n	800f6a4 <__ieee754_atan2+0x84>
 800f6da:	1a9b      	subs	r3, r3, r2
 800f6dc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800f6e0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f6e4:	da1e      	bge.n	800f724 <__ieee754_atan2+0x104>
 800f6e6:	2f00      	cmp	r7, #0
 800f6e8:	da01      	bge.n	800f6ee <__ieee754_atan2+0xce>
 800f6ea:	323c      	adds	r2, #60	; 0x3c
 800f6ec:	db1e      	blt.n	800f72c <__ieee754_atan2+0x10c>
 800f6ee:	4632      	mov	r2, r6
 800f6f0:	463b      	mov	r3, r7
 800f6f2:	f7f1 fa3b 	bl	8000b6c <__aeabi_ddiv>
 800f6f6:	ec41 0b10 	vmov	d0, r0, r1
 800f6fa:	f001 f8e5 	bl	80108c8 <fabs>
 800f6fe:	f000 ff43 	bl	8010588 <atan>
 800f702:	ec51 0b10 	vmov	r0, r1, d0
 800f706:	2c01      	cmp	r4, #1
 800f708:	d013      	beq.n	800f732 <__ieee754_atan2+0x112>
 800f70a:	2c02      	cmp	r4, #2
 800f70c:	d015      	beq.n	800f73a <__ieee754_atan2+0x11a>
 800f70e:	2c00      	cmp	r4, #0
 800f710:	d0a7      	beq.n	800f662 <__ieee754_atan2+0x42>
 800f712:	a319      	add	r3, pc, #100	; (adr r3, 800f778 <__ieee754_atan2+0x158>)
 800f714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f718:	f7f0 ff46 	bl	80005a8 <__aeabi_dsub>
 800f71c:	a318      	add	r3, pc, #96	; (adr r3, 800f780 <__ieee754_atan2+0x160>)
 800f71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f722:	e014      	b.n	800f74e <__ieee754_atan2+0x12e>
 800f724:	a118      	add	r1, pc, #96	; (adr r1, 800f788 <__ieee754_atan2+0x168>)
 800f726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f72a:	e7ec      	b.n	800f706 <__ieee754_atan2+0xe6>
 800f72c:	2000      	movs	r0, #0
 800f72e:	2100      	movs	r1, #0
 800f730:	e7e9      	b.n	800f706 <__ieee754_atan2+0xe6>
 800f732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f736:	4619      	mov	r1, r3
 800f738:	e793      	b.n	800f662 <__ieee754_atan2+0x42>
 800f73a:	a30f      	add	r3, pc, #60	; (adr r3, 800f778 <__ieee754_atan2+0x158>)
 800f73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f740:	f7f0 ff32 	bl	80005a8 <__aeabi_dsub>
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	a10d      	add	r1, pc, #52	; (adr r1, 800f780 <__ieee754_atan2+0x160>)
 800f74a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f74e:	f7f0 ff2b 	bl	80005a8 <__aeabi_dsub>
 800f752:	e786      	b.n	800f662 <__ieee754_atan2+0x42>
 800f754:	a10a      	add	r1, pc, #40	; (adr r1, 800f780 <__ieee754_atan2+0x160>)
 800f756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f75a:	e782      	b.n	800f662 <__ieee754_atan2+0x42>
 800f75c:	a10c      	add	r1, pc, #48	; (adr r1, 800f790 <__ieee754_atan2+0x170>)
 800f75e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f762:	e77e      	b.n	800f662 <__ieee754_atan2+0x42>
 800f764:	2000      	movs	r0, #0
 800f766:	2100      	movs	r1, #0
 800f768:	e77b      	b.n	800f662 <__ieee754_atan2+0x42>
 800f76a:	a107      	add	r1, pc, #28	; (adr r1, 800f788 <__ieee754_atan2+0x168>)
 800f76c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f770:	e777      	b.n	800f662 <__ieee754_atan2+0x42>
 800f772:	bf00      	nop
 800f774:	f3af 8000 	nop.w
 800f778:	33145c07 	.word	0x33145c07
 800f77c:	3ca1a626 	.word	0x3ca1a626
 800f780:	54442d18 	.word	0x54442d18
 800f784:	400921fb 	.word	0x400921fb
 800f788:	54442d18 	.word	0x54442d18
 800f78c:	3ff921fb 	.word	0x3ff921fb
 800f790:	54442d18 	.word	0x54442d18
 800f794:	3fe921fb 	.word	0x3fe921fb
 800f798:	08011110 	.word	0x08011110
 800f79c:	08011128 	.word	0x08011128
 800f7a0:	54442d18 	.word	0x54442d18
 800f7a4:	c00921fb 	.word	0xc00921fb
 800f7a8:	54442d18 	.word	0x54442d18
 800f7ac:	bff921fb 	.word	0xbff921fb
 800f7b0:	7ff00000 	.word	0x7ff00000
 800f7b4:	00000000 	.word	0x00000000

0800f7b8 <__ieee754_rem_pio2>:
 800f7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7bc:	ed2d 8b02 	vpush	{d8}
 800f7c0:	ec55 4b10 	vmov	r4, r5, d0
 800f7c4:	4bca      	ldr	r3, [pc, #808]	; (800faf0 <__ieee754_rem_pio2+0x338>)
 800f7c6:	b08b      	sub	sp, #44	; 0x2c
 800f7c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f7cc:	4598      	cmp	r8, r3
 800f7ce:	4682      	mov	sl, r0
 800f7d0:	9502      	str	r5, [sp, #8]
 800f7d2:	dc08      	bgt.n	800f7e6 <__ieee754_rem_pio2+0x2e>
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	ed80 0b00 	vstr	d0, [r0]
 800f7dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f7e0:	f04f 0b00 	mov.w	fp, #0
 800f7e4:	e028      	b.n	800f838 <__ieee754_rem_pio2+0x80>
 800f7e6:	4bc3      	ldr	r3, [pc, #780]	; (800faf4 <__ieee754_rem_pio2+0x33c>)
 800f7e8:	4598      	cmp	r8, r3
 800f7ea:	dc78      	bgt.n	800f8de <__ieee754_rem_pio2+0x126>
 800f7ec:	9b02      	ldr	r3, [sp, #8]
 800f7ee:	4ec2      	ldr	r6, [pc, #776]	; (800faf8 <__ieee754_rem_pio2+0x340>)
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	ee10 0a10 	vmov	r0, s0
 800f7f6:	a3b0      	add	r3, pc, #704	; (adr r3, 800fab8 <__ieee754_rem_pio2+0x300>)
 800f7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fc:	4629      	mov	r1, r5
 800f7fe:	dd39      	ble.n	800f874 <__ieee754_rem_pio2+0xbc>
 800f800:	f7f0 fed2 	bl	80005a8 <__aeabi_dsub>
 800f804:	45b0      	cmp	r8, r6
 800f806:	4604      	mov	r4, r0
 800f808:	460d      	mov	r5, r1
 800f80a:	d01b      	beq.n	800f844 <__ieee754_rem_pio2+0x8c>
 800f80c:	a3ac      	add	r3, pc, #688	; (adr r3, 800fac0 <__ieee754_rem_pio2+0x308>)
 800f80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f812:	f7f0 fec9 	bl	80005a8 <__aeabi_dsub>
 800f816:	4602      	mov	r2, r0
 800f818:	460b      	mov	r3, r1
 800f81a:	e9ca 2300 	strd	r2, r3, [sl]
 800f81e:	4620      	mov	r0, r4
 800f820:	4629      	mov	r1, r5
 800f822:	f7f0 fec1 	bl	80005a8 <__aeabi_dsub>
 800f826:	a3a6      	add	r3, pc, #664	; (adr r3, 800fac0 <__ieee754_rem_pio2+0x308>)
 800f828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82c:	f7f0 febc 	bl	80005a8 <__aeabi_dsub>
 800f830:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f834:	f04f 0b01 	mov.w	fp, #1
 800f838:	4658      	mov	r0, fp
 800f83a:	b00b      	add	sp, #44	; 0x2c
 800f83c:	ecbd 8b02 	vpop	{d8}
 800f840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f844:	a3a0      	add	r3, pc, #640	; (adr r3, 800fac8 <__ieee754_rem_pio2+0x310>)
 800f846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84a:	f7f0 fead 	bl	80005a8 <__aeabi_dsub>
 800f84e:	a3a0      	add	r3, pc, #640	; (adr r3, 800fad0 <__ieee754_rem_pio2+0x318>)
 800f850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f854:	4604      	mov	r4, r0
 800f856:	460d      	mov	r5, r1
 800f858:	f7f0 fea6 	bl	80005a8 <__aeabi_dsub>
 800f85c:	4602      	mov	r2, r0
 800f85e:	460b      	mov	r3, r1
 800f860:	e9ca 2300 	strd	r2, r3, [sl]
 800f864:	4620      	mov	r0, r4
 800f866:	4629      	mov	r1, r5
 800f868:	f7f0 fe9e 	bl	80005a8 <__aeabi_dsub>
 800f86c:	a398      	add	r3, pc, #608	; (adr r3, 800fad0 <__ieee754_rem_pio2+0x318>)
 800f86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f872:	e7db      	b.n	800f82c <__ieee754_rem_pio2+0x74>
 800f874:	f7f0 fe9a 	bl	80005ac <__adddf3>
 800f878:	45b0      	cmp	r8, r6
 800f87a:	4604      	mov	r4, r0
 800f87c:	460d      	mov	r5, r1
 800f87e:	d016      	beq.n	800f8ae <__ieee754_rem_pio2+0xf6>
 800f880:	a38f      	add	r3, pc, #572	; (adr r3, 800fac0 <__ieee754_rem_pio2+0x308>)
 800f882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f886:	f7f0 fe91 	bl	80005ac <__adddf3>
 800f88a:	4602      	mov	r2, r0
 800f88c:	460b      	mov	r3, r1
 800f88e:	e9ca 2300 	strd	r2, r3, [sl]
 800f892:	4620      	mov	r0, r4
 800f894:	4629      	mov	r1, r5
 800f896:	f7f0 fe87 	bl	80005a8 <__aeabi_dsub>
 800f89a:	a389      	add	r3, pc, #548	; (adr r3, 800fac0 <__ieee754_rem_pio2+0x308>)
 800f89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a0:	f7f0 fe84 	bl	80005ac <__adddf3>
 800f8a4:	f04f 3bff 	mov.w	fp, #4294967295
 800f8a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f8ac:	e7c4      	b.n	800f838 <__ieee754_rem_pio2+0x80>
 800f8ae:	a386      	add	r3, pc, #536	; (adr r3, 800fac8 <__ieee754_rem_pio2+0x310>)
 800f8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b4:	f7f0 fe7a 	bl	80005ac <__adddf3>
 800f8b8:	a385      	add	r3, pc, #532	; (adr r3, 800fad0 <__ieee754_rem_pio2+0x318>)
 800f8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8be:	4604      	mov	r4, r0
 800f8c0:	460d      	mov	r5, r1
 800f8c2:	f7f0 fe73 	bl	80005ac <__adddf3>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	e9ca 2300 	strd	r2, r3, [sl]
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	4629      	mov	r1, r5
 800f8d2:	f7f0 fe69 	bl	80005a8 <__aeabi_dsub>
 800f8d6:	a37e      	add	r3, pc, #504	; (adr r3, 800fad0 <__ieee754_rem_pio2+0x318>)
 800f8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8dc:	e7e0      	b.n	800f8a0 <__ieee754_rem_pio2+0xe8>
 800f8de:	4b87      	ldr	r3, [pc, #540]	; (800fafc <__ieee754_rem_pio2+0x344>)
 800f8e0:	4598      	cmp	r8, r3
 800f8e2:	f300 80d9 	bgt.w	800fa98 <__ieee754_rem_pio2+0x2e0>
 800f8e6:	f000 ffef 	bl	80108c8 <fabs>
 800f8ea:	ec55 4b10 	vmov	r4, r5, d0
 800f8ee:	ee10 0a10 	vmov	r0, s0
 800f8f2:	a379      	add	r3, pc, #484	; (adr r3, 800fad8 <__ieee754_rem_pio2+0x320>)
 800f8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f8:	4629      	mov	r1, r5
 800f8fa:	f7f1 f80d 	bl	8000918 <__aeabi_dmul>
 800f8fe:	4b80      	ldr	r3, [pc, #512]	; (800fb00 <__ieee754_rem_pio2+0x348>)
 800f900:	2200      	movs	r2, #0
 800f902:	f7f0 fe53 	bl	80005ac <__adddf3>
 800f906:	f7f1 faa1 	bl	8000e4c <__aeabi_d2iz>
 800f90a:	4683      	mov	fp, r0
 800f90c:	f7f0 ff9a 	bl	8000844 <__aeabi_i2d>
 800f910:	4602      	mov	r2, r0
 800f912:	460b      	mov	r3, r1
 800f914:	ec43 2b18 	vmov	d8, r2, r3
 800f918:	a367      	add	r3, pc, #412	; (adr r3, 800fab8 <__ieee754_rem_pio2+0x300>)
 800f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91e:	f7f0 fffb 	bl	8000918 <__aeabi_dmul>
 800f922:	4602      	mov	r2, r0
 800f924:	460b      	mov	r3, r1
 800f926:	4620      	mov	r0, r4
 800f928:	4629      	mov	r1, r5
 800f92a:	f7f0 fe3d 	bl	80005a8 <__aeabi_dsub>
 800f92e:	a364      	add	r3, pc, #400	; (adr r3, 800fac0 <__ieee754_rem_pio2+0x308>)
 800f930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f934:	4606      	mov	r6, r0
 800f936:	460f      	mov	r7, r1
 800f938:	ec51 0b18 	vmov	r0, r1, d8
 800f93c:	f7f0 ffec 	bl	8000918 <__aeabi_dmul>
 800f940:	f1bb 0f1f 	cmp.w	fp, #31
 800f944:	4604      	mov	r4, r0
 800f946:	460d      	mov	r5, r1
 800f948:	dc0d      	bgt.n	800f966 <__ieee754_rem_pio2+0x1ae>
 800f94a:	4b6e      	ldr	r3, [pc, #440]	; (800fb04 <__ieee754_rem_pio2+0x34c>)
 800f94c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f954:	4543      	cmp	r3, r8
 800f956:	d006      	beq.n	800f966 <__ieee754_rem_pio2+0x1ae>
 800f958:	4622      	mov	r2, r4
 800f95a:	462b      	mov	r3, r5
 800f95c:	4630      	mov	r0, r6
 800f95e:	4639      	mov	r1, r7
 800f960:	f7f0 fe22 	bl	80005a8 <__aeabi_dsub>
 800f964:	e00f      	b.n	800f986 <__ieee754_rem_pio2+0x1ce>
 800f966:	462b      	mov	r3, r5
 800f968:	4622      	mov	r2, r4
 800f96a:	4630      	mov	r0, r6
 800f96c:	4639      	mov	r1, r7
 800f96e:	f7f0 fe1b 	bl	80005a8 <__aeabi_dsub>
 800f972:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f976:	9303      	str	r3, [sp, #12]
 800f978:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f97c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f980:	f1b8 0f10 	cmp.w	r8, #16
 800f984:	dc02      	bgt.n	800f98c <__ieee754_rem_pio2+0x1d4>
 800f986:	e9ca 0100 	strd	r0, r1, [sl]
 800f98a:	e039      	b.n	800fa00 <__ieee754_rem_pio2+0x248>
 800f98c:	a34e      	add	r3, pc, #312	; (adr r3, 800fac8 <__ieee754_rem_pio2+0x310>)
 800f98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f992:	ec51 0b18 	vmov	r0, r1, d8
 800f996:	f7f0 ffbf 	bl	8000918 <__aeabi_dmul>
 800f99a:	4604      	mov	r4, r0
 800f99c:	460d      	mov	r5, r1
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	4630      	mov	r0, r6
 800f9a4:	4639      	mov	r1, r7
 800f9a6:	f7f0 fdff 	bl	80005a8 <__aeabi_dsub>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	460b      	mov	r3, r1
 800f9ae:	4680      	mov	r8, r0
 800f9b0:	4689      	mov	r9, r1
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	4639      	mov	r1, r7
 800f9b6:	f7f0 fdf7 	bl	80005a8 <__aeabi_dsub>
 800f9ba:	4622      	mov	r2, r4
 800f9bc:	462b      	mov	r3, r5
 800f9be:	f7f0 fdf3 	bl	80005a8 <__aeabi_dsub>
 800f9c2:	a343      	add	r3, pc, #268	; (adr r3, 800fad0 <__ieee754_rem_pio2+0x318>)
 800f9c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	460d      	mov	r5, r1
 800f9cc:	ec51 0b18 	vmov	r0, r1, d8
 800f9d0:	f7f0 ffa2 	bl	8000918 <__aeabi_dmul>
 800f9d4:	4622      	mov	r2, r4
 800f9d6:	462b      	mov	r3, r5
 800f9d8:	f7f0 fde6 	bl	80005a8 <__aeabi_dsub>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	460b      	mov	r3, r1
 800f9e0:	4604      	mov	r4, r0
 800f9e2:	460d      	mov	r5, r1
 800f9e4:	4640      	mov	r0, r8
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	f7f0 fdde 	bl	80005a8 <__aeabi_dsub>
 800f9ec:	9a03      	ldr	r2, [sp, #12]
 800f9ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f9f2:	1ad3      	subs	r3, r2, r3
 800f9f4:	2b31      	cmp	r3, #49	; 0x31
 800f9f6:	dc24      	bgt.n	800fa42 <__ieee754_rem_pio2+0x28a>
 800f9f8:	e9ca 0100 	strd	r0, r1, [sl]
 800f9fc:	4646      	mov	r6, r8
 800f9fe:	464f      	mov	r7, r9
 800fa00:	e9da 8900 	ldrd	r8, r9, [sl]
 800fa04:	4630      	mov	r0, r6
 800fa06:	4642      	mov	r2, r8
 800fa08:	464b      	mov	r3, r9
 800fa0a:	4639      	mov	r1, r7
 800fa0c:	f7f0 fdcc 	bl	80005a8 <__aeabi_dsub>
 800fa10:	462b      	mov	r3, r5
 800fa12:	4622      	mov	r2, r4
 800fa14:	f7f0 fdc8 	bl	80005a8 <__aeabi_dsub>
 800fa18:	9b02      	ldr	r3, [sp, #8]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fa20:	f6bf af0a 	bge.w	800f838 <__ieee754_rem_pio2+0x80>
 800fa24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fa28:	f8ca 3004 	str.w	r3, [sl, #4]
 800fa2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa30:	f8ca 8000 	str.w	r8, [sl]
 800fa34:	f8ca 0008 	str.w	r0, [sl, #8]
 800fa38:	f8ca 300c 	str.w	r3, [sl, #12]
 800fa3c:	f1cb 0b00 	rsb	fp, fp, #0
 800fa40:	e6fa      	b.n	800f838 <__ieee754_rem_pio2+0x80>
 800fa42:	a327      	add	r3, pc, #156	; (adr r3, 800fae0 <__ieee754_rem_pio2+0x328>)
 800fa44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa48:	ec51 0b18 	vmov	r0, r1, d8
 800fa4c:	f7f0 ff64 	bl	8000918 <__aeabi_dmul>
 800fa50:	4604      	mov	r4, r0
 800fa52:	460d      	mov	r5, r1
 800fa54:	4602      	mov	r2, r0
 800fa56:	460b      	mov	r3, r1
 800fa58:	4640      	mov	r0, r8
 800fa5a:	4649      	mov	r1, r9
 800fa5c:	f7f0 fda4 	bl	80005a8 <__aeabi_dsub>
 800fa60:	4602      	mov	r2, r0
 800fa62:	460b      	mov	r3, r1
 800fa64:	4606      	mov	r6, r0
 800fa66:	460f      	mov	r7, r1
 800fa68:	4640      	mov	r0, r8
 800fa6a:	4649      	mov	r1, r9
 800fa6c:	f7f0 fd9c 	bl	80005a8 <__aeabi_dsub>
 800fa70:	4622      	mov	r2, r4
 800fa72:	462b      	mov	r3, r5
 800fa74:	f7f0 fd98 	bl	80005a8 <__aeabi_dsub>
 800fa78:	a31b      	add	r3, pc, #108	; (adr r3, 800fae8 <__ieee754_rem_pio2+0x330>)
 800fa7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa7e:	4604      	mov	r4, r0
 800fa80:	460d      	mov	r5, r1
 800fa82:	ec51 0b18 	vmov	r0, r1, d8
 800fa86:	f7f0 ff47 	bl	8000918 <__aeabi_dmul>
 800fa8a:	4622      	mov	r2, r4
 800fa8c:	462b      	mov	r3, r5
 800fa8e:	f7f0 fd8b 	bl	80005a8 <__aeabi_dsub>
 800fa92:	4604      	mov	r4, r0
 800fa94:	460d      	mov	r5, r1
 800fa96:	e75f      	b.n	800f958 <__ieee754_rem_pio2+0x1a0>
 800fa98:	4b1b      	ldr	r3, [pc, #108]	; (800fb08 <__ieee754_rem_pio2+0x350>)
 800fa9a:	4598      	cmp	r8, r3
 800fa9c:	dd36      	ble.n	800fb0c <__ieee754_rem_pio2+0x354>
 800fa9e:	ee10 2a10 	vmov	r2, s0
 800faa2:	462b      	mov	r3, r5
 800faa4:	4620      	mov	r0, r4
 800faa6:	4629      	mov	r1, r5
 800faa8:	f7f0 fd7e 	bl	80005a8 <__aeabi_dsub>
 800faac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fab0:	e9ca 0100 	strd	r0, r1, [sl]
 800fab4:	e694      	b.n	800f7e0 <__ieee754_rem_pio2+0x28>
 800fab6:	bf00      	nop
 800fab8:	54400000 	.word	0x54400000
 800fabc:	3ff921fb 	.word	0x3ff921fb
 800fac0:	1a626331 	.word	0x1a626331
 800fac4:	3dd0b461 	.word	0x3dd0b461
 800fac8:	1a600000 	.word	0x1a600000
 800facc:	3dd0b461 	.word	0x3dd0b461
 800fad0:	2e037073 	.word	0x2e037073
 800fad4:	3ba3198a 	.word	0x3ba3198a
 800fad8:	6dc9c883 	.word	0x6dc9c883
 800fadc:	3fe45f30 	.word	0x3fe45f30
 800fae0:	2e000000 	.word	0x2e000000
 800fae4:	3ba3198a 	.word	0x3ba3198a
 800fae8:	252049c1 	.word	0x252049c1
 800faec:	397b839a 	.word	0x397b839a
 800faf0:	3fe921fb 	.word	0x3fe921fb
 800faf4:	4002d97b 	.word	0x4002d97b
 800faf8:	3ff921fb 	.word	0x3ff921fb
 800fafc:	413921fb 	.word	0x413921fb
 800fb00:	3fe00000 	.word	0x3fe00000
 800fb04:	08011140 	.word	0x08011140
 800fb08:	7fefffff 	.word	0x7fefffff
 800fb0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800fb10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800fb14:	ee10 0a10 	vmov	r0, s0
 800fb18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800fb1c:	ee10 6a10 	vmov	r6, s0
 800fb20:	460f      	mov	r7, r1
 800fb22:	f7f1 f993 	bl	8000e4c <__aeabi_d2iz>
 800fb26:	f7f0 fe8d 	bl	8000844 <__aeabi_i2d>
 800fb2a:	4602      	mov	r2, r0
 800fb2c:	460b      	mov	r3, r1
 800fb2e:	4630      	mov	r0, r6
 800fb30:	4639      	mov	r1, r7
 800fb32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fb36:	f7f0 fd37 	bl	80005a8 <__aeabi_dsub>
 800fb3a:	4b23      	ldr	r3, [pc, #140]	; (800fbc8 <__ieee754_rem_pio2+0x410>)
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f7f0 feeb 	bl	8000918 <__aeabi_dmul>
 800fb42:	460f      	mov	r7, r1
 800fb44:	4606      	mov	r6, r0
 800fb46:	f7f1 f981 	bl	8000e4c <__aeabi_d2iz>
 800fb4a:	f7f0 fe7b 	bl	8000844 <__aeabi_i2d>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	460b      	mov	r3, r1
 800fb52:	4630      	mov	r0, r6
 800fb54:	4639      	mov	r1, r7
 800fb56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fb5a:	f7f0 fd25 	bl	80005a8 <__aeabi_dsub>
 800fb5e:	4b1a      	ldr	r3, [pc, #104]	; (800fbc8 <__ieee754_rem_pio2+0x410>)
 800fb60:	2200      	movs	r2, #0
 800fb62:	f7f0 fed9 	bl	8000918 <__aeabi_dmul>
 800fb66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fb6a:	ad04      	add	r5, sp, #16
 800fb6c:	f04f 0803 	mov.w	r8, #3
 800fb70:	46a9      	mov	r9, r5
 800fb72:	2600      	movs	r6, #0
 800fb74:	2700      	movs	r7, #0
 800fb76:	4632      	mov	r2, r6
 800fb78:	463b      	mov	r3, r7
 800fb7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800fb7e:	46c3      	mov	fp, r8
 800fb80:	3d08      	subs	r5, #8
 800fb82:	f108 38ff 	add.w	r8, r8, #4294967295
 800fb86:	f7f1 f92f 	bl	8000de8 <__aeabi_dcmpeq>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d1f3      	bne.n	800fb76 <__ieee754_rem_pio2+0x3be>
 800fb8e:	4b0f      	ldr	r3, [pc, #60]	; (800fbcc <__ieee754_rem_pio2+0x414>)
 800fb90:	9301      	str	r3, [sp, #4]
 800fb92:	2302      	movs	r3, #2
 800fb94:	9300      	str	r3, [sp, #0]
 800fb96:	4622      	mov	r2, r4
 800fb98:	465b      	mov	r3, fp
 800fb9a:	4651      	mov	r1, sl
 800fb9c:	4648      	mov	r0, r9
 800fb9e:	f000 f8e3 	bl	800fd68 <__kernel_rem_pio2>
 800fba2:	9b02      	ldr	r3, [sp, #8]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	4683      	mov	fp, r0
 800fba8:	f6bf ae46 	bge.w	800f838 <__ieee754_rem_pio2+0x80>
 800fbac:	e9da 2100 	ldrd	r2, r1, [sl]
 800fbb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbb4:	e9ca 2300 	strd	r2, r3, [sl]
 800fbb8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800fbbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fbc0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800fbc4:	e73a      	b.n	800fa3c <__ieee754_rem_pio2+0x284>
 800fbc6:	bf00      	nop
 800fbc8:	41700000 	.word	0x41700000
 800fbcc:	080111c0 	.word	0x080111c0

0800fbd0 <__ieee754_sqrtf>:
 800fbd0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fbd4:	4770      	bx	lr
	...

0800fbd8 <__kernel_cos>:
 800fbd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbdc:	ec57 6b10 	vmov	r6, r7, d0
 800fbe0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fbe4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fbe8:	ed8d 1b00 	vstr	d1, [sp]
 800fbec:	da07      	bge.n	800fbfe <__kernel_cos+0x26>
 800fbee:	ee10 0a10 	vmov	r0, s0
 800fbf2:	4639      	mov	r1, r7
 800fbf4:	f7f1 f92a 	bl	8000e4c <__aeabi_d2iz>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	f000 8088 	beq.w	800fd0e <__kernel_cos+0x136>
 800fbfe:	4632      	mov	r2, r6
 800fc00:	463b      	mov	r3, r7
 800fc02:	4630      	mov	r0, r6
 800fc04:	4639      	mov	r1, r7
 800fc06:	f7f0 fe87 	bl	8000918 <__aeabi_dmul>
 800fc0a:	4b51      	ldr	r3, [pc, #324]	; (800fd50 <__kernel_cos+0x178>)
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	4604      	mov	r4, r0
 800fc10:	460d      	mov	r5, r1
 800fc12:	f7f0 fe81 	bl	8000918 <__aeabi_dmul>
 800fc16:	a340      	add	r3, pc, #256	; (adr r3, 800fd18 <__kernel_cos+0x140>)
 800fc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1c:	4682      	mov	sl, r0
 800fc1e:	468b      	mov	fp, r1
 800fc20:	4620      	mov	r0, r4
 800fc22:	4629      	mov	r1, r5
 800fc24:	f7f0 fe78 	bl	8000918 <__aeabi_dmul>
 800fc28:	a33d      	add	r3, pc, #244	; (adr r3, 800fd20 <__kernel_cos+0x148>)
 800fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc2e:	f7f0 fcbd 	bl	80005ac <__adddf3>
 800fc32:	4622      	mov	r2, r4
 800fc34:	462b      	mov	r3, r5
 800fc36:	f7f0 fe6f 	bl	8000918 <__aeabi_dmul>
 800fc3a:	a33b      	add	r3, pc, #236	; (adr r3, 800fd28 <__kernel_cos+0x150>)
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	f7f0 fcb2 	bl	80005a8 <__aeabi_dsub>
 800fc44:	4622      	mov	r2, r4
 800fc46:	462b      	mov	r3, r5
 800fc48:	f7f0 fe66 	bl	8000918 <__aeabi_dmul>
 800fc4c:	a338      	add	r3, pc, #224	; (adr r3, 800fd30 <__kernel_cos+0x158>)
 800fc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc52:	f7f0 fcab 	bl	80005ac <__adddf3>
 800fc56:	4622      	mov	r2, r4
 800fc58:	462b      	mov	r3, r5
 800fc5a:	f7f0 fe5d 	bl	8000918 <__aeabi_dmul>
 800fc5e:	a336      	add	r3, pc, #216	; (adr r3, 800fd38 <__kernel_cos+0x160>)
 800fc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc64:	f7f0 fca0 	bl	80005a8 <__aeabi_dsub>
 800fc68:	4622      	mov	r2, r4
 800fc6a:	462b      	mov	r3, r5
 800fc6c:	f7f0 fe54 	bl	8000918 <__aeabi_dmul>
 800fc70:	a333      	add	r3, pc, #204	; (adr r3, 800fd40 <__kernel_cos+0x168>)
 800fc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc76:	f7f0 fc99 	bl	80005ac <__adddf3>
 800fc7a:	4622      	mov	r2, r4
 800fc7c:	462b      	mov	r3, r5
 800fc7e:	f7f0 fe4b 	bl	8000918 <__aeabi_dmul>
 800fc82:	4622      	mov	r2, r4
 800fc84:	462b      	mov	r3, r5
 800fc86:	f7f0 fe47 	bl	8000918 <__aeabi_dmul>
 800fc8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc8e:	4604      	mov	r4, r0
 800fc90:	460d      	mov	r5, r1
 800fc92:	4630      	mov	r0, r6
 800fc94:	4639      	mov	r1, r7
 800fc96:	f7f0 fe3f 	bl	8000918 <__aeabi_dmul>
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	4602      	mov	r2, r0
 800fc9e:	4629      	mov	r1, r5
 800fca0:	4620      	mov	r0, r4
 800fca2:	f7f0 fc81 	bl	80005a8 <__aeabi_dsub>
 800fca6:	4b2b      	ldr	r3, [pc, #172]	; (800fd54 <__kernel_cos+0x17c>)
 800fca8:	4598      	cmp	r8, r3
 800fcaa:	4606      	mov	r6, r0
 800fcac:	460f      	mov	r7, r1
 800fcae:	dc10      	bgt.n	800fcd2 <__kernel_cos+0xfa>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	460b      	mov	r3, r1
 800fcb4:	4650      	mov	r0, sl
 800fcb6:	4659      	mov	r1, fp
 800fcb8:	f7f0 fc76 	bl	80005a8 <__aeabi_dsub>
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	4926      	ldr	r1, [pc, #152]	; (800fd58 <__kernel_cos+0x180>)
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	2000      	movs	r0, #0
 800fcc4:	f7f0 fc70 	bl	80005a8 <__aeabi_dsub>
 800fcc8:	ec41 0b10 	vmov	d0, r0, r1
 800fccc:	b003      	add	sp, #12
 800fcce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcd2:	4b22      	ldr	r3, [pc, #136]	; (800fd5c <__kernel_cos+0x184>)
 800fcd4:	4920      	ldr	r1, [pc, #128]	; (800fd58 <__kernel_cos+0x180>)
 800fcd6:	4598      	cmp	r8, r3
 800fcd8:	bfcc      	ite	gt
 800fcda:	4d21      	ldrgt	r5, [pc, #132]	; (800fd60 <__kernel_cos+0x188>)
 800fcdc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fce0:	2400      	movs	r4, #0
 800fce2:	4622      	mov	r2, r4
 800fce4:	462b      	mov	r3, r5
 800fce6:	2000      	movs	r0, #0
 800fce8:	f7f0 fc5e 	bl	80005a8 <__aeabi_dsub>
 800fcec:	4622      	mov	r2, r4
 800fcee:	4680      	mov	r8, r0
 800fcf0:	4689      	mov	r9, r1
 800fcf2:	462b      	mov	r3, r5
 800fcf4:	4650      	mov	r0, sl
 800fcf6:	4659      	mov	r1, fp
 800fcf8:	f7f0 fc56 	bl	80005a8 <__aeabi_dsub>
 800fcfc:	4632      	mov	r2, r6
 800fcfe:	463b      	mov	r3, r7
 800fd00:	f7f0 fc52 	bl	80005a8 <__aeabi_dsub>
 800fd04:	4602      	mov	r2, r0
 800fd06:	460b      	mov	r3, r1
 800fd08:	4640      	mov	r0, r8
 800fd0a:	4649      	mov	r1, r9
 800fd0c:	e7da      	b.n	800fcc4 <__kernel_cos+0xec>
 800fd0e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fd48 <__kernel_cos+0x170>
 800fd12:	e7db      	b.n	800fccc <__kernel_cos+0xf4>
 800fd14:	f3af 8000 	nop.w
 800fd18:	be8838d4 	.word	0xbe8838d4
 800fd1c:	bda8fae9 	.word	0xbda8fae9
 800fd20:	bdb4b1c4 	.word	0xbdb4b1c4
 800fd24:	3e21ee9e 	.word	0x3e21ee9e
 800fd28:	809c52ad 	.word	0x809c52ad
 800fd2c:	3e927e4f 	.word	0x3e927e4f
 800fd30:	19cb1590 	.word	0x19cb1590
 800fd34:	3efa01a0 	.word	0x3efa01a0
 800fd38:	16c15177 	.word	0x16c15177
 800fd3c:	3f56c16c 	.word	0x3f56c16c
 800fd40:	5555554c 	.word	0x5555554c
 800fd44:	3fa55555 	.word	0x3fa55555
 800fd48:	00000000 	.word	0x00000000
 800fd4c:	3ff00000 	.word	0x3ff00000
 800fd50:	3fe00000 	.word	0x3fe00000
 800fd54:	3fd33332 	.word	0x3fd33332
 800fd58:	3ff00000 	.word	0x3ff00000
 800fd5c:	3fe90000 	.word	0x3fe90000
 800fd60:	3fd20000 	.word	0x3fd20000
 800fd64:	00000000 	.word	0x00000000

0800fd68 <__kernel_rem_pio2>:
 800fd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd6c:	ed2d 8b02 	vpush	{d8}
 800fd70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fd74:	f112 0f14 	cmn.w	r2, #20
 800fd78:	9308      	str	r3, [sp, #32]
 800fd7a:	9101      	str	r1, [sp, #4]
 800fd7c:	4bc4      	ldr	r3, [pc, #784]	; (8010090 <__kernel_rem_pio2+0x328>)
 800fd7e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fd80:	900b      	str	r0, [sp, #44]	; 0x2c
 800fd82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fd86:	9302      	str	r3, [sp, #8]
 800fd88:	9b08      	ldr	r3, [sp, #32]
 800fd8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fd8e:	bfa8      	it	ge
 800fd90:	1ed4      	subge	r4, r2, #3
 800fd92:	9306      	str	r3, [sp, #24]
 800fd94:	bfb2      	itee	lt
 800fd96:	2400      	movlt	r4, #0
 800fd98:	2318      	movge	r3, #24
 800fd9a:	fb94 f4f3 	sdivge	r4, r4, r3
 800fd9e:	f06f 0317 	mvn.w	r3, #23
 800fda2:	fb04 3303 	mla	r3, r4, r3, r3
 800fda6:	eb03 0a02 	add.w	sl, r3, r2
 800fdaa:	9b02      	ldr	r3, [sp, #8]
 800fdac:	9a06      	ldr	r2, [sp, #24]
 800fdae:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8010080 <__kernel_rem_pio2+0x318>
 800fdb2:	eb03 0802 	add.w	r8, r3, r2
 800fdb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fdb8:	1aa7      	subs	r7, r4, r2
 800fdba:	ae22      	add	r6, sp, #136	; 0x88
 800fdbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fdc0:	2500      	movs	r5, #0
 800fdc2:	4545      	cmp	r5, r8
 800fdc4:	dd13      	ble.n	800fdee <__kernel_rem_pio2+0x86>
 800fdc6:	9b08      	ldr	r3, [sp, #32]
 800fdc8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8010080 <__kernel_rem_pio2+0x318>
 800fdcc:	aa22      	add	r2, sp, #136	; 0x88
 800fdce:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fdd2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fdd6:	f04f 0800 	mov.w	r8, #0
 800fdda:	9b02      	ldr	r3, [sp, #8]
 800fddc:	4598      	cmp	r8, r3
 800fdde:	dc2f      	bgt.n	800fe40 <__kernel_rem_pio2+0xd8>
 800fde0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fde4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800fde8:	462f      	mov	r7, r5
 800fdea:	2600      	movs	r6, #0
 800fdec:	e01b      	b.n	800fe26 <__kernel_rem_pio2+0xbe>
 800fdee:	42ef      	cmn	r7, r5
 800fdf0:	d407      	bmi.n	800fe02 <__kernel_rem_pio2+0x9a>
 800fdf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fdf6:	f7f0 fd25 	bl	8000844 <__aeabi_i2d>
 800fdfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fdfe:	3501      	adds	r5, #1
 800fe00:	e7df      	b.n	800fdc2 <__kernel_rem_pio2+0x5a>
 800fe02:	ec51 0b18 	vmov	r0, r1, d8
 800fe06:	e7f8      	b.n	800fdfa <__kernel_rem_pio2+0x92>
 800fe08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fe0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fe10:	f7f0 fd82 	bl	8000918 <__aeabi_dmul>
 800fe14:	4602      	mov	r2, r0
 800fe16:	460b      	mov	r3, r1
 800fe18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe1c:	f7f0 fbc6 	bl	80005ac <__adddf3>
 800fe20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe24:	3601      	adds	r6, #1
 800fe26:	9b06      	ldr	r3, [sp, #24]
 800fe28:	429e      	cmp	r6, r3
 800fe2a:	f1a7 0708 	sub.w	r7, r7, #8
 800fe2e:	ddeb      	ble.n	800fe08 <__kernel_rem_pio2+0xa0>
 800fe30:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fe34:	f108 0801 	add.w	r8, r8, #1
 800fe38:	ecab 7b02 	vstmia	fp!, {d7}
 800fe3c:	3508      	adds	r5, #8
 800fe3e:	e7cc      	b.n	800fdda <__kernel_rem_pio2+0x72>
 800fe40:	9b02      	ldr	r3, [sp, #8]
 800fe42:	aa0e      	add	r2, sp, #56	; 0x38
 800fe44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe48:	930d      	str	r3, [sp, #52]	; 0x34
 800fe4a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fe4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fe50:	9c02      	ldr	r4, [sp, #8]
 800fe52:	930c      	str	r3, [sp, #48]	; 0x30
 800fe54:	00e3      	lsls	r3, r4, #3
 800fe56:	930a      	str	r3, [sp, #40]	; 0x28
 800fe58:	ab9a      	add	r3, sp, #616	; 0x268
 800fe5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fe5e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fe62:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fe66:	ab72      	add	r3, sp, #456	; 0x1c8
 800fe68:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fe6c:	46c3      	mov	fp, r8
 800fe6e:	46a1      	mov	r9, r4
 800fe70:	f1b9 0f00 	cmp.w	r9, #0
 800fe74:	f1a5 0508 	sub.w	r5, r5, #8
 800fe78:	dc77      	bgt.n	800ff6a <__kernel_rem_pio2+0x202>
 800fe7a:	ec47 6b10 	vmov	d0, r6, r7
 800fe7e:	4650      	mov	r0, sl
 800fe80:	f000 fdae 	bl	80109e0 <scalbn>
 800fe84:	ec57 6b10 	vmov	r6, r7, d0
 800fe88:	2200      	movs	r2, #0
 800fe8a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fe8e:	ee10 0a10 	vmov	r0, s0
 800fe92:	4639      	mov	r1, r7
 800fe94:	f7f0 fd40 	bl	8000918 <__aeabi_dmul>
 800fe98:	ec41 0b10 	vmov	d0, r0, r1
 800fe9c:	f000 fd20 	bl	80108e0 <floor>
 800fea0:	4b7c      	ldr	r3, [pc, #496]	; (8010094 <__kernel_rem_pio2+0x32c>)
 800fea2:	ec51 0b10 	vmov	r0, r1, d0
 800fea6:	2200      	movs	r2, #0
 800fea8:	f7f0 fd36 	bl	8000918 <__aeabi_dmul>
 800feac:	4602      	mov	r2, r0
 800feae:	460b      	mov	r3, r1
 800feb0:	4630      	mov	r0, r6
 800feb2:	4639      	mov	r1, r7
 800feb4:	f7f0 fb78 	bl	80005a8 <__aeabi_dsub>
 800feb8:	460f      	mov	r7, r1
 800feba:	4606      	mov	r6, r0
 800febc:	f7f0 ffc6 	bl	8000e4c <__aeabi_d2iz>
 800fec0:	9004      	str	r0, [sp, #16]
 800fec2:	f7f0 fcbf 	bl	8000844 <__aeabi_i2d>
 800fec6:	4602      	mov	r2, r0
 800fec8:	460b      	mov	r3, r1
 800feca:	4630      	mov	r0, r6
 800fecc:	4639      	mov	r1, r7
 800fece:	f7f0 fb6b 	bl	80005a8 <__aeabi_dsub>
 800fed2:	f1ba 0f00 	cmp.w	sl, #0
 800fed6:	4606      	mov	r6, r0
 800fed8:	460f      	mov	r7, r1
 800feda:	dd6d      	ble.n	800ffb8 <__kernel_rem_pio2+0x250>
 800fedc:	1e62      	subs	r2, r4, #1
 800fede:	ab0e      	add	r3, sp, #56	; 0x38
 800fee0:	9d04      	ldr	r5, [sp, #16]
 800fee2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fee6:	f1ca 0118 	rsb	r1, sl, #24
 800feea:	fa40 f301 	asr.w	r3, r0, r1
 800feee:	441d      	add	r5, r3
 800fef0:	408b      	lsls	r3, r1
 800fef2:	1ac0      	subs	r0, r0, r3
 800fef4:	ab0e      	add	r3, sp, #56	; 0x38
 800fef6:	9504      	str	r5, [sp, #16]
 800fef8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fefc:	f1ca 0317 	rsb	r3, sl, #23
 800ff00:	fa40 fb03 	asr.w	fp, r0, r3
 800ff04:	f1bb 0f00 	cmp.w	fp, #0
 800ff08:	dd65      	ble.n	800ffd6 <__kernel_rem_pio2+0x26e>
 800ff0a:	9b04      	ldr	r3, [sp, #16]
 800ff0c:	2200      	movs	r2, #0
 800ff0e:	3301      	adds	r3, #1
 800ff10:	9304      	str	r3, [sp, #16]
 800ff12:	4615      	mov	r5, r2
 800ff14:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ff18:	4294      	cmp	r4, r2
 800ff1a:	f300 809c 	bgt.w	8010056 <__kernel_rem_pio2+0x2ee>
 800ff1e:	f1ba 0f00 	cmp.w	sl, #0
 800ff22:	dd07      	ble.n	800ff34 <__kernel_rem_pio2+0x1cc>
 800ff24:	f1ba 0f01 	cmp.w	sl, #1
 800ff28:	f000 80c0 	beq.w	80100ac <__kernel_rem_pio2+0x344>
 800ff2c:	f1ba 0f02 	cmp.w	sl, #2
 800ff30:	f000 80c6 	beq.w	80100c0 <__kernel_rem_pio2+0x358>
 800ff34:	f1bb 0f02 	cmp.w	fp, #2
 800ff38:	d14d      	bne.n	800ffd6 <__kernel_rem_pio2+0x26e>
 800ff3a:	4632      	mov	r2, r6
 800ff3c:	463b      	mov	r3, r7
 800ff3e:	4956      	ldr	r1, [pc, #344]	; (8010098 <__kernel_rem_pio2+0x330>)
 800ff40:	2000      	movs	r0, #0
 800ff42:	f7f0 fb31 	bl	80005a8 <__aeabi_dsub>
 800ff46:	4606      	mov	r6, r0
 800ff48:	460f      	mov	r7, r1
 800ff4a:	2d00      	cmp	r5, #0
 800ff4c:	d043      	beq.n	800ffd6 <__kernel_rem_pio2+0x26e>
 800ff4e:	4650      	mov	r0, sl
 800ff50:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8010088 <__kernel_rem_pio2+0x320>
 800ff54:	f000 fd44 	bl	80109e0 <scalbn>
 800ff58:	4630      	mov	r0, r6
 800ff5a:	4639      	mov	r1, r7
 800ff5c:	ec53 2b10 	vmov	r2, r3, d0
 800ff60:	f7f0 fb22 	bl	80005a8 <__aeabi_dsub>
 800ff64:	4606      	mov	r6, r0
 800ff66:	460f      	mov	r7, r1
 800ff68:	e035      	b.n	800ffd6 <__kernel_rem_pio2+0x26e>
 800ff6a:	4b4c      	ldr	r3, [pc, #304]	; (801009c <__kernel_rem_pio2+0x334>)
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	4630      	mov	r0, r6
 800ff70:	4639      	mov	r1, r7
 800ff72:	f7f0 fcd1 	bl	8000918 <__aeabi_dmul>
 800ff76:	f7f0 ff69 	bl	8000e4c <__aeabi_d2iz>
 800ff7a:	f7f0 fc63 	bl	8000844 <__aeabi_i2d>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	460b      	mov	r3, r1
 800ff82:	ec43 2b18 	vmov	d8, r2, r3
 800ff86:	4b46      	ldr	r3, [pc, #280]	; (80100a0 <__kernel_rem_pio2+0x338>)
 800ff88:	2200      	movs	r2, #0
 800ff8a:	f7f0 fcc5 	bl	8000918 <__aeabi_dmul>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	4630      	mov	r0, r6
 800ff94:	4639      	mov	r1, r7
 800ff96:	f7f0 fb07 	bl	80005a8 <__aeabi_dsub>
 800ff9a:	f7f0 ff57 	bl	8000e4c <__aeabi_d2iz>
 800ff9e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ffa2:	f84b 0b04 	str.w	r0, [fp], #4
 800ffa6:	ec51 0b18 	vmov	r0, r1, d8
 800ffaa:	f7f0 faff 	bl	80005ac <__adddf3>
 800ffae:	f109 39ff 	add.w	r9, r9, #4294967295
 800ffb2:	4606      	mov	r6, r0
 800ffb4:	460f      	mov	r7, r1
 800ffb6:	e75b      	b.n	800fe70 <__kernel_rem_pio2+0x108>
 800ffb8:	d106      	bne.n	800ffc8 <__kernel_rem_pio2+0x260>
 800ffba:	1e63      	subs	r3, r4, #1
 800ffbc:	aa0e      	add	r2, sp, #56	; 0x38
 800ffbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ffc2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800ffc6:	e79d      	b.n	800ff04 <__kernel_rem_pio2+0x19c>
 800ffc8:	4b36      	ldr	r3, [pc, #216]	; (80100a4 <__kernel_rem_pio2+0x33c>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f7f0 ff2a 	bl	8000e24 <__aeabi_dcmpge>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d13d      	bne.n	8010050 <__kernel_rem_pio2+0x2e8>
 800ffd4:	4683      	mov	fp, r0
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	2300      	movs	r3, #0
 800ffda:	4630      	mov	r0, r6
 800ffdc:	4639      	mov	r1, r7
 800ffde:	f7f0 ff03 	bl	8000de8 <__aeabi_dcmpeq>
 800ffe2:	2800      	cmp	r0, #0
 800ffe4:	f000 80c0 	beq.w	8010168 <__kernel_rem_pio2+0x400>
 800ffe8:	1e65      	subs	r5, r4, #1
 800ffea:	462b      	mov	r3, r5
 800ffec:	2200      	movs	r2, #0
 800ffee:	9902      	ldr	r1, [sp, #8]
 800fff0:	428b      	cmp	r3, r1
 800fff2:	da6c      	bge.n	80100ce <__kernel_rem_pio2+0x366>
 800fff4:	2a00      	cmp	r2, #0
 800fff6:	f000 8089 	beq.w	801010c <__kernel_rem_pio2+0x3a4>
 800fffa:	ab0e      	add	r3, sp, #56	; 0x38
 800fffc:	f1aa 0a18 	sub.w	sl, sl, #24
 8010000:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010004:	2b00      	cmp	r3, #0
 8010006:	f000 80ad 	beq.w	8010164 <__kernel_rem_pio2+0x3fc>
 801000a:	4650      	mov	r0, sl
 801000c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8010088 <__kernel_rem_pio2+0x320>
 8010010:	f000 fce6 	bl	80109e0 <scalbn>
 8010014:	ab9a      	add	r3, sp, #616	; 0x268
 8010016:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801001a:	ec57 6b10 	vmov	r6, r7, d0
 801001e:	00ec      	lsls	r4, r5, #3
 8010020:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8010024:	46aa      	mov	sl, r5
 8010026:	f1ba 0f00 	cmp.w	sl, #0
 801002a:	f280 80d6 	bge.w	80101da <__kernel_rem_pio2+0x472>
 801002e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8010080 <__kernel_rem_pio2+0x318>
 8010032:	462e      	mov	r6, r5
 8010034:	2e00      	cmp	r6, #0
 8010036:	f2c0 8104 	blt.w	8010242 <__kernel_rem_pio2+0x4da>
 801003a:	ab72      	add	r3, sp, #456	; 0x1c8
 801003c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8010040:	f8df a064 	ldr.w	sl, [pc, #100]	; 80100a8 <__kernel_rem_pio2+0x340>
 8010044:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8010048:	f04f 0800 	mov.w	r8, #0
 801004c:	1baf      	subs	r7, r5, r6
 801004e:	e0ea      	b.n	8010226 <__kernel_rem_pio2+0x4be>
 8010050:	f04f 0b02 	mov.w	fp, #2
 8010054:	e759      	b.n	800ff0a <__kernel_rem_pio2+0x1a2>
 8010056:	f8d8 3000 	ldr.w	r3, [r8]
 801005a:	b955      	cbnz	r5, 8010072 <__kernel_rem_pio2+0x30a>
 801005c:	b123      	cbz	r3, 8010068 <__kernel_rem_pio2+0x300>
 801005e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010062:	f8c8 3000 	str.w	r3, [r8]
 8010066:	2301      	movs	r3, #1
 8010068:	3201      	adds	r2, #1
 801006a:	f108 0804 	add.w	r8, r8, #4
 801006e:	461d      	mov	r5, r3
 8010070:	e752      	b.n	800ff18 <__kernel_rem_pio2+0x1b0>
 8010072:	1acb      	subs	r3, r1, r3
 8010074:	f8c8 3000 	str.w	r3, [r8]
 8010078:	462b      	mov	r3, r5
 801007a:	e7f5      	b.n	8010068 <__kernel_rem_pio2+0x300>
 801007c:	f3af 8000 	nop.w
	...
 801008c:	3ff00000 	.word	0x3ff00000
 8010090:	08011308 	.word	0x08011308
 8010094:	40200000 	.word	0x40200000
 8010098:	3ff00000 	.word	0x3ff00000
 801009c:	3e700000 	.word	0x3e700000
 80100a0:	41700000 	.word	0x41700000
 80100a4:	3fe00000 	.word	0x3fe00000
 80100a8:	080112c8 	.word	0x080112c8
 80100ac:	1e62      	subs	r2, r4, #1
 80100ae:	ab0e      	add	r3, sp, #56	; 0x38
 80100b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80100b8:	a90e      	add	r1, sp, #56	; 0x38
 80100ba:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80100be:	e739      	b.n	800ff34 <__kernel_rem_pio2+0x1cc>
 80100c0:	1e62      	subs	r2, r4, #1
 80100c2:	ab0e      	add	r3, sp, #56	; 0x38
 80100c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80100cc:	e7f4      	b.n	80100b8 <__kernel_rem_pio2+0x350>
 80100ce:	a90e      	add	r1, sp, #56	; 0x38
 80100d0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80100d4:	3b01      	subs	r3, #1
 80100d6:	430a      	orrs	r2, r1
 80100d8:	e789      	b.n	800ffee <__kernel_rem_pio2+0x286>
 80100da:	3301      	adds	r3, #1
 80100dc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80100e0:	2900      	cmp	r1, #0
 80100e2:	d0fa      	beq.n	80100da <__kernel_rem_pio2+0x372>
 80100e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80100e6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80100ea:	446a      	add	r2, sp
 80100ec:	3a98      	subs	r2, #152	; 0x98
 80100ee:	920a      	str	r2, [sp, #40]	; 0x28
 80100f0:	9a08      	ldr	r2, [sp, #32]
 80100f2:	18e3      	adds	r3, r4, r3
 80100f4:	18a5      	adds	r5, r4, r2
 80100f6:	aa22      	add	r2, sp, #136	; 0x88
 80100f8:	f104 0801 	add.w	r8, r4, #1
 80100fc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8010100:	9304      	str	r3, [sp, #16]
 8010102:	9b04      	ldr	r3, [sp, #16]
 8010104:	4543      	cmp	r3, r8
 8010106:	da04      	bge.n	8010112 <__kernel_rem_pio2+0x3aa>
 8010108:	461c      	mov	r4, r3
 801010a:	e6a3      	b.n	800fe54 <__kernel_rem_pio2+0xec>
 801010c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801010e:	2301      	movs	r3, #1
 8010110:	e7e4      	b.n	80100dc <__kernel_rem_pio2+0x374>
 8010112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010114:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010118:	f7f0 fb94 	bl	8000844 <__aeabi_i2d>
 801011c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010120:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010122:	46ab      	mov	fp, r5
 8010124:	461c      	mov	r4, r3
 8010126:	f04f 0900 	mov.w	r9, #0
 801012a:	2600      	movs	r6, #0
 801012c:	2700      	movs	r7, #0
 801012e:	9b06      	ldr	r3, [sp, #24]
 8010130:	4599      	cmp	r9, r3
 8010132:	dd06      	ble.n	8010142 <__kernel_rem_pio2+0x3da>
 8010134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010136:	e8e3 6702 	strd	r6, r7, [r3], #8
 801013a:	f108 0801 	add.w	r8, r8, #1
 801013e:	930a      	str	r3, [sp, #40]	; 0x28
 8010140:	e7df      	b.n	8010102 <__kernel_rem_pio2+0x39a>
 8010142:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010146:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801014a:	f7f0 fbe5 	bl	8000918 <__aeabi_dmul>
 801014e:	4602      	mov	r2, r0
 8010150:	460b      	mov	r3, r1
 8010152:	4630      	mov	r0, r6
 8010154:	4639      	mov	r1, r7
 8010156:	f7f0 fa29 	bl	80005ac <__adddf3>
 801015a:	f109 0901 	add.w	r9, r9, #1
 801015e:	4606      	mov	r6, r0
 8010160:	460f      	mov	r7, r1
 8010162:	e7e4      	b.n	801012e <__kernel_rem_pio2+0x3c6>
 8010164:	3d01      	subs	r5, #1
 8010166:	e748      	b.n	800fffa <__kernel_rem_pio2+0x292>
 8010168:	ec47 6b10 	vmov	d0, r6, r7
 801016c:	f1ca 0000 	rsb	r0, sl, #0
 8010170:	f000 fc36 	bl	80109e0 <scalbn>
 8010174:	ec57 6b10 	vmov	r6, r7, d0
 8010178:	4ba0      	ldr	r3, [pc, #640]	; (80103fc <__kernel_rem_pio2+0x694>)
 801017a:	ee10 0a10 	vmov	r0, s0
 801017e:	2200      	movs	r2, #0
 8010180:	4639      	mov	r1, r7
 8010182:	f7f0 fe4f 	bl	8000e24 <__aeabi_dcmpge>
 8010186:	b1f8      	cbz	r0, 80101c8 <__kernel_rem_pio2+0x460>
 8010188:	4b9d      	ldr	r3, [pc, #628]	; (8010400 <__kernel_rem_pio2+0x698>)
 801018a:	2200      	movs	r2, #0
 801018c:	4630      	mov	r0, r6
 801018e:	4639      	mov	r1, r7
 8010190:	f7f0 fbc2 	bl	8000918 <__aeabi_dmul>
 8010194:	f7f0 fe5a 	bl	8000e4c <__aeabi_d2iz>
 8010198:	4680      	mov	r8, r0
 801019a:	f7f0 fb53 	bl	8000844 <__aeabi_i2d>
 801019e:	4b97      	ldr	r3, [pc, #604]	; (80103fc <__kernel_rem_pio2+0x694>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	f7f0 fbb9 	bl	8000918 <__aeabi_dmul>
 80101a6:	460b      	mov	r3, r1
 80101a8:	4602      	mov	r2, r0
 80101aa:	4639      	mov	r1, r7
 80101ac:	4630      	mov	r0, r6
 80101ae:	f7f0 f9fb 	bl	80005a8 <__aeabi_dsub>
 80101b2:	f7f0 fe4b 	bl	8000e4c <__aeabi_d2iz>
 80101b6:	1c65      	adds	r5, r4, #1
 80101b8:	ab0e      	add	r3, sp, #56	; 0x38
 80101ba:	f10a 0a18 	add.w	sl, sl, #24
 80101be:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80101c2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80101c6:	e720      	b.n	801000a <__kernel_rem_pio2+0x2a2>
 80101c8:	4630      	mov	r0, r6
 80101ca:	4639      	mov	r1, r7
 80101cc:	f7f0 fe3e 	bl	8000e4c <__aeabi_d2iz>
 80101d0:	ab0e      	add	r3, sp, #56	; 0x38
 80101d2:	4625      	mov	r5, r4
 80101d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80101d8:	e717      	b.n	801000a <__kernel_rem_pio2+0x2a2>
 80101da:	ab0e      	add	r3, sp, #56	; 0x38
 80101dc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80101e0:	f7f0 fb30 	bl	8000844 <__aeabi_i2d>
 80101e4:	4632      	mov	r2, r6
 80101e6:	463b      	mov	r3, r7
 80101e8:	f7f0 fb96 	bl	8000918 <__aeabi_dmul>
 80101ec:	4b84      	ldr	r3, [pc, #528]	; (8010400 <__kernel_rem_pio2+0x698>)
 80101ee:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80101f2:	2200      	movs	r2, #0
 80101f4:	4630      	mov	r0, r6
 80101f6:	4639      	mov	r1, r7
 80101f8:	f7f0 fb8e 	bl	8000918 <__aeabi_dmul>
 80101fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010200:	4606      	mov	r6, r0
 8010202:	460f      	mov	r7, r1
 8010204:	e70f      	b.n	8010026 <__kernel_rem_pio2+0x2be>
 8010206:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801020a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801020e:	f7f0 fb83 	bl	8000918 <__aeabi_dmul>
 8010212:	4602      	mov	r2, r0
 8010214:	460b      	mov	r3, r1
 8010216:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801021a:	f7f0 f9c7 	bl	80005ac <__adddf3>
 801021e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010222:	f108 0801 	add.w	r8, r8, #1
 8010226:	9b02      	ldr	r3, [sp, #8]
 8010228:	4598      	cmp	r8, r3
 801022a:	dc01      	bgt.n	8010230 <__kernel_rem_pio2+0x4c8>
 801022c:	45b8      	cmp	r8, r7
 801022e:	ddea      	ble.n	8010206 <__kernel_rem_pio2+0x49e>
 8010230:	ed9d 7b06 	vldr	d7, [sp, #24]
 8010234:	ab4a      	add	r3, sp, #296	; 0x128
 8010236:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801023a:	ed87 7b00 	vstr	d7, [r7]
 801023e:	3e01      	subs	r6, #1
 8010240:	e6f8      	b.n	8010034 <__kernel_rem_pio2+0x2cc>
 8010242:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010244:	2b02      	cmp	r3, #2
 8010246:	dc0b      	bgt.n	8010260 <__kernel_rem_pio2+0x4f8>
 8010248:	2b00      	cmp	r3, #0
 801024a:	dc35      	bgt.n	80102b8 <__kernel_rem_pio2+0x550>
 801024c:	d059      	beq.n	8010302 <__kernel_rem_pio2+0x59a>
 801024e:	9b04      	ldr	r3, [sp, #16]
 8010250:	f003 0007 	and.w	r0, r3, #7
 8010254:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010258:	ecbd 8b02 	vpop	{d8}
 801025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010260:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8010262:	2b03      	cmp	r3, #3
 8010264:	d1f3      	bne.n	801024e <__kernel_rem_pio2+0x4e6>
 8010266:	ab4a      	add	r3, sp, #296	; 0x128
 8010268:	4423      	add	r3, r4
 801026a:	9306      	str	r3, [sp, #24]
 801026c:	461c      	mov	r4, r3
 801026e:	469a      	mov	sl, r3
 8010270:	9502      	str	r5, [sp, #8]
 8010272:	9b02      	ldr	r3, [sp, #8]
 8010274:	2b00      	cmp	r3, #0
 8010276:	f1aa 0a08 	sub.w	sl, sl, #8
 801027a:	dc6b      	bgt.n	8010354 <__kernel_rem_pio2+0x5ec>
 801027c:	46aa      	mov	sl, r5
 801027e:	f1ba 0f01 	cmp.w	sl, #1
 8010282:	f1a4 0408 	sub.w	r4, r4, #8
 8010286:	f300 8085 	bgt.w	8010394 <__kernel_rem_pio2+0x62c>
 801028a:	9c06      	ldr	r4, [sp, #24]
 801028c:	2000      	movs	r0, #0
 801028e:	3408      	adds	r4, #8
 8010290:	2100      	movs	r1, #0
 8010292:	2d01      	cmp	r5, #1
 8010294:	f300 809d 	bgt.w	80103d2 <__kernel_rem_pio2+0x66a>
 8010298:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 801029c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80102a0:	f1bb 0f00 	cmp.w	fp, #0
 80102a4:	f040 809b 	bne.w	80103de <__kernel_rem_pio2+0x676>
 80102a8:	9b01      	ldr	r3, [sp, #4]
 80102aa:	e9c3 5600 	strd	r5, r6, [r3]
 80102ae:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80102b2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80102b6:	e7ca      	b.n	801024e <__kernel_rem_pio2+0x4e6>
 80102b8:	3408      	adds	r4, #8
 80102ba:	ab4a      	add	r3, sp, #296	; 0x128
 80102bc:	441c      	add	r4, r3
 80102be:	462e      	mov	r6, r5
 80102c0:	2000      	movs	r0, #0
 80102c2:	2100      	movs	r1, #0
 80102c4:	2e00      	cmp	r6, #0
 80102c6:	da36      	bge.n	8010336 <__kernel_rem_pio2+0x5ce>
 80102c8:	f1bb 0f00 	cmp.w	fp, #0
 80102cc:	d039      	beq.n	8010342 <__kernel_rem_pio2+0x5da>
 80102ce:	4602      	mov	r2, r0
 80102d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102d4:	9c01      	ldr	r4, [sp, #4]
 80102d6:	e9c4 2300 	strd	r2, r3, [r4]
 80102da:	4602      	mov	r2, r0
 80102dc:	460b      	mov	r3, r1
 80102de:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80102e2:	f7f0 f961 	bl	80005a8 <__aeabi_dsub>
 80102e6:	ae4c      	add	r6, sp, #304	; 0x130
 80102e8:	2401      	movs	r4, #1
 80102ea:	42a5      	cmp	r5, r4
 80102ec:	da2c      	bge.n	8010348 <__kernel_rem_pio2+0x5e0>
 80102ee:	f1bb 0f00 	cmp.w	fp, #0
 80102f2:	d002      	beq.n	80102fa <__kernel_rem_pio2+0x592>
 80102f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102f8:	4619      	mov	r1, r3
 80102fa:	9b01      	ldr	r3, [sp, #4]
 80102fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010300:	e7a5      	b.n	801024e <__kernel_rem_pio2+0x4e6>
 8010302:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8010306:	eb0d 0403 	add.w	r4, sp, r3
 801030a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801030e:	2000      	movs	r0, #0
 8010310:	2100      	movs	r1, #0
 8010312:	2d00      	cmp	r5, #0
 8010314:	da09      	bge.n	801032a <__kernel_rem_pio2+0x5c2>
 8010316:	f1bb 0f00 	cmp.w	fp, #0
 801031a:	d002      	beq.n	8010322 <__kernel_rem_pio2+0x5ba>
 801031c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010320:	4619      	mov	r1, r3
 8010322:	9b01      	ldr	r3, [sp, #4]
 8010324:	e9c3 0100 	strd	r0, r1, [r3]
 8010328:	e791      	b.n	801024e <__kernel_rem_pio2+0x4e6>
 801032a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801032e:	f7f0 f93d 	bl	80005ac <__adddf3>
 8010332:	3d01      	subs	r5, #1
 8010334:	e7ed      	b.n	8010312 <__kernel_rem_pio2+0x5aa>
 8010336:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801033a:	f7f0 f937 	bl	80005ac <__adddf3>
 801033e:	3e01      	subs	r6, #1
 8010340:	e7c0      	b.n	80102c4 <__kernel_rem_pio2+0x55c>
 8010342:	4602      	mov	r2, r0
 8010344:	460b      	mov	r3, r1
 8010346:	e7c5      	b.n	80102d4 <__kernel_rem_pio2+0x56c>
 8010348:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801034c:	f7f0 f92e 	bl	80005ac <__adddf3>
 8010350:	3401      	adds	r4, #1
 8010352:	e7ca      	b.n	80102ea <__kernel_rem_pio2+0x582>
 8010354:	e9da 8900 	ldrd	r8, r9, [sl]
 8010358:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801035c:	9b02      	ldr	r3, [sp, #8]
 801035e:	3b01      	subs	r3, #1
 8010360:	9302      	str	r3, [sp, #8]
 8010362:	4632      	mov	r2, r6
 8010364:	463b      	mov	r3, r7
 8010366:	4640      	mov	r0, r8
 8010368:	4649      	mov	r1, r9
 801036a:	f7f0 f91f 	bl	80005ac <__adddf3>
 801036e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010372:	4602      	mov	r2, r0
 8010374:	460b      	mov	r3, r1
 8010376:	4640      	mov	r0, r8
 8010378:	4649      	mov	r1, r9
 801037a:	f7f0 f915 	bl	80005a8 <__aeabi_dsub>
 801037e:	4632      	mov	r2, r6
 8010380:	463b      	mov	r3, r7
 8010382:	f7f0 f913 	bl	80005ac <__adddf3>
 8010386:	ed9d 7b08 	vldr	d7, [sp, #32]
 801038a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801038e:	ed8a 7b00 	vstr	d7, [sl]
 8010392:	e76e      	b.n	8010272 <__kernel_rem_pio2+0x50a>
 8010394:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010398:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 801039c:	4640      	mov	r0, r8
 801039e:	4632      	mov	r2, r6
 80103a0:	463b      	mov	r3, r7
 80103a2:	4649      	mov	r1, r9
 80103a4:	f7f0 f902 	bl	80005ac <__adddf3>
 80103a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	4640      	mov	r0, r8
 80103b2:	4649      	mov	r1, r9
 80103b4:	f7f0 f8f8 	bl	80005a8 <__aeabi_dsub>
 80103b8:	4632      	mov	r2, r6
 80103ba:	463b      	mov	r3, r7
 80103bc:	f7f0 f8f6 	bl	80005ac <__adddf3>
 80103c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80103c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80103c8:	ed84 7b00 	vstr	d7, [r4]
 80103cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80103d0:	e755      	b.n	801027e <__kernel_rem_pio2+0x516>
 80103d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80103d6:	f7f0 f8e9 	bl	80005ac <__adddf3>
 80103da:	3d01      	subs	r5, #1
 80103dc:	e759      	b.n	8010292 <__kernel_rem_pio2+0x52a>
 80103de:	9b01      	ldr	r3, [sp, #4]
 80103e0:	9a01      	ldr	r2, [sp, #4]
 80103e2:	601d      	str	r5, [r3, #0]
 80103e4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80103e8:	605c      	str	r4, [r3, #4]
 80103ea:	609f      	str	r7, [r3, #8]
 80103ec:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80103f0:	60d3      	str	r3, [r2, #12]
 80103f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103f6:	6110      	str	r0, [r2, #16]
 80103f8:	6153      	str	r3, [r2, #20]
 80103fa:	e728      	b.n	801024e <__kernel_rem_pio2+0x4e6>
 80103fc:	41700000 	.word	0x41700000
 8010400:	3e700000 	.word	0x3e700000
 8010404:	00000000 	.word	0x00000000

08010408 <__kernel_sin>:
 8010408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801040c:	ed2d 8b04 	vpush	{d8-d9}
 8010410:	eeb0 8a41 	vmov.f32	s16, s2
 8010414:	eef0 8a61 	vmov.f32	s17, s3
 8010418:	ec55 4b10 	vmov	r4, r5, d0
 801041c:	b083      	sub	sp, #12
 801041e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010422:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010426:	9001      	str	r0, [sp, #4]
 8010428:	da06      	bge.n	8010438 <__kernel_sin+0x30>
 801042a:	ee10 0a10 	vmov	r0, s0
 801042e:	4629      	mov	r1, r5
 8010430:	f7f0 fd0c 	bl	8000e4c <__aeabi_d2iz>
 8010434:	2800      	cmp	r0, #0
 8010436:	d051      	beq.n	80104dc <__kernel_sin+0xd4>
 8010438:	4622      	mov	r2, r4
 801043a:	462b      	mov	r3, r5
 801043c:	4620      	mov	r0, r4
 801043e:	4629      	mov	r1, r5
 8010440:	f7f0 fa6a 	bl	8000918 <__aeabi_dmul>
 8010444:	4682      	mov	sl, r0
 8010446:	468b      	mov	fp, r1
 8010448:	4602      	mov	r2, r0
 801044a:	460b      	mov	r3, r1
 801044c:	4620      	mov	r0, r4
 801044e:	4629      	mov	r1, r5
 8010450:	f7f0 fa62 	bl	8000918 <__aeabi_dmul>
 8010454:	a341      	add	r3, pc, #260	; (adr r3, 801055c <__kernel_sin+0x154>)
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	4680      	mov	r8, r0
 801045c:	4689      	mov	r9, r1
 801045e:	4650      	mov	r0, sl
 8010460:	4659      	mov	r1, fp
 8010462:	f7f0 fa59 	bl	8000918 <__aeabi_dmul>
 8010466:	a33f      	add	r3, pc, #252	; (adr r3, 8010564 <__kernel_sin+0x15c>)
 8010468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046c:	f7f0 f89c 	bl	80005a8 <__aeabi_dsub>
 8010470:	4652      	mov	r2, sl
 8010472:	465b      	mov	r3, fp
 8010474:	f7f0 fa50 	bl	8000918 <__aeabi_dmul>
 8010478:	a33c      	add	r3, pc, #240	; (adr r3, 801056c <__kernel_sin+0x164>)
 801047a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047e:	f7f0 f895 	bl	80005ac <__adddf3>
 8010482:	4652      	mov	r2, sl
 8010484:	465b      	mov	r3, fp
 8010486:	f7f0 fa47 	bl	8000918 <__aeabi_dmul>
 801048a:	a33a      	add	r3, pc, #232	; (adr r3, 8010574 <__kernel_sin+0x16c>)
 801048c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010490:	f7f0 f88a 	bl	80005a8 <__aeabi_dsub>
 8010494:	4652      	mov	r2, sl
 8010496:	465b      	mov	r3, fp
 8010498:	f7f0 fa3e 	bl	8000918 <__aeabi_dmul>
 801049c:	a337      	add	r3, pc, #220	; (adr r3, 801057c <__kernel_sin+0x174>)
 801049e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a2:	f7f0 f883 	bl	80005ac <__adddf3>
 80104a6:	9b01      	ldr	r3, [sp, #4]
 80104a8:	4606      	mov	r6, r0
 80104aa:	460f      	mov	r7, r1
 80104ac:	b9eb      	cbnz	r3, 80104ea <__kernel_sin+0xe2>
 80104ae:	4602      	mov	r2, r0
 80104b0:	460b      	mov	r3, r1
 80104b2:	4650      	mov	r0, sl
 80104b4:	4659      	mov	r1, fp
 80104b6:	f7f0 fa2f 	bl	8000918 <__aeabi_dmul>
 80104ba:	a325      	add	r3, pc, #148	; (adr r3, 8010550 <__kernel_sin+0x148>)
 80104bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c0:	f7f0 f872 	bl	80005a8 <__aeabi_dsub>
 80104c4:	4642      	mov	r2, r8
 80104c6:	464b      	mov	r3, r9
 80104c8:	f7f0 fa26 	bl	8000918 <__aeabi_dmul>
 80104cc:	4602      	mov	r2, r0
 80104ce:	460b      	mov	r3, r1
 80104d0:	4620      	mov	r0, r4
 80104d2:	4629      	mov	r1, r5
 80104d4:	f7f0 f86a 	bl	80005ac <__adddf3>
 80104d8:	4604      	mov	r4, r0
 80104da:	460d      	mov	r5, r1
 80104dc:	ec45 4b10 	vmov	d0, r4, r5
 80104e0:	b003      	add	sp, #12
 80104e2:	ecbd 8b04 	vpop	{d8-d9}
 80104e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ea:	4b1b      	ldr	r3, [pc, #108]	; (8010558 <__kernel_sin+0x150>)
 80104ec:	ec51 0b18 	vmov	r0, r1, d8
 80104f0:	2200      	movs	r2, #0
 80104f2:	f7f0 fa11 	bl	8000918 <__aeabi_dmul>
 80104f6:	4632      	mov	r2, r6
 80104f8:	ec41 0b19 	vmov	d9, r0, r1
 80104fc:	463b      	mov	r3, r7
 80104fe:	4640      	mov	r0, r8
 8010500:	4649      	mov	r1, r9
 8010502:	f7f0 fa09 	bl	8000918 <__aeabi_dmul>
 8010506:	4602      	mov	r2, r0
 8010508:	460b      	mov	r3, r1
 801050a:	ec51 0b19 	vmov	r0, r1, d9
 801050e:	f7f0 f84b 	bl	80005a8 <__aeabi_dsub>
 8010512:	4652      	mov	r2, sl
 8010514:	465b      	mov	r3, fp
 8010516:	f7f0 f9ff 	bl	8000918 <__aeabi_dmul>
 801051a:	ec53 2b18 	vmov	r2, r3, d8
 801051e:	f7f0 f843 	bl	80005a8 <__aeabi_dsub>
 8010522:	a30b      	add	r3, pc, #44	; (adr r3, 8010550 <__kernel_sin+0x148>)
 8010524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010528:	4606      	mov	r6, r0
 801052a:	460f      	mov	r7, r1
 801052c:	4640      	mov	r0, r8
 801052e:	4649      	mov	r1, r9
 8010530:	f7f0 f9f2 	bl	8000918 <__aeabi_dmul>
 8010534:	4602      	mov	r2, r0
 8010536:	460b      	mov	r3, r1
 8010538:	4630      	mov	r0, r6
 801053a:	4639      	mov	r1, r7
 801053c:	f7f0 f836 	bl	80005ac <__adddf3>
 8010540:	4602      	mov	r2, r0
 8010542:	460b      	mov	r3, r1
 8010544:	4620      	mov	r0, r4
 8010546:	4629      	mov	r1, r5
 8010548:	f7f0 f82e 	bl	80005a8 <__aeabi_dsub>
 801054c:	e7c4      	b.n	80104d8 <__kernel_sin+0xd0>
 801054e:	bf00      	nop
 8010550:	55555549 	.word	0x55555549
 8010554:	3fc55555 	.word	0x3fc55555
 8010558:	3fe00000 	.word	0x3fe00000
 801055c:	5acfd57c 	.word	0x5acfd57c
 8010560:	3de5d93a 	.word	0x3de5d93a
 8010564:	8a2b9ceb 	.word	0x8a2b9ceb
 8010568:	3e5ae5e6 	.word	0x3e5ae5e6
 801056c:	57b1fe7d 	.word	0x57b1fe7d
 8010570:	3ec71de3 	.word	0x3ec71de3
 8010574:	19c161d5 	.word	0x19c161d5
 8010578:	3f2a01a0 	.word	0x3f2a01a0
 801057c:	1110f8a6 	.word	0x1110f8a6
 8010580:	3f811111 	.word	0x3f811111
 8010584:	00000000 	.word	0x00000000

08010588 <atan>:
 8010588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801058c:	ec55 4b10 	vmov	r4, r5, d0
 8010590:	4bc3      	ldr	r3, [pc, #780]	; (80108a0 <atan+0x318>)
 8010592:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010596:	429e      	cmp	r6, r3
 8010598:	46ab      	mov	fp, r5
 801059a:	dd18      	ble.n	80105ce <atan+0x46>
 801059c:	4bc1      	ldr	r3, [pc, #772]	; (80108a4 <atan+0x31c>)
 801059e:	429e      	cmp	r6, r3
 80105a0:	dc01      	bgt.n	80105a6 <atan+0x1e>
 80105a2:	d109      	bne.n	80105b8 <atan+0x30>
 80105a4:	b144      	cbz	r4, 80105b8 <atan+0x30>
 80105a6:	4622      	mov	r2, r4
 80105a8:	462b      	mov	r3, r5
 80105aa:	4620      	mov	r0, r4
 80105ac:	4629      	mov	r1, r5
 80105ae:	f7ef fffd 	bl	80005ac <__adddf3>
 80105b2:	4604      	mov	r4, r0
 80105b4:	460d      	mov	r5, r1
 80105b6:	e006      	b.n	80105c6 <atan+0x3e>
 80105b8:	f1bb 0f00 	cmp.w	fp, #0
 80105bc:	f300 8131 	bgt.w	8010822 <atan+0x29a>
 80105c0:	a59b      	add	r5, pc, #620	; (adr r5, 8010830 <atan+0x2a8>)
 80105c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80105c6:	ec45 4b10 	vmov	d0, r4, r5
 80105ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105ce:	4bb6      	ldr	r3, [pc, #728]	; (80108a8 <atan+0x320>)
 80105d0:	429e      	cmp	r6, r3
 80105d2:	dc14      	bgt.n	80105fe <atan+0x76>
 80105d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80105d8:	429e      	cmp	r6, r3
 80105da:	dc0d      	bgt.n	80105f8 <atan+0x70>
 80105dc:	a396      	add	r3, pc, #600	; (adr r3, 8010838 <atan+0x2b0>)
 80105de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e2:	ee10 0a10 	vmov	r0, s0
 80105e6:	4629      	mov	r1, r5
 80105e8:	f7ef ffe0 	bl	80005ac <__adddf3>
 80105ec:	4baf      	ldr	r3, [pc, #700]	; (80108ac <atan+0x324>)
 80105ee:	2200      	movs	r2, #0
 80105f0:	f7f0 fc22 	bl	8000e38 <__aeabi_dcmpgt>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d1e6      	bne.n	80105c6 <atan+0x3e>
 80105f8:	f04f 3aff 	mov.w	sl, #4294967295
 80105fc:	e02b      	b.n	8010656 <atan+0xce>
 80105fe:	f000 f963 	bl	80108c8 <fabs>
 8010602:	4bab      	ldr	r3, [pc, #684]	; (80108b0 <atan+0x328>)
 8010604:	429e      	cmp	r6, r3
 8010606:	ec55 4b10 	vmov	r4, r5, d0
 801060a:	f300 80bf 	bgt.w	801078c <atan+0x204>
 801060e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8010612:	429e      	cmp	r6, r3
 8010614:	f300 80a0 	bgt.w	8010758 <atan+0x1d0>
 8010618:	ee10 2a10 	vmov	r2, s0
 801061c:	ee10 0a10 	vmov	r0, s0
 8010620:	462b      	mov	r3, r5
 8010622:	4629      	mov	r1, r5
 8010624:	f7ef ffc2 	bl	80005ac <__adddf3>
 8010628:	4ba0      	ldr	r3, [pc, #640]	; (80108ac <atan+0x324>)
 801062a:	2200      	movs	r2, #0
 801062c:	f7ef ffbc 	bl	80005a8 <__aeabi_dsub>
 8010630:	2200      	movs	r2, #0
 8010632:	4606      	mov	r6, r0
 8010634:	460f      	mov	r7, r1
 8010636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801063a:	4620      	mov	r0, r4
 801063c:	4629      	mov	r1, r5
 801063e:	f7ef ffb5 	bl	80005ac <__adddf3>
 8010642:	4602      	mov	r2, r0
 8010644:	460b      	mov	r3, r1
 8010646:	4630      	mov	r0, r6
 8010648:	4639      	mov	r1, r7
 801064a:	f7f0 fa8f 	bl	8000b6c <__aeabi_ddiv>
 801064e:	f04f 0a00 	mov.w	sl, #0
 8010652:	4604      	mov	r4, r0
 8010654:	460d      	mov	r5, r1
 8010656:	4622      	mov	r2, r4
 8010658:	462b      	mov	r3, r5
 801065a:	4620      	mov	r0, r4
 801065c:	4629      	mov	r1, r5
 801065e:	f7f0 f95b 	bl	8000918 <__aeabi_dmul>
 8010662:	4602      	mov	r2, r0
 8010664:	460b      	mov	r3, r1
 8010666:	4680      	mov	r8, r0
 8010668:	4689      	mov	r9, r1
 801066a:	f7f0 f955 	bl	8000918 <__aeabi_dmul>
 801066e:	a374      	add	r3, pc, #464	; (adr r3, 8010840 <atan+0x2b8>)
 8010670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010674:	4606      	mov	r6, r0
 8010676:	460f      	mov	r7, r1
 8010678:	f7f0 f94e 	bl	8000918 <__aeabi_dmul>
 801067c:	a372      	add	r3, pc, #456	; (adr r3, 8010848 <atan+0x2c0>)
 801067e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010682:	f7ef ff93 	bl	80005ac <__adddf3>
 8010686:	4632      	mov	r2, r6
 8010688:	463b      	mov	r3, r7
 801068a:	f7f0 f945 	bl	8000918 <__aeabi_dmul>
 801068e:	a370      	add	r3, pc, #448	; (adr r3, 8010850 <atan+0x2c8>)
 8010690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010694:	f7ef ff8a 	bl	80005ac <__adddf3>
 8010698:	4632      	mov	r2, r6
 801069a:	463b      	mov	r3, r7
 801069c:	f7f0 f93c 	bl	8000918 <__aeabi_dmul>
 80106a0:	a36d      	add	r3, pc, #436	; (adr r3, 8010858 <atan+0x2d0>)
 80106a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a6:	f7ef ff81 	bl	80005ac <__adddf3>
 80106aa:	4632      	mov	r2, r6
 80106ac:	463b      	mov	r3, r7
 80106ae:	f7f0 f933 	bl	8000918 <__aeabi_dmul>
 80106b2:	a36b      	add	r3, pc, #428	; (adr r3, 8010860 <atan+0x2d8>)
 80106b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b8:	f7ef ff78 	bl	80005ac <__adddf3>
 80106bc:	4632      	mov	r2, r6
 80106be:	463b      	mov	r3, r7
 80106c0:	f7f0 f92a 	bl	8000918 <__aeabi_dmul>
 80106c4:	a368      	add	r3, pc, #416	; (adr r3, 8010868 <atan+0x2e0>)
 80106c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ca:	f7ef ff6f 	bl	80005ac <__adddf3>
 80106ce:	4642      	mov	r2, r8
 80106d0:	464b      	mov	r3, r9
 80106d2:	f7f0 f921 	bl	8000918 <__aeabi_dmul>
 80106d6:	a366      	add	r3, pc, #408	; (adr r3, 8010870 <atan+0x2e8>)
 80106d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106dc:	4680      	mov	r8, r0
 80106de:	4689      	mov	r9, r1
 80106e0:	4630      	mov	r0, r6
 80106e2:	4639      	mov	r1, r7
 80106e4:	f7f0 f918 	bl	8000918 <__aeabi_dmul>
 80106e8:	a363      	add	r3, pc, #396	; (adr r3, 8010878 <atan+0x2f0>)
 80106ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ee:	f7ef ff5b 	bl	80005a8 <__aeabi_dsub>
 80106f2:	4632      	mov	r2, r6
 80106f4:	463b      	mov	r3, r7
 80106f6:	f7f0 f90f 	bl	8000918 <__aeabi_dmul>
 80106fa:	a361      	add	r3, pc, #388	; (adr r3, 8010880 <atan+0x2f8>)
 80106fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010700:	f7ef ff52 	bl	80005a8 <__aeabi_dsub>
 8010704:	4632      	mov	r2, r6
 8010706:	463b      	mov	r3, r7
 8010708:	f7f0 f906 	bl	8000918 <__aeabi_dmul>
 801070c:	a35e      	add	r3, pc, #376	; (adr r3, 8010888 <atan+0x300>)
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	f7ef ff49 	bl	80005a8 <__aeabi_dsub>
 8010716:	4632      	mov	r2, r6
 8010718:	463b      	mov	r3, r7
 801071a:	f7f0 f8fd 	bl	8000918 <__aeabi_dmul>
 801071e:	a35c      	add	r3, pc, #368	; (adr r3, 8010890 <atan+0x308>)
 8010720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010724:	f7ef ff40 	bl	80005a8 <__aeabi_dsub>
 8010728:	4632      	mov	r2, r6
 801072a:	463b      	mov	r3, r7
 801072c:	f7f0 f8f4 	bl	8000918 <__aeabi_dmul>
 8010730:	4602      	mov	r2, r0
 8010732:	460b      	mov	r3, r1
 8010734:	4640      	mov	r0, r8
 8010736:	4649      	mov	r1, r9
 8010738:	f7ef ff38 	bl	80005ac <__adddf3>
 801073c:	4622      	mov	r2, r4
 801073e:	462b      	mov	r3, r5
 8010740:	f7f0 f8ea 	bl	8000918 <__aeabi_dmul>
 8010744:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010748:	4602      	mov	r2, r0
 801074a:	460b      	mov	r3, r1
 801074c:	d14b      	bne.n	80107e6 <atan+0x25e>
 801074e:	4620      	mov	r0, r4
 8010750:	4629      	mov	r1, r5
 8010752:	f7ef ff29 	bl	80005a8 <__aeabi_dsub>
 8010756:	e72c      	b.n	80105b2 <atan+0x2a>
 8010758:	ee10 0a10 	vmov	r0, s0
 801075c:	4b53      	ldr	r3, [pc, #332]	; (80108ac <atan+0x324>)
 801075e:	2200      	movs	r2, #0
 8010760:	4629      	mov	r1, r5
 8010762:	f7ef ff21 	bl	80005a8 <__aeabi_dsub>
 8010766:	4b51      	ldr	r3, [pc, #324]	; (80108ac <atan+0x324>)
 8010768:	4606      	mov	r6, r0
 801076a:	460f      	mov	r7, r1
 801076c:	2200      	movs	r2, #0
 801076e:	4620      	mov	r0, r4
 8010770:	4629      	mov	r1, r5
 8010772:	f7ef ff1b 	bl	80005ac <__adddf3>
 8010776:	4602      	mov	r2, r0
 8010778:	460b      	mov	r3, r1
 801077a:	4630      	mov	r0, r6
 801077c:	4639      	mov	r1, r7
 801077e:	f7f0 f9f5 	bl	8000b6c <__aeabi_ddiv>
 8010782:	f04f 0a01 	mov.w	sl, #1
 8010786:	4604      	mov	r4, r0
 8010788:	460d      	mov	r5, r1
 801078a:	e764      	b.n	8010656 <atan+0xce>
 801078c:	4b49      	ldr	r3, [pc, #292]	; (80108b4 <atan+0x32c>)
 801078e:	429e      	cmp	r6, r3
 8010790:	da1d      	bge.n	80107ce <atan+0x246>
 8010792:	ee10 0a10 	vmov	r0, s0
 8010796:	4b48      	ldr	r3, [pc, #288]	; (80108b8 <atan+0x330>)
 8010798:	2200      	movs	r2, #0
 801079a:	4629      	mov	r1, r5
 801079c:	f7ef ff04 	bl	80005a8 <__aeabi_dsub>
 80107a0:	4b45      	ldr	r3, [pc, #276]	; (80108b8 <atan+0x330>)
 80107a2:	4606      	mov	r6, r0
 80107a4:	460f      	mov	r7, r1
 80107a6:	2200      	movs	r2, #0
 80107a8:	4620      	mov	r0, r4
 80107aa:	4629      	mov	r1, r5
 80107ac:	f7f0 f8b4 	bl	8000918 <__aeabi_dmul>
 80107b0:	4b3e      	ldr	r3, [pc, #248]	; (80108ac <atan+0x324>)
 80107b2:	2200      	movs	r2, #0
 80107b4:	f7ef fefa 	bl	80005ac <__adddf3>
 80107b8:	4602      	mov	r2, r0
 80107ba:	460b      	mov	r3, r1
 80107bc:	4630      	mov	r0, r6
 80107be:	4639      	mov	r1, r7
 80107c0:	f7f0 f9d4 	bl	8000b6c <__aeabi_ddiv>
 80107c4:	f04f 0a02 	mov.w	sl, #2
 80107c8:	4604      	mov	r4, r0
 80107ca:	460d      	mov	r5, r1
 80107cc:	e743      	b.n	8010656 <atan+0xce>
 80107ce:	462b      	mov	r3, r5
 80107d0:	ee10 2a10 	vmov	r2, s0
 80107d4:	4939      	ldr	r1, [pc, #228]	; (80108bc <atan+0x334>)
 80107d6:	2000      	movs	r0, #0
 80107d8:	f7f0 f9c8 	bl	8000b6c <__aeabi_ddiv>
 80107dc:	f04f 0a03 	mov.w	sl, #3
 80107e0:	4604      	mov	r4, r0
 80107e2:	460d      	mov	r5, r1
 80107e4:	e737      	b.n	8010656 <atan+0xce>
 80107e6:	4b36      	ldr	r3, [pc, #216]	; (80108c0 <atan+0x338>)
 80107e8:	4e36      	ldr	r6, [pc, #216]	; (80108c4 <atan+0x33c>)
 80107ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80107ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80107f2:	e9da 2300 	ldrd	r2, r3, [sl]
 80107f6:	f7ef fed7 	bl	80005a8 <__aeabi_dsub>
 80107fa:	4622      	mov	r2, r4
 80107fc:	462b      	mov	r3, r5
 80107fe:	f7ef fed3 	bl	80005a8 <__aeabi_dsub>
 8010802:	4602      	mov	r2, r0
 8010804:	460b      	mov	r3, r1
 8010806:	e9d6 0100 	ldrd	r0, r1, [r6]
 801080a:	f7ef fecd 	bl	80005a8 <__aeabi_dsub>
 801080e:	f1bb 0f00 	cmp.w	fp, #0
 8010812:	4604      	mov	r4, r0
 8010814:	460d      	mov	r5, r1
 8010816:	f6bf aed6 	bge.w	80105c6 <atan+0x3e>
 801081a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801081e:	461d      	mov	r5, r3
 8010820:	e6d1      	b.n	80105c6 <atan+0x3e>
 8010822:	a51d      	add	r5, pc, #116	; (adr r5, 8010898 <atan+0x310>)
 8010824:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010828:	e6cd      	b.n	80105c6 <atan+0x3e>
 801082a:	bf00      	nop
 801082c:	f3af 8000 	nop.w
 8010830:	54442d18 	.word	0x54442d18
 8010834:	bff921fb 	.word	0xbff921fb
 8010838:	8800759c 	.word	0x8800759c
 801083c:	7e37e43c 	.word	0x7e37e43c
 8010840:	e322da11 	.word	0xe322da11
 8010844:	3f90ad3a 	.word	0x3f90ad3a
 8010848:	24760deb 	.word	0x24760deb
 801084c:	3fa97b4b 	.word	0x3fa97b4b
 8010850:	a0d03d51 	.word	0xa0d03d51
 8010854:	3fb10d66 	.word	0x3fb10d66
 8010858:	c54c206e 	.word	0xc54c206e
 801085c:	3fb745cd 	.word	0x3fb745cd
 8010860:	920083ff 	.word	0x920083ff
 8010864:	3fc24924 	.word	0x3fc24924
 8010868:	5555550d 	.word	0x5555550d
 801086c:	3fd55555 	.word	0x3fd55555
 8010870:	2c6a6c2f 	.word	0x2c6a6c2f
 8010874:	bfa2b444 	.word	0xbfa2b444
 8010878:	52defd9a 	.word	0x52defd9a
 801087c:	3fadde2d 	.word	0x3fadde2d
 8010880:	af749a6d 	.word	0xaf749a6d
 8010884:	3fb3b0f2 	.word	0x3fb3b0f2
 8010888:	fe231671 	.word	0xfe231671
 801088c:	3fbc71c6 	.word	0x3fbc71c6
 8010890:	9998ebc4 	.word	0x9998ebc4
 8010894:	3fc99999 	.word	0x3fc99999
 8010898:	54442d18 	.word	0x54442d18
 801089c:	3ff921fb 	.word	0x3ff921fb
 80108a0:	440fffff 	.word	0x440fffff
 80108a4:	7ff00000 	.word	0x7ff00000
 80108a8:	3fdbffff 	.word	0x3fdbffff
 80108ac:	3ff00000 	.word	0x3ff00000
 80108b0:	3ff2ffff 	.word	0x3ff2ffff
 80108b4:	40038000 	.word	0x40038000
 80108b8:	3ff80000 	.word	0x3ff80000
 80108bc:	bff00000 	.word	0xbff00000
 80108c0:	08011338 	.word	0x08011338
 80108c4:	08011318 	.word	0x08011318

080108c8 <fabs>:
 80108c8:	ec51 0b10 	vmov	r0, r1, d0
 80108cc:	ee10 2a10 	vmov	r2, s0
 80108d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80108d4:	ec43 2b10 	vmov	d0, r2, r3
 80108d8:	4770      	bx	lr
 80108da:	0000      	movs	r0, r0
 80108dc:	0000      	movs	r0, r0
	...

080108e0 <floor>:
 80108e0:	ec51 0b10 	vmov	r0, r1, d0
 80108e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80108ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80108f0:	2e13      	cmp	r6, #19
 80108f2:	ee10 5a10 	vmov	r5, s0
 80108f6:	ee10 8a10 	vmov	r8, s0
 80108fa:	460c      	mov	r4, r1
 80108fc:	dc32      	bgt.n	8010964 <floor+0x84>
 80108fe:	2e00      	cmp	r6, #0
 8010900:	da14      	bge.n	801092c <floor+0x4c>
 8010902:	a333      	add	r3, pc, #204	; (adr r3, 80109d0 <floor+0xf0>)
 8010904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010908:	f7ef fe50 	bl	80005ac <__adddf3>
 801090c:	2200      	movs	r2, #0
 801090e:	2300      	movs	r3, #0
 8010910:	f7f0 fa92 	bl	8000e38 <__aeabi_dcmpgt>
 8010914:	b138      	cbz	r0, 8010926 <floor+0x46>
 8010916:	2c00      	cmp	r4, #0
 8010918:	da57      	bge.n	80109ca <floor+0xea>
 801091a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801091e:	431d      	orrs	r5, r3
 8010920:	d001      	beq.n	8010926 <floor+0x46>
 8010922:	4c2d      	ldr	r4, [pc, #180]	; (80109d8 <floor+0xf8>)
 8010924:	2500      	movs	r5, #0
 8010926:	4621      	mov	r1, r4
 8010928:	4628      	mov	r0, r5
 801092a:	e025      	b.n	8010978 <floor+0x98>
 801092c:	4f2b      	ldr	r7, [pc, #172]	; (80109dc <floor+0xfc>)
 801092e:	4137      	asrs	r7, r6
 8010930:	ea01 0307 	and.w	r3, r1, r7
 8010934:	4303      	orrs	r3, r0
 8010936:	d01f      	beq.n	8010978 <floor+0x98>
 8010938:	a325      	add	r3, pc, #148	; (adr r3, 80109d0 <floor+0xf0>)
 801093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093e:	f7ef fe35 	bl	80005ac <__adddf3>
 8010942:	2200      	movs	r2, #0
 8010944:	2300      	movs	r3, #0
 8010946:	f7f0 fa77 	bl	8000e38 <__aeabi_dcmpgt>
 801094a:	2800      	cmp	r0, #0
 801094c:	d0eb      	beq.n	8010926 <floor+0x46>
 801094e:	2c00      	cmp	r4, #0
 8010950:	bfbe      	ittt	lt
 8010952:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010956:	fa43 f606 	asrlt.w	r6, r3, r6
 801095a:	19a4      	addlt	r4, r4, r6
 801095c:	ea24 0407 	bic.w	r4, r4, r7
 8010960:	2500      	movs	r5, #0
 8010962:	e7e0      	b.n	8010926 <floor+0x46>
 8010964:	2e33      	cmp	r6, #51	; 0x33
 8010966:	dd0b      	ble.n	8010980 <floor+0xa0>
 8010968:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801096c:	d104      	bne.n	8010978 <floor+0x98>
 801096e:	ee10 2a10 	vmov	r2, s0
 8010972:	460b      	mov	r3, r1
 8010974:	f7ef fe1a 	bl	80005ac <__adddf3>
 8010978:	ec41 0b10 	vmov	d0, r0, r1
 801097c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010980:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010984:	f04f 33ff 	mov.w	r3, #4294967295
 8010988:	fa23 f707 	lsr.w	r7, r3, r7
 801098c:	4207      	tst	r7, r0
 801098e:	d0f3      	beq.n	8010978 <floor+0x98>
 8010990:	a30f      	add	r3, pc, #60	; (adr r3, 80109d0 <floor+0xf0>)
 8010992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010996:	f7ef fe09 	bl	80005ac <__adddf3>
 801099a:	2200      	movs	r2, #0
 801099c:	2300      	movs	r3, #0
 801099e:	f7f0 fa4b 	bl	8000e38 <__aeabi_dcmpgt>
 80109a2:	2800      	cmp	r0, #0
 80109a4:	d0bf      	beq.n	8010926 <floor+0x46>
 80109a6:	2c00      	cmp	r4, #0
 80109a8:	da02      	bge.n	80109b0 <floor+0xd0>
 80109aa:	2e14      	cmp	r6, #20
 80109ac:	d103      	bne.n	80109b6 <floor+0xd6>
 80109ae:	3401      	adds	r4, #1
 80109b0:	ea25 0507 	bic.w	r5, r5, r7
 80109b4:	e7b7      	b.n	8010926 <floor+0x46>
 80109b6:	2301      	movs	r3, #1
 80109b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80109bc:	fa03 f606 	lsl.w	r6, r3, r6
 80109c0:	4435      	add	r5, r6
 80109c2:	4545      	cmp	r5, r8
 80109c4:	bf38      	it	cc
 80109c6:	18e4      	addcc	r4, r4, r3
 80109c8:	e7f2      	b.n	80109b0 <floor+0xd0>
 80109ca:	2500      	movs	r5, #0
 80109cc:	462c      	mov	r4, r5
 80109ce:	e7aa      	b.n	8010926 <floor+0x46>
 80109d0:	8800759c 	.word	0x8800759c
 80109d4:	7e37e43c 	.word	0x7e37e43c
 80109d8:	bff00000 	.word	0xbff00000
 80109dc:	000fffff 	.word	0x000fffff

080109e0 <scalbn>:
 80109e0:	b570      	push	{r4, r5, r6, lr}
 80109e2:	ec55 4b10 	vmov	r4, r5, d0
 80109e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80109ea:	4606      	mov	r6, r0
 80109ec:	462b      	mov	r3, r5
 80109ee:	b99a      	cbnz	r2, 8010a18 <scalbn+0x38>
 80109f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80109f4:	4323      	orrs	r3, r4
 80109f6:	d036      	beq.n	8010a66 <scalbn+0x86>
 80109f8:	4b39      	ldr	r3, [pc, #228]	; (8010ae0 <scalbn+0x100>)
 80109fa:	4629      	mov	r1, r5
 80109fc:	ee10 0a10 	vmov	r0, s0
 8010a00:	2200      	movs	r2, #0
 8010a02:	f7ef ff89 	bl	8000918 <__aeabi_dmul>
 8010a06:	4b37      	ldr	r3, [pc, #220]	; (8010ae4 <scalbn+0x104>)
 8010a08:	429e      	cmp	r6, r3
 8010a0a:	4604      	mov	r4, r0
 8010a0c:	460d      	mov	r5, r1
 8010a0e:	da10      	bge.n	8010a32 <scalbn+0x52>
 8010a10:	a32b      	add	r3, pc, #172	; (adr r3, 8010ac0 <scalbn+0xe0>)
 8010a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a16:	e03a      	b.n	8010a8e <scalbn+0xae>
 8010a18:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010a1c:	428a      	cmp	r2, r1
 8010a1e:	d10c      	bne.n	8010a3a <scalbn+0x5a>
 8010a20:	ee10 2a10 	vmov	r2, s0
 8010a24:	4620      	mov	r0, r4
 8010a26:	4629      	mov	r1, r5
 8010a28:	f7ef fdc0 	bl	80005ac <__adddf3>
 8010a2c:	4604      	mov	r4, r0
 8010a2e:	460d      	mov	r5, r1
 8010a30:	e019      	b.n	8010a66 <scalbn+0x86>
 8010a32:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010a36:	460b      	mov	r3, r1
 8010a38:	3a36      	subs	r2, #54	; 0x36
 8010a3a:	4432      	add	r2, r6
 8010a3c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010a40:	428a      	cmp	r2, r1
 8010a42:	dd08      	ble.n	8010a56 <scalbn+0x76>
 8010a44:	2d00      	cmp	r5, #0
 8010a46:	a120      	add	r1, pc, #128	; (adr r1, 8010ac8 <scalbn+0xe8>)
 8010a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a4c:	da1c      	bge.n	8010a88 <scalbn+0xa8>
 8010a4e:	a120      	add	r1, pc, #128	; (adr r1, 8010ad0 <scalbn+0xf0>)
 8010a50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a54:	e018      	b.n	8010a88 <scalbn+0xa8>
 8010a56:	2a00      	cmp	r2, #0
 8010a58:	dd08      	ble.n	8010a6c <scalbn+0x8c>
 8010a5a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010a5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010a62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010a66:	ec45 4b10 	vmov	d0, r4, r5
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}
 8010a6c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010a70:	da19      	bge.n	8010aa6 <scalbn+0xc6>
 8010a72:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010a76:	429e      	cmp	r6, r3
 8010a78:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010a7c:	dd0a      	ble.n	8010a94 <scalbn+0xb4>
 8010a7e:	a112      	add	r1, pc, #72	; (adr r1, 8010ac8 <scalbn+0xe8>)
 8010a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d1e2      	bne.n	8010a4e <scalbn+0x6e>
 8010a88:	a30f      	add	r3, pc, #60	; (adr r3, 8010ac8 <scalbn+0xe8>)
 8010a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a8e:	f7ef ff43 	bl	8000918 <__aeabi_dmul>
 8010a92:	e7cb      	b.n	8010a2c <scalbn+0x4c>
 8010a94:	a10a      	add	r1, pc, #40	; (adr r1, 8010ac0 <scalbn+0xe0>)
 8010a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d0b8      	beq.n	8010a10 <scalbn+0x30>
 8010a9e:	a10e      	add	r1, pc, #56	; (adr r1, 8010ad8 <scalbn+0xf8>)
 8010aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aa4:	e7b4      	b.n	8010a10 <scalbn+0x30>
 8010aa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010aaa:	3236      	adds	r2, #54	; 0x36
 8010aac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010ab0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	4b0c      	ldr	r3, [pc, #48]	; (8010ae8 <scalbn+0x108>)
 8010ab8:	2200      	movs	r2, #0
 8010aba:	e7e8      	b.n	8010a8e <scalbn+0xae>
 8010abc:	f3af 8000 	nop.w
 8010ac0:	c2f8f359 	.word	0xc2f8f359
 8010ac4:	01a56e1f 	.word	0x01a56e1f
 8010ac8:	8800759c 	.word	0x8800759c
 8010acc:	7e37e43c 	.word	0x7e37e43c
 8010ad0:	8800759c 	.word	0x8800759c
 8010ad4:	fe37e43c 	.word	0xfe37e43c
 8010ad8:	c2f8f359 	.word	0xc2f8f359
 8010adc:	81a56e1f 	.word	0x81a56e1f
 8010ae0:	43500000 	.word	0x43500000
 8010ae4:	ffff3cb0 	.word	0xffff3cb0
 8010ae8:	3c900000 	.word	0x3c900000

08010aec <_init>:
 8010aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aee:	bf00      	nop
 8010af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010af2:	bc08      	pop	{r3}
 8010af4:	469e      	mov	lr, r3
 8010af6:	4770      	bx	lr

08010af8 <_fini>:
 8010af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010afa:	bf00      	nop
 8010afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010afe:	bc08      	pop	{r3}
 8010b00:	469e      	mov	lr, r3
 8010b02:	4770      	bx	lr
