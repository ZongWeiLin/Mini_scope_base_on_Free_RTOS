
Side_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800a060  0800a060  0001a060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2e0  0800a2e0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2e0  0800a2e0  0001a2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2e8  0800a2e8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2e8  0800a2e8  0001a2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2ec  0800a2ec  0001a2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800a2f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004900  20000088  0800a378  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004988  0800a378  00024988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f63  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b6  00000000  00000000  0003701b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  0003a5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b4e  00000000  00000000  0003cc40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018293  00000000  00000000  0006278e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7b11  00000000  00000000  0007aa21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a58  00000000  00000000  00162584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a044 	.word	0x0800a044

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800a044 	.word	0x0800a044

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b974 	b.w	8000eec <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	4604      	mov	r4, r0
 8000c24:	468e      	mov	lr, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d14d      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	d969      	bls.n	8000d04 <__udivmoddi4+0xe8>
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b152      	cbz	r2, 8000c4c <__udivmoddi4+0x30>
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	f1c2 0120 	rsb	r1, r2, #32
 8000c3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c46:	ea41 0e03 	orr.w	lr, r1, r3
 8000c4a:	4094      	lsls	r4, r2
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	0c21      	lsrs	r1, r4, #16
 8000c52:	fbbe f6f8 	udiv	r6, lr, r8
 8000c56:	fa1f f78c 	uxth.w	r7, ip
 8000c5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c62:	fb06 f107 	mul.w	r1, r6, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c72:	f080 811f 	bcs.w	8000eb4 <__udivmoddi4+0x298>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 811c 	bls.w	8000eb4 <__udivmoddi4+0x298>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c88:	fb08 3310 	mls	r3, r8, r0, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb00 f707 	mul.w	r7, r0, r7
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	d90a      	bls.n	8000cae <__udivmoddi4+0x92>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca0:	f080 810a 	bcs.w	8000eb8 <__udivmoddi4+0x29c>
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	f240 8107 	bls.w	8000eb8 <__udivmoddi4+0x29c>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb2:	1be4      	subs	r4, r4, r7
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	b11d      	cbz	r5, 8000cc0 <__udivmoddi4+0xa4>
 8000cb8:	40d4      	lsrs	r4, r2
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0xc2>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80ef 	beq.w	8000eae <__udivmoddi4+0x292>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x160>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xd4>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80f9 	bhi.w	8000ee2 <__udivmoddi4+0x2c6>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e0      	beq.n	8000cc0 <__udivmoddi4+0xa4>
 8000cfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d02:	e7dd      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000d04:	b902      	cbnz	r2, 8000d08 <__udivmoddi4+0xec>
 8000d06:	deff      	udf	#255	; 0xff
 8000d08:	fab2 f282 	clz	r2, r2
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	f040 8092 	bne.w	8000e36 <__udivmoddi4+0x21a>
 8000d12:	eba1 010c 	sub.w	r1, r1, ip
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2601      	movs	r6, #1
 8000d20:	0c20      	lsrs	r0, r4, #16
 8000d22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d26:	fb07 1113 	mls	r1, r7, r3, r1
 8000d2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2e:	fb0e f003 	mul.w	r0, lr, r3
 8000d32:	4288      	cmp	r0, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x12c>
 8000d36:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x12a>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2c0>
 8000d46:	4643      	mov	r3, r8
 8000d48:	1a09      	subs	r1, r1, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1110 	mls	r1, r7, r0, r1
 8000d54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x156>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x154>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2ca>
 8000d70:	4608      	mov	r0, r1
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d7a:	e79c      	b.n	8000cb6 <__udivmoddi4+0x9a>
 8000d7c:	f1c6 0720 	rsb	r7, r6, #32
 8000d80:	40b3      	lsls	r3, r6
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	431c      	orrs	r4, r3
 8000d94:	40f9      	lsrs	r1, r7
 8000d96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da2:	0c20      	lsrs	r0, r4, #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db0:	fb08 f00e 	mul.w	r0, r8, lr
 8000db4:	4288      	cmp	r0, r1
 8000db6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b8>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ddc:	fb09 1110 	mls	r1, r9, r0, r1
 8000de0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	458e      	cmp	lr, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1e2>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2b4>
 8000df6:	458e      	cmp	lr, r1
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2b4>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e02:	fba0 9402 	umull	r9, r4, r0, r2
 8000e06:	eba1 010e 	sub.w	r1, r1, lr
 8000e0a:	42a1      	cmp	r1, r4
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46a6      	mov	lr, r4
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x2a4>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x2a0>
 8000e14:	b15d      	cbz	r5, 8000e2e <__udivmoddi4+0x212>
 8000e16:	ebb3 0208 	subs.w	r2, r3, r8
 8000e1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e22:	fa22 f306 	lsr.w	r3, r2, r6
 8000e26:	40f1      	lsrs	r1, r6
 8000e28:	431f      	orrs	r7, r3
 8000e2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	40d8      	lsrs	r0, r3
 8000e3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e40:	fa21 f303 	lsr.w	r3, r1, r3
 8000e44:	4091      	lsls	r1, r2
 8000e46:	4301      	orrs	r1, r0
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e54:	fb07 3610 	mls	r6, r7, r0, r3
 8000e58:	0c0b      	lsrs	r3, r1, #16
 8000e5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e62:	429e      	cmp	r6, r3
 8000e64:	fa04 f402 	lsl.w	r4, r4, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x260>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e74:	429e      	cmp	r6, r3
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	b289      	uxth	r1, r1
 8000e80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e84:	fb07 3316 	mls	r3, r7, r6, r3
 8000e88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x28a>
 8000e94:	eb1c 0101 	adds.w	r1, ip, r1
 8000e98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2b0>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2b0>
 8000ea2:	3e02      	subs	r6, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0x104>
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e705      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e3      	b.n	8000c80 <__udivmoddi4+0x64>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6f8      	b.n	8000cae <__udivmoddi4+0x92>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f8>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f8>
 8000ecc:	4646      	mov	r6, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x28a>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1e2>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x260>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b8>
 8000edc:	3b02      	subs	r3, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x12c>
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	e709      	b.n	8000cfa <__udivmoddi4+0xde>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x156>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	4a06      	ldr	r2, [pc, #24]	; (8000f20 <vApplicationGetIdleTaskMemory+0x30>)
 8000f06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f0e:	bf00      	nop
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200000a4 	.word	0x200000a4
 8000f20:	200000f8 	.word	0x200000f8

08000f24 <Critical_section_Uart>:
void HPT_task(void *argument);
void MPT_task(void *argument);
void LPT_task(void *argument);

void Critical_section_Uart(int len,char *str)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	xSemaphoreTake(SimMutex,portMAX_DELAY);
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <Critical_section_Uart+0x44>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f04f 31ff 	mov.w	r1, #4294967295
 8000f36:	4618      	mov	r0, r3
 8000f38:	f005 fdac 	bl	8006a94 <xQueueSemaphoreTake>
	HAL_UART_Transmit_DMA(&huart4, (uint8_t *)str,len);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	6839      	ldr	r1, [r7, #0]
 8000f44:	4809      	ldr	r0, [pc, #36]	; (8000f6c <Critical_section_Uart+0x48>)
 8000f46:	f004 f971 	bl	800522c <HAL_UART_Transmit_DMA>
	HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f001 f96c 	bl	8002228 <HAL_Delay>
	xSemaphoreGive(SimMutex);
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <Critical_section_Uart+0x44>)
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	f005 fc9d 	bl	8006898 <xQueueGenericSend>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200002f8 	.word	0x200002f8
 8000f6c:	20000454 	.word	0x20000454

08000f70 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==UART4)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a51      	ldr	r2, [pc, #324]	; (80010d8 <HAL_UART_RxCpltCallback+0x154>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	f040 809a 	bne.w	80010cc <HAL_UART_RxCpltCallback+0x148>
	{
		if(rx_buf[2]==0x02)
 8000f98:	4b50      	ldr	r3, [pc, #320]	; (80010dc <HAL_UART_RxCpltCallback+0x158>)
 8000f9a:	789b      	ldrb	r3, [r3, #2]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d10b      	bne.n	8000fb8 <HAL_UART_RxCpltCallback+0x34>
		{
			if(rx_buf[3]==0x01)stop_button=1;
 8000fa0:	4b4e      	ldr	r3, [pc, #312]	; (80010dc <HAL_UART_RxCpltCallback+0x158>)
 8000fa2:	78db      	ldrb	r3, [r3, #3]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d103      	bne.n	8000fb0 <HAL_UART_RxCpltCallback+0x2c>
 8000fa8:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <HAL_UART_RxCpltCallback+0x15c>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]
		else
		{

		}
	}
}
 8000fae:	e08d      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
			else stop_button=0;
 8000fb0:	4b4b      	ldr	r3, [pc, #300]	; (80010e0 <HAL_UART_RxCpltCallback+0x15c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
}
 8000fb6:	e089      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
		else if(rx_buf[2]==0x05)
 8000fb8:	4b48      	ldr	r3, [pc, #288]	; (80010dc <HAL_UART_RxCpltCallback+0x158>)
 8000fba:	789b      	ldrb	r3, [r3, #2]
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d111      	bne.n	8000fe4 <HAL_UART_RxCpltCallback+0x60>
			time_scale_tune=time_scale*2;
 8000fc0:	4b48      	ldr	r3, [pc, #288]	; (80010e4 <HAL_UART_RxCpltCallback+0x160>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4a48      	ldr	r2, [pc, #288]	; (80010e8 <HAL_UART_RxCpltCallback+0x164>)
 8000fc8:	6013      	str	r3, [r2, #0]
			if(time_scale_tune<128)time_scale=time_scale_tune;
 8000fca:	4b47      	ldr	r3, [pc, #284]	; (80010e8 <HAL_UART_RxCpltCallback+0x164>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b7f      	cmp	r3, #127	; 0x7f
 8000fd0:	dc04      	bgt.n	8000fdc <HAL_UART_RxCpltCallback+0x58>
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <HAL_UART_RxCpltCallback+0x164>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a43      	ldr	r2, [pc, #268]	; (80010e4 <HAL_UART_RxCpltCallback+0x160>)
 8000fd8:	6013      	str	r3, [r2, #0]
}
 8000fda:	e077      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
			else time_scale=128;
 8000fdc:	4b41      	ldr	r3, [pc, #260]	; (80010e4 <HAL_UART_RxCpltCallback+0x160>)
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	601a      	str	r2, [r3, #0]
}
 8000fe2:	e073      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
		else if(rx_buf[2]==0x06)
 8000fe4:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <HAL_UART_RxCpltCallback+0x158>)
 8000fe6:	789b      	ldrb	r3, [r3, #2]
 8000fe8:	2b06      	cmp	r3, #6
 8000fea:	d114      	bne.n	8001016 <HAL_UART_RxCpltCallback+0x92>
			time_scale_tune=time_scale/2;
 8000fec:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <HAL_UART_RxCpltCallback+0x160>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0fda      	lsrs	r2, r3, #31
 8000ff2:	4413      	add	r3, r2
 8000ff4:	105b      	asrs	r3, r3, #1
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <HAL_UART_RxCpltCallback+0x164>)
 8000ffa:	601a      	str	r2, [r3, #0]
			if(time_scale_tune>1)time_scale=time_scale_tune;
 8000ffc:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <HAL_UART_RxCpltCallback+0x164>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	dd04      	ble.n	800100e <HAL_UART_RxCpltCallback+0x8a>
 8001004:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <HAL_UART_RxCpltCallback+0x164>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a36      	ldr	r2, [pc, #216]	; (80010e4 <HAL_UART_RxCpltCallback+0x160>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	e05e      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
			else time_scale=1;
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_UART_RxCpltCallback+0x160>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	e05a      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
		else if(rx_buf[2]==0x07)
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <HAL_UART_RxCpltCallback+0x158>)
 8001018:	789b      	ldrb	r3, [r3, #2]
 800101a:	2b07      	cmp	r3, #7
 800101c:	d112      	bne.n	8001044 <HAL_UART_RxCpltCallback+0xc0>
			mag_scale_tune=mag_scale*2;
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <HAL_UART_RxCpltCallback+0x168>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <HAL_UART_RxCpltCallback+0x16c>)
 8001028:	701a      	strb	r2, [r3, #0]
			if(mag_scale_tune<32)mag_scale=mag_scale_tune;
 800102a:	4b31      	ldr	r3, [pc, #196]	; (80010f0 <HAL_UART_RxCpltCallback+0x16c>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b1f      	cmp	r3, #31
 8001030:	d804      	bhi.n	800103c <HAL_UART_RxCpltCallback+0xb8>
 8001032:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <HAL_UART_RxCpltCallback+0x16c>)
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_UART_RxCpltCallback+0x168>)
 8001038:	701a      	strb	r2, [r3, #0]
}
 800103a:	e047      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
			else mag_scale=32;
 800103c:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <HAL_UART_RxCpltCallback+0x168>)
 800103e:	2220      	movs	r2, #32
 8001040:	701a      	strb	r2, [r3, #0]
}
 8001042:	e043      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
		else if(rx_buf[2]==0x08)
 8001044:	4b25      	ldr	r3, [pc, #148]	; (80010dc <HAL_UART_RxCpltCallback+0x158>)
 8001046:	789b      	ldrb	r3, [r3, #2]
 8001048:	2b08      	cmp	r3, #8
 800104a:	d112      	bne.n	8001072 <HAL_UART_RxCpltCallback+0xee>
			mag_scale_tune=mag_scale/2;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <HAL_UART_RxCpltCallback+0x168>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	085b      	lsrs	r3, r3, #1
 8001052:	b2da      	uxtb	r2, r3
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <HAL_UART_RxCpltCallback+0x16c>)
 8001056:	701a      	strb	r2, [r3, #0]
			if(mag_scale_tune>1)mag_scale=mag_scale_tune;
 8001058:	4b25      	ldr	r3, [pc, #148]	; (80010f0 <HAL_UART_RxCpltCallback+0x16c>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d904      	bls.n	800106a <HAL_UART_RxCpltCallback+0xe6>
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <HAL_UART_RxCpltCallback+0x16c>)
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <HAL_UART_RxCpltCallback+0x168>)
 8001066:	701a      	strb	r2, [r3, #0]
}
 8001068:	e030      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
			else mag_scale=1;
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_UART_RxCpltCallback+0x168>)
 800106c:	2201      	movs	r2, #1
 800106e:	701a      	strb	r2, [r3, #0]
}
 8001070:	e02c      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
		else if(rx_buf[2]==0x09)
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_UART_RxCpltCallback+0x158>)
 8001074:	789b      	ldrb	r3, [r3, #2]
 8001076:	2b09      	cmp	r3, #9
 8001078:	d112      	bne.n	80010a0 <HAL_UART_RxCpltCallback+0x11c>
			scope_bias_tune=scope_bias_tune+5;
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_UART_RxCpltCallback+0x170>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	3305      	adds	r3, #5
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_UART_RxCpltCallback+0x170>)
 8001084:	701a      	strb	r2, [r3, #0]
			if(scope_bias_tune<255)scope_bias=scope_bias_tune;
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <HAL_UART_RxCpltCallback+0x170>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2bff      	cmp	r3, #255	; 0xff
 800108c:	d004      	beq.n	8001098 <HAL_UART_RxCpltCallback+0x114>
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <HAL_UART_RxCpltCallback+0x170>)
 8001090:	781a      	ldrb	r2, [r3, #0]
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_UART_RxCpltCallback+0x174>)
 8001094:	701a      	strb	r2, [r3, #0]
}
 8001096:	e019      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
			else scope_bias=255;
 8001098:	4b17      	ldr	r3, [pc, #92]	; (80010f8 <HAL_UART_RxCpltCallback+0x174>)
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	701a      	strb	r2, [r3, #0]
}
 800109e:	e015      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
		else if(rx_buf[2]==0x0A)
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_UART_RxCpltCallback+0x158>)
 80010a2:	789b      	ldrb	r3, [r3, #2]
 80010a4:	2b0a      	cmp	r3, #10
 80010a6:	d111      	bne.n	80010cc <HAL_UART_RxCpltCallback+0x148>
			scope_bias_tune=scope_bias_tune-5;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_UART_RxCpltCallback+0x170>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	3b05      	subs	r3, #5
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_UART_RxCpltCallback+0x170>)
 80010b2:	701a      	strb	r2, [r3, #0]
			if(scope_bias_tune>0)scope_bias=scope_bias_tune;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_UART_RxCpltCallback+0x170>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <HAL_UART_RxCpltCallback+0x142>
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_UART_RxCpltCallback+0x170>)
 80010be:	781a      	ldrb	r2, [r3, #0]
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_UART_RxCpltCallback+0x174>)
 80010c2:	701a      	strb	r2, [r3, #0]
}
 80010c4:	e002      	b.n	80010cc <HAL_UART_RxCpltCallback+0x148>
			else scope_bias=0;
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_UART_RxCpltCallback+0x174>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40004c00 	.word	0x40004c00
 80010dc:	20000604 	.word	0x20000604
 80010e0:	200005fc 	.word	0x200005fc
 80010e4:	20000004 	.word	0x20000004
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000009 	.word	0x20000009
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000600 	.word	0x20000600
 80010f8:	20000601 	.word	0x20000601
 80010fc:	00000000 	.word	0x00000000

08001100 <get_sinval>:

//sin waveform generate
uint32_t sin_val[100];//for saving sin waveform sample data

void get_sinval ()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
	for(int i=0;i<100;i++)
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	e03a      	b.n	8001182 <get_sinval+0x82>
	{
		sin_val[i]=(sin(i*2*PI*1/100)*(4096/2)+2048);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa1f 	bl	8000554 <__aeabi_i2d>
 8001116:	a323      	add	r3, pc, #140	; (adr r3, 80011a4 <get_sinval+0xa4>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa84 	bl	8000628 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <get_sinval+0x98>)
 800112e:	f7ff fba5 	bl	800087c <__aeabi_ddiv>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	ec43 2b17 	vmov	d7, r2, r3
 800113a:	eeb0 0a47 	vmov.f32	s0, s14
 800113e:	eef0 0a67 	vmov.f32	s1, s15
 8001142:	f007 ff35 	bl	8008fb0 <sin>
 8001146:	ec51 0b10 	vmov	r0, r1, d0
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	4b13      	ldr	r3, [pc, #76]	; (800119c <get_sinval+0x9c>)
 8001150:	f7ff fa6a 	bl	8000628 <__aeabi_dmul>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <get_sinval+0x9c>)
 8001162:	f7ff f8ab 	bl	80002bc <__adddf3>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fd1d 	bl	8000bac <__aeabi_d2uiz>
 8001172:	4602      	mov	r2, r0
 8001174:	490a      	ldr	r1, [pc, #40]	; (80011a0 <get_sinval+0xa0>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<100;i++)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b63      	cmp	r3, #99	; 0x63
 8001186:	ddc1      	ble.n	800110c <get_sinval+0xc>
	}
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	f3af 8000 	nop.w
 8001198:	40590000 	.word	0x40590000
 800119c:	40a00000 	.word	0x40a00000
 80011a0:	20000a44 	.word	0x20000a44
 80011a4:	fc8b007a 	.word	0xfc8b007a
 80011a8:	400921fa 	.word	0x400921fa

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f000 fff7 	bl	80021a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f875 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f000 fa85 	bl	80016c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011be:	f000 fa4b 	bl	8001658 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011c2:	f000 fa1f 	bl	8001604 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80011c6:	f000 f9f3 	bl	80015b0 <MX_UART4_Init>
  MX_DAC_Init();
 80011ca:	f000 f92f 	bl	800142c <MX_DAC_Init>
  MX_ADC1_Init();
 80011ce:	f000 f8db 	bl	8001388 <MX_ADC1_Init>
  MX_TIM2_Init();
 80011d2:	f000 f955 	bl	8001480 <MX_TIM2_Init>
  MX_TIM3_Init();
 80011d6:	f000 f99f 	bl	8001518 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //DAC setup//
  HAL_TIM_Base_Start(&htim2);
 80011da:	4821      	ldr	r0, [pc, #132]	; (8001260 <main+0xb4>)
 80011dc:	f003 fb3e 	bl	800485c <HAL_TIM_Base_Start>
  get_sinval();
 80011e0:	f7ff ff8e 	bl	8001100 <get_sinval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sin_val, 100, DAC_ALIGN_12B_R);
 80011e4:	2300      	movs	r3, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <main+0xb8>)
 80011ec:	2100      	movs	r1, #0
 80011ee:	481e      	ldr	r0, [pc, #120]	; (8001268 <main+0xbc>)
 80011f0:	f001 fd1e 	bl	8002c30 <HAL_DAC_Start_DMA>
  //TIM3 interrupt setup//
  HAL_TIM_Base_Start_IT(&htim3);
 80011f4:	481d      	ldr	r0, [pc, #116]	; (800126c <main+0xc0>)
 80011f6:	f003 fb99 	bl	800492c <HAL_TIM_Base_Start_IT>

  //Start Receive IT//
  HAL_UART_Receive_DMA(&huart4, rx_buf, 5);
 80011fa:	2205      	movs	r2, #5
 80011fc:	491c      	ldr	r1, [pc, #112]	; (8001270 <main+0xc4>)
 80011fe:	481d      	ldr	r0, [pc, #116]	; (8001274 <main+0xc8>)
 8001200:	f004 f892 	bl	8005328 <HAL_UART_Receive_DMA>


  //create mutex//
  SimMutex = xSemaphoreCreateMutex();
 8001204:	2001      	movs	r0, #1
 8001206:	f005 fb2e 	bl	8006866 <xQueueCreateMutex>
 800120a:	4603      	mov	r3, r0
 800120c:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <main+0xcc>)
 800120e:	6013      	str	r3, [r2, #0]
  if(SimMutex!=NULL)mutex_flag=1;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <main+0xcc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d002      	beq.n	800121e <main+0x72>
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <main+0xd0>)
 800121a:	2201      	movs	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]

  //create task//
  xTaskCreate(HPT_task,"HPT",128,NULL,3,&HPT_handler);
 800121e:	4b18      	ldr	r3, [pc, #96]	; (8001280 <main+0xd4>)
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	2303      	movs	r3, #3
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2300      	movs	r3, #0
 8001228:	2280      	movs	r2, #128	; 0x80
 800122a:	4916      	ldr	r1, [pc, #88]	; (8001284 <main+0xd8>)
 800122c:	4816      	ldr	r0, [pc, #88]	; (8001288 <main+0xdc>)
 800122e:	f005 fe9c 	bl	8006f6a <xTaskCreate>
  xTaskCreate(MPT_task,"MPT",128,NULL,2,&MPT_handler);
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <main+0xe0>)
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2302      	movs	r3, #2
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2300      	movs	r3, #0
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	4914      	ldr	r1, [pc, #80]	; (8001290 <main+0xe4>)
 8001240:	4814      	ldr	r0, [pc, #80]	; (8001294 <main+0xe8>)
 8001242:	f005 fe92 	bl	8006f6a <xTaskCreate>
  xTaskCreate(LPT_task,"LPT",128,NULL,1,&LPT_handler);
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <main+0xec>)
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	2301      	movs	r3, #1
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2300      	movs	r3, #0
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	4912      	ldr	r1, [pc, #72]	; (800129c <main+0xf0>)
 8001254:	4812      	ldr	r0, [pc, #72]	; (80012a0 <main+0xf4>)
 8001256:	f005 fe88 	bl	8006f6a <xTaskCreate>
  vTaskStartScheduler();
 800125a:	f005 fff1 	bl	8007240 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* USER CODE BEGIN WHILE */
  while (1)
 800125e:	e7fe      	b.n	800125e <main+0xb2>
 8001260:	200003c4 	.word	0x200003c4
 8001264:	20000a44 	.word	0x20000a44
 8001268:	20000350 	.word	0x20000350
 800126c:	2000040c 	.word	0x2000040c
 8001270:	20000604 	.word	0x20000604
 8001274:	20000454 	.word	0x20000454
 8001278:	200002f8 	.word	0x200002f8
 800127c:	20000609 	.word	0x20000609
 8001280:	200002fc 	.word	0x200002fc
 8001284:	0800a060 	.word	0x0800a060
 8001288:	08001735 	.word	0x08001735
 800128c:	20000300 	.word	0x20000300
 8001290:	0800a064 	.word	0x0800a064
 8001294:	080017cd 	.word	0x080017cd
 8001298:	20000304 	.word	0x20000304
 800129c:	0800a068 	.word	0x0800a068
 80012a0:	080017f1 	.word	0x080017f1

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b094      	sub	sp, #80	; 0x50
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	2234      	movs	r2, #52	; 0x34
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f007 fa12 	bl	80086dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <SystemClock_Config+0xdc>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a2b      	ldr	r2, [pc, #172]	; (8001380 <SystemClock_Config+0xdc>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <SystemClock_Config+0xdc>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	607b      	str	r3, [r7, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	2300      	movs	r3, #0
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <SystemClock_Config+0xe0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a25      	ldr	r2, [pc, #148]	; (8001384 <SystemClock_Config+0xe0>)
 80012ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b23      	ldr	r3, [pc, #140]	; (8001384 <SystemClock_Config+0xe0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001308:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001312:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001314:	2304      	movs	r3, #4
 8001316:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001318:	23b4      	movs	r3, #180	; 0xb4
 800131a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001320:	2302      	movs	r3, #2
 8001322:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001324:	2302      	movs	r3, #2
 8001326:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4618      	mov	r0, r3
 800132e:	f002 ffa7 	bl	8004280 <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001338:	f000 fba4 	bl	8001a84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800133c:	f002 fbd4 	bl	8003ae8 <HAL_PWREx_EnableOverDrive>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001346:	f000 fb9d 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134e:	2302      	movs	r3, #2
 8001350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001356:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800135a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	2105      	movs	r1, #5
 8001368:	4618      	mov	r0, r3
 800136a:	f002 fc0d 	bl	8003b88 <HAL_RCC_ClockConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001374:	f000 fb86 	bl	8001a84 <Error_Handler>
  }
}
 8001378:	bf00      	nop
 800137a:	3750      	adds	r7, #80	; 0x50
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	40007000 	.word	0x40007000

08001388 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138e:	463b      	mov	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_ADC1_Init+0x98>)
 800139c:	4a21      	ldr	r2, [pc, #132]	; (8001424 <MX_ADC1_Init+0x9c>)
 800139e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_ADC1_Init+0x98>)
 80013a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <MX_ADC1_Init+0x98>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_ADC1_Init+0x98>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_ADC1_Init+0x98>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_ADC1_Init+0x98>)
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <MX_ADC1_Init+0x98>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <MX_ADC1_Init+0x98>)
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <MX_ADC1_Init+0xa0>)
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <MX_ADC1_Init+0x98>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <MX_ADC1_Init+0x98>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013da:	4b11      	ldr	r3, [pc, #68]	; (8001420 <MX_ADC1_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	; (8001420 <MX_ADC1_Init+0x98>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_ADC1_Init+0x98>)
 80013ea:	f000 ff41 	bl	8002270 <HAL_ADC_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013f4:	f000 fb46 	bl	8001a84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013f8:	230e      	movs	r3, #14
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013fc:	2301      	movs	r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_ADC1_Init+0x98>)
 800140a:	f001 f8df 	bl	80025cc <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001414:	f000 fb36 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000308 	.word	0x20000308
 8001424:	40012000 	.word	0x40012000
 8001428:	0f000001 	.word	0x0f000001

0800142c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_DAC_Init+0x4c>)
 800143c:	4a0f      	ldr	r2, [pc, #60]	; (800147c <MX_DAC_Init+0x50>)
 800143e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001440:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_DAC_Init+0x4c>)
 8001442:	f001 fbd3 	bl	8002bec <HAL_DAC_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800144c:	f000 fb1a 	bl	8001a84 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001450:	2324      	movs	r3, #36	; 0x24
 8001452:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <MX_DAC_Init+0x4c>)
 8001460:	f001 fcd2 	bl	8002e08 <HAL_DAC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800146a:	f000 fb0b 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000350 	.word	0x20000350
 800147c:	40007400 	.word	0x40007400

08001480 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800149c:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <MX_TIM2_Init+0x94>)
 800149e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <MX_TIM2_Init+0x94>)
 80014a6:	2259      	movs	r2, #89	; 0x59
 80014a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	; (8001514 <MX_TIM2_Init+0x94>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <MX_TIM2_Init+0x94>)
 80014b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b16      	ldr	r3, [pc, #88]	; (8001514 <MX_TIM2_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <MX_TIM2_Init+0x94>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c4:	4813      	ldr	r0, [pc, #76]	; (8001514 <MX_TIM2_Init+0x94>)
 80014c6:	f003 f979 	bl	80047bc <HAL_TIM_Base_Init>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014d0:	f000 fad8 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	4619      	mov	r1, r3
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <MX_TIM2_Init+0x94>)
 80014e2:	f003 fb9b 	bl	8004c1c <HAL_TIM_ConfigClockSource>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014ec:	f000 faca 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014f0:	2320      	movs	r3, #32
 80014f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f8:	463b      	mov	r3, r7
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_TIM2_Init+0x94>)
 80014fe:	f003 fdb7 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001508:	f000 fabc 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200003c4 	.word	0x200003c4

08001518 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	463b      	mov	r3, r7
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001534:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_TIM3_Init+0x90>)
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <MX_TIM3_Init+0x94>)
 8001538:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800153a:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_TIM3_Init+0x90>)
 800153c:	2259      	movs	r2, #89	; 0x59
 800153e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_TIM3_Init+0x90>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_TIM3_Init+0x90>)
 8001548:	2263      	movs	r2, #99	; 0x63
 800154a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_TIM3_Init+0x90>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_TIM3_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001558:	4813      	ldr	r0, [pc, #76]	; (80015a8 <MX_TIM3_Init+0x90>)
 800155a:	f003 f92f 	bl	80047bc <HAL_TIM_Base_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001564:	f000 fa8e 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	4619      	mov	r1, r3
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <MX_TIM3_Init+0x90>)
 8001576:	f003 fb51 	bl	8004c1c <HAL_TIM_ConfigClockSource>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001580:	f000 fa80 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_TIM3_Init+0x90>)
 8001592:	f003 fd6d 	bl	8005070 <HAL_TIMEx_MasterConfigSynchronization>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800159c:	f000 fa72 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000040c 	.word	0x2000040c
 80015ac:	40000400 	.word	0x40000400

080015b0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_UART4_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	; (8001600 <MX_UART4_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_UART4_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_UART4_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_UART4_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_UART4_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_UART4_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_UART4_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_UART4_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_UART4_Init+0x4c>)
 80015e8:	f003 fdd2 	bl	8005190 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80015f2:	f000 fa47 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000454 	.word	0x20000454
 8001600:	40004c00 	.word	0x40004c00

08001604 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800160a:	4a12      	ldr	r2, [pc, #72]	; (8001654 <MX_USART2_UART_Init+0x50>)
 800160c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b08      	ldr	r3, [pc, #32]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_USART2_UART_Init+0x4c>)
 800163c:	f003 fda8 	bl	8005190 <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001646:	f000 fa1d 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000498 	.word	0x20000498
 8001654:	40004400 	.word	0x40004400

08001658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_DMA_Init+0x6c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <MX_DMA_Init+0x6c>)
 8001668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <MX_DMA_Init+0x6c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2105      	movs	r1, #5
 800167e:	200d      	movs	r0, #13
 8001680:	f001 fa8a 	bl	8002b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001684:	200d      	movs	r0, #13
 8001686:	f001 faa3 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	200f      	movs	r0, #15
 8001690:	f001 fa82 	bl	8002b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001694:	200f      	movs	r0, #15
 8001696:	f001 fa9b 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2105      	movs	r1, #5
 800169e:	2010      	movs	r0, #16
 80016a0:	f001 fa7a 	bl	8002b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80016a4:	2010      	movs	r0, #16
 80016a6:	f001 fa93 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	2011      	movs	r0, #17
 80016b0:	f001 fa72 	bl	8002b98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80016b4:	2011      	movs	r0, #17
 80016b6:	f001 fa8b 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_GPIO_Init+0x68>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <MX_GPIO_Init+0x68>)
 80016d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_GPIO_Init+0x68>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b10      	ldr	r3, [pc, #64]	; (8001730 <MX_GPIO_Init+0x68>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <MX_GPIO_Init+0x68>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	; 0x30
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <MX_GPIO_Init+0x68>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_GPIO_Init+0x68>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <MX_GPIO_Init+0x68>)
 8001710:	f043 0304 	orr.w	r3, r3, #4
 8001714:	6313      	str	r3, [r2, #48]	; 0x30
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_GPIO_Init+0x68>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]

}
 8001722:	bf00      	nop
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HPT_task>:

/* USER CODE BEGIN 4 */
void HPT_task(void *argument)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(uart_trans_counter>=1000)uart_trans_counter=0;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HPT_task+0x74>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001744:	db02      	blt.n	800174c <HPT_task+0x18>
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HPT_task+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

		int value=adc_data_buf[uart_trans_counter]/mag_scale+scope_bias;
 800174c:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HPT_task+0x74>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a16      	ldr	r2, [pc, #88]	; (80017ac <HPT_task+0x78>)
 8001752:	5cd2      	ldrb	r2, [r2, r3]
 8001754:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <HPT_task+0x7c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	fbb2 f3f3 	udiv	r3, r2, r3
 800175c:	b2db      	uxtb	r3, r3
 800175e:	461a      	mov	r2, r3
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <HPT_task+0x80>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4413      	add	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
		if(value>=255)value=255;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2bfe      	cmp	r3, #254	; 0xfe
 800176c:	dd01      	ble.n	8001772 <HPT_task+0x3e>
 800176e:	23ff      	movs	r3, #255	; 0xff
 8001770:	60fb      	str	r3, [r7, #12]

		int len=sprintf(buf,"add 1,0,%d%s",value,cmd_end);
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <HPT_task+0x84>)
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	4911      	ldr	r1, [pc, #68]	; (80017bc <HPT_task+0x88>)
 8001778:	4811      	ldr	r0, [pc, #68]	; (80017c0 <HPT_task+0x8c>)
 800177a:	f006 ffb7 	bl	80086ec <siprintf>
 800177e:	60b8      	str	r0, [r7, #8]
		if(stop_button==0)
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <HPT_task+0x90>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d108      	bne.n	800179a <HPT_task+0x66>
		{
		Critical_section_Uart(len,buf);//if stop button=0,send data to display
 8001788:	490d      	ldr	r1, [pc, #52]	; (80017c0 <HPT_task+0x8c>)
 800178a:	68b8      	ldr	r0, [r7, #8]
 800178c:	f7ff fbca 	bl	8000f24 <Critical_section_Uart>
		uart_trans_counter++;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HPT_task+0x74>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <HPT_task+0x74>)
 8001798:	6013      	str	r3, [r2, #0]
		}
		vTaskDelay(1*time_scale);
 800179a:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HPT_task+0x94>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f005 fd1a 	bl	80071d8 <vTaskDelay>
	{
 80017a4:	e7ca      	b.n	800173c <HPT_task+0x8>
 80017a6:	bf00      	nop
 80017a8:	20000a30 	.word	0x20000a30
 80017ac:	20000640 	.word	0x20000640
 80017b0:	20000009 	.word	0x20000009
 80017b4:	20000601 	.word	0x20000601
 80017b8:	20000010 	.word	0x20000010
 80017bc:	0800a06c 	.word	0x0800a06c
 80017c0:	2000060c 	.word	0x2000060c
 80017c4:	200005fc 	.word	0x200005fc
 80017c8:	20000004 	.word	0x20000004

080017cc <MPT_task>:
	}
}

void MPT_task(void *argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Receive_DMA(&huart4,rx_buf,5);
 80017d4:	2205      	movs	r2, #5
 80017d6:	4904      	ldr	r1, [pc, #16]	; (80017e8 <MPT_task+0x1c>)
 80017d8:	4804      	ldr	r0, [pc, #16]	; (80017ec <MPT_task+0x20>)
 80017da:	f003 fda5 	bl	8005328 <HAL_UART_Receive_DMA>
		vTaskDelay(500);
 80017de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017e2:	f005 fcf9 	bl	80071d8 <vTaskDelay>
		HAL_UART_Receive_DMA(&huart4,rx_buf,5);
 80017e6:	e7f5      	b.n	80017d4 <MPT_task+0x8>
 80017e8:	20000604 	.word	0x20000604
 80017ec:	20000454 	.word	0x20000454

080017f0 <LPT_task>:
	}
}

void LPT_task(void *argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(stop_button==0)
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <LPT_task+0x54>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d118      	bne.n	8001832 <LPT_task+0x42>
		{
		int len=sprintf(buf_2,"t0.txt=\"freq=%d Hz\"%s",frequency,cmd_end);
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <LPT_task+0x58>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <LPT_task+0x5c>)
 8001808:	4911      	ldr	r1, [pc, #68]	; (8001850 <LPT_task+0x60>)
 800180a:	4812      	ldr	r0, [pc, #72]	; (8001854 <LPT_task+0x64>)
 800180c:	f006 ff6e 	bl	80086ec <siprintf>
 8001810:	60f8      	str	r0, [r7, #12]
		Critical_section_Uart(len,buf_2);
 8001812:	4910      	ldr	r1, [pc, #64]	; (8001854 <LPT_task+0x64>)
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fb85 	bl	8000f24 <Critical_section_Uart>
		len=sprintf(buf_2,"t1.txt=\"Mag=%d V\"%s",mag_max_int,cmd_end);
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <LPT_task+0x68>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <LPT_task+0x5c>)
 8001820:	490e      	ldr	r1, [pc, #56]	; (800185c <LPT_task+0x6c>)
 8001822:	480c      	ldr	r0, [pc, #48]	; (8001854 <LPT_task+0x64>)
 8001824:	f006 ff62 	bl	80086ec <siprintf>
 8001828:	60f8      	str	r0, [r7, #12]
		Critical_section_Uart(len,buf_2);
 800182a:	490a      	ldr	r1, [pc, #40]	; (8001854 <LPT_task+0x64>)
 800182c:	68f8      	ldr	r0, [r7, #12]
 800182e:	f7ff fb79 	bl	8000f24 <Critical_section_Uart>
		}
		vTaskDelay(3*time_scale);
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <LPT_task+0x70>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4413      	add	r3, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f005 fccb 	bl	80071d8 <vTaskDelay>
		if(stop_button==0)
 8001842:	e7d9      	b.n	80017f8 <LPT_task+0x8>
 8001844:	200005fc 	.word	0x200005fc
 8001848:	20000a38 	.word	0x20000a38
 800184c:	20000010 	.word	0x20000010
 8001850:	0800a07c 	.word	0x0800a07c
 8001854:	20000620 	.word	0x20000620
 8001858:	20000a3c 	.word	0x20000a3c
 800185c:	0800a094 	.word	0x0800a094
 8001860:	20000004 	.word	0x20000004
 8001864:	00000000 	.word	0x00000000

08001868 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a74      	ldr	r2, [pc, #464]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d101      	bne.n	800187e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800187a:	f000 fcb5 	bl	80021e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a72      	ldr	r2, [pc, #456]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	f040 80cd 	bne.w	8001a24 <HAL_TIM_PeriodElapsedCallback+0x1bc>
  {
	sample_counter++;
 800188a:	4b71      	ldr	r3, [pc, #452]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	4a6f      	ldr	r2, [pc, #444]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001892:	6013      	str	r3, [r2, #0]
	//sample counter decide sample rate//
	if(sample_counter>=1*time_scale)
 8001894:	4b6e      	ldr	r3, [pc, #440]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b6e      	ldr	r3, [pc, #440]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	f2c0 80c1 	blt.w	8001a24 <HAL_TIM_PeriodElapsedCallback+0x1bc>
	{
		sample_counter=0;
 80018a2:	4b6b      	ldr	r3, [pc, #428]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
		if(store_counter>=1000)store_counter=0;
 80018a8:	4b6b      	ldr	r3, [pc, #428]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018b0:	db02      	blt.n	80018b8 <HAL_TIM_PeriodElapsedCallback+0x50>
 80018b2:	4b69      	ldr	r3, [pc, #420]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc1);
 80018b8:	4868      	ldr	r0, [pc, #416]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80018ba:	f000 fd1d 	bl	80022f8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1);
 80018be:	2101      	movs	r1, #1
 80018c0:	4866      	ldr	r0, [pc, #408]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80018c2:	f000 fdeb 	bl	800249c <HAL_ADC_PollForConversion>
		adc_val=HAL_ADC_GetValue(&hadc1);
 80018c6:	4865      	ldr	r0, [pc, #404]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80018c8:	f000 fe73 	bl	80025b2 <HAL_ADC_GetValue>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a64      	ldr	r2, [pc, #400]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80018d0:	6013      	str	r3, [r2, #0]
		adc_data_buf[store_counter]=HAL_ADC_GetValue(&hadc1)/16;
 80018d2:	4862      	ldr	r0, [pc, #392]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80018d4:	f000 fe6d 	bl	80025b2 <HAL_ADC_GetValue>
 80018d8:	4603      	mov	r3, r0
 80018da:	091a      	lsrs	r2, r3, #4
 80018dc:	4b5e      	ldr	r3, [pc, #376]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b2d1      	uxtb	r1, r2
 80018e2:	4a60      	ldr	r2, [pc, #384]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80018e4:	54d1      	strb	r1, [r2, r3]
		store_counter++;
 80018e6:	4b5c      	ldr	r3, [pc, #368]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	3301      	adds	r3, #1
 80018ec:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80018ee:	6013      	str	r3, [r2, #0]

		//frequency calculation//
		if(adc_val>=2048)cros_time++;
 80018f0:	4b5b      	ldr	r3, [pc, #364]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f8:	d305      	bcc.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x9e>
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a59      	ldr	r2, [pc, #356]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e03d      	b.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x11a>
		else if(adc_val<2048&&cros_time!=0)
 8001906:	4b56      	ldr	r3, [pc, #344]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800190e:	d238      	bcs.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x11a>
 8001910:	4b55      	ldr	r3, [pc, #340]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d034      	beq.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x11a>
		{
			frequency=1/(0.0001*time_scale*cros_time*2);
 8001918:	4b4e      	ldr	r3, [pc, #312]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fe19 	bl	8000554 <__aeabi_i2d>
 8001922:	a343      	add	r3, pc, #268	; (adr r3, 8001a30 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001928:	f7fe fe7e 	bl	8000628 <__aeabi_dmul>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4614      	mov	r4, r2
 8001932:	461d      	mov	r5, r3
 8001934:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe0b 	bl	8000554 <__aeabi_i2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7fe fe6f 	bl	8000628 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	f7fe fcb1 	bl	80002bc <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	4942      	ldr	r1, [pc, #264]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001964:	f7fe ff8a 	bl	800087c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff f91c 	bl	8000bac <__aeabi_d2uiz>
 8001974:	4603      	mov	r3, r0
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800197a:	701a      	strb	r2, [r3, #0]
			cros_time=0;
 800197c:	4b3a      	ldr	r3, [pc, #232]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
		}

		//magnitude calculation//
		if((adc_val/16)>mag_max)
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	4a3a      	ldr	r2, [pc, #232]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	4293      	cmp	r3, r2
 800198e:	d931      	bls.n	80019f4 <HAL_TIM_PeriodElapsedCallback+0x18c>
		{
			mag_max=adc_val/16;//if adc_val >previous value,change max value
 8001990:	4b33      	ldr	r3, [pc, #204]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800199a:	701a      	strb	r2, [r3, #0]
			mag_max_int=mag_max*3.3*amplify/255;
 800199c:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fdd7 	bl	8000554 <__aeabi_i2d>
 80019a6:	a324      	add	r3, pc, #144	; (adr r3, 8001a38 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe3c 	bl	8000628 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4614      	mov	r4, r2
 80019b6:	461d      	mov	r5, r3
 80019b8:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fdc9 	bl	8000554 <__aeabi_i2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4620      	mov	r0, r4
 80019c8:	4629      	mov	r1, r5
 80019ca:	f7fe fe2d 	bl	8000628 <__aeabi_dmul>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001a40 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe ff4e 	bl	800087c <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f8b8 	bl	8000b5c <__aeabi_d2iz>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80019f0:	6013      	str	r3, [r2, #0]
			}
		}
	}
  }
  /* USER CODE END Callback 1 */
}
 80019f2:	e017      	b.n	8001a24 <HAL_TIM_PeriodElapsedCallback+0x1bc>
			flush_counter++;
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80019fc:	6013      	str	r3, [r2, #0]
			if(flush_counter>=(1000/time_scale))//flush data in period
 80019fe:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a06:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	dc08      	bgt.n	8001a24 <HAL_TIM_PeriodElapsedCallback+0x1bc>
				mag_max=0;//reset_mag
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
				frequency=0;
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	701a      	strb	r2, [r3, #0]
				flush_counter=0;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2c:	f3af 8000 	nop.w
 8001a30:	eb1c432d 	.word	0xeb1c432d
 8001a34:	3f1a36e2 	.word	0x3f1a36e2
 8001a38:	66666666 	.word	0x66666666
 8001a3c:	400a6666 	.word	0x400a6666
 8001a40:	00000000 	.word	0x00000000
 8001a44:	406fe000 	.word	0x406fe000
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	20000a28 	.word	0x20000a28
 8001a54:	20000004 	.word	0x20000004
 8001a58:	20000a2c 	.word	0x20000a2c
 8001a5c:	20000308 	.word	0x20000308
 8001a60:	2000063c 	.word	0x2000063c
 8001a64:	20000640 	.word	0x20000640
 8001a68:	20000a34 	.word	0x20000a34
 8001a6c:	3ff00000 	.word	0x3ff00000
 8001a70:	20000a38 	.word	0x20000a38
 8001a74:	20000a39 	.word	0x20000a39
 8001a78:	2000000c 	.word	0x2000000c
 8001a7c:	20000a3c 	.word	0x20000a3c
 8001a80:	20000a40 	.word	0x20000a40

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <Error_Handler+0x8>
	...

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_MspInit+0x54>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a11      	ldr	r2, [pc, #68]	; (8001ae4 <HAL_MspInit+0x54>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_MspInit+0x54>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	607b      	str	r3, [r7, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	603b      	str	r3, [r7, #0]
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_MspInit+0x54>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_MspInit+0x54>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_MspInit+0x54>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	210f      	movs	r1, #15
 8001ad2:	f06f 0001 	mvn.w	r0, #1
 8001ad6:	f001 f85f 	bl	8002b98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a17      	ldr	r2, [pc, #92]	; (8001b64 <HAL_ADC_MspInit+0x7c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d127      	bne.n	8001b5a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <HAL_ADC_MspInit+0x80>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <HAL_ADC_MspInit+0x80>)
 8001b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b18:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_ADC_MspInit+0x80>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <HAL_ADC_MspInit+0x80>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_ADC_MspInit+0x80>)
 8001b30:	f043 0304 	orr.w	r3, r3, #4
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <HAL_ADC_MspInit+0x80>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0304 	and.w	r3, r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b42:	2310      	movs	r3, #16
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b46:	2303      	movs	r3, #3
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <HAL_ADC_MspInit+0x84>)
 8001b56:	f001 fe33 	bl	80037c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3728      	adds	r7, #40	; 0x28
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40012000 	.word	0x40012000
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020800 	.word	0x40020800

08001b70 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	; 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	; (8001c4c <HAL_DAC_MspInit+0xdc>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d158      	bne.n	8001c44 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_DAC_MspInit+0xe0>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a2d      	ldr	r2, [pc, #180]	; (8001c50 <HAL_DAC_MspInit+0xe0>)
 8001b9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_DAC_MspInit+0xe0>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_DAC_MspInit+0xe0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <HAL_DAC_MspInit+0xe0>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <HAL_DAC_MspInit+0xe0>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bca:	2310      	movs	r3, #16
 8001bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	4619      	mov	r1, r3
 8001bdc:	481d      	ldr	r0, [pc, #116]	; (8001c54 <HAL_DAC_MspInit+0xe4>)
 8001bde:	f001 fdef 	bl	80037c0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001be4:	4a1d      	ldr	r2, [pc, #116]	; (8001c5c <HAL_DAC_MspInit+0xec>)
 8001be6:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001bea:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001bee:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001bf2:	2240      	movs	r2, #64	; 0x40
 8001bf4:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c02:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c0a:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001c0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c12:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001c16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c1a:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001c28:	480b      	ldr	r0, [pc, #44]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001c2a:	f001 f9c7 	bl	8002fbc <HAL_DMA_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001c34:	f7ff ff26 	bl	8001a84 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_DAC_MspInit+0xe8>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001c44:	bf00      	nop
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40007400 	.word	0x40007400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000
 8001c58:	20000364 	.word	0x20000364
 8001c5c:	40026088 	.word	0x40026088

08001c60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d116      	bne.n	8001ca0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <HAL_TIM_Base_MspInit+0x80>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a19      	ldr	r2, [pc, #100]	; (8001ce0 <HAL_TIM_Base_MspInit+0x80>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <HAL_TIM_Base_MspInit+0x80>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2105      	movs	r1, #5
 8001c92:	201c      	movs	r0, #28
 8001c94:	f000 ff80 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c98:	201c      	movs	r0, #28
 8001c9a:	f000 ff99 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001c9e:	e01a      	b.n	8001cd6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <HAL_TIM_Base_MspInit+0x84>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d115      	bne.n	8001cd6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_TIM_Base_MspInit+0x80>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ce0 <HAL_TIM_Base_MspInit+0x80>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_TIM_Base_MspInit+0x80>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2105      	movs	r1, #5
 8001cca:	201d      	movs	r0, #29
 8001ccc:	f000 ff64 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cd0:	201d      	movs	r0, #29
 8001cd2:	f000 ff7d 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40000400 	.word	0x40000400

08001ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	; 0x30
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a7f      	ldr	r2, [pc, #508]	; (8001f04 <HAL_UART_MspInit+0x21c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	f040 8091 	bne.w	8001e2e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	4b7d      	ldr	r3, [pc, #500]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	4a7c      	ldr	r2, [pc, #496]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001d16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1c:	4b7a      	ldr	r3, [pc, #488]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d24:	61bb      	str	r3, [r7, #24]
 8001d26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4a75      	ldr	r2, [pc, #468]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6313      	str	r3, [r2, #48]	; 0x30
 8001d38:	4b73      	ldr	r3, [pc, #460]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d44:	2303      	movs	r3, #3
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d50:	2303      	movs	r3, #3
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d54:	2308      	movs	r3, #8
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f107 031c 	add.w	r3, r7, #28
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	486b      	ldr	r0, [pc, #428]	; (8001f0c <HAL_UART_MspInit+0x224>)
 8001d60:	f001 fd2e 	bl	80037c0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001d64:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001d66:	4a6b      	ldr	r2, [pc, #428]	; (8001f14 <HAL_UART_MspInit+0x22c>)
 8001d68:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001d6a:	4b69      	ldr	r3, [pc, #420]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001d6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d70:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d72:	4b67      	ldr	r3, [pc, #412]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001d74:	2240      	movs	r2, #64	; 0x40
 8001d76:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d78:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d7e:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d84:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d86:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d8c:	4b60      	ldr	r3, [pc, #384]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001d92:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d98:	4b5d      	ldr	r3, [pc, #372]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001da4:	485a      	ldr	r0, [pc, #360]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001da6:	f001 f909 	bl	8002fbc <HAL_DMA_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001db0:	f7ff fe68 	bl	8001a84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a56      	ldr	r2, [pc, #344]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001db8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dba:	4a55      	ldr	r2, [pc, #340]	; (8001f10 <HAL_UART_MspInit+0x228>)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001dc0:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001dc2:	4a56      	ldr	r2, [pc, #344]	; (8001f1c <HAL_UART_MspInit+0x234>)
 8001dc4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001dc6:	4b54      	ldr	r3, [pc, #336]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001dc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dcc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001dce:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dd4:	4b50      	ldr	r3, [pc, #320]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dda:	4b4f      	ldr	r3, [pc, #316]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de2:	4b4d      	ldr	r3, [pc, #308]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001de8:	4b4b      	ldr	r3, [pc, #300]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001dee:	4b4a      	ldr	r3, [pc, #296]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001df4:	4b48      	ldr	r3, [pc, #288]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001e00:	4845      	ldr	r0, [pc, #276]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001e02:	f001 f8db 	bl	8002fbc <HAL_DMA_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001e0c:	f7ff fe3a 	bl	8001a84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a41      	ldr	r2, [pc, #260]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
 8001e16:	4a40      	ldr	r2, [pc, #256]	; (8001f18 <HAL_UART_MspInit+0x230>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2105      	movs	r1, #5
 8001e20:	2034      	movs	r0, #52	; 0x34
 8001e22:	f000 feb9 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001e26:	2034      	movs	r0, #52	; 0x34
 8001e28:	f000 fed2 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e2c:	e066      	b.n	8001efc <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_UART_MspInit+0x238>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d161      	bne.n	8001efc <HAL_UART_MspInit+0x214>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e46:	6413      	str	r3, [r2, #64]	; 0x40
 8001e48:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4a2a      	ldr	r2, [pc, #168]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6313      	str	r3, [r2, #48]	; 0x30
 8001e64:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <HAL_UART_MspInit+0x220>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e70:	230c      	movs	r3, #12
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e80:	2307      	movs	r3, #7
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4820      	ldr	r0, [pc, #128]	; (8001f0c <HAL_UART_MspInit+0x224>)
 8001e8c:	f001 fc98 	bl	80037c0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e90:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001e92:	4a25      	ldr	r2, [pc, #148]	; (8001f28 <HAL_UART_MspInit+0x240>)
 8001e94:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001e98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e9c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e9e:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001ea0:	2240      	movs	r2, #64	; 0x40
 8001ea2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001eaa:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eb0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ed0:	4814      	ldr	r0, [pc, #80]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001ed2:	f001 f873 	bl	8002fbc <HAL_DMA_Init>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_MspInit+0x1f8>
      Error_Handler();
 8001edc:	f7ff fdd2 	bl	8001a84 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee6:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <HAL_UART_MspInit+0x23c>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2105      	movs	r1, #5
 8001ef0:	2026      	movs	r0, #38	; 0x26
 8001ef2:	f000 fe51 	bl	8002b98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ef6:	2026      	movs	r0, #38	; 0x26
 8001ef8:	f000 fe6a 	bl	8002bd0 <HAL_NVIC_EnableIRQ>
}
 8001efc:	bf00      	nop
 8001efe:	3730      	adds	r7, #48	; 0x30
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40004c00 	.word	0x40004c00
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	200004dc 	.word	0x200004dc
 8001f14:	40026070 	.word	0x40026070
 8001f18:	2000053c 	.word	0x2000053c
 8001f1c:	40026040 	.word	0x40026040
 8001f20:	40004400 	.word	0x40004400
 8001f24:	2000059c 	.word	0x2000059c
 8001f28:	400260a0 	.word	0x400260a0

08001f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08c      	sub	sp, #48	; 0x30
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	2019      	movs	r0, #25
 8001f42:	f000 fe29 	bl	8002b98 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f46:	2019      	movs	r0, #25
 8001f48:	f000 fe42 	bl	8002bd0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <HAL_InitTick+0xa4>)
 8001f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f54:	4a1e      	ldr	r2, [pc, #120]	; (8001fd0 <HAL_InitTick+0xa4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <HAL_InitTick+0xa4>)
 8001f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f68:	f107 0210 	add.w	r2, r7, #16
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 ff22 	bl	8003dbc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f78:	f001 ff0c 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f84:	4a13      	ldr	r2, [pc, #76]	; (8001fd4 <HAL_InitTick+0xa8>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0c9b      	lsrs	r3, r3, #18
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_InitTick+0xac>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <HAL_InitTick+0xb0>)
 8001f94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_InitTick+0xac>)
 8001f98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f9e:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001fb0:	4809      	ldr	r0, [pc, #36]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fb2:	f002 fc03 	bl	80047bc <HAL_TIM_Base_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001fbc:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <HAL_InitTick+0xac>)
 8001fbe:	f002 fcb5 	bl	800492c <HAL_TIM_Base_Start_IT>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	e000      	b.n	8001fc8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3730      	adds	r7, #48	; 0x30
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	431bde83 	.word	0x431bde83
 8001fd8:	20000bd4 	.word	0x20000bd4
 8001fdc:	40010000 	.word	0x40010000

08001fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <NMI_Handler+0x4>

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002010:	4802      	ldr	r0, [pc, #8]	; (800201c <DMA1_Stream2_IRQHandler+0x10>)
 8002012:	f001 f96b 	bl	80032ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000053c 	.word	0x2000053c

08002020 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <DMA1_Stream4_IRQHandler+0x10>)
 8002026:	f001 f961 	bl	80032ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200004dc 	.word	0x200004dc

08002034 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <DMA1_Stream5_IRQHandler+0x10>)
 800203a:	f001 f957 	bl	80032ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000364 	.word	0x20000364

08002048 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800204c:	4802      	ldr	r0, [pc, #8]	; (8002058 <DMA1_Stream6_IRQHandler+0x10>)
 800204e:	f001 f94d 	bl	80032ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000059c 	.word	0x2000059c

0800205c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002060:	4802      	ldr	r0, [pc, #8]	; (800206c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002062:	f002 fcd3 	bl	8004a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000bd4 	.word	0x20000bd4

08002070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <TIM2_IRQHandler+0x10>)
 8002076:	f002 fcc9 	bl	8004a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200003c4 	.word	0x200003c4

08002084 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002088:	4802      	ldr	r0, [pc, #8]	; (8002094 <TIM3_IRQHandler+0x10>)
 800208a:	f002 fcbf 	bl	8004a0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000040c 	.word	0x2000040c

08002098 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <USART2_IRQHandler+0x10>)
 800209e:	f003 f973 	bl	8005388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000498 	.word	0x20000498

080020ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80020b0:	4802      	ldr	r0, [pc, #8]	; (80020bc <UART4_IRQHandler+0x10>)
 80020b2:	f003 f969 	bl	8005388 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000454 	.word	0x20000454

080020c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <_sbrk+0x5c>)
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <_sbrk+0x60>)
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <_sbrk+0x64>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <_sbrk+0x64>)
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <_sbrk+0x68>)
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020e2:	4b10      	ldr	r3, [pc, #64]	; (8002124 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d207      	bcs.n	8002100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020f0:	f006 fabc 	bl	800866c <__errno>
 80020f4:	4603      	mov	r3, r0
 80020f6:	220c      	movs	r2, #12
 80020f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020fa:	f04f 33ff 	mov.w	r3, #4294967295
 80020fe:	e009      	b.n	8002114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <_sbrk+0x64>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <_sbrk+0x64>)
 8002110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3718      	adds	r7, #24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20020000 	.word	0x20020000
 8002120:	00000400 	.word	0x00000400
 8002124:	20000c1c 	.word	0x20000c1c
 8002128:	20004988 	.word	0x20004988

0800212c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <SystemInit+0x20>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	4a05      	ldr	r2, [pc, #20]	; (800214c <SystemInit+0x20>)
 8002138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800213c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002156:	490e      	ldr	r1, [pc, #56]	; (8002190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002158:	4a0e      	ldr	r2, [pc, #56]	; (8002194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800215c:	e002      	b.n	8002164 <LoopCopyDataInit>

0800215e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002162:	3304      	adds	r3, #4

08002164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002168:	d3f9      	bcc.n	800215e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800216a:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800216c:	4c0b      	ldr	r4, [pc, #44]	; (800219c <LoopFillZerobss+0x26>)
  movs r3, #0
 800216e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002170:	e001      	b.n	8002176 <LoopFillZerobss>

08002172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002174:	3204      	adds	r2, #4

08002176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002178:	d3fb      	bcc.n	8002172 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800217a:	f7ff ffd7 	bl	800212c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217e:	f006 fa7b 	bl	8008678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002182:	f7ff f813 	bl	80011ac <main>
  bx  lr    
 8002186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800218c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002190:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002194:	0800a2f0 	.word	0x0800a2f0
  ldr r2, =_sbss
 8002198:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800219c:	20004988 	.word	0x20004988

080021a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a0:	e7fe      	b.n	80021a0 <ADC_IRQHandler>
	...

080021a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	; (80021e4 <HAL_Init+0x40>)
 80021ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0a      	ldr	r2, [pc, #40]	; (80021e4 <HAL_Init+0x40>)
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_Init+0x40>)
 80021c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021cc:	2003      	movs	r0, #3
 80021ce:	f000 fcd8 	bl	8002b82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021d2:	200f      	movs	r0, #15
 80021d4:	f7ff feaa 	bl	8001f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d8:	f7ff fc5a 	bl	8001a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00

080021e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_IncTick+0x20>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	461a      	mov	r2, r3
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <HAL_IncTick+0x24>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_IncTick+0x24>)
 80021fa:	6013      	str	r3, [r2, #0]
}
 80021fc:	bf00      	nop
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	2000001c 	.word	0x2000001c
 800220c:	20000c20 	.word	0x20000c20

08002210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return uwTick;
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <HAL_GetTick+0x14>)
 8002216:	681b      	ldr	r3, [r3, #0]
}
 8002218:	4618      	mov	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	20000c20 	.word	0x20000c20

08002228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002230:	f7ff ffee 	bl	8002210 <HAL_GetTick>
 8002234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002240:	d005      	beq.n	800224e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_Delay+0x44>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800224e:	bf00      	nop
 8002250:	f7ff ffde 	bl	8002210 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d8f7      	bhi.n	8002250 <HAL_Delay+0x28>
  {
  }
}
 8002260:	bf00      	nop
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2000001c 	.word	0x2000001c

08002270 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e033      	b.n	80022ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fc2a 	bl	8001ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 0310 	and.w	r3, r3, #16
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d118      	bne.n	80022e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022b6:	f023 0302 	bic.w	r3, r3, #2
 80022ba:	f043 0202 	orr.w	r2, r3, #2
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fab4 	bl	8002830 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f023 0303 	bic.w	r3, r3, #3
 80022d6:	f043 0201 	orr.w	r2, r3, #1
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
 80022de:	e001      	b.n	80022e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Start+0x1a>
 800230e:	2302      	movs	r3, #2
 8002310:	e0b2      	b.n	8002478 <HAL_ADC_Start+0x180>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d018      	beq.n	800235a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0201 	orr.w	r2, r2, #1
 8002336:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002338:	4b52      	ldr	r3, [pc, #328]	; (8002484 <HAL_ADC_Start+0x18c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a52      	ldr	r2, [pc, #328]	; (8002488 <HAL_ADC_Start+0x190>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9a      	lsrs	r2, r3, #18
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800234c:	e002      	b.n	8002354 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3b01      	subs	r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f9      	bne.n	800234e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d17a      	bne.n	800245e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002392:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a6:	d106      	bne.n	80023b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	f023 0206 	bic.w	r2, r3, #6
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	645a      	str	r2, [r3, #68]	; 0x44
 80023b4:	e002      	b.n	80023bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_ADC_Start+0x194>)
 80023c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 031f 	and.w	r3, r3, #31
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12a      	bne.n	8002434 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2b      	ldr	r2, [pc, #172]	; (8002490 <HAL_ADC_Start+0x198>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d015      	beq.n	8002414 <HAL_ADC_Start+0x11c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a29      	ldr	r2, [pc, #164]	; (8002494 <HAL_ADC_Start+0x19c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d105      	bne.n	80023fe <HAL_ADC_Start+0x106>
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_ADC_Start+0x194>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00a      	beq.n	8002414 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a25      	ldr	r2, [pc, #148]	; (8002498 <HAL_ADC_Start+0x1a0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d136      	bne.n	8002476 <HAL_ADC_Start+0x17e>
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_ADC_Start+0x194>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d130      	bne.n	8002476 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d129      	bne.n	8002476 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	e020      	b.n	8002476 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <HAL_ADC_Start+0x198>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d11b      	bne.n	8002476 <HAL_ADC_Start+0x17e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d114      	bne.n	8002476 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	e00b      	b.n	8002476 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f043 0210 	orr.w	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	20000014 	.word	0x20000014
 8002488:	431bde83 	.word	0x431bde83
 800248c:	40012300 	.word	0x40012300
 8002490:	40012000 	.word	0x40012000
 8002494:	40012100 	.word	0x40012100
 8002498:	40012200 	.word	0x40012200

0800249c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024b8:	d113      	bne.n	80024e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c8:	d10b      	bne.n	80024e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e063      	b.n	80025aa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80024e2:	f7ff fe95 	bl	8002210 <HAL_GetTick>
 80024e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024e8:	e021      	b.n	800252e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d01d      	beq.n	800252e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_ADC_PollForConversion+0x6c>
 80024f8:	f7ff fe8a 	bl	8002210 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d212      	bcs.n	800252e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b02      	cmp	r3, #2
 8002514:	d00b      	beq.n	800252e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e03d      	b.n	80025aa <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b02      	cmp	r3, #2
 800253a:	d1d6      	bne.n	80024ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0212 	mvn.w	r2, #18
 8002544:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d123      	bne.n	80025a8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002564:	2b00      	cmp	r3, #0
 8002566:	d11f      	bne.n	80025a8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002580:	2b00      	cmp	r3, #0
 8002582:	d111      	bne.n	80025a8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1c>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e113      	b.n	8002810 <HAL_ADC_ConfigChannel+0x244>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b09      	cmp	r3, #9
 80025f6:	d925      	bls.n	8002644 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68d9      	ldr	r1, [r3, #12]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	b29b      	uxth	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	4613      	mov	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4413      	add	r3, r2
 800260c:	3b1e      	subs	r3, #30
 800260e:	2207      	movs	r2, #7
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43da      	mvns	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	400a      	ands	r2, r1
 800261c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68d9      	ldr	r1, [r3, #12]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	4618      	mov	r0, r3
 8002630:	4603      	mov	r3, r0
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	4403      	add	r3, r0
 8002636:	3b1e      	subs	r3, #30
 8002638:	409a      	lsls	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	e022      	b.n	800268a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6919      	ldr	r1, [r3, #16]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b29b      	uxth	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	2207      	movs	r2, #7
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	400a      	ands	r2, r1
 8002666:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6919      	ldr	r1, [r3, #16]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	b29b      	uxth	r3, r3
 8002678:	4618      	mov	r0, r3
 800267a:	4603      	mov	r3, r0
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4403      	add	r3, r0
 8002680:	409a      	lsls	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b06      	cmp	r3, #6
 8002690:	d824      	bhi.n	80026dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	3b05      	subs	r3, #5
 80026a4:	221f      	movs	r2, #31
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	43da      	mvns	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	400a      	ands	r2, r1
 80026b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	3b05      	subs	r3, #5
 80026ce:	fa00 f203 	lsl.w	r2, r0, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	635a      	str	r2, [r3, #52]	; 0x34
 80026da:	e04c      	b.n	8002776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	d824      	bhi.n	800272e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	3b23      	subs	r3, #35	; 0x23
 80026f6:	221f      	movs	r2, #31
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	43da      	mvns	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	400a      	ands	r2, r1
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	4618      	mov	r0, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	3b23      	subs	r3, #35	; 0x23
 8002720:	fa00 f203 	lsl.w	r2, r0, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
 800272c:	e023      	b.n	8002776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	4413      	add	r3, r2
 800273e:	3b41      	subs	r3, #65	; 0x41
 8002740:	221f      	movs	r2, #31
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	400a      	ands	r2, r1
 800274e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	3b41      	subs	r3, #65	; 0x41
 800276a:	fa00 f203 	lsl.w	r2, r0, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002776:	4b29      	ldr	r3, [pc, #164]	; (800281c <HAL_ADC_ConfigChannel+0x250>)
 8002778:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a28      	ldr	r2, [pc, #160]	; (8002820 <HAL_ADC_ConfigChannel+0x254>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d10f      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b12      	cmp	r3, #18
 800278a:	d10b      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <HAL_ADC_ConfigChannel+0x254>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d12b      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x23a>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a1c      	ldr	r2, [pc, #112]	; (8002824 <HAL_ADC_ConfigChannel+0x258>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <HAL_ADC_ConfigChannel+0x1f4>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b11      	cmp	r3, #17
 80027be:	d122      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a11      	ldr	r2, [pc, #68]	; (8002824 <HAL_ADC_ConfigChannel+0x258>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d111      	bne.n	8002806 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <HAL_ADC_ConfigChannel+0x25c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a11      	ldr	r2, [pc, #68]	; (800282c <HAL_ADC_ConfigChannel+0x260>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	0c9a      	lsrs	r2, r3, #18
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027f8:	e002      	b.n	8002800 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f9      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40012300 	.word	0x40012300
 8002820:	40012000 	.word	0x40012000
 8002824:	10000012 	.word	0x10000012
 8002828:	20000014 	.word	0x20000014
 800282c:	431bde83 	.word	0x431bde83

08002830 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002838:	4b79      	ldr	r3, [pc, #484]	; (8002a20 <ADC_Init+0x1f0>)
 800283a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	431a      	orrs	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6859      	ldr	r1, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	021a      	lsls	r2, r3, #8
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6859      	ldr	r1, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6899      	ldr	r1, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	4a58      	ldr	r2, [pc, #352]	; (8002a24 <ADC_Init+0x1f4>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d022      	beq.n	800290e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6899      	ldr	r1, [r3, #8]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	e00f      	b.n	800292e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800291c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800292c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0202 	bic.w	r2, r2, #2
 800293c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	7e1b      	ldrb	r3, [r3, #24]
 8002948:	005a      	lsls	r2, r3, #1
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d01b      	beq.n	8002994 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800297a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	3b01      	subs	r3, #1
 8002988:	035a      	lsls	r2, r3, #13
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	e007      	b.n	80029a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	3b01      	subs	r3, #1
 80029c0:	051a      	lsls	r2, r3, #20
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6899      	ldr	r1, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029e6:	025a      	lsls	r2, r3, #9
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6899      	ldr	r1, [r3, #8]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	029a      	lsls	r2, r3, #10
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	609a      	str	r2, [r3, #8]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	40012300 	.word	0x40012300
 8002a24:	0f000001 	.word	0x0f000001

08002a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <__NVIC_GetPriorityGrouping+0x18>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0307 	and.w	r3, r3, #7
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db0b      	blt.n	8002ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4907      	ldr	r1, [pc, #28]	; (8002ac4 <__NVIC_EnableIRQ+0x38>)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2001      	movs	r0, #1
 8002aae:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	; (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	; (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	; 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	; 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ff4c 	bl	8002a28 <__NVIC_SetPriorityGrouping>
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002baa:	f7ff ff61 	bl	8002a70 <__NVIC_GetPriorityGrouping>
 8002bae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	68b9      	ldr	r1, [r7, #8]
 8002bb4:	6978      	ldr	r0, [r7, #20]
 8002bb6:	f7ff ffb1 	bl	8002b1c <NVIC_EncodePriority>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff80 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002bc8:	bf00      	nop
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ff54 	bl	8002a8c <__NVIC_EnableIRQ>
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e014      	b.n	8002c28 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	791b      	ldrb	r3, [r3, #4]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7fe ffae 	bl	8001b70 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	795b      	ldrb	r3, [r3, #5]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <HAL_DAC_Start_DMA+0x22>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e0ab      	b.n	8002daa <HAL_DAC_Start_DMA+0x17a>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2201      	movs	r2, #1
 8002c56:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d12f      	bne.n	8002cc4 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_DAC_Start_DMA+0x184>)
 8002c6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <HAL_DAC_Start_DMA+0x188>)
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4a50      	ldr	r2, [pc, #320]	; (8002dbc <HAL_DAC_Start_DMA+0x18c>)
 8002c7a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d013      	beq.n	8002cba <HAL_DAC_Start_DMA+0x8a>
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d845      	bhi.n	8002d24 <HAL_DAC_Start_DMA+0xf4>
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_DAC_Start_DMA+0x76>
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d005      	beq.n	8002cb0 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002ca4:	e03e      	b.n	8002d24 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3308      	adds	r3, #8
 8002cac:	613b      	str	r3, [r7, #16]
        break;
 8002cae:	e03c      	b.n	8002d2a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	330c      	adds	r3, #12
 8002cb6:	613b      	str	r3, [r7, #16]
        break;
 8002cb8:	e037      	b.n	8002d2a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3310      	adds	r3, #16
 8002cc0:	613b      	str	r3, [r7, #16]
        break;
 8002cc2:	e032      	b.n	8002d2a <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4a3d      	ldr	r2, [pc, #244]	; (8002dc0 <HAL_DAC_Start_DMA+0x190>)
 8002cca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a3c      	ldr	r2, [pc, #240]	; (8002dc4 <HAL_DAC_Start_DMA+0x194>)
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	4a3b      	ldr	r2, [pc, #236]	; (8002dc8 <HAL_DAC_Start_DMA+0x198>)
 8002cda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d013      	beq.n	8002d1a <HAL_DAC_Start_DMA+0xea>
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d817      	bhi.n	8002d28 <HAL_DAC_Start_DMA+0xf8>
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_DAC_Start_DMA+0xd6>
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d005      	beq.n	8002d10 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002d04:	e010      	b.n	8002d28 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3314      	adds	r3, #20
 8002d0c:	613b      	str	r3, [r7, #16]
        break;
 8002d0e:	e00c      	b.n	8002d2a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3318      	adds	r3, #24
 8002d16:	613b      	str	r3, [r7, #16]
        break;
 8002d18:	e007      	b.n	8002d2a <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	331c      	adds	r3, #28
 8002d20:	613b      	str	r3, [r7, #16]
        break;
 8002d22:	e002      	b.n	8002d2a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002d24:	bf00      	nop
 8002d26:	e000      	b.n	8002d2a <HAL_DAC_Start_DMA+0xfa>
        break;
 8002d28:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d111      	bne.n	8002d54 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6898      	ldr	r0, [r3, #8]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	f000 f9e5 	bl	8003118 <HAL_DMA_Start_IT>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	75fb      	strb	r3, [r7, #23]
 8002d52:	e010      	b.n	8002d76 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002d62:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68d8      	ldr	r0, [r3, #12]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	f000 f9d3 	bl	8003118 <HAL_DMA_Start_IT>
 8002d72:	4603      	mov	r3, r0
 8002d74:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10c      	bne.n	8002d9c <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6819      	ldr	r1, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2201      	movs	r2, #1
 8002d90:	409a      	lsls	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	e005      	b.n	8002da8 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f043 0204 	orr.w	r2, r3, #4
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	08002ea7 	.word	0x08002ea7
 8002db8:	08002ec9 	.word	0x08002ec9
 8002dbc:	08002ee5 	.word	0x08002ee5
 8002dc0:	08002f4f 	.word	0x08002f4f
 8002dc4:	08002f71 	.word	0x08002f71
 8002dc8:	08002f8d 	.word	0x08002f8d

08002dcc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	795b      	ldrb	r3, [r3, #5]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	d101      	bne.n	8002e20 <HAL_DAC_ConfigChannel+0x18>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	e03c      	b.n	8002e9a <HAL_DAC_ConfigChannel+0x92>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43db      	mvns	r3, r3
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	4013      	ands	r3, r2
 8002e48:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	22c0      	movs	r2, #192	; 0xc0
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	400a      	ands	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff ff89 	bl	8002dcc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	711a      	strb	r2, [r3, #4]
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff ff82 	bl	8002de0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f043 0204 	orr.w	r2, r3, #4
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f7ff ff78 	bl	8002df4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2201      	movs	r2, #1
 8002f08:	711a      	strb	r2, [r3, #4]
}
 8002f0a:	bf00      	nop
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b084      	sub	sp, #16
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002f5c:	68f8      	ldr	r0, [r7, #12]
 8002f5e:	f7ff ffd8 	bl	8002f12 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	711a      	strb	r2, [r3, #4]
}
 8002f68:	bf00      	nop
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7ff ffd1 	bl	8002f26 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f043 0204 	orr.w	r2, r3, #4
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff ffc7 	bl	8002f3a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	711a      	strb	r2, [r3, #4]
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
	...

08002fbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fc8:	f7ff f922 	bl	8002210 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e099      	b.n	800310c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff8:	e00f      	b.n	800301a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ffa:	f7ff f909 	bl	8002210 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b05      	cmp	r3, #5
 8003006:	d908      	bls.n	800301a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2203      	movs	r2, #3
 8003012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e078      	b.n	800310c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e8      	bne.n	8002ffa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4b38      	ldr	r3, [pc, #224]	; (8003114 <HAL_DMA_Init+0x158>)
 8003034:	4013      	ands	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003046:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800305e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	4313      	orrs	r3, r2
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4313      	orrs	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f023 0307 	bic.w	r3, r3, #7
 800309a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d117      	bne.n	80030de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fb01 	bl	80036c8 <DMA_CheckFifoParam>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2240      	movs	r2, #64	; 0x40
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030da:	2301      	movs	r3, #1
 80030dc:	e016      	b.n	800310c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fab8 	bl	800365c <DMA_CalcBaseAndBitshift>
 80030ec:	4603      	mov	r3, r0
 80030ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	223f      	movs	r2, #63	; 0x3f
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	f010803f 	.word	0xf010803f

08003118 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_DMA_Start_IT+0x26>
 800313a:	2302      	movs	r3, #2
 800313c:	e040      	b.n	80031c0 <HAL_DMA_Start_IT+0xa8>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b01      	cmp	r3, #1
 8003150:	d12f      	bne.n	80031b2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa4a 	bl	8003600 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003170:	223f      	movs	r2, #63	; 0x3f
 8003172:	409a      	lsls	r2, r3
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0216 	orr.w	r2, r2, #22
 8003186:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0208 	orr.w	r2, r2, #8
 800319e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e005      	b.n	80031be <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
 80031bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031be:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031d6:	f7ff f81b 	bl	8002210 <HAL_GetTick>
 80031da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d008      	beq.n	80031fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e052      	b.n	80032a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0216 	bic.w	r2, r2, #22
 8003208:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003218:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <HAL_DMA_Abort+0x62>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0208 	bic.w	r2, r2, #8
 8003238:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0201 	bic.w	r2, r2, #1
 8003248:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800324a:	e013      	b.n	8003274 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800324c:	f7fe ffe0 	bl	8002210 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b05      	cmp	r3, #5
 8003258:	d90c      	bls.n	8003274 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2220      	movs	r2, #32
 800325e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2203      	movs	r2, #3
 8003264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e015      	b.n	80032a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1e4      	bne.n	800324c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	223f      	movs	r2, #63	; 0x3f
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d004      	beq.n	80032c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e00c      	b.n	80032e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2205      	movs	r2, #5
 80032ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032f8:	4b8e      	ldr	r3, [pc, #568]	; (8003534 <HAL_DMA_IRQHandler+0x248>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a8e      	ldr	r2, [pc, #568]	; (8003538 <HAL_DMA_IRQHandler+0x24c>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0a9b      	lsrs	r3, r3, #10
 8003304:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003316:	2208      	movs	r2, #8
 8003318:	409a      	lsls	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4013      	ands	r3, r2
 800331e:	2b00      	cmp	r3, #0
 8003320:	d01a      	beq.n	8003358 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0204 	bic.w	r2, r2, #4
 800333e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	2208      	movs	r2, #8
 8003346:	409a      	lsls	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003350:	f043 0201 	orr.w	r2, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d012      	beq.n	800338e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	2201      	movs	r2, #1
 800337c:	409a      	lsls	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f043 0202 	orr.w	r2, r3, #2
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2204      	movs	r2, #4
 8003394:	409a      	lsls	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	4013      	ands	r3, r2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d012      	beq.n	80033c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2204      	movs	r2, #4
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0204 	orr.w	r2, r3, #4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2210      	movs	r2, #16
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d043      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d03c      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	2210      	movs	r2, #16
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d018      	beq.n	800342e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d108      	bne.n	800341c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d024      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	4798      	blx	r3
 800341a:	e01f      	b.n	800345c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
 800342c:	e016      	b.n	800345c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003438:	2b00      	cmp	r3, #0
 800343a:	d107      	bne.n	800344c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0208 	bic.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	2b00      	cmp	r3, #0
 8003452:	d003      	beq.n	800345c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	2220      	movs	r2, #32
 8003462:	409a      	lsls	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 808f 	beq.w	800358c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8087 	beq.w	800358c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003482:	2220      	movs	r2, #32
 8003484:	409a      	lsls	r2, r3
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b05      	cmp	r3, #5
 8003494:	d136      	bne.n	8003504 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0216 	bic.w	r2, r2, #22
 80034a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	695a      	ldr	r2, [r3, #20]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <HAL_DMA_IRQHandler+0x1da>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0208 	bic.w	r2, r2, #8
 80034d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034da:	223f      	movs	r2, #63	; 0x3f
 80034dc:	409a      	lsls	r2, r3
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d07e      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
        }
        return;
 8003502:	e079      	b.n	80035f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d01d      	beq.n	800354e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10d      	bne.n	800353c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003524:	2b00      	cmp	r3, #0
 8003526:	d031      	beq.n	800358c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	4798      	blx	r3
 8003530:	e02c      	b.n	800358c <HAL_DMA_IRQHandler+0x2a0>
 8003532:	bf00      	nop
 8003534:	20000014 	.word	0x20000014
 8003538:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	2b00      	cmp	r3, #0
 8003542:	d023      	beq.n	800358c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	4798      	blx	r3
 800354c:	e01e      	b.n	800358c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10f      	bne.n	800357c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0210 	bic.w	r2, r2, #16
 800356a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	2b00      	cmp	r3, #0
 8003592:	d032      	beq.n	80035fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d022      	beq.n	80035e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2205      	movs	r2, #5
 80035a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	3301      	adds	r3, #1
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d307      	bcc.n	80035d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f2      	bne.n	80035b8 <HAL_DMA_IRQHandler+0x2cc>
 80035d2:	e000      	b.n	80035d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80035d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	4798      	blx	r3
 80035f6:	e000      	b.n	80035fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80035f8:	bf00      	nop
    }
  }
}
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800361c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d108      	bne.n	8003640 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800363e:	e007      	b.n	8003650 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	60da      	str	r2, [r3, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	3b10      	subs	r3, #16
 800366c:	4a14      	ldr	r2, [pc, #80]	; (80036c0 <DMA_CalcBaseAndBitshift+0x64>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003676:	4a13      	ldr	r2, [pc, #76]	; (80036c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4413      	add	r3, r2
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d909      	bls.n	800369e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003692:	f023 0303 	bic.w	r3, r3, #3
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	659a      	str	r2, [r3, #88]	; 0x58
 800369c:	e007      	b.n	80036ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	aaaaaaab 	.word	0xaaaaaaab
 80036c4:	0800a0c8 	.word	0x0800a0c8

080036c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11f      	bne.n	8003722 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d856      	bhi.n	8003796 <DMA_CheckFifoParam+0xce>
 80036e8:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <DMA_CheckFifoParam+0x28>)
 80036ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ee:	bf00      	nop
 80036f0:	08003701 	.word	0x08003701
 80036f4:	08003713 	.word	0x08003713
 80036f8:	08003701 	.word	0x08003701
 80036fc:	08003797 	.word	0x08003797
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d046      	beq.n	800379a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003710:	e043      	b.n	800379a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003716:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800371a:	d140      	bne.n	800379e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003720:	e03d      	b.n	800379e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372a:	d121      	bne.n	8003770 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b03      	cmp	r3, #3
 8003730:	d837      	bhi.n	80037a2 <DMA_CheckFifoParam+0xda>
 8003732:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <DMA_CheckFifoParam+0x70>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	08003749 	.word	0x08003749
 800373c:	0800374f 	.word	0x0800374f
 8003740:	08003749 	.word	0x08003749
 8003744:	08003761 	.word	0x08003761
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
      break;
 800374c:	e030      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d025      	beq.n	80037a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800375e:	e022      	b.n	80037a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003768:	d11f      	bne.n	80037aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800376e:	e01c      	b.n	80037aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d903      	bls.n	800377e <DMA_CheckFifoParam+0xb6>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b03      	cmp	r3, #3
 800377a:	d003      	beq.n	8003784 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800377c:	e018      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      break;
 8003782:	e015      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003788:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00e      	beq.n	80037ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      break;
 8003794:	e00b      	b.n	80037ae <DMA_CheckFifoParam+0xe6>
      break;
 8003796:	bf00      	nop
 8003798:	e00a      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 800379a:	bf00      	nop
 800379c:	e008      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 800379e:	bf00      	nop
 80037a0:	e006      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037a2:	bf00      	nop
 80037a4:	e004      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <DMA_CheckFifoParam+0xe8>
      break;
 80037ae:	bf00      	nop
    }
  } 
  
  return status; 
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop

080037c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	; 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
 80037da:	e165      	b.n	8003aa8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037dc:	2201      	movs	r2, #1
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	f040 8154 	bne.w	8003aa2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b01      	cmp	r3, #1
 8003804:	d005      	beq.n	8003812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380e:	2b02      	cmp	r3, #2
 8003810:	d130      	bne.n	8003874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	2203      	movs	r2, #3
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4313      	orrs	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	091b      	lsrs	r3, r3, #4
 800385e:	f003 0201 	and.w	r2, r3, #1
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f003 0303 	and.w	r3, r3, #3
 800387c:	2b03      	cmp	r3, #3
 800387e:	d017      	beq.n	80038b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	2203      	movs	r2, #3
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0303 	and.w	r3, r3, #3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d123      	bne.n	8003904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	08da      	lsrs	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3208      	adds	r2, #8
 80038c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	220f      	movs	r2, #15
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4013      	ands	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	08da      	lsrs	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3208      	adds	r2, #8
 80038fe:	69b9      	ldr	r1, [r7, #24]
 8003900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	2203      	movs	r2, #3
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0203 	and.w	r2, r3, #3
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4313      	orrs	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 80ae 	beq.w	8003aa2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <HAL_GPIO_Init+0x300>)
 800394c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394e:	4a5c      	ldr	r2, [pc, #368]	; (8003ac0 <HAL_GPIO_Init+0x300>)
 8003950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003954:	6453      	str	r3, [r2, #68]	; 0x44
 8003956:	4b5a      	ldr	r3, [pc, #360]	; (8003ac0 <HAL_GPIO_Init+0x300>)
 8003958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003962:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_GPIO_Init+0x304>)
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	089b      	lsrs	r3, r3, #2
 8003968:	3302      	adds	r3, #2
 800396a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	220f      	movs	r2, #15
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43db      	mvns	r3, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4013      	ands	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a4f      	ldr	r2, [pc, #316]	; (8003ac8 <HAL_GPIO_Init+0x308>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d025      	beq.n	80039da <HAL_GPIO_Init+0x21a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a4e      	ldr	r2, [pc, #312]	; (8003acc <HAL_GPIO_Init+0x30c>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01f      	beq.n	80039d6 <HAL_GPIO_Init+0x216>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a4d      	ldr	r2, [pc, #308]	; (8003ad0 <HAL_GPIO_Init+0x310>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d019      	beq.n	80039d2 <HAL_GPIO_Init+0x212>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a4c      	ldr	r2, [pc, #304]	; (8003ad4 <HAL_GPIO_Init+0x314>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <HAL_GPIO_Init+0x20e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a4b      	ldr	r2, [pc, #300]	; (8003ad8 <HAL_GPIO_Init+0x318>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d00d      	beq.n	80039ca <HAL_GPIO_Init+0x20a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a4a      	ldr	r2, [pc, #296]	; (8003adc <HAL_GPIO_Init+0x31c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <HAL_GPIO_Init+0x206>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a49      	ldr	r2, [pc, #292]	; (8003ae0 <HAL_GPIO_Init+0x320>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_GPIO_Init+0x202>
 80039be:	2306      	movs	r3, #6
 80039c0:	e00c      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039c2:	2307      	movs	r3, #7
 80039c4:	e00a      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039c6:	2305      	movs	r3, #5
 80039c8:	e008      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039ca:	2304      	movs	r3, #4
 80039cc:	e006      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039ce:	2303      	movs	r3, #3
 80039d0:	e004      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e002      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039d6:	2301      	movs	r3, #1
 80039d8:	e000      	b.n	80039dc <HAL_GPIO_Init+0x21c>
 80039da:	2300      	movs	r3, #0
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	f002 0203 	and.w	r2, r2, #3
 80039e2:	0092      	lsls	r2, r2, #2
 80039e4:	4093      	lsls	r3, r2
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ec:	4935      	ldr	r1, [pc, #212]	; (8003ac4 <HAL_GPIO_Init+0x304>)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	089b      	lsrs	r3, r3, #2
 80039f2:	3302      	adds	r3, #2
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fa:	4b3a      	ldr	r3, [pc, #232]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	43db      	mvns	r3, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4013      	ands	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a1e:	4a31      	ldr	r2, [pc, #196]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a24:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a48:	4a26      	ldr	r2, [pc, #152]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a4e:	4b25      	ldr	r3, [pc, #148]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a72:	4a1c      	ldr	r2, [pc, #112]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a78:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a9c:	4a11      	ldr	r2, [pc, #68]	; (8003ae4 <HAL_GPIO_Init+0x324>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	2b0f      	cmp	r3, #15
 8003aac:	f67f ae96 	bls.w	80037dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3724      	adds	r7, #36	; 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40013800 	.word	0x40013800
 8003ac8:	40020000 	.word	0x40020000
 8003acc:	40020400 	.word	0x40020400
 8003ad0:	40020800 	.word	0x40020800
 8003ad4:	40020c00 	.word	0x40020c00
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	40021400 	.word	0x40021400
 8003ae0:	40021800 	.word	0x40021800
 8003ae4:	40013c00 	.word	0x40013c00

08003ae8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	603b      	str	r3, [r7, #0]
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_PWREx_EnableOverDrive+0x90>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <HAL_PWREx_EnableOverDrive+0x90>)
 8003afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b00:	6413      	str	r3, [r2, #64]	; 0x40
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b0e:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_PWREx_EnableOverDrive+0x94>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b14:	f7fe fb7c 	bl	8002210 <HAL_GetTick>
 8003b18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b1a:	e009      	b.n	8003b30 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b1c:	f7fe fb78 	bl	8002210 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b2a:	d901      	bls.n	8003b30 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e01f      	b.n	8003b70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b30:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d1ee      	bne.n	8003b1c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b40:	2201      	movs	r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b44:	f7fe fb64 	bl	8002210 <HAL_GetTick>
 8003b48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b4a:	e009      	b.n	8003b60 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b4c:	f7fe fb60 	bl	8002210 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b5a:	d901      	bls.n	8003b60 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e007      	b.n	8003b70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b6c:	d1ee      	bne.n	8003b4c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	420e0040 	.word	0x420e0040
 8003b80:	40007000 	.word	0x40007000
 8003b84:	420e0044 	.word	0x420e0044

08003b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0cc      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b9c:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 030f 	and.w	r3, r3, #15
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d90c      	bls.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003baa:	4b65      	ldr	r3, [pc, #404]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb2:	4b63      	ldr	r3, [pc, #396]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d001      	beq.n	8003bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0b8      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d020      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d005      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bdc:	4b59      	ldr	r3, [pc, #356]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	4a58      	ldr	r2, [pc, #352]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bf4:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a52      	ldr	r2, [pc, #328]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c00:	4b50      	ldr	r3, [pc, #320]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	494d      	ldr	r1, [pc, #308]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d044      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d119      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e07f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c46:	4b3f      	ldr	r3, [pc, #252]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e06f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e067      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c66:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f023 0203 	bic.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4934      	ldr	r1, [pc, #208]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c78:	f7fe faca 	bl	8002210 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fe fac6 	bl	8002210 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e04f      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 020c 	and.w	r2, r3, #12
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d1eb      	bne.n	8003c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca8:	4b25      	ldr	r3, [pc, #148]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d20c      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d001      	beq.n	8003cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e032      	b.n	8003d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4916      	ldr	r1, [pc, #88]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490e      	ldr	r1, [pc, #56]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d0e:	f000 f887 	bl	8003e20 <HAL_RCC_GetSysClockFreq>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <HAL_RCC_ClockConfig+0x1bc>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	490a      	ldr	r1, [pc, #40]	; (8003d48 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	5ccb      	ldrb	r3, [r1, r3]
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <HAL_RCC_ClockConfig+0x1c4>)
 8003d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d2a:	4b09      	ldr	r3, [pc, #36]	; (8003d50 <HAL_RCC_ClockConfig+0x1c8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fe f8fc 	bl	8001f2c <HAL_InitTick>

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	40023c00 	.word	0x40023c00
 8003d44:	40023800 	.word	0x40023800
 8003d48:	0800a0b0 	.word	0x0800a0b0
 8003d4c:	20000014 	.word	0x20000014
 8003d50:	20000018 	.word	0x20000018

08003d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000014 	.word	0x20000014

08003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d70:	f7ff fff0 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d74:	4602      	mov	r2, r0
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	0a9b      	lsrs	r3, r3, #10
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	4903      	ldr	r1, [pc, #12]	; (8003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d82:	5ccb      	ldrb	r3, [r1, r3]
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	0800a0c0 	.word	0x0800a0c0

08003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d98:	f7ff ffdc 	bl	8003d54 <HAL_RCC_GetHCLKFreq>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	0b5b      	lsrs	r3, r3, #13
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	4903      	ldr	r1, [pc, #12]	; (8003db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003daa:	5ccb      	ldrb	r3, [r1, r3]
 8003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40023800 	.word	0x40023800
 8003db8:	0800a0c0 	.word	0x0800a0c0

08003dbc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	220f      	movs	r2, #15
 8003dca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_RCC_GetClockConfig+0x5c>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 0203 	and.w	r2, r3, #3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003dd8:	4b0f      	ldr	r3, [pc, #60]	; (8003e18 <HAL_RCC_GetClockConfig+0x5c>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <HAL_RCC_GetClockConfig+0x5c>)
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <HAL_RCC_GetClockConfig+0x5c>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	08db      	lsrs	r3, r3, #3
 8003df6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_RCC_GetClockConfig+0x60>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 020f 	and.w	r2, r3, #15
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	601a      	str	r2, [r3, #0]
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	40023c00 	.word	0x40023c00

08003e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b0ae      	sub	sp, #184	; 0xb8
 8003e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e46:	4bcb      	ldr	r3, [pc, #812]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b0c      	cmp	r3, #12
 8003e50:	f200 8206 	bhi.w	8004260 <HAL_RCC_GetSysClockFreq+0x440>
 8003e54:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08004261 	.word	0x08004261
 8003e64:	08004261 	.word	0x08004261
 8003e68:	08004261 	.word	0x08004261
 8003e6c:	08003e99 	.word	0x08003e99
 8003e70:	08004261 	.word	0x08004261
 8003e74:	08004261 	.word	0x08004261
 8003e78:	08004261 	.word	0x08004261
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08004261 	.word	0x08004261
 8003e84:	08004261 	.word	0x08004261
 8003e88:	08004261 	.word	0x08004261
 8003e8c:	08004091 	.word	0x08004091
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e90:	4bb9      	ldr	r3, [pc, #740]	; (8004178 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e96:	e1e7      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e98:	4bb8      	ldr	r3, [pc, #736]	; (800417c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e9e:	e1e3      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea0:	4bb4      	ldr	r3, [pc, #720]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eac:	4bb1      	ldr	r3, [pc, #708]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d071      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eb8:	4bae      	ldr	r3, [pc, #696]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	099b      	lsrs	r3, r3, #6
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ec4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003eda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ede:	4622      	mov	r2, r4
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	0159      	lsls	r1, r3, #5
 8003eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef0:	0150      	lsls	r0, r2, #5
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	1a51      	subs	r1, r2, r1
 8003efa:	6439      	str	r1, [r7, #64]	; 0x40
 8003efc:	4629      	mov	r1, r5
 8003efe:	eb63 0301 	sbc.w	r3, r3, r1
 8003f02:	647b      	str	r3, [r7, #68]	; 0x44
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003f10:	4649      	mov	r1, r9
 8003f12:	018b      	lsls	r3, r1, #6
 8003f14:	4641      	mov	r1, r8
 8003f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f1a:	4641      	mov	r1, r8
 8003f1c:	018a      	lsls	r2, r1, #6
 8003f1e:	4641      	mov	r1, r8
 8003f20:	1a51      	subs	r1, r2, r1
 8003f22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f24:	4649      	mov	r1, r9
 8003f26:	eb63 0301 	sbc.w	r3, r3, r1
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	f04f 0300 	mov.w	r3, #0
 8003f34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003f38:	4649      	mov	r1, r9
 8003f3a:	00cb      	lsls	r3, r1, #3
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f42:	4641      	mov	r1, r8
 8003f44:	00ca      	lsls	r2, r1, #3
 8003f46:	4610      	mov	r0, r2
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4622      	mov	r2, r4
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	633b      	str	r3, [r7, #48]	; 0x30
 8003f52:	462b      	mov	r3, r5
 8003f54:	460a      	mov	r2, r1
 8003f56:	eb42 0303 	adc.w	r3, r2, r3
 8003f5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f68:	4629      	mov	r1, r5
 8003f6a:	024b      	lsls	r3, r1, #9
 8003f6c:	4621      	mov	r1, r4
 8003f6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f72:	4621      	mov	r1, r4
 8003f74:	024a      	lsls	r2, r1, #9
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f8c:	f7fc fe2e 	bl	8000bec <__aeabi_uldivmod>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4613      	mov	r3, r2
 8003f96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f9a:	e067      	b.n	800406c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9c:	4b75      	ldr	r3, [pc, #468]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fa8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003fac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	462b      	mov	r3, r5
 8003fc2:	f04f 0000 	mov.w	r0, #0
 8003fc6:	f04f 0100 	mov.w	r1, #0
 8003fca:	0159      	lsls	r1, r3, #5
 8003fcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fd0:	0150      	lsls	r0, r2, #5
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	1a51      	subs	r1, r2, r1
 8003fda:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fdc:	4629      	mov	r1, r5
 8003fde:	eb63 0301 	sbc.w	r3, r3, r1
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	018b      	lsls	r3, r1, #6
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	018a      	lsls	r2, r1, #6
 8003ffe:	4641      	mov	r1, r8
 8004000:	ebb2 0a01 	subs.w	sl, r2, r1
 8004004:	4649      	mov	r1, r9
 8004006:	eb63 0b01 	sbc.w	fp, r3, r1
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004016:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800401a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800401e:	4692      	mov	sl, r2
 8004020:	469b      	mov	fp, r3
 8004022:	4623      	mov	r3, r4
 8004024:	eb1a 0303 	adds.w	r3, sl, r3
 8004028:	623b      	str	r3, [r7, #32]
 800402a:	462b      	mov	r3, r5
 800402c:	eb4b 0303 	adc.w	r3, fp, r3
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
 8004032:	f04f 0200 	mov.w	r2, #0
 8004036:	f04f 0300 	mov.w	r3, #0
 800403a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800403e:	4629      	mov	r1, r5
 8004040:	028b      	lsls	r3, r1, #10
 8004042:	4621      	mov	r1, r4
 8004044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004048:	4621      	mov	r1, r4
 800404a:	028a      	lsls	r2, r1, #10
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004054:	2200      	movs	r2, #0
 8004056:	673b      	str	r3, [r7, #112]	; 0x70
 8004058:	677a      	str	r2, [r7, #116]	; 0x74
 800405a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800405e:	f7fc fdc5 	bl	8000bec <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4613      	mov	r3, r2
 8004068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800406c:	4b41      	ldr	r3, [pc, #260]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	f003 0303 	and.w	r3, r3, #3
 8004076:	3301      	adds	r3, #1
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800407e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004082:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800408e:	e0eb      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004090:	4b38      	ldr	r3, [pc, #224]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800409c:	4b35      	ldr	r3, [pc, #212]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d06b      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a8:	4b32      	ldr	r3, [pc, #200]	; (8004174 <HAL_RCC_GetSysClockFreq+0x354>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	099b      	lsrs	r3, r3, #6
 80040ae:	2200      	movs	r2, #0
 80040b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040ba:	663b      	str	r3, [r7, #96]	; 0x60
 80040bc:	2300      	movs	r3, #0
 80040be:	667b      	str	r3, [r7, #100]	; 0x64
 80040c0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80040c4:	4622      	mov	r2, r4
 80040c6:	462b      	mov	r3, r5
 80040c8:	f04f 0000 	mov.w	r0, #0
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	0159      	lsls	r1, r3, #5
 80040d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040d6:	0150      	lsls	r0, r2, #5
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4621      	mov	r1, r4
 80040de:	1a51      	subs	r1, r2, r1
 80040e0:	61b9      	str	r1, [r7, #24]
 80040e2:	4629      	mov	r1, r5
 80040e4:	eb63 0301 	sbc.w	r3, r3, r1
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040f6:	4659      	mov	r1, fp
 80040f8:	018b      	lsls	r3, r1, #6
 80040fa:	4651      	mov	r1, sl
 80040fc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004100:	4651      	mov	r1, sl
 8004102:	018a      	lsls	r2, r1, #6
 8004104:	4651      	mov	r1, sl
 8004106:	ebb2 0801 	subs.w	r8, r2, r1
 800410a:	4659      	mov	r1, fp
 800410c:	eb63 0901 	sbc.w	r9, r3, r1
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800411c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004120:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004124:	4690      	mov	r8, r2
 8004126:	4699      	mov	r9, r3
 8004128:	4623      	mov	r3, r4
 800412a:	eb18 0303 	adds.w	r3, r8, r3
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	462b      	mov	r3, r5
 8004132:	eb49 0303 	adc.w	r3, r9, r3
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004144:	4629      	mov	r1, r5
 8004146:	024b      	lsls	r3, r1, #9
 8004148:	4621      	mov	r1, r4
 800414a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800414e:	4621      	mov	r1, r4
 8004150:	024a      	lsls	r2, r1, #9
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800415a:	2200      	movs	r2, #0
 800415c:	65bb      	str	r3, [r7, #88]	; 0x58
 800415e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004160:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004164:	f7fc fd42 	bl	8000bec <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4613      	mov	r3, r2
 800416e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004172:	e065      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0x420>
 8004174:	40023800 	.word	0x40023800
 8004178:	00f42400 	.word	0x00f42400
 800417c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004180:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <HAL_RCC_GetSysClockFreq+0x458>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	2200      	movs	r2, #0
 8004188:	4618      	mov	r0, r3
 800418a:	4611      	mov	r1, r2
 800418c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004190:	653b      	str	r3, [r7, #80]	; 0x50
 8004192:	2300      	movs	r3, #0
 8004194:	657b      	str	r3, [r7, #84]	; 0x54
 8004196:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800419a:	4642      	mov	r2, r8
 800419c:	464b      	mov	r3, r9
 800419e:	f04f 0000 	mov.w	r0, #0
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	0159      	lsls	r1, r3, #5
 80041a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ac:	0150      	lsls	r0, r2, #5
 80041ae:	4602      	mov	r2, r0
 80041b0:	460b      	mov	r3, r1
 80041b2:	4641      	mov	r1, r8
 80041b4:	1a51      	subs	r1, r2, r1
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	4649      	mov	r1, r9
 80041ba:	eb63 0301 	sbc.w	r3, r3, r1
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80041cc:	4659      	mov	r1, fp
 80041ce:	018b      	lsls	r3, r1, #6
 80041d0:	4651      	mov	r1, sl
 80041d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041d6:	4651      	mov	r1, sl
 80041d8:	018a      	lsls	r2, r1, #6
 80041da:	4651      	mov	r1, sl
 80041dc:	1a54      	subs	r4, r2, r1
 80041de:	4659      	mov	r1, fp
 80041e0:	eb63 0501 	sbc.w	r5, r3, r1
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	00eb      	lsls	r3, r5, #3
 80041ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041f2:	00e2      	lsls	r2, r4, #3
 80041f4:	4614      	mov	r4, r2
 80041f6:	461d      	mov	r5, r3
 80041f8:	4643      	mov	r3, r8
 80041fa:	18e3      	adds	r3, r4, r3
 80041fc:	603b      	str	r3, [r7, #0]
 80041fe:	464b      	mov	r3, r9
 8004200:	eb45 0303 	adc.w	r3, r5, r3
 8004204:	607b      	str	r3, [r7, #4]
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	f04f 0300 	mov.w	r3, #0
 800420e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004212:	4629      	mov	r1, r5
 8004214:	028b      	lsls	r3, r1, #10
 8004216:	4621      	mov	r1, r4
 8004218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800421c:	4621      	mov	r1, r4
 800421e:	028a      	lsls	r2, r1, #10
 8004220:	4610      	mov	r0, r2
 8004222:	4619      	mov	r1, r3
 8004224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004228:	2200      	movs	r2, #0
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
 800422c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800422e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004232:	f7fc fcdb 	bl	8000bec <__aeabi_uldivmod>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	4613      	mov	r3, r2
 800423c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004240:	4b0d      	ldr	r3, [pc, #52]	; (8004278 <HAL_RCC_GetSysClockFreq+0x458>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	0f1b      	lsrs	r3, r3, #28
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800424e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004252:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800425e:	e003      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004262:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004266:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004268:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800426c:	4618      	mov	r0, r3
 800426e:	37b8      	adds	r7, #184	; 0xb8
 8004270:	46bd      	mov	sp, r7
 8004272:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004276:	bf00      	nop
 8004278:	40023800 	.word	0x40023800
 800427c:	00f42400 	.word	0x00f42400

08004280 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e28d      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8083 	beq.w	80043a6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042a0:	4b94      	ldr	r3, [pc, #592]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d019      	beq.n	80042e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042ac:	4b91      	ldr	r3, [pc, #580]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042b8:	4b8e      	ldr	r3, [pc, #568]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042c4:	d00c      	beq.n	80042e0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c6:	4b8b      	ldr	r3, [pc, #556]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d112      	bne.n	80042f8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042d2:	4b88      	ldr	r3, [pc, #544]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042de:	d10b      	bne.n	80042f8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	4b84      	ldr	r3, [pc, #528]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d05b      	beq.n	80043a4 <HAL_RCC_OscConfig+0x124>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d157      	bne.n	80043a4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e25a      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d106      	bne.n	8004310 <HAL_RCC_OscConfig+0x90>
 8004302:	4b7c      	ldr	r3, [pc, #496]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7b      	ldr	r2, [pc, #492]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e01d      	b.n	800434c <HAL_RCC_OscConfig+0xcc>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0xb4>
 800431a:	4b76      	ldr	r3, [pc, #472]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a75      	ldr	r2, [pc, #468]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a72      	ldr	r2, [pc, #456]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e00b      	b.n	800434c <HAL_RCC_OscConfig+0xcc>
 8004334:	4b6f      	ldr	r3, [pc, #444]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a6e      	ldr	r2, [pc, #440]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 800433a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b6c      	ldr	r3, [pc, #432]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6b      	ldr	r2, [pc, #428]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800434a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fd ff5c 	bl	8002210 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800435c:	f7fd ff58 	bl	8002210 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e21f      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b61      	ldr	r3, [pc, #388]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0xdc>
 800437a:	e014      	b.n	80043a6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fd ff48 	bl	8002210 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004384:	f7fd ff44 	bl	8002210 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e20b      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	4b57      	ldr	r3, [pc, #348]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x104>
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d06f      	beq.n	8004492 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043b2:	4b50      	ldr	r3, [pc, #320]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d017      	beq.n	80043ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043be:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d105      	bne.n	80043d6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043ca:	4b4a      	ldr	r3, [pc, #296]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043d6:	4b47      	ldr	r3, [pc, #284]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d11c      	bne.n	800441c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043e2:	4b44      	ldr	r3, [pc, #272]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_RCC_OscConfig+0x186>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d001      	beq.n	8004406 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e1d3      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004406:	4b3b      	ldr	r3, [pc, #236]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4937      	ldr	r1, [pc, #220]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	e03a      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004424:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <HAL_RCC_OscConfig+0x278>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442a:	f7fd fef1 	bl	8002210 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004432:	f7fd feed 	bl	8002210 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e1b4      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	4b2b      	ldr	r3, [pc, #172]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004450:	4b28      	ldr	r3, [pc, #160]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4925      	ldr	r1, [pc, #148]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
 8004464:	e015      	b.n	8004492 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004466:	4b24      	ldr	r3, [pc, #144]	; (80044f8 <HAL_RCC_OscConfig+0x278>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd fed0 	bl	8002210 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004474:	f7fd fecc 	bl	8002210 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e193      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	4b1b      	ldr	r3, [pc, #108]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d036      	beq.n	800450c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d016      	beq.n	80044d4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <HAL_RCC_OscConfig+0x27c>)
 80044a8:	2201      	movs	r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ac:	f7fd feb0 	bl	8002210 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b4:	f7fd feac 	bl	8002210 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e173      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c6:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <HAL_RCC_OscConfig+0x274>)
 80044c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x234>
 80044d2:	e01b      	b.n	800450c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044d4:	4b09      	ldr	r3, [pc, #36]	; (80044fc <HAL_RCC_OscConfig+0x27c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044da:	f7fd fe99 	bl	8002210 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e0:	e00e      	b.n	8004500 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044e2:	f7fd fe95 	bl	8002210 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d907      	bls.n	8004500 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e15c      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
 80044f4:	40023800 	.word	0x40023800
 80044f8:	42470000 	.word	0x42470000
 80044fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004500:	4b8a      	ldr	r3, [pc, #552]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ea      	bne.n	80044e2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8097 	beq.w	8004648 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451a:	2300      	movs	r3, #0
 800451c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451e:	4b83      	ldr	r3, [pc, #524]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10f      	bne.n	800454a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452a:	2300      	movs	r3, #0
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	4b7f      	ldr	r3, [pc, #508]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a7e      	ldr	r2, [pc, #504]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
 800453a:	4b7c      	ldr	r3, [pc, #496]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004546:	2301      	movs	r3, #1
 8004548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	4b79      	ldr	r3, [pc, #484]	; (8004730 <HAL_RCC_OscConfig+0x4b0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d118      	bne.n	8004588 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004556:	4b76      	ldr	r3, [pc, #472]	; (8004730 <HAL_RCC_OscConfig+0x4b0>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a75      	ldr	r2, [pc, #468]	; (8004730 <HAL_RCC_OscConfig+0x4b0>)
 800455c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004562:	f7fd fe55 	bl	8002210 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	e008      	b.n	800457c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456a:	f7fd fe51 	bl	8002210 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e118      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	4b6c      	ldr	r3, [pc, #432]	; (8004730 <HAL_RCC_OscConfig+0x4b0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <HAL_RCC_OscConfig+0x31e>
 8004590:	4b66      	ldr	r3, [pc, #408]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a65      	ldr	r2, [pc, #404]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	e01c      	b.n	80045d8 <HAL_RCC_OscConfig+0x358>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	2b05      	cmp	r3, #5
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x340>
 80045a6:	4b61      	ldr	r3, [pc, #388]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a60      	ldr	r2, [pc, #384]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
 80045b2:	4b5e      	ldr	r3, [pc, #376]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b6:	4a5d      	ldr	r2, [pc, #372]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	6713      	str	r3, [r2, #112]	; 0x70
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0x358>
 80045c0:	4b5a      	ldr	r3, [pc, #360]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4a59      	ldr	r2, [pc, #356]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045c6:	f023 0301 	bic.w	r3, r3, #1
 80045ca:	6713      	str	r3, [r2, #112]	; 0x70
 80045cc:	4b57      	ldr	r3, [pc, #348]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d0:	4a56      	ldr	r2, [pc, #344]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80045d2:	f023 0304 	bic.w	r3, r3, #4
 80045d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fd fe16 	bl	8002210 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fd fe12 	bl	8002210 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e0d7      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	4b4b      	ldr	r3, [pc, #300]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ee      	beq.n	80045e8 <HAL_RCC_OscConfig+0x368>
 800460a:	e014      	b.n	8004636 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460c:	f7fd fe00 	bl	8002210 <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004612:	e00a      	b.n	800462a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004614:	f7fd fdfc 	bl	8002210 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0c1      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462a:	4b40      	ldr	r3, [pc, #256]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 800462c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1ee      	bne.n	8004614 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800463c:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	4a3a      	ldr	r2, [pc, #232]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004646:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80ad 	beq.w	80047ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004652:	4b36      	ldr	r3, [pc, #216]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 030c 	and.w	r3, r3, #12
 800465a:	2b08      	cmp	r3, #8
 800465c:	d060      	beq.n	8004720 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d145      	bne.n	80046f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004666:	4b33      	ldr	r3, [pc, #204]	; (8004734 <HAL_RCC_OscConfig+0x4b4>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fd fdd0 	bl	8002210 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004674:	f7fd fdcc 	bl	8002210 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e093      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	4b29      	ldr	r3, [pc, #164]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69da      	ldr	r2, [r3, #28]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	019b      	lsls	r3, r3, #6
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	3b01      	subs	r3, #1
 80046ac:	041b      	lsls	r3, r3, #16
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046bc:	071b      	lsls	r3, r3, #28
 80046be:	491b      	ldr	r1, [pc, #108]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046c4:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCC_OscConfig+0x4b4>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ca:	f7fd fda1 	bl	8002210 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fd fd9d 	bl	8002210 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e064      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e4:	4b11      	ldr	r3, [pc, #68]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x452>
 80046f0:	e05c      	b.n	80047ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f2:	4b10      	ldr	r3, [pc, #64]	; (8004734 <HAL_RCC_OscConfig+0x4b4>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f8:	f7fd fd8a 	bl	8002210 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004700:	f7fd fd86 	bl	8002210 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e04d      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004712:	4b06      	ldr	r3, [pc, #24]	; (800472c <HAL_RCC_OscConfig+0x4ac>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d1f0      	bne.n	8004700 <HAL_RCC_OscConfig+0x480>
 800471e:	e045      	b.n	80047ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e040      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
 800472c:	40023800 	.word	0x40023800
 8004730:	40007000 	.word	0x40007000
 8004734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004738:	4b1f      	ldr	r3, [pc, #124]	; (80047b8 <HAL_RCC_OscConfig+0x538>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d030      	beq.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d129      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475e:	429a      	cmp	r2, r3
 8004760:	d122      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004768:	4013      	ands	r3, r2
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800476e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004770:	4293      	cmp	r3, r2
 8004772:	d119      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477e:	085b      	lsrs	r3, r3, #1
 8004780:	3b01      	subs	r3, #1
 8004782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d10f      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004794:	429a      	cmp	r2, r3
 8004796:	d107      	bne.n	80047a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d001      	beq.n	80047ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800

080047bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e041      	b.n	8004852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd fa3c 	bl	8001c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3304      	adds	r3, #4
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f000 fafe 	bl	8004dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b01      	cmp	r3, #1
 800486e:	d001      	beq.n	8004874 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e046      	b.n	8004902 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a23      	ldr	r2, [pc, #140]	; (8004910 <HAL_TIM_Base_Start+0xb4>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d022      	beq.n	80048cc <HAL_TIM_Base_Start+0x70>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488e:	d01d      	beq.n	80048cc <HAL_TIM_Base_Start+0x70>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <HAL_TIM_Base_Start+0xb8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d018      	beq.n	80048cc <HAL_TIM_Base_Start+0x70>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a1e      	ldr	r2, [pc, #120]	; (8004918 <HAL_TIM_Base_Start+0xbc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <HAL_TIM_Base_Start+0x70>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_TIM_Base_Start+0xc0>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00e      	beq.n	80048cc <HAL_TIM_Base_Start+0x70>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a1b      	ldr	r2, [pc, #108]	; (8004920 <HAL_TIM_Base_Start+0xc4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d009      	beq.n	80048cc <HAL_TIM_Base_Start+0x70>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a19      	ldr	r2, [pc, #100]	; (8004924 <HAL_TIM_Base_Start+0xc8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_TIM_Base_Start+0x70>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a18      	ldr	r2, [pc, #96]	; (8004928 <HAL_TIM_Base_Start+0xcc>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d111      	bne.n	80048f0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0307 	and.w	r3, r3, #7
 80048d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b06      	cmp	r3, #6
 80048dc:	d010      	beq.n	8004900 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0201 	orr.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ee:	e007      	b.n	8004900 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0201 	orr.w	r2, r2, #1
 80048fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3714      	adds	r7, #20
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	40010000 	.word	0x40010000
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	40000c00 	.word	0x40000c00
 8004920:	40010400 	.word	0x40010400
 8004924:	40014000 	.word	0x40014000
 8004928:	40001800 	.word	0x40001800

0800492c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d001      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e04e      	b.n	80049e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d022      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d01d      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d018      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a1e      	ldr	r2, [pc, #120]	; (80049f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d013      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1c      	ldr	r2, [pc, #112]	; (80049fc <HAL_TIM_Base_Start_IT+0xd0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00e      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1b      	ldr	r2, [pc, #108]	; (8004a00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <HAL_TIM_Base_Start_IT+0xd8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a18      	ldr	r2, [pc, #96]	; (8004a08 <HAL_TIM_Base_Start_IT+0xdc>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d111      	bne.n	80049d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b06      	cmp	r3, #6
 80049bc:	d010      	beq.n	80049e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ce:	e007      	b.n	80049e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0201 	orr.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	40010000 	.word	0x40010000
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40000800 	.word	0x40000800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40010400 	.word	0x40010400
 8004a04:	40014000 	.word	0x40014000
 8004a08:	40001800 	.word	0x40001800

08004a0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d122      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d11b      	bne.n	8004a68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0202 	mvn.w	r2, #2
 8004a38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f003 0303 	and.w	r3, r3, #3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f9b5 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004a54:	e005      	b.n	8004a62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9a7 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f9b8 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	d122      	bne.n	8004abc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d11b      	bne.n	8004abc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0204 	mvn.w	r2, #4
 8004a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 f98b 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f97d 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f98e 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d122      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d11b      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0208 	mvn.w	r2, #8
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f961 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f953 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f964 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b10      	cmp	r3, #16
 8004b1c:	d122      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0310 	and.w	r3, r3, #16
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d11b      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0210 	mvn.w	r2, #16
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2208      	movs	r2, #8
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f937 	bl	8004dbe <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f929 	bl	8004daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f93a 	bl	8004dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d10e      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0201 	mvn.w	r2, #1
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fc fe6c 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d10e      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba8:	2b80      	cmp	r3, #128	; 0x80
 8004baa:	d107      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fae0 	bl	800517c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d10e      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd4:	2b40      	cmp	r3, #64	; 0x40
 8004bd6:	d107      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f8ff 	bl	8004de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d10e      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d107      	bne.n	8004c14 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0220 	mvn.w	r2, #32
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 faaa 	bl	8005168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_TIM_ConfigClockSource+0x1c>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e0b4      	b.n	8004da2 <HAL_TIM_ConfigClockSource+0x186>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2202      	movs	r2, #2
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c70:	d03e      	beq.n	8004cf0 <HAL_TIM_ConfigClockSource+0xd4>
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	f200 8087 	bhi.w	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	f000 8086 	beq.w	8004d8e <HAL_TIM_ConfigClockSource+0x172>
 8004c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c86:	d87f      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b70      	cmp	r3, #112	; 0x70
 8004c8a:	d01a      	beq.n	8004cc2 <HAL_TIM_ConfigClockSource+0xa6>
 8004c8c:	2b70      	cmp	r3, #112	; 0x70
 8004c8e:	d87b      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b60      	cmp	r3, #96	; 0x60
 8004c92:	d050      	beq.n	8004d36 <HAL_TIM_ConfigClockSource+0x11a>
 8004c94:	2b60      	cmp	r3, #96	; 0x60
 8004c96:	d877      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004c98:	2b50      	cmp	r3, #80	; 0x50
 8004c9a:	d03c      	beq.n	8004d16 <HAL_TIM_ConfigClockSource+0xfa>
 8004c9c:	2b50      	cmp	r3, #80	; 0x50
 8004c9e:	d873      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d058      	beq.n	8004d56 <HAL_TIM_ConfigClockSource+0x13a>
 8004ca4:	2b40      	cmp	r3, #64	; 0x40
 8004ca6:	d86f      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004ca8:	2b30      	cmp	r3, #48	; 0x30
 8004caa:	d064      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15a>
 8004cac:	2b30      	cmp	r3, #48	; 0x30
 8004cae:	d86b      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d060      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15a>
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d867      	bhi.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d05c      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15a>
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d05a      	beq.n	8004d76 <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	e062      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	6899      	ldr	r1, [r3, #8]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f000 f9ad 	bl	8005030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	609a      	str	r2, [r3, #8]
      break;
 8004cee:	e04f      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f000 f996 	bl	8005030 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d12:	609a      	str	r2, [r3, #8]
      break;
 8004d14:	e03c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	6859      	ldr	r1, [r3, #4]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	461a      	mov	r2, r3
 8004d24:	f000 f90a 	bl	8004f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2150      	movs	r1, #80	; 0x50
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f963 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004d34:	e02c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	6859      	ldr	r1, [r3, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	461a      	mov	r2, r3
 8004d44:	f000 f929 	bl	8004f9a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2160      	movs	r1, #96	; 0x60
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f953 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004d54:	e01c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6859      	ldr	r1, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	461a      	mov	r2, r3
 8004d64:	f000 f8ea 	bl	8004f3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2140      	movs	r1, #64	; 0x40
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 f943 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004d74:	e00c      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 f93a 	bl	8004ffa <TIM_ITRx_SetConfig>
      break;
 8004d86:	e003      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d8c:	e000      	b.n	8004d90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dda:	bf00      	nop
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
	...

08004dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a40      	ldr	r2, [pc, #256]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d013      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1a:	d00f      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a3d      	ldr	r2, [pc, #244]	; (8004f14 <TIM_Base_SetConfig+0x118>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00b      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a3c      	ldr	r2, [pc, #240]	; (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d007      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a3b      	ldr	r2, [pc, #236]	; (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d003      	beq.n	8004e3c <TIM_Base_SetConfig+0x40>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a3a      	ldr	r2, [pc, #232]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d108      	bne.n	8004e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d02b      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5c:	d027      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2c      	ldr	r2, [pc, #176]	; (8004f14 <TIM_Base_SetConfig+0x118>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d023      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2b      	ldr	r2, [pc, #172]	; (8004f18 <TIM_Base_SetConfig+0x11c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01f      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2a      	ldr	r2, [pc, #168]	; (8004f1c <TIM_Base_SetConfig+0x120>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d01b      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a29      	ldr	r2, [pc, #164]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d017      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <TIM_Base_SetConfig+0x128>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <TIM_Base_SetConfig+0x12c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d00f      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <TIM_Base_SetConfig+0x130>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00b      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a25      	ldr	r2, [pc, #148]	; (8004f30 <TIM_Base_SetConfig+0x134>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d007      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <TIM_Base_SetConfig+0x138>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d003      	beq.n	8004eae <TIM_Base_SetConfig+0xb2>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a23      	ldr	r2, [pc, #140]	; (8004f38 <TIM_Base_SetConfig+0x13c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d108      	bne.n	8004ec0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <TIM_Base_SetConfig+0x114>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d003      	beq.n	8004ef4 <TIM_Base_SetConfig+0xf8>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a0c      	ldr	r2, [pc, #48]	; (8004f20 <TIM_Base_SetConfig+0x124>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d103      	bne.n	8004efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	615a      	str	r2, [r3, #20]
}
 8004f02:	bf00      	nop
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40010400 	.word	0x40010400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	40014800 	.word	0x40014800
 8004f30:	40001800 	.word	0x40001800
 8004f34:	40001c00 	.word	0x40001c00
 8004f38:	40002000 	.word	0x40002000

08004f3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f023 0201 	bic.w	r2, r3, #1
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	011b      	lsls	r3, r3, #4
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f023 030a 	bic.w	r3, r3, #10
 8004f78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	621a      	str	r2, [r3, #32]
}
 8004f8e:	bf00      	nop
 8004f90:	371c      	adds	r7, #28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b087      	sub	sp, #28
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	60f8      	str	r0, [r7, #12]
 8004fa2:	60b9      	str	r1, [r7, #8]
 8004fa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 0210 	bic.w	r2, r3, #16
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a1b      	ldr	r3, [r3, #32]
 8004fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	031b      	lsls	r3, r3, #12
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b085      	sub	sp, #20
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005010:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4313      	orrs	r3, r2
 8005018:	f043 0307 	orr.w	r3, r3, #7
 800501c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	609a      	str	r2, [r3, #8]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr

08005030 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800504a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	021a      	lsls	r2, r3, #8
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	431a      	orrs	r2, r3
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005084:	2302      	movs	r3, #2
 8005086:	e05a      	b.n	800513e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a21      	ldr	r2, [pc, #132]	; (800514c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d022      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d4:	d01d      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d018      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1b      	ldr	r2, [pc, #108]	; (8005154 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00e      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a18      	ldr	r2, [pc, #96]	; (800515c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a17      	ldr	r2, [pc, #92]	; (8005160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a15      	ldr	r2, [pc, #84]	; (8005164 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d10c      	bne.n	800512c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	4313      	orrs	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000
 8005150:	40000400 	.word	0x40000400
 8005154:	40000800 	.word	0x40000800
 8005158:	40000c00 	.word	0x40000c00
 800515c:	40010400 	.word	0x40010400
 8005160:	40014000 	.word	0x40014000
 8005164:	40001800 	.word	0x40001800

08005168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e03f      	b.n	8005222 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d106      	bne.n	80051bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fc fd96 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2224      	movs	r2, #36	; 0x24
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 ff43 	bl	8006060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695a      	ldr	r2, [r3, #20]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005208:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	; 0x30
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	4613      	mov	r3, r2
 8005238:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b20      	cmp	r3, #32
 8005244:	d165      	bne.n	8005312 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_UART_Transmit_DMA+0x26>
 800524c:	88fb      	ldrh	r3, [r7, #6]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e05e      	b.n	8005314 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525c:	2b01      	cmp	r3, #1
 800525e:	d101      	bne.n	8005264 <HAL_UART_Transmit_DMA+0x38>
 8005260:	2302      	movs	r3, #2
 8005262:	e057      	b.n	8005314 <HAL_UART_Transmit_DMA+0xe8>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2221      	movs	r2, #33	; 0x21
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <HAL_UART_Transmit_DMA+0xf0>)
 8005292:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005298:	4a21      	ldr	r2, [pc, #132]	; (8005320 <HAL_UART_Transmit_DMA+0xf4>)
 800529a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a0:	4a20      	ldr	r2, [pc, #128]	; (8005324 <HAL_UART_Transmit_DMA+0xf8>)
 80052a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a8:	2200      	movs	r2, #0
 80052aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80052ac:	f107 0308 	add.w	r3, r7, #8
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	6819      	ldr	r1, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3304      	adds	r3, #4
 80052c0:	461a      	mov	r2, r3
 80052c2:	88fb      	ldrh	r3, [r7, #6]
 80052c4:	f7fd ff28 	bl	8003118 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	617b      	str	r3, [r7, #20]
   return(result);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fa:	627a      	str	r2, [r7, #36]	; 0x24
 80052fc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6a39      	ldr	r1, [r7, #32]
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	61fb      	str	r3, [r7, #28]
   return(result);
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	e000      	b.n	8005314 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005312:	2302      	movs	r3, #2
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3730      	adds	r7, #48	; 0x30
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	080058f9 	.word	0x080058f9
 8005320:	08005993 	.word	0x08005993
 8005324:	08005b0b 	.word	0x08005b0b

08005328 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b20      	cmp	r3, #32
 8005340:	d11d      	bne.n	800537e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_UART_Receive_DMA+0x26>
 8005348:	88fb      	ldrh	r3, [r7, #6]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e016      	b.n	8005380 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_UART_Receive_DMA+0x38>
 800535c:	2302      	movs	r3, #2
 800535e:	e00f      	b.n	8005380 <HAL_UART_Receive_DMA+0x58>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800536e:	88fb      	ldrh	r3, [r7, #6]
 8005370:	461a      	mov	r2, r3
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 fc13 	bl	8005ba0 <UART_Start_Receive_DMA>
 800537a:	4603      	mov	r3, r0
 800537c:	e000      	b.n	8005380 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b0ba      	sub	sp, #232	; 0xe8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10f      	bne.n	80053ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <HAL_UART_IRQHandler+0x66>
 80053da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 fd7f 	bl	8005eea <UART_Receive_IT>
      return;
 80053ec:	e256      	b.n	800589c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 80de 	beq.w	80055b4 <HAL_UART_IRQHandler+0x22c>
 80053f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005408:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 80d1 	beq.w	80055b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <HAL_UART_IRQHandler+0xae>
 800541e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f043 0201 	orr.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00b      	beq.n	800545a <HAL_UART_IRQHandler+0xd2>
 8005442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d005      	beq.n	800545a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f043 0202 	orr.w	r2, r3, #2
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_UART_IRQHandler+0xf6>
 8005466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	f043 0204 	orr.w	r2, r3, #4
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800547e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d011      	beq.n	80054ae <HAL_UART_IRQHandler+0x126>
 800548a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d105      	bne.n	80054a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f043 0208 	orr.w	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 81ed 	beq.w	8005892 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_UART_IRQHandler+0x14e>
 80054c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fd0a 	bl	8005eea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d103      	bne.n	8005502 <HAL_UART_IRQHandler+0x17a>
 80054fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d04f      	beq.n	80055a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fc12 	bl	8005d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d141      	bne.n	800559a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3314      	adds	r3, #20
 800551c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005524:	e853 3f00 	ldrex	r3, [r3]
 8005528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800552c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3314      	adds	r3, #20
 800553e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005542:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005546:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800554e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800555a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1d9      	bne.n	8005516 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	2b00      	cmp	r3, #0
 8005568:	d013      	beq.n	8005592 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556e:	4a7d      	ldr	r2, [pc, #500]	; (8005764 <HAL_UART_IRQHandler+0x3dc>)
 8005570:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	4618      	mov	r0, r3
 8005578:	f7fd fe96 	bl	80032a8 <HAL_DMA_Abort_IT>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d016      	beq.n	80055b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800558c:	4610      	mov	r0, r2
 800558e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	e00e      	b.n	80055b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f99a 	bl	80058cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005598:	e00a      	b.n	80055b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f996 	bl	80058cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a0:	e006      	b.n	80055b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f992 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055ae:	e170      	b.n	8005892 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	bf00      	nop
    return;
 80055b2:	e16e      	b.n	8005892 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	f040 814a 	bne.w	8005852 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8143 	beq.w	8005852 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 813c 	beq.w	8005852 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055da:	2300      	movs	r3, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	60bb      	str	r3, [r7, #8]
 80055ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fa:	2b40      	cmp	r3, #64	; 0x40
 80055fc:	f040 80b4 	bne.w	8005768 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800560c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 8140 	beq.w	8005896 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800561a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800561e:	429a      	cmp	r2, r3
 8005620:	f080 8139 	bcs.w	8005896 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800562a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005636:	f000 8088 	beq.w	800574a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	330c      	adds	r3, #12
 8005640:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005644:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005648:	e853 3f00 	ldrex	r3, [r3]
 800564c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005658:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	330c      	adds	r3, #12
 8005662:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005666:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800566a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005672:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005676:	e841 2300 	strex	r3, r2, [r1]
 800567a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800567e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1d9      	bne.n	800563a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3314      	adds	r3, #20
 800568c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005690:	e853 3f00 	ldrex	r3, [r3]
 8005694:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	3314      	adds	r3, #20
 80056a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056b6:	e841 2300 	strex	r3, r2, [r1]
 80056ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1e1      	bne.n	8005686 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3314      	adds	r3, #20
 80056c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	3314      	adds	r3, #20
 80056e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056ee:	e841 2300 	strex	r3, r2, [r1]
 80056f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1e3      	bne.n	80056c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571a:	f023 0310 	bic.w	r3, r3, #16
 800571e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	330c      	adds	r3, #12
 8005728:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800572c:	65ba      	str	r2, [r7, #88]	; 0x58
 800572e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005732:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800573a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e3      	bne.n	8005708 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005744:	4618      	mov	r0, r3
 8005746:	f7fd fd3f 	bl	80031c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005752:	b29b      	uxth	r3, r3
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	b29b      	uxth	r3, r3
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f8c0 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005760:	e099      	b.n	8005896 <HAL_UART_IRQHandler+0x50e>
 8005762:	bf00      	nop
 8005764:	08005df3 	.word	0x08005df3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005770:	b29b      	uxth	r3, r3
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 808b 	beq.w	800589a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005784:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 8086 	beq.w	800589a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	330c      	adds	r3, #12
 8005794:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057b2:	647a      	str	r2, [r7, #68]	; 0x44
 80057b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e3      	bne.n	800578e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3314      	adds	r3, #20
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	e853 3f00 	ldrex	r3, [r3]
 80057d4:	623b      	str	r3, [r7, #32]
   return(result);
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	f023 0301 	bic.w	r3, r3, #1
 80057dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3314      	adds	r3, #20
 80057e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057ea:	633a      	str	r2, [r7, #48]	; 0x30
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1e3      	bne.n	80057c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2220      	movs	r2, #32
 8005802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	330c      	adds	r3, #12
 8005812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	60fb      	str	r3, [r7, #12]
   return(result);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0310 	bic.w	r3, r3, #16
 8005822:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	330c      	adds	r3, #12
 800582c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005830:	61fa      	str	r2, [r7, #28]
 8005832:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	69b9      	ldr	r1, [r7, #24]
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	617b      	str	r3, [r7, #20]
   return(result);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e3      	bne.n	800580c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005844:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005848:	4619      	mov	r1, r3
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f848 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005850:	e023      	b.n	800589a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d009      	beq.n	8005872 <HAL_UART_IRQHandler+0x4ea>
 800585e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fad5 	bl	8005e1a <UART_Transmit_IT>
    return;
 8005870:	e014      	b.n	800589c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00e      	beq.n	800589c <HAL_UART_IRQHandler+0x514>
 800587e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fb15 	bl	8005eba <UART_EndTransmit_IT>
    return;
 8005890:	e004      	b.n	800589c <HAL_UART_IRQHandler+0x514>
    return;
 8005892:	bf00      	nop
 8005894:	e002      	b.n	800589c <HAL_UART_IRQHandler+0x514>
      return;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <HAL_UART_IRQHandler+0x514>
      return;
 800589a:	bf00      	nop
  }
}
 800589c:	37e8      	adds	r7, #232	; 0xe8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop

080058a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	460b      	mov	r3, r1
 80058ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b090      	sub	sp, #64	; 0x40
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005910:	2b00      	cmp	r3, #0
 8005912:	d137      	bne.n	8005984 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005916:	2200      	movs	r2, #0
 8005918:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800591a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	623b      	str	r3, [r7, #32]
   return(result);
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
 8005932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3314      	adds	r3, #20
 8005938:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800593a:	633a      	str	r2, [r7, #48]	; 0x30
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005942:	e841 2300 	strex	r3, r2, [r1]
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1e5      	bne.n	800591a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800594e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	330c      	adds	r3, #12
 8005954:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	60fb      	str	r3, [r7, #12]
   return(result);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005964:	637b      	str	r3, [r7, #52]	; 0x34
 8005966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800596e:	61fa      	str	r2, [r7, #28]
 8005970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	69b9      	ldr	r1, [r7, #24]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	617b      	str	r3, [r7, #20]
   return(result);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e5      	bne.n	800594e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005982:	e002      	b.n	800598a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005984:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005986:	f7fb faf3 	bl	8000f70 <HAL_UART_TxCpltCallback>
}
 800598a:	bf00      	nop
 800598c:	3740      	adds	r7, #64	; 0x40
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff ff7f 	bl	80058a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059a6:	bf00      	nop
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b09c      	sub	sp, #112	; 0x70
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d172      	bne.n	8005ab0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80059ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059cc:	2200      	movs	r2, #0
 80059ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80059e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80059f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80059f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80059fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e5      	bne.n	80059d0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a16:	f023 0301 	bic.w	r3, r3, #1
 8005a1a:	667b      	str	r3, [r7, #100]	; 0x64
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3314      	adds	r3, #20
 8005a22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005a24:	647a      	str	r2, [r7, #68]	; 0x44
 8005a26:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e5      	bne.n	8005a04 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	623b      	str	r3, [r7, #32]
   return(result);
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8005a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a58:	633a      	str	r2, [r7, #48]	; 0x30
 8005a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e5      	bne.n	8005a38 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6e:	2220      	movs	r2, #32
 8005a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d119      	bne.n	8005ab0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a9c:	61fa      	str	r2, [r7, #28]
 8005a9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	69b9      	ldr	r1, [r7, #24]
 8005aa2:	69fa      	ldr	r2, [r7, #28]
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d106      	bne.n	8005ac6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005abc:	4619      	mov	r1, r3
 8005abe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ac0:	f7ff ff0e 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005ac4:	e002      	b.n	8005acc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005ac6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005ac8:	f7fb fa5c 	bl	8000f84 <HAL_UART_RxCpltCallback>
}
 8005acc:	bf00      	nop
 8005ace:	3770      	adds	r7, #112	; 0x70
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d108      	bne.n	8005afc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005aee:	085b      	lsrs	r3, r3, #1
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4619      	mov	r1, r3
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f7ff fef3 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005afa:	e002      	b.n	8005b02 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f7ff fedb 	bl	80058b8 <HAL_UART_RxHalfCpltCallback>
}
 8005b02:	bf00      	nop
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b80      	cmp	r3, #128	; 0x80
 8005b28:	bf0c      	ite	eq
 8005b2a:	2301      	moveq	r3, #1
 8005b2c:	2300      	movne	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b21      	cmp	r3, #33	; 0x21
 8005b3c:	d108      	bne.n	8005b50 <UART_DMAError+0x46>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2200      	movs	r2, #0
 8005b48:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005b4a:	68b8      	ldr	r0, [r7, #8]
 8005b4c:	f000 f8c6 	bl	8005cdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	bf0c      	ite	eq
 8005b5e:	2301      	moveq	r3, #1
 8005b60:	2300      	movne	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b22      	cmp	r3, #34	; 0x22
 8005b70:	d108      	bne.n	8005b84 <UART_DMAError+0x7a>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005b7e:	68b8      	ldr	r0, [r7, #8]
 8005b80:	f000 f8d4 	bl	8005d2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f043 0210 	orr.w	r2, r3, #16
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b90:	68b8      	ldr	r0, [r7, #8]
 8005b92:	f7ff fe9b 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b098      	sub	sp, #96	; 0x60
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	88fa      	ldrh	r2, [r7, #6]
 8005bb8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2222      	movs	r2, #34	; 0x22
 8005bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	4a40      	ldr	r2, [pc, #256]	; (8005cd0 <UART_Start_Receive_DMA+0x130>)
 8005bce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd4:	4a3f      	ldr	r2, [pc, #252]	; (8005cd4 <UART_Start_Receive_DMA+0x134>)
 8005bd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	4a3e      	ldr	r2, [pc, #248]	; (8005cd8 <UART_Start_Receive_DMA+0x138>)
 8005bde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	2200      	movs	r2, #0
 8005be6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005be8:	f107 0308 	add.w	r3, r7, #8
 8005bec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	f7fd fa8a 	bl	8003118 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	613b      	str	r3, [r7, #16]
 8005c18:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d019      	beq.n	8005c5e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	330c      	adds	r3, #12
 8005c30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c34:	e853 3f00 	ldrex	r3, [r3]
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c40:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	330c      	adds	r3, #12
 8005c48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c4a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005c4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e5      	bne.n	8005c2a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3314      	adds	r3, #20
 8005c64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c70:	f043 0301 	orr.w	r3, r3, #1
 8005c74:	657b      	str	r3, [r7, #84]	; 0x54
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	3314      	adds	r3, #20
 8005c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c7e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e5      	bne.n	8005c5e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3314      	adds	r3, #20
 8005c98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ca8:	653b      	str	r3, [r7, #80]	; 0x50
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3314      	adds	r3, #20
 8005cb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cb2:	627a      	str	r2, [r7, #36]	; 0x24
 8005cb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb6:	6a39      	ldr	r1, [r7, #32]
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1e5      	bne.n	8005c92 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3760      	adds	r7, #96	; 0x60
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	080059af 	.word	0x080059af
 8005cd4:	08005ad5 	.word	0x08005ad5
 8005cd8:	08005b0b 	.word	0x08005b0b

08005cdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	330c      	adds	r3, #12
 8005cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	e853 3f00 	ldrex	r3, [r3]
 8005cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	61ba      	str	r2, [r7, #24]
 8005d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d08:	6979      	ldr	r1, [r7, #20]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	e841 2300 	strex	r3, r2, [r1]
 8005d10:	613b      	str	r3, [r7, #16]
   return(result);
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1e5      	bne.n	8005ce4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005d20:	bf00      	nop
 8005d22:	3724      	adds	r7, #36	; 0x24
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b095      	sub	sp, #84	; 0x54
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d54:	643a      	str	r2, [r7, #64]	; 0x40
 8005d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e5      	bne.n	8005d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3314      	adds	r3, #20
 8005d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f023 0301 	bic.w	r3, r3, #1
 8005d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3314      	adds	r3, #20
 8005d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e5      	bne.n	8005d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d119      	bne.n	8005dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	647b      	str	r3, [r7, #68]	; 0x44
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dc4:	61ba      	str	r2, [r7, #24]
 8005dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6979      	ldr	r1, [r7, #20]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e5      	bne.n	8005da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005de6:	bf00      	nop
 8005de8:	3754      	adds	r7, #84	; 0x54
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fd5d 	bl	80058cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b21      	cmp	r3, #33	; 0x21
 8005e2c:	d13e      	bne.n	8005eac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e36:	d114      	bne.n	8005e62 <UART_Transmit_IT+0x48>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d110      	bne.n	8005e62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	1c9a      	adds	r2, r3, #2
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	621a      	str	r2, [r3, #32]
 8005e60:	e008      	b.n	8005e74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	1c59      	adds	r1, r3, #1
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6211      	str	r1, [r2, #32]
 8005e6c:	781a      	ldrb	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4619      	mov	r1, r3
 8005e82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10f      	bne.n	8005ea8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e000      	b.n	8005eae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
  }
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fb f848 	bl	8000f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b08c      	sub	sp, #48	; 0x30
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b22      	cmp	r3, #34	; 0x22
 8005efc:	f040 80ab 	bne.w	8006056 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f08:	d117      	bne.n	8005f3a <UART_Receive_IT+0x50>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d113      	bne.n	8005f3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	1c9a      	adds	r2, r3, #2
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	629a      	str	r2, [r3, #40]	; 0x28
 8005f38:	e026      	b.n	8005f88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4c:	d007      	beq.n	8005f5e <UART_Receive_IT+0x74>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <UART_Receive_IT+0x82>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	e008      	b.n	8005f7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	4619      	mov	r1, r3
 8005f96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d15a      	bne.n	8006052 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0220 	bic.w	r2, r2, #32
 8005faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695a      	ldr	r2, [r3, #20]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d135      	bne.n	8006048 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f023 0310 	bic.w	r3, r3, #16
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006002:	623a      	str	r2, [r7, #32]
 8006004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	69f9      	ldr	r1, [r7, #28]
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b10      	cmp	r3, #16
 8006022:	d10a      	bne.n	800603a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fc4d 	bl	80058e0 <HAL_UARTEx_RxEventCallback>
 8006046:	e002      	b.n	800604e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7fa ff9b 	bl	8000f84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	e002      	b.n	8006058 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	3730      	adds	r7, #48	; 0x30
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006064:	b0c0      	sub	sp, #256	; 0x100
 8006066:	af00      	add	r7, sp, #0
 8006068:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607c:	68d9      	ldr	r1, [r3, #12]
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	ea40 0301 	orr.w	r3, r0, r1
 8006088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800608a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	431a      	orrs	r2, r3
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	431a      	orrs	r2, r3
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060b8:	f021 010c 	bic.w	r1, r1, #12
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060c6:	430b      	orrs	r3, r1
 80060c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060da:	6999      	ldr	r1, [r3, #24]
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	ea40 0301 	orr.w	r3, r0, r1
 80060e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4b8f      	ldr	r3, [pc, #572]	; (800632c <UART_SetConfig+0x2cc>)
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d005      	beq.n	8006100 <UART_SetConfig+0xa0>
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b8d      	ldr	r3, [pc, #564]	; (8006330 <UART_SetConfig+0x2d0>)
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d104      	bne.n	800610a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006100:	f7fd fe48 	bl	8003d94 <HAL_RCC_GetPCLK2Freq>
 8006104:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006108:	e003      	b.n	8006112 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800610a:	f7fd fe2f 	bl	8003d6c <HAL_RCC_GetPCLK1Freq>
 800610e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611c:	f040 810c 	bne.w	8006338 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800612a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800612e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006132:	4622      	mov	r2, r4
 8006134:	462b      	mov	r3, r5
 8006136:	1891      	adds	r1, r2, r2
 8006138:	65b9      	str	r1, [r7, #88]	; 0x58
 800613a:	415b      	adcs	r3, r3
 800613c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800613e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006142:	4621      	mov	r1, r4
 8006144:	eb12 0801 	adds.w	r8, r2, r1
 8006148:	4629      	mov	r1, r5
 800614a:	eb43 0901 	adc.w	r9, r3, r1
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800615a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800615e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006162:	4690      	mov	r8, r2
 8006164:	4699      	mov	r9, r3
 8006166:	4623      	mov	r3, r4
 8006168:	eb18 0303 	adds.w	r3, r8, r3
 800616c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006170:	462b      	mov	r3, r5
 8006172:	eb49 0303 	adc.w	r3, r9, r3
 8006176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800617a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006186:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800618a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800618e:	460b      	mov	r3, r1
 8006190:	18db      	adds	r3, r3, r3
 8006192:	653b      	str	r3, [r7, #80]	; 0x50
 8006194:	4613      	mov	r3, r2
 8006196:	eb42 0303 	adc.w	r3, r2, r3
 800619a:	657b      	str	r3, [r7, #84]	; 0x54
 800619c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80061a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80061a4:	f7fa fd22 	bl	8000bec <__aeabi_uldivmod>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4b61      	ldr	r3, [pc, #388]	; (8006334 <UART_SetConfig+0x2d4>)
 80061ae:	fba3 2302 	umull	r2, r3, r3, r2
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	011c      	lsls	r4, r3, #4
 80061b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061c8:	4642      	mov	r2, r8
 80061ca:	464b      	mov	r3, r9
 80061cc:	1891      	adds	r1, r2, r2
 80061ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80061d0:	415b      	adcs	r3, r3
 80061d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061d8:	4641      	mov	r1, r8
 80061da:	eb12 0a01 	adds.w	sl, r2, r1
 80061de:	4649      	mov	r1, r9
 80061e0:	eb43 0b01 	adc.w	fp, r3, r1
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061f8:	4692      	mov	sl, r2
 80061fa:	469b      	mov	fp, r3
 80061fc:	4643      	mov	r3, r8
 80061fe:	eb1a 0303 	adds.w	r3, sl, r3
 8006202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006206:	464b      	mov	r3, r9
 8006208:	eb4b 0303 	adc.w	r3, fp, r3
 800620c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800621c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006220:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006224:	460b      	mov	r3, r1
 8006226:	18db      	adds	r3, r3, r3
 8006228:	643b      	str	r3, [r7, #64]	; 0x40
 800622a:	4613      	mov	r3, r2
 800622c:	eb42 0303 	adc.w	r3, r2, r3
 8006230:	647b      	str	r3, [r7, #68]	; 0x44
 8006232:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006236:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800623a:	f7fa fcd7 	bl	8000bec <__aeabi_uldivmod>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4611      	mov	r1, r2
 8006244:	4b3b      	ldr	r3, [pc, #236]	; (8006334 <UART_SetConfig+0x2d4>)
 8006246:	fba3 2301 	umull	r2, r3, r3, r1
 800624a:	095b      	lsrs	r3, r3, #5
 800624c:	2264      	movs	r2, #100	; 0x64
 800624e:	fb02 f303 	mul.w	r3, r2, r3
 8006252:	1acb      	subs	r3, r1, r3
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800625a:	4b36      	ldr	r3, [pc, #216]	; (8006334 <UART_SetConfig+0x2d4>)
 800625c:	fba3 2302 	umull	r2, r3, r3, r2
 8006260:	095b      	lsrs	r3, r3, #5
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006268:	441c      	add	r4, r3
 800626a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626e:	2200      	movs	r2, #0
 8006270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006274:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006278:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800627c:	4642      	mov	r2, r8
 800627e:	464b      	mov	r3, r9
 8006280:	1891      	adds	r1, r2, r2
 8006282:	63b9      	str	r1, [r7, #56]	; 0x38
 8006284:	415b      	adcs	r3, r3
 8006286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800628c:	4641      	mov	r1, r8
 800628e:	1851      	adds	r1, r2, r1
 8006290:	6339      	str	r1, [r7, #48]	; 0x30
 8006292:	4649      	mov	r1, r9
 8006294:	414b      	adcs	r3, r1
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80062a4:	4659      	mov	r1, fp
 80062a6:	00cb      	lsls	r3, r1, #3
 80062a8:	4651      	mov	r1, sl
 80062aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ae:	4651      	mov	r1, sl
 80062b0:	00ca      	lsls	r2, r1, #3
 80062b2:	4610      	mov	r0, r2
 80062b4:	4619      	mov	r1, r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	4642      	mov	r2, r8
 80062ba:	189b      	adds	r3, r3, r2
 80062bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c0:	464b      	mov	r3, r9
 80062c2:	460a      	mov	r2, r1
 80062c4:	eb42 0303 	adc.w	r3, r2, r3
 80062c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062e0:	460b      	mov	r3, r1
 80062e2:	18db      	adds	r3, r3, r3
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062e6:	4613      	mov	r3, r2
 80062e8:	eb42 0303 	adc.w	r3, r2, r3
 80062ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062f6:	f7fa fc79 	bl	8000bec <__aeabi_uldivmod>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <UART_SetConfig+0x2d4>)
 8006300:	fba3 1302 	umull	r1, r3, r3, r2
 8006304:	095b      	lsrs	r3, r3, #5
 8006306:	2164      	movs	r1, #100	; 0x64
 8006308:	fb01 f303 	mul.w	r3, r1, r3
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	3332      	adds	r3, #50	; 0x32
 8006312:	4a08      	ldr	r2, [pc, #32]	; (8006334 <UART_SetConfig+0x2d4>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	f003 0207 	and.w	r2, r3, #7
 800631e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4422      	add	r2, r4
 8006326:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006328:	e105      	b.n	8006536 <UART_SetConfig+0x4d6>
 800632a:	bf00      	nop
 800632c:	40011000 	.word	0x40011000
 8006330:	40011400 	.word	0x40011400
 8006334:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800633c:	2200      	movs	r2, #0
 800633e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006342:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006346:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800634a:	4642      	mov	r2, r8
 800634c:	464b      	mov	r3, r9
 800634e:	1891      	adds	r1, r2, r2
 8006350:	6239      	str	r1, [r7, #32]
 8006352:	415b      	adcs	r3, r3
 8006354:	627b      	str	r3, [r7, #36]	; 0x24
 8006356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800635a:	4641      	mov	r1, r8
 800635c:	1854      	adds	r4, r2, r1
 800635e:	4649      	mov	r1, r9
 8006360:	eb43 0501 	adc.w	r5, r3, r1
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	f04f 0300 	mov.w	r3, #0
 800636c:	00eb      	lsls	r3, r5, #3
 800636e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006372:	00e2      	lsls	r2, r4, #3
 8006374:	4614      	mov	r4, r2
 8006376:	461d      	mov	r5, r3
 8006378:	4643      	mov	r3, r8
 800637a:	18e3      	adds	r3, r4, r3
 800637c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006380:	464b      	mov	r3, r9
 8006382:	eb45 0303 	adc.w	r3, r5, r3
 8006386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800638a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800639a:	f04f 0200 	mov.w	r2, #0
 800639e:	f04f 0300 	mov.w	r3, #0
 80063a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80063a6:	4629      	mov	r1, r5
 80063a8:	008b      	lsls	r3, r1, #2
 80063aa:	4621      	mov	r1, r4
 80063ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063b0:	4621      	mov	r1, r4
 80063b2:	008a      	lsls	r2, r1, #2
 80063b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063b8:	f7fa fc18 	bl	8000bec <__aeabi_uldivmod>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4b60      	ldr	r3, [pc, #384]	; (8006544 <UART_SetConfig+0x4e4>)
 80063c2:	fba3 2302 	umull	r2, r3, r3, r2
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	011c      	lsls	r4, r3, #4
 80063ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063dc:	4642      	mov	r2, r8
 80063de:	464b      	mov	r3, r9
 80063e0:	1891      	adds	r1, r2, r2
 80063e2:	61b9      	str	r1, [r7, #24]
 80063e4:	415b      	adcs	r3, r3
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063ec:	4641      	mov	r1, r8
 80063ee:	1851      	adds	r1, r2, r1
 80063f0:	6139      	str	r1, [r7, #16]
 80063f2:	4649      	mov	r1, r9
 80063f4:	414b      	adcs	r3, r1
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006404:	4659      	mov	r1, fp
 8006406:	00cb      	lsls	r3, r1, #3
 8006408:	4651      	mov	r1, sl
 800640a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800640e:	4651      	mov	r1, sl
 8006410:	00ca      	lsls	r2, r1, #3
 8006412:	4610      	mov	r0, r2
 8006414:	4619      	mov	r1, r3
 8006416:	4603      	mov	r3, r0
 8006418:	4642      	mov	r2, r8
 800641a:	189b      	adds	r3, r3, r2
 800641c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006420:	464b      	mov	r3, r9
 8006422:	460a      	mov	r2, r1
 8006424:	eb42 0303 	adc.w	r3, r2, r3
 8006428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	67bb      	str	r3, [r7, #120]	; 0x78
 8006436:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006444:	4649      	mov	r1, r9
 8006446:	008b      	lsls	r3, r1, #2
 8006448:	4641      	mov	r1, r8
 800644a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800644e:	4641      	mov	r1, r8
 8006450:	008a      	lsls	r2, r1, #2
 8006452:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006456:	f7fa fbc9 	bl	8000bec <__aeabi_uldivmod>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4b39      	ldr	r3, [pc, #228]	; (8006544 <UART_SetConfig+0x4e4>)
 8006460:	fba3 1302 	umull	r1, r3, r3, r2
 8006464:	095b      	lsrs	r3, r3, #5
 8006466:	2164      	movs	r1, #100	; 0x64
 8006468:	fb01 f303 	mul.w	r3, r1, r3
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	011b      	lsls	r3, r3, #4
 8006470:	3332      	adds	r3, #50	; 0x32
 8006472:	4a34      	ldr	r2, [pc, #208]	; (8006544 <UART_SetConfig+0x4e4>)
 8006474:	fba2 2303 	umull	r2, r3, r2, r3
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800647e:	441c      	add	r4, r3
 8006480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006484:	2200      	movs	r2, #0
 8006486:	673b      	str	r3, [r7, #112]	; 0x70
 8006488:	677a      	str	r2, [r7, #116]	; 0x74
 800648a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800648e:	4642      	mov	r2, r8
 8006490:	464b      	mov	r3, r9
 8006492:	1891      	adds	r1, r2, r2
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	415b      	adcs	r3, r3
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800649e:	4641      	mov	r1, r8
 80064a0:	1851      	adds	r1, r2, r1
 80064a2:	6039      	str	r1, [r7, #0]
 80064a4:	4649      	mov	r1, r9
 80064a6:	414b      	adcs	r3, r1
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064b6:	4659      	mov	r1, fp
 80064b8:	00cb      	lsls	r3, r1, #3
 80064ba:	4651      	mov	r1, sl
 80064bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c0:	4651      	mov	r1, sl
 80064c2:	00ca      	lsls	r2, r1, #3
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	4603      	mov	r3, r0
 80064ca:	4642      	mov	r2, r8
 80064cc:	189b      	adds	r3, r3, r2
 80064ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80064d0:	464b      	mov	r3, r9
 80064d2:	460a      	mov	r2, r1
 80064d4:	eb42 0303 	adc.w	r3, r2, r3
 80064d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	663b      	str	r3, [r7, #96]	; 0x60
 80064e4:	667a      	str	r2, [r7, #100]	; 0x64
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064f2:	4649      	mov	r1, r9
 80064f4:	008b      	lsls	r3, r1, #2
 80064f6:	4641      	mov	r1, r8
 80064f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064fc:	4641      	mov	r1, r8
 80064fe:	008a      	lsls	r2, r1, #2
 8006500:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006504:	f7fa fb72 	bl	8000bec <__aeabi_uldivmod>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <UART_SetConfig+0x4e4>)
 800650e:	fba3 1302 	umull	r1, r3, r3, r2
 8006512:	095b      	lsrs	r3, r3, #5
 8006514:	2164      	movs	r1, #100	; 0x64
 8006516:	fb01 f303 	mul.w	r3, r1, r3
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	3332      	adds	r3, #50	; 0x32
 8006520:	4a08      	ldr	r2, [pc, #32]	; (8006544 <UART_SetConfig+0x4e4>)
 8006522:	fba2 2303 	umull	r2, r3, r2, r3
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	f003 020f 	and.w	r2, r3, #15
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4422      	add	r2, r4
 8006534:	609a      	str	r2, [r3, #8]
}
 8006536:	bf00      	nop
 8006538:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800653c:	46bd      	mov	sp, r7
 800653e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006542:	bf00      	nop
 8006544:	51eb851f 	.word	0x51eb851f

08006548 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f103 0208 	add.w	r2, r3, #8
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f04f 32ff 	mov.w	r2, #4294967295
 8006560:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f103 0208 	add.w	r2, r3, #8
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f103 0208 	add.w	r2, r3, #8
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006596:	bf00      	nop
 8006598:	370c      	adds	r7, #12
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
 80065aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	689a      	ldr	r2, [r3, #8]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	1c5a      	adds	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	601a      	str	r2, [r3, #0]
}
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065ea:	b480      	push	{r7}
 80065ec:	b085      	sub	sp, #20
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d103      	bne.n	800660a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e00c      	b.n	8006624 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3308      	adds	r3, #8
 800660e:	60fb      	str	r3, [r7, #12]
 8006610:	e002      	b.n	8006618 <vListInsert+0x2e>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	429a      	cmp	r2, r3
 8006622:	d2f6      	bcs.n	8006612 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	1c5a      	adds	r2, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	601a      	str	r2, [r3, #0]
}
 8006650:	bf00      	nop
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6892      	ldr	r2, [r2, #8]
 8006672:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6852      	ldr	r2, [r2, #4]
 800667c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d103      	bne.n	8006690 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689a      	ldr	r2, [r3, #8]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	1e5a      	subs	r2, r3, #1
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066d6:	bf00      	nop
 80066d8:	e7fe      	b.n	80066d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066da:	f001 fcfb 	bl	80080d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	441a      	add	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670a:	3b01      	subs	r3, #1
 800670c:	68f9      	ldr	r1, [r7, #12]
 800670e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006710:	fb01 f303 	mul.w	r3, r1, r3
 8006714:	441a      	add	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	22ff      	movs	r2, #255	; 0xff
 800671e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	22ff      	movs	r2, #255	; 0xff
 8006726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d114      	bne.n	800675a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01a      	beq.n	800676e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3310      	adds	r3, #16
 800673c:	4618      	mov	r0, r3
 800673e:	f000 ffc1 	bl	80076c4 <xTaskRemoveFromEventList>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d012      	beq.n	800676e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006748:	4b0c      	ldr	r3, [pc, #48]	; (800677c <xQueueGenericReset+0xcc>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	e009      	b.n	800676e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3310      	adds	r3, #16
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fef2 	bl	8006548 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3324      	adds	r3, #36	; 0x24
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff feed 	bl	8006548 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800676e:	f001 fce1 	bl	8008134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006772:	2301      	movs	r3, #1
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	e000ed04 	.word	0xe000ed04

08006780 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08a      	sub	sp, #40	; 0x28
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	4613      	mov	r3, r2
 800678c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	613b      	str	r3, [r7, #16]
}
 80067a6:	bf00      	nop
 80067a8:	e7fe      	b.n	80067a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	fb02 f303 	mul.w	r3, r2, r3
 80067b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	3348      	adds	r3, #72	; 0x48
 80067b8:	4618      	mov	r0, r3
 80067ba:	f001 fd6d 	bl	8008298 <pvPortMalloc>
 80067be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d011      	beq.n	80067ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	3348      	adds	r3, #72	; 0x48
 80067ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067d8:	79fa      	ldrb	r2, [r7, #7]
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	4613      	mov	r3, r2
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 f805 	bl	80067f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067ea:	69bb      	ldr	r3, [r7, #24]
	}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3720      	adds	r7, #32
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	69ba      	ldr	r2, [r7, #24]
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	e002      	b.n	8006816 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006816:	69bb      	ldr	r3, [r7, #24]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006822:	2101      	movs	r1, #1
 8006824:	69b8      	ldr	r0, [r7, #24]
 8006826:	f7ff ff43 	bl	80066b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00e      	beq.n	800685e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006852:	2300      	movs	r3, #0
 8006854:	2200      	movs	r2, #0
 8006856:	2100      	movs	r1, #0
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f81d 	bl	8006898 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	4603      	mov	r3, r0
 800686e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006870:	2301      	movs	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	2300      	movs	r3, #0
 8006876:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	461a      	mov	r2, r3
 800687c:	6939      	ldr	r1, [r7, #16]
 800687e:	6978      	ldr	r0, [r7, #20]
 8006880:	f7ff ff7e 	bl	8006780 <xQueueGenericCreate>
 8006884:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7ff ffd3 	bl	8006832 <prvInitialiseMutex>

		return xNewQueue;
 800688c:	68fb      	ldr	r3, [r7, #12]
	}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
	...

08006898 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08e      	sub	sp, #56	; 0x38
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068a6:	2300      	movs	r3, #0
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xQueueGenericSend+0x32>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <xQueueGenericSend+0x40>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <xQueueGenericSend+0x44>
 80068d8:	2301      	movs	r3, #1
 80068da:	e000      	b.n	80068de <xQueueGenericSend+0x46>
 80068dc:	2300      	movs	r3, #0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <xQueueGenericSend+0x60>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d103      	bne.n	8006906 <xQueueGenericSend+0x6e>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <xQueueGenericSend+0x72>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <xQueueGenericSend+0x74>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10a      	bne.n	8006926 <xQueueGenericSend+0x8e>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	623b      	str	r3, [r7, #32]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006926:	f001 f889 	bl	8007a3c <xTaskGetSchedulerState>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d102      	bne.n	8006936 <xQueueGenericSend+0x9e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <xQueueGenericSend+0xa2>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueGenericSend+0xa4>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xQueueGenericSend+0xbe>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	61fb      	str	r3, [r7, #28]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006956:	f001 fbbd 	bl	80080d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <xQueueGenericSend+0xd4>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d129      	bne.n	80069c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006972:	f000 f9b3 	bl	8006cdc <prvCopyDataToQueue>
 8006976:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d010      	beq.n	80069a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fe9d 	bl	80076c4 <xTaskRemoveFromEventList>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d013      	beq.n	80069b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006990:	4b3f      	ldr	r3, [pc, #252]	; (8006a90 <xQueueGenericSend+0x1f8>)
 8006992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	e00a      	b.n	80069b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069a8:	4b39      	ldr	r3, [pc, #228]	; (8006a90 <xQueueGenericSend+0x1f8>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069b8:	f001 fbbc 	bl	8008134 <vPortExitCritical>
				return pdPASS;
 80069bc:	2301      	movs	r3, #1
 80069be:	e063      	b.n	8006a88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069c6:	f001 fbb5 	bl	8008134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e05c      	b.n	8006a88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069d4:	f107 0314 	add.w	r3, r7, #20
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fed5 	bl	8007788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069e2:	f001 fba7 	bl	8008134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069e6:	f000 fc8b 	bl	8007300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069ea:	f001 fb73 	bl	80080d4 <vPortEnterCritical>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d103      	bne.n	8006a04 <xQueueGenericSend+0x16c>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a0a:	b25b      	sxtb	r3, r3
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d103      	bne.n	8006a1a <xQueueGenericSend+0x182>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a1a:	f001 fb8b 	bl	8008134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a1e:	1d3a      	adds	r2, r7, #4
 8006a20:	f107 0314 	add.w	r3, r7, #20
 8006a24:	4611      	mov	r1, r2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 fec4 	bl	80077b4 <xTaskCheckForTimeOut>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d124      	bne.n	8006a7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a34:	f000 fa24 	bl	8006e80 <prvIsQueueFull>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	3310      	adds	r3, #16
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fe18 	bl	800767c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a4e:	f000 f9af 	bl	8006db0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a52:	f000 fc63 	bl	800731c <xTaskResumeAll>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f47f af7c 	bne.w	8006956 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <xQueueGenericSend+0x1f8>)
 8006a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	e772      	b.n	8006956 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a72:	f000 f99d 	bl	8006db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a76:	f000 fc51 	bl	800731c <xTaskResumeAll>
 8006a7a:	e76c      	b.n	8006956 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a7e:	f000 f997 	bl	8006db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a82:	f000 fc4b 	bl	800731c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3738      	adds	r7, #56	; 0x38
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08e      	sub	sp, #56	; 0x38
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	623b      	str	r3, [r7, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00a      	beq.n	8006ae4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	61fb      	str	r3, [r7, #28]
}
 8006ae0:	bf00      	nop
 8006ae2:	e7fe      	b.n	8006ae2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ae4:	f000 ffaa 	bl	8007a3c <xTaskGetSchedulerState>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d102      	bne.n	8006af4 <xQueueSemaphoreTake+0x60>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <xQueueSemaphoreTake+0x64>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <xQueueSemaphoreTake+0x66>
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10a      	bne.n	8006b14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	61bb      	str	r3, [r7, #24]
}
 8006b10:	bf00      	nop
 8006b12:	e7fe      	b.n	8006b12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b14:	f001 fade 	bl	80080d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d024      	beq.n	8006b6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	1e5a      	subs	r2, r3, #1
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b34:	f001 f92a 	bl	8007d8c <pvTaskIncrementMutexHeldCount>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00f      	beq.n	8006b66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	3310      	adds	r3, #16
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fdba 	bl	80076c4 <xTaskRemoveFromEventList>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d007      	beq.n	8006b66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b56:	4b54      	ldr	r3, [pc, #336]	; (8006ca8 <xQueueSemaphoreTake+0x214>)
 8006b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b66:	f001 fae5 	bl	8008134 <vPortExitCritical>
				return pdPASS;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e097      	b.n	8006c9e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d111      	bne.n	8006b98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	617b      	str	r3, [r7, #20]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006b90:	f001 fad0 	bl	8008134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b94:	2300      	movs	r3, #0
 8006b96:	e082      	b.n	8006c9e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d106      	bne.n	8006bac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b9e:	f107 030c 	add.w	r3, r7, #12
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fdf0 	bl	8007788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006bac:	f001 fac2 	bl	8008134 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bb0:	f000 fba6 	bl	8007300 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bb4:	f001 fa8e 	bl	80080d4 <vPortEnterCritical>
 8006bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bbe:	b25b      	sxtb	r3, r3
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d103      	bne.n	8006bce <xQueueSemaphoreTake+0x13a>
 8006bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d103      	bne.n	8006be4 <xQueueSemaphoreTake+0x150>
 8006bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006be4:	f001 faa6 	bl	8008134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be8:	463a      	mov	r2, r7
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	4611      	mov	r1, r2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fddf 	bl	80077b4 <xTaskCheckForTimeOut>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d132      	bne.n	8006c62 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bfe:	f000 f929 	bl	8006e54 <prvIsQueueEmpty>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d026      	beq.n	8006c56 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006c10:	f001 fa60 	bl	80080d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f000 ff2d 	bl	8007a78 <xTaskPriorityInherit>
 8006c1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006c20:	f001 fa88 	bl	8008134 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	3324      	adds	r3, #36	; 0x24
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	4611      	mov	r1, r2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fd25 	bl	800767c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c34:	f000 f8bc 	bl	8006db0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c38:	f000 fb70 	bl	800731c <xTaskResumeAll>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f47f af68 	bne.w	8006b14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006c44:	4b18      	ldr	r3, [pc, #96]	; (8006ca8 <xQueueSemaphoreTake+0x214>)
 8006c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	e75e      	b.n	8006b14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006c56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c58:	f000 f8aa 	bl	8006db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c5c:	f000 fb5e 	bl	800731c <xTaskResumeAll>
 8006c60:	e758      	b.n	8006b14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006c62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c64:	f000 f8a4 	bl	8006db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c68:	f000 fb58 	bl	800731c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c6e:	f000 f8f1 	bl	8006e54 <prvIsQueueEmpty>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f43f af4d 	beq.w	8006b14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00d      	beq.n	8006c9c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006c80:	f001 fa28 	bl	80080d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c86:	f000 f811 	bl	8006cac <prvGetDisinheritPriorityAfterTimeout>
 8006c8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 ffec 	bl	8007c70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c98:	f001 fa4c 	bl	8008134 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3738      	adds	r7, #56	; 0x38
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	e000ed04 	.word	0xe000ed04

08006cac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1c3 0307 	rsb	r3, r3, #7
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	e001      	b.n	8006cce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006cce:	68fb      	ldr	r3, [r7, #12]
	}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10d      	bne.n	8006d16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d14d      	bne.n	8006d9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f000 ff2c 	bl	8007b64 <xTaskPriorityDisinherit>
 8006d0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	609a      	str	r2, [r3, #8]
 8006d14:	e043      	b.n	8006d9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d119      	bne.n	8006d50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6858      	ldr	r0, [r3, #4]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d24:	461a      	mov	r2, r3
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	f001 fcca 	bl	80086c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	441a      	add	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d32b      	bcc.n	8006d9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	605a      	str	r2, [r3, #4]
 8006d4e:	e026      	b.n	8006d9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68d8      	ldr	r0, [r3, #12]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68b9      	ldr	r1, [r7, #8]
 8006d5c:	f001 fcb0 	bl	80086c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	425b      	negs	r3, r3
 8006d6a:	441a      	add	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d207      	bcs.n	8006d8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	425b      	negs	r3, r3
 8006d86:	441a      	add	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d105      	bne.n	8006d9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006da6:	697b      	ldr	r3, [r7, #20]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006db8:	f001 f98c 	bl	80080d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dc4:	e011      	b.n	8006dea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d012      	beq.n	8006df4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3324      	adds	r3, #36	; 0x24
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 fc76 	bl	80076c4 <xTaskRemoveFromEventList>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d001      	beq.n	8006de2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006dde:	f000 fd4b 	bl	8007878 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006de2:	7bfb      	ldrb	r3, [r7, #15]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	dce9      	bgt.n	8006dc6 <prvUnlockQueue+0x16>
 8006df2:	e000      	b.n	8006df6 <prvUnlockQueue+0x46>
					break;
 8006df4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	22ff      	movs	r2, #255	; 0xff
 8006dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006dfe:	f001 f999 	bl	8008134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e02:	f001 f967 	bl	80080d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e0e:	e011      	b.n	8006e34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d012      	beq.n	8006e3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3310      	adds	r3, #16
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f000 fc51 	bl	80076c4 <xTaskRemoveFromEventList>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006e28:	f000 fd26 	bl	8007878 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	dce9      	bgt.n	8006e10 <prvUnlockQueue+0x60>
 8006e3c:	e000      	b.n	8006e40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006e3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	22ff      	movs	r2, #255	; 0xff
 8006e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006e48:	f001 f974 	bl	8008134 <vPortExitCritical>
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e5c:	f001 f93a 	bl	80080d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d102      	bne.n	8006e6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]
 8006e6c:	e001      	b.n	8006e72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006e72:	f001 f95f 	bl	8008134 <vPortExitCritical>

	return xReturn;
 8006e76:	68fb      	ldr	r3, [r7, #12]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006e88:	f001 f924 	bl	80080d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d102      	bne.n	8006e9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	e001      	b.n	8006ea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ea2:	f001 f947 	bl	8008134 <vPortExitCritical>

	return xReturn;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08e      	sub	sp, #56	; 0x38
 8006eb4:	af04      	add	r7, sp, #16
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
 8006ebc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <xTaskCreateStatic+0x2a>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	623b      	str	r3, [r7, #32]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <xTaskCreateStatic+0x46>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	61fb      	str	r3, [r7, #28]
}
 8006ef2:	bf00      	nop
 8006ef4:	e7fe      	b.n	8006ef4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ef6:	2354      	movs	r3, #84	; 0x54
 8006ef8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b54      	cmp	r3, #84	; 0x54
 8006efe:	d00a      	beq.n	8006f16 <xTaskCreateStatic+0x66>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	61bb      	str	r3, [r7, #24]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d01e      	beq.n	8006f5c <xTaskCreateStatic+0xac>
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01b      	beq.n	8006f5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f36:	2300      	movs	r3, #0
 8006f38:	9303      	str	r3, [sp, #12]
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	9302      	str	r3, [sp, #8]
 8006f3e:	f107 0314 	add.w	r3, r7, #20
 8006f42:	9301      	str	r3, [sp, #4]
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f850 	bl	8006ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f56:	f000 f8d5 	bl	8007104 <prvAddNewTaskToReadyList>
 8006f5a:	e001      	b.n	8006f60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f60:	697b      	ldr	r3, [r7, #20]
	}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3728      	adds	r7, #40	; 0x28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}

08006f6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b08c      	sub	sp, #48	; 0x30
 8006f6e:	af04      	add	r7, sp, #16
 8006f70:	60f8      	str	r0, [r7, #12]
 8006f72:	60b9      	str	r1, [r7, #8]
 8006f74:	603b      	str	r3, [r7, #0]
 8006f76:	4613      	mov	r3, r2
 8006f78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f7a:	88fb      	ldrh	r3, [r7, #6]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 f98a 	bl	8008298 <pvPortMalloc>
 8006f84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00e      	beq.n	8006faa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f8c:	2054      	movs	r0, #84	; 0x54
 8006f8e:	f001 f983 	bl	8008298 <pvPortMalloc>
 8006f92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	697a      	ldr	r2, [r7, #20]
 8006f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006fa0:	e005      	b.n	8006fae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006fa2:	6978      	ldr	r0, [r7, #20]
 8006fa4:	f001 fa44 	bl	8008430 <vPortFree>
 8006fa8:	e001      	b.n	8006fae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d017      	beq.n	8006fe4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fbc:	88fa      	ldrh	r2, [r7, #6]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	9303      	str	r3, [sp, #12]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	9302      	str	r3, [sp, #8]
 8006fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68b9      	ldr	r1, [r7, #8]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f80e 	bl	8006ff4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fd8:	69f8      	ldr	r0, [r7, #28]
 8006fda:	f000 f893 	bl	8007104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	61bb      	str	r3, [r7, #24]
 8006fe2:	e002      	b.n	8006fea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8006fe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fea:	69bb      	ldr	r3, [r7, #24]
	}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3720      	adds	r7, #32
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b088      	sub	sp, #32
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800700c:	3b01      	subs	r3, #1
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	f023 0307 	bic.w	r3, r3, #7
 800701a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f003 0307 	and.w	r3, r3, #7
 8007022:	2b00      	cmp	r3, #0
 8007024:	d00a      	beq.n	800703c <prvInitialiseNewTask+0x48>
	__asm volatile
 8007026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702a:	f383 8811 	msr	BASEPRI, r3
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f3bf 8f4f 	dsb	sy
 8007036:	617b      	str	r3, [r7, #20]
}
 8007038:	bf00      	nop
 800703a:	e7fe      	b.n	800703a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01f      	beq.n	8007082 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
 8007046:	e012      	b.n	800706e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	4413      	add	r3, r2
 800704e:	7819      	ldrb	r1, [r3, #0]
 8007050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	3334      	adds	r3, #52	; 0x34
 8007058:	460a      	mov	r2, r1
 800705a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	4413      	add	r3, r2
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d006      	beq.n	8007076 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	3301      	adds	r3, #1
 800706c:	61fb      	str	r3, [r7, #28]
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	2b0f      	cmp	r3, #15
 8007072:	d9e9      	bls.n	8007048 <prvInitialiseNewTask+0x54>
 8007074:	e000      	b.n	8007078 <prvInitialiseNewTask+0x84>
			{
				break;
 8007076:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007080:	e003      	b.n	800708a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	2b06      	cmp	r3, #6
 800708e:	d901      	bls.n	8007094 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007090:	2306      	movs	r3, #6
 8007092:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007098:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800709e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	2200      	movs	r2, #0
 80070a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	3304      	adds	r3, #4
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff fa6c 	bl	8006588 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	3318      	adds	r3, #24
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fa67 	bl	8006588 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	f1c3 0207 	rsb	r2, r3, #7
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d2:	2200      	movs	r2, #0
 80070d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80070de:	683a      	ldr	r2, [r7, #0]
 80070e0:	68f9      	ldr	r1, [r7, #12]
 80070e2:	69b8      	ldr	r0, [r7, #24]
 80070e4:	f000 fecc 	bl	8007e80 <pxPortInitialiseStack>
 80070e8:	4602      	mov	r2, r0
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80070f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070fa:	bf00      	nop
 80070fc:	3720      	adds	r7, #32
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800710c:	f000 ffe2 	bl	80080d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007110:	4b2a      	ldr	r3, [pc, #168]	; (80071bc <prvAddNewTaskToReadyList+0xb8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3301      	adds	r3, #1
 8007116:	4a29      	ldr	r2, [pc, #164]	; (80071bc <prvAddNewTaskToReadyList+0xb8>)
 8007118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800711a:	4b29      	ldr	r3, [pc, #164]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007122:	4a27      	ldr	r2, [pc, #156]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007128:	4b24      	ldr	r3, [pc, #144]	; (80071bc <prvAddNewTaskToReadyList+0xb8>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d110      	bne.n	8007152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007130:	f000 fbc6 	bl	80078c0 <prvInitialiseTaskLists>
 8007134:	e00d      	b.n	8007152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007136:	4b23      	ldr	r3, [pc, #140]	; (80071c4 <prvAddNewTaskToReadyList+0xc0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d109      	bne.n	8007152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800713e:	4b20      	ldr	r3, [pc, #128]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	429a      	cmp	r2, r3
 800714a:	d802      	bhi.n	8007152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800714c:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007152:	4b1d      	ldr	r3, [pc, #116]	; (80071c8 <prvAddNewTaskToReadyList+0xc4>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3301      	adds	r3, #1
 8007158:	4a1b      	ldr	r2, [pc, #108]	; (80071c8 <prvAddNewTaskToReadyList+0xc4>)
 800715a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	2201      	movs	r2, #1
 8007162:	409a      	lsls	r2, r3
 8007164:	4b19      	ldr	r3, [pc, #100]	; (80071cc <prvAddNewTaskToReadyList+0xc8>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4313      	orrs	r3, r2
 800716a:	4a18      	ldr	r2, [pc, #96]	; (80071cc <prvAddNewTaskToReadyList+0xc8>)
 800716c:	6013      	str	r3, [r2, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4a15      	ldr	r2, [pc, #84]	; (80071d0 <prvAddNewTaskToReadyList+0xcc>)
 800717c:	441a      	add	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	3304      	adds	r3, #4
 8007182:	4619      	mov	r1, r3
 8007184:	4610      	mov	r0, r2
 8007186:	f7ff fa0c 	bl	80065a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800718a:	f000 ffd3 	bl	8008134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <prvAddNewTaskToReadyList+0xc0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00e      	beq.n	80071b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007196:	4b0a      	ldr	r3, [pc, #40]	; (80071c0 <prvAddNewTaskToReadyList+0xbc>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d207      	bcs.n	80071b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <prvAddNewTaskToReadyList+0xd0>)
 80071a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071aa:	601a      	str	r2, [r3, #0]
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	20000d24 	.word	0x20000d24
 80071c0:	20000c24 	.word	0x20000c24
 80071c4:	20000d30 	.word	0x20000d30
 80071c8:	20000d40 	.word	0x20000d40
 80071cc:	20000d2c 	.word	0x20000d2c
 80071d0:	20000c28 	.word	0x20000c28
 80071d4:	e000ed04 	.word	0xe000ed04

080071d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80071e0:	2300      	movs	r3, #0
 80071e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d017      	beq.n	800721a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80071ea:	4b13      	ldr	r3, [pc, #76]	; (8007238 <vTaskDelay+0x60>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00a      	beq.n	8007208 <vTaskDelay+0x30>
	__asm volatile
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	60bb      	str	r3, [r7, #8]
}
 8007204:	bf00      	nop
 8007206:	e7fe      	b.n	8007206 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007208:	f000 f87a 	bl	8007300 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800720c:	2100      	movs	r1, #0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fdd0 	bl	8007db4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007214:	f000 f882 	bl	800731c <xTaskResumeAll>
 8007218:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d107      	bne.n	8007230 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007220:	4b06      	ldr	r3, [pc, #24]	; (800723c <vTaskDelay+0x64>)
 8007222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007230:	bf00      	nop
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000d4c 	.word	0x20000d4c
 800723c:	e000ed04 	.word	0xe000ed04

08007240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08a      	sub	sp, #40	; 0x28
 8007244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007246:	2300      	movs	r3, #0
 8007248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800724a:	2300      	movs	r3, #0
 800724c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800724e:	463a      	mov	r2, r7
 8007250:	1d39      	adds	r1, r7, #4
 8007252:	f107 0308 	add.w	r3, r7, #8
 8007256:	4618      	mov	r0, r3
 8007258:	f7f9 fe4a 	bl	8000ef0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800725c:	6839      	ldr	r1, [r7, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68ba      	ldr	r2, [r7, #8]
 8007262:	9202      	str	r2, [sp, #8]
 8007264:	9301      	str	r3, [sp, #4]
 8007266:	2300      	movs	r3, #0
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	2300      	movs	r3, #0
 800726c:	460a      	mov	r2, r1
 800726e:	491e      	ldr	r1, [pc, #120]	; (80072e8 <vTaskStartScheduler+0xa8>)
 8007270:	481e      	ldr	r0, [pc, #120]	; (80072ec <vTaskStartScheduler+0xac>)
 8007272:	f7ff fe1d 	bl	8006eb0 <xTaskCreateStatic>
 8007276:	4603      	mov	r3, r0
 8007278:	4a1d      	ldr	r2, [pc, #116]	; (80072f0 <vTaskStartScheduler+0xb0>)
 800727a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800727c:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <vTaskStartScheduler+0xb0>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007284:	2301      	movs	r3, #1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	e001      	b.n	800728e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d116      	bne.n	80072c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	613b      	str	r3, [r7, #16]
}
 80072a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80072a8:	4b12      	ldr	r3, [pc, #72]	; (80072f4 <vTaskStartScheduler+0xb4>)
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80072b0:	4b11      	ldr	r3, [pc, #68]	; (80072f8 <vTaskStartScheduler+0xb8>)
 80072b2:	2201      	movs	r2, #1
 80072b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072b6:	4b11      	ldr	r3, [pc, #68]	; (80072fc <vTaskStartScheduler+0xbc>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072bc:	f000 fe68 	bl	8007f90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072c0:	e00e      	b.n	80072e0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c8:	d10a      	bne.n	80072e0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	60fb      	str	r3, [r7, #12]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <vTaskStartScheduler+0x9e>
}
 80072e0:	bf00      	nop
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	0800a0a8 	.word	0x0800a0a8
 80072ec:	08007891 	.word	0x08007891
 80072f0:	20000d48 	.word	0x20000d48
 80072f4:	20000d44 	.word	0x20000d44
 80072f8:	20000d30 	.word	0x20000d30
 80072fc:	20000d28 	.word	0x20000d28

08007300 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007304:	4b04      	ldr	r3, [pc, #16]	; (8007318 <vTaskSuspendAll+0x18>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	4a03      	ldr	r2, [pc, #12]	; (8007318 <vTaskSuspendAll+0x18>)
 800730c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800730e:	bf00      	nop
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	20000d4c 	.word	0x20000d4c

0800731c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007322:	2300      	movs	r3, #0
 8007324:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007326:	2300      	movs	r3, #0
 8007328:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800732a:	4b41      	ldr	r3, [pc, #260]	; (8007430 <xTaskResumeAll+0x114>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <xTaskResumeAll+0x2c>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	603b      	str	r3, [r7, #0]
}
 8007344:	bf00      	nop
 8007346:	e7fe      	b.n	8007346 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007348:	f000 fec4 	bl	80080d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800734c:	4b38      	ldr	r3, [pc, #224]	; (8007430 <xTaskResumeAll+0x114>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3b01      	subs	r3, #1
 8007352:	4a37      	ldr	r2, [pc, #220]	; (8007430 <xTaskResumeAll+0x114>)
 8007354:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007356:	4b36      	ldr	r3, [pc, #216]	; (8007430 <xTaskResumeAll+0x114>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d161      	bne.n	8007422 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800735e:	4b35      	ldr	r3, [pc, #212]	; (8007434 <xTaskResumeAll+0x118>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d05d      	beq.n	8007422 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007366:	e02e      	b.n	80073c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007368:	4b33      	ldr	r3, [pc, #204]	; (8007438 <xTaskResumeAll+0x11c>)
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3318      	adds	r3, #24
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff f971 	bl	800665c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3304      	adds	r3, #4
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff f96c 	bl	800665c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007388:	2201      	movs	r2, #1
 800738a:	409a      	lsls	r2, r3
 800738c:	4b2b      	ldr	r3, [pc, #172]	; (800743c <xTaskResumeAll+0x120>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4313      	orrs	r3, r2
 8007392:	4a2a      	ldr	r2, [pc, #168]	; (800743c <xTaskResumeAll+0x120>)
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800739a:	4613      	mov	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4a27      	ldr	r2, [pc, #156]	; (8007440 <xTaskResumeAll+0x124>)
 80073a4:	441a      	add	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7ff f8f8 	bl	80065a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b6:	4b23      	ldr	r3, [pc, #140]	; (8007444 <xTaskResumeAll+0x128>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	429a      	cmp	r2, r3
 80073be:	d302      	bcc.n	80073c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80073c0:	4b21      	ldr	r3, [pc, #132]	; (8007448 <xTaskResumeAll+0x12c>)
 80073c2:	2201      	movs	r2, #1
 80073c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073c6:	4b1c      	ldr	r3, [pc, #112]	; (8007438 <xTaskResumeAll+0x11c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1cc      	bne.n	8007368 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073d4:	f000 fb12 	bl	80079fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073d8:	4b1c      	ldr	r3, [pc, #112]	; (800744c <xTaskResumeAll+0x130>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d010      	beq.n	8007406 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073e4:	f000 f836 	bl	8007454 <xTaskIncrementTick>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80073ee:	4b16      	ldr	r3, [pc, #88]	; (8007448 <xTaskResumeAll+0x12c>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3b01      	subs	r3, #1
 80073f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f1      	bne.n	80073e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007400:	4b12      	ldr	r3, [pc, #72]	; (800744c <xTaskResumeAll+0x130>)
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007406:	4b10      	ldr	r3, [pc, #64]	; (8007448 <xTaskResumeAll+0x12c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800740e:	2301      	movs	r3, #1
 8007410:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007412:	4b0f      	ldr	r3, [pc, #60]	; (8007450 <xTaskResumeAll+0x134>)
 8007414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007422:	f000 fe87 	bl	8008134 <vPortExitCritical>

	return xAlreadyYielded;
 8007426:	68bb      	ldr	r3, [r7, #8]
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	20000d4c 	.word	0x20000d4c
 8007434:	20000d24 	.word	0x20000d24
 8007438:	20000ce4 	.word	0x20000ce4
 800743c:	20000d2c 	.word	0x20000d2c
 8007440:	20000c28 	.word	0x20000c28
 8007444:	20000c24 	.word	0x20000c24
 8007448:	20000d38 	.word	0x20000d38
 800744c:	20000d34 	.word	0x20000d34
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800745e:	4b4e      	ldr	r3, [pc, #312]	; (8007598 <xTaskIncrementTick+0x144>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 808e 	bne.w	8007584 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007468:	4b4c      	ldr	r3, [pc, #304]	; (800759c <xTaskIncrementTick+0x148>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3301      	adds	r3, #1
 800746e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007470:	4a4a      	ldr	r2, [pc, #296]	; (800759c <xTaskIncrementTick+0x148>)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d120      	bne.n	80074be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800747c:	4b48      	ldr	r3, [pc, #288]	; (80075a0 <xTaskIncrementTick+0x14c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <xTaskIncrementTick+0x48>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	f383 8811 	msr	BASEPRI, r3
 800748e:	f3bf 8f6f 	isb	sy
 8007492:	f3bf 8f4f 	dsb	sy
 8007496:	603b      	str	r3, [r7, #0]
}
 8007498:	bf00      	nop
 800749a:	e7fe      	b.n	800749a <xTaskIncrementTick+0x46>
 800749c:	4b40      	ldr	r3, [pc, #256]	; (80075a0 <xTaskIncrementTick+0x14c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	4b40      	ldr	r3, [pc, #256]	; (80075a4 <xTaskIncrementTick+0x150>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a3e      	ldr	r2, [pc, #248]	; (80075a0 <xTaskIncrementTick+0x14c>)
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	4a3e      	ldr	r2, [pc, #248]	; (80075a4 <xTaskIncrementTick+0x150>)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6013      	str	r3, [r2, #0]
 80074b0:	4b3d      	ldr	r3, [pc, #244]	; (80075a8 <xTaskIncrementTick+0x154>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	3301      	adds	r3, #1
 80074b6:	4a3c      	ldr	r2, [pc, #240]	; (80075a8 <xTaskIncrementTick+0x154>)
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	f000 fa9f 	bl	80079fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074be:	4b3b      	ldr	r3, [pc, #236]	; (80075ac <xTaskIncrementTick+0x158>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d348      	bcc.n	800755a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074c8:	4b35      	ldr	r3, [pc, #212]	; (80075a0 <xTaskIncrementTick+0x14c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d104      	bne.n	80074dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d2:	4b36      	ldr	r3, [pc, #216]	; (80075ac <xTaskIncrementTick+0x158>)
 80074d4:	f04f 32ff 	mov.w	r2, #4294967295
 80074d8:	601a      	str	r2, [r3, #0]
					break;
 80074da:	e03e      	b.n	800755a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074dc:	4b30      	ldr	r3, [pc, #192]	; (80075a0 <xTaskIncrementTick+0x14c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d203      	bcs.n	80074fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80074f4:	4a2d      	ldr	r2, [pc, #180]	; (80075ac <xTaskIncrementTick+0x158>)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80074fa:	e02e      	b.n	800755a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	3304      	adds	r3, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f7ff f8ab 	bl	800665c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	3318      	adds	r3, #24
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff f8a2 	bl	800665c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	2201      	movs	r2, #1
 800751e:	409a      	lsls	r2, r3
 8007520:	4b23      	ldr	r3, [pc, #140]	; (80075b0 <xTaskIncrementTick+0x15c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4313      	orrs	r3, r2
 8007526:	4a22      	ldr	r2, [pc, #136]	; (80075b0 <xTaskIncrementTick+0x15c>)
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4a1f      	ldr	r2, [pc, #124]	; (80075b4 <xTaskIncrementTick+0x160>)
 8007538:	441a      	add	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	3304      	adds	r3, #4
 800753e:	4619      	mov	r1, r3
 8007540:	4610      	mov	r0, r2
 8007542:	f7ff f82e 	bl	80065a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800754a:	4b1b      	ldr	r3, [pc, #108]	; (80075b8 <xTaskIncrementTick+0x164>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	429a      	cmp	r2, r3
 8007552:	d3b9      	bcc.n	80074c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007554:	2301      	movs	r3, #1
 8007556:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007558:	e7b6      	b.n	80074c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800755a:	4b17      	ldr	r3, [pc, #92]	; (80075b8 <xTaskIncrementTick+0x164>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007560:	4914      	ldr	r1, [pc, #80]	; (80075b4 <xTaskIncrementTick+0x160>)
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	440b      	add	r3, r1
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d901      	bls.n	8007576 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007572:	2301      	movs	r3, #1
 8007574:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007576:	4b11      	ldr	r3, [pc, #68]	; (80075bc <xTaskIncrementTick+0x168>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d007      	beq.n	800758e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e004      	b.n	800758e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007584:	4b0e      	ldr	r3, [pc, #56]	; (80075c0 <xTaskIncrementTick+0x16c>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	4a0d      	ldr	r2, [pc, #52]	; (80075c0 <xTaskIncrementTick+0x16c>)
 800758c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800758e:	697b      	ldr	r3, [r7, #20]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	20000d4c 	.word	0x20000d4c
 800759c:	20000d28 	.word	0x20000d28
 80075a0:	20000cdc 	.word	0x20000cdc
 80075a4:	20000ce0 	.word	0x20000ce0
 80075a8:	20000d3c 	.word	0x20000d3c
 80075ac:	20000d44 	.word	0x20000d44
 80075b0:	20000d2c 	.word	0x20000d2c
 80075b4:	20000c28 	.word	0x20000c28
 80075b8:	20000c24 	.word	0x20000c24
 80075bc:	20000d38 	.word	0x20000d38
 80075c0:	20000d34 	.word	0x20000d34

080075c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075ca:	4b27      	ldr	r3, [pc, #156]	; (8007668 <vTaskSwitchContext+0xa4>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075d2:	4b26      	ldr	r3, [pc, #152]	; (800766c <vTaskSwitchContext+0xa8>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075d8:	e03f      	b.n	800765a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80075da:	4b24      	ldr	r3, [pc, #144]	; (800766c <vTaskSwitchContext+0xa8>)
 80075dc:	2200      	movs	r2, #0
 80075de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e0:	4b23      	ldr	r3, [pc, #140]	; (8007670 <vTaskSwitchContext+0xac>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	fab3 f383 	clz	r3, r3
 80075ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80075ee:	7afb      	ldrb	r3, [r7, #11]
 80075f0:	f1c3 031f 	rsb	r3, r3, #31
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	491f      	ldr	r1, [pc, #124]	; (8007674 <vTaskSwitchContext+0xb0>)
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10a      	bne.n	8007620 <vTaskSwitchContext+0x5c>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	607b      	str	r3, [r7, #4]
}
 800761c:	bf00      	nop
 800761e:	e7fe      	b.n	800761e <vTaskSwitchContext+0x5a>
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	4613      	mov	r3, r2
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4a12      	ldr	r2, [pc, #72]	; (8007674 <vTaskSwitchContext+0xb0>)
 800762c:	4413      	add	r3, r2
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	605a      	str	r2, [r3, #4]
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	3308      	adds	r3, #8
 8007642:	429a      	cmp	r2, r3
 8007644:	d104      	bne.n	8007650 <vTaskSwitchContext+0x8c>
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	605a      	str	r2, [r3, #4]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	4a08      	ldr	r2, [pc, #32]	; (8007678 <vTaskSwitchContext+0xb4>)
 8007658:	6013      	str	r3, [r2, #0]
}
 800765a:	bf00      	nop
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	20000d4c 	.word	0x20000d4c
 800766c:	20000d38 	.word	0x20000d38
 8007670:	20000d2c 	.word	0x20000d2c
 8007674:	20000c28 	.word	0x20000c28
 8007678:	20000c24 	.word	0x20000c24

0800767c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	60fb      	str	r3, [r7, #12]
}
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076a2:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <vTaskPlaceOnEventList+0x44>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3318      	adds	r3, #24
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fe ff9d 	bl	80065ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076b0:	2101      	movs	r1, #1
 80076b2:	6838      	ldr	r0, [r7, #0]
 80076b4:	f000 fb7e 	bl	8007db4 <prvAddCurrentTaskToDelayedList>
}
 80076b8:	bf00      	nop
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	20000c24 	.word	0x20000c24

080076c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	60fb      	str	r3, [r7, #12]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3318      	adds	r3, #24
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fe ffb1 	bl	800665c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076fa:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <xTaskRemoveFromEventList+0xac>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d11c      	bne.n	800773c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	3304      	adds	r3, #4
 8007706:	4618      	mov	r0, r3
 8007708:	f7fe ffa8 	bl	800665c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	2201      	movs	r2, #1
 8007712:	409a      	lsls	r2, r3
 8007714:	4b17      	ldr	r3, [pc, #92]	; (8007774 <xTaskRemoveFromEventList+0xb0>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4313      	orrs	r3, r2
 800771a:	4a16      	ldr	r2, [pc, #88]	; (8007774 <xTaskRemoveFromEventList+0xb0>)
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007722:	4613      	mov	r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	4a13      	ldr	r2, [pc, #76]	; (8007778 <xTaskRemoveFromEventList+0xb4>)
 800772c:	441a      	add	r2, r3
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3304      	adds	r3, #4
 8007732:	4619      	mov	r1, r3
 8007734:	4610      	mov	r0, r2
 8007736:	f7fe ff34 	bl	80065a2 <vListInsertEnd>
 800773a:	e005      	b.n	8007748 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	3318      	adds	r3, #24
 8007740:	4619      	mov	r1, r3
 8007742:	480e      	ldr	r0, [pc, #56]	; (800777c <xTaskRemoveFromEventList+0xb8>)
 8007744:	f7fe ff2d 	bl	80065a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774c:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <xTaskRemoveFromEventList+0xbc>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	429a      	cmp	r2, r3
 8007754:	d905      	bls.n	8007762 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007756:	2301      	movs	r3, #1
 8007758:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800775a:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <xTaskRemoveFromEventList+0xc0>)
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e001      	b.n	8007766 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007762:	2300      	movs	r3, #0
 8007764:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007766:	697b      	ldr	r3, [r7, #20]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000d4c 	.word	0x20000d4c
 8007774:	20000d2c 	.word	0x20000d2c
 8007778:	20000c28 	.word	0x20000c28
 800777c:	20000ce4 	.word	0x20000ce4
 8007780:	20000c24 	.word	0x20000c24
 8007784:	20000d38 	.word	0x20000d38

08007788 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007790:	4b06      	ldr	r3, [pc, #24]	; (80077ac <vTaskInternalSetTimeOutState+0x24>)
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007798:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <vTaskInternalSetTimeOutState+0x28>)
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	605a      	str	r2, [r3, #4]
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20000d3c 	.word	0x20000d3c
 80077b0:	20000d28 	.word	0x20000d28

080077b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b088      	sub	sp, #32
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10a      	bne.n	80077da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	613b      	str	r3, [r7, #16]
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10a      	bne.n	80077f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	60fb      	str	r3, [r7, #12]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80077f6:	f000 fc6d 	bl	80080d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077fa:	4b1d      	ldr	r3, [pc, #116]	; (8007870 <xTaskCheckForTimeOut+0xbc>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	1ad3      	subs	r3, r2, r3
 8007808:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d102      	bne.n	800781a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007814:	2300      	movs	r3, #0
 8007816:	61fb      	str	r3, [r7, #28]
 8007818:	e023      	b.n	8007862 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b15      	ldr	r3, [pc, #84]	; (8007874 <xTaskCheckForTimeOut+0xc0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d007      	beq.n	8007836 <xTaskCheckForTimeOut+0x82>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	429a      	cmp	r2, r3
 800782e:	d302      	bcc.n	8007836 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007830:	2301      	movs	r3, #1
 8007832:	61fb      	str	r3, [r7, #28]
 8007834:	e015      	b.n	8007862 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	429a      	cmp	r2, r3
 800783e:	d20b      	bcs.n	8007858 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	1ad2      	subs	r2, r2, r3
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ff9b 	bl	8007788 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e004      	b.n	8007862 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800785e:	2301      	movs	r3, #1
 8007860:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007862:	f000 fc67 	bl	8008134 <vPortExitCritical>

	return xReturn;
 8007866:	69fb      	ldr	r3, [r7, #28]
}
 8007868:	4618      	mov	r0, r3
 800786a:	3720      	adds	r7, #32
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20000d28 	.word	0x20000d28
 8007874:	20000d3c 	.word	0x20000d3c

08007878 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800787c:	4b03      	ldr	r3, [pc, #12]	; (800788c <vTaskMissedYield+0x14>)
 800787e:	2201      	movs	r2, #1
 8007880:	601a      	str	r2, [r3, #0]
}
 8007882:	bf00      	nop
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	20000d38 	.word	0x20000d38

08007890 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007898:	f000 f852 	bl	8007940 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800789c:	4b06      	ldr	r3, [pc, #24]	; (80078b8 <prvIdleTask+0x28>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d9f9      	bls.n	8007898 <prvIdleTask+0x8>
			{
				taskYIELD();
 80078a4:	4b05      	ldr	r3, [pc, #20]	; (80078bc <prvIdleTask+0x2c>)
 80078a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	f3bf 8f4f 	dsb	sy
 80078b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80078b4:	e7f0      	b.n	8007898 <prvIdleTask+0x8>
 80078b6:	bf00      	nop
 80078b8:	20000c28 	.word	0x20000c28
 80078bc:	e000ed04 	.word	0xe000ed04

080078c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
 80078ca:	e00c      	b.n	80078e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	4613      	mov	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4413      	add	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4a12      	ldr	r2, [pc, #72]	; (8007920 <prvInitialiseTaskLists+0x60>)
 80078d8:	4413      	add	r3, r2
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fe34 	bl	8006548 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3301      	adds	r3, #1
 80078e4:	607b      	str	r3, [r7, #4]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b06      	cmp	r3, #6
 80078ea:	d9ef      	bls.n	80078cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078ec:	480d      	ldr	r0, [pc, #52]	; (8007924 <prvInitialiseTaskLists+0x64>)
 80078ee:	f7fe fe2b 	bl	8006548 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078f2:	480d      	ldr	r0, [pc, #52]	; (8007928 <prvInitialiseTaskLists+0x68>)
 80078f4:	f7fe fe28 	bl	8006548 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078f8:	480c      	ldr	r0, [pc, #48]	; (800792c <prvInitialiseTaskLists+0x6c>)
 80078fa:	f7fe fe25 	bl	8006548 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078fe:	480c      	ldr	r0, [pc, #48]	; (8007930 <prvInitialiseTaskLists+0x70>)
 8007900:	f7fe fe22 	bl	8006548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007904:	480b      	ldr	r0, [pc, #44]	; (8007934 <prvInitialiseTaskLists+0x74>)
 8007906:	f7fe fe1f 	bl	8006548 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <prvInitialiseTaskLists+0x78>)
 800790c:	4a05      	ldr	r2, [pc, #20]	; (8007924 <prvInitialiseTaskLists+0x64>)
 800790e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007910:	4b0a      	ldr	r3, [pc, #40]	; (800793c <prvInitialiseTaskLists+0x7c>)
 8007912:	4a05      	ldr	r2, [pc, #20]	; (8007928 <prvInitialiseTaskLists+0x68>)
 8007914:	601a      	str	r2, [r3, #0]
}
 8007916:	bf00      	nop
 8007918:	3708      	adds	r7, #8
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000c28 	.word	0x20000c28
 8007924:	20000cb4 	.word	0x20000cb4
 8007928:	20000cc8 	.word	0x20000cc8
 800792c:	20000ce4 	.word	0x20000ce4
 8007930:	20000cf8 	.word	0x20000cf8
 8007934:	20000d10 	.word	0x20000d10
 8007938:	20000cdc 	.word	0x20000cdc
 800793c:	20000ce0 	.word	0x20000ce0

08007940 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007946:	e019      	b.n	800797c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007948:	f000 fbc4 	bl	80080d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800794c:	4b10      	ldr	r3, [pc, #64]	; (8007990 <prvCheckTasksWaitingTermination+0x50>)
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe fe7f 	bl	800665c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <prvCheckTasksWaitingTermination+0x54>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3b01      	subs	r3, #1
 8007964:	4a0b      	ldr	r2, [pc, #44]	; (8007994 <prvCheckTasksWaitingTermination+0x54>)
 8007966:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007968:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <prvCheckTasksWaitingTermination+0x58>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3b01      	subs	r3, #1
 800796e:	4a0a      	ldr	r2, [pc, #40]	; (8007998 <prvCheckTasksWaitingTermination+0x58>)
 8007970:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007972:	f000 fbdf 	bl	8008134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 f810 	bl	800799c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800797c:	4b06      	ldr	r3, [pc, #24]	; (8007998 <prvCheckTasksWaitingTermination+0x58>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e1      	bne.n	8007948 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000cf8 	.word	0x20000cf8
 8007994:	20000d24 	.word	0x20000d24
 8007998:	20000d0c 	.word	0x20000d0c

0800799c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800799c:	b580      	push	{r7, lr}
 800799e:	b084      	sub	sp, #16
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d108      	bne.n	80079c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 fd3c 	bl	8008430 <vPortFree>
				vPortFree( pxTCB );
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 fd39 	bl	8008430 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80079be:	e018      	b.n	80079f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d103      	bne.n	80079d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fd30 	bl	8008430 <vPortFree>
	}
 80079d0:	e00f      	b.n	80079f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d00a      	beq.n	80079f2 <prvDeleteTCB+0x56>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	60fb      	str	r3, [r7, #12]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <prvDeleteTCB+0x54>
	}
 80079f2:	bf00      	nop
 80079f4:	3710      	adds	r7, #16
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
	...

080079fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a02:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <prvResetNextTaskUnblockTime+0x38>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d104      	bne.n	8007a16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <prvResetNextTaskUnblockTime+0x3c>)
 8007a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007a14:	e008      	b.n	8007a28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a16:	4b07      	ldr	r3, [pc, #28]	; (8007a34 <prvResetNextTaskUnblockTime+0x38>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	4a04      	ldr	r2, [pc, #16]	; (8007a38 <prvResetNextTaskUnblockTime+0x3c>)
 8007a26:	6013      	str	r3, [r2, #0]
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	20000cdc 	.word	0x20000cdc
 8007a38:	20000d44 	.word	0x20000d44

08007a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a42:	4b0b      	ldr	r3, [pc, #44]	; (8007a70 <xTaskGetSchedulerState+0x34>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d102      	bne.n	8007a50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	607b      	str	r3, [r7, #4]
 8007a4e:	e008      	b.n	8007a62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a50:	4b08      	ldr	r3, [pc, #32]	; (8007a74 <xTaskGetSchedulerState+0x38>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a58:	2302      	movs	r3, #2
 8007a5a:	607b      	str	r3, [r7, #4]
 8007a5c:	e001      	b.n	8007a62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a62:	687b      	ldr	r3, [r7, #4]
	}
 8007a64:	4618      	mov	r0, r3
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	20000d30 	.word	0x20000d30
 8007a74:	20000d4c 	.word	0x20000d4c

08007a78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d05e      	beq.n	8007b4c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a92:	4b31      	ldr	r3, [pc, #196]	; (8007b58 <xTaskPriorityInherit+0xe0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d24e      	bcs.n	8007b3a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	db06      	blt.n	8007ab2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa4:	4b2c      	ldr	r3, [pc, #176]	; (8007b58 <xTaskPriorityInherit+0xe0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aaa:	f1c3 0207 	rsb	r2, r3, #7
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	6959      	ldr	r1, [r3, #20]
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4a26      	ldr	r2, [pc, #152]	; (8007b5c <xTaskPriorityInherit+0xe4>)
 8007ac4:	4413      	add	r3, r2
 8007ac6:	4299      	cmp	r1, r3
 8007ac8:	d12f      	bne.n	8007b2a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fdc4 	bl	800665c <uxListRemove>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	2201      	movs	r2, #1
 8007ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae4:	43da      	mvns	r2, r3
 8007ae6:	4b1e      	ldr	r3, [pc, #120]	; (8007b60 <xTaskPriorityInherit+0xe8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4013      	ands	r3, r2
 8007aec:	4a1c      	ldr	r2, [pc, #112]	; (8007b60 <xTaskPriorityInherit+0xe8>)
 8007aee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007af0:	4b19      	ldr	r3, [pc, #100]	; (8007b58 <xTaskPriorityInherit+0xe0>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	2201      	movs	r2, #1
 8007b00:	409a      	lsls	r2, r3
 8007b02:	4b17      	ldr	r3, [pc, #92]	; (8007b60 <xTaskPriorityInherit+0xe8>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	4a15      	ldr	r2, [pc, #84]	; (8007b60 <xTaskPriorityInherit+0xe8>)
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4a10      	ldr	r2, [pc, #64]	; (8007b5c <xTaskPriorityInherit+0xe4>)
 8007b1a:	441a      	add	r2, r3
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f7fe fd3d 	bl	80065a2 <vListInsertEnd>
 8007b28:	e004      	b.n	8007b34 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007b2a:	4b0b      	ldr	r3, [pc, #44]	; (8007b58 <xTaskPriorityInherit+0xe0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007b34:	2301      	movs	r3, #1
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	e008      	b.n	8007b4c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b3e:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <xTaskPriorityInherit+0xe0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d201      	bcs.n	8007b4c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
	}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000c24 	.word	0x20000c24
 8007b5c:	20000c28 	.word	0x20000c28
 8007b60:	20000d2c 	.word	0x20000d2c

08007b64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b086      	sub	sp, #24
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d06e      	beq.n	8007c58 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b7a:	4b3a      	ldr	r3, [pc, #232]	; (8007c64 <xTaskPriorityDisinherit+0x100>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d00a      	beq.n	8007b9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60bb      	str	r3, [r7, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bbc:	1e5a      	subs	r2, r3, #1
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d044      	beq.n	8007c58 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d140      	bne.n	8007c58 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	3304      	adds	r3, #4
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fe fd3e 	bl	800665c <uxListRemove>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d115      	bne.n	8007c12 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bea:	491f      	ldr	r1, [pc, #124]	; (8007c68 <xTaskPriorityDisinherit+0x104>)
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	440b      	add	r3, r1
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10a      	bne.n	8007c12 <xTaskPriorityDisinherit+0xae>
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	2201      	movs	r2, #1
 8007c02:	fa02 f303 	lsl.w	r3, r2, r3
 8007c06:	43da      	mvns	r2, r3
 8007c08:	4b18      	ldr	r3, [pc, #96]	; (8007c6c <xTaskPriorityDisinherit+0x108>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	4a17      	ldr	r2, [pc, #92]	; (8007c6c <xTaskPriorityDisinherit+0x108>)
 8007c10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	f1c3 0207 	rsb	r2, r3, #7
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	409a      	lsls	r2, r3
 8007c2e:	4b0f      	ldr	r3, [pc, #60]	; (8007c6c <xTaskPriorityDisinherit+0x108>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	4a0d      	ldr	r2, [pc, #52]	; (8007c6c <xTaskPriorityDisinherit+0x108>)
 8007c36:	6013      	str	r3, [r2, #0]
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4a08      	ldr	r2, [pc, #32]	; (8007c68 <xTaskPriorityDisinherit+0x104>)
 8007c46:	441a      	add	r2, r3
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	f7fe fca7 	bl	80065a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007c58:	697b      	ldr	r3, [r7, #20]
	}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000c24 	.word	0x20000c24
 8007c68:	20000c28 	.word	0x20000c28
 8007c6c:	20000d2c 	.word	0x20000d2c

08007c70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b088      	sub	sp, #32
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d077      	beq.n	8007d78 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	60fb      	str	r3, [r7, #12]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d902      	bls.n	8007cb6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	61fb      	str	r3, [r7, #28]
 8007cb4:	e002      	b.n	8007cbc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d058      	beq.n	8007d78 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d153      	bne.n	8007d78 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007cd0:	4b2b      	ldr	r3, [pc, #172]	; (8007d80 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d10a      	bne.n	8007cf0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60bb      	str	r3, [r7, #8]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	db04      	blt.n	8007d0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	f1c3 0207 	rsb	r2, r3, #7
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	6959      	ldr	r1, [r3, #20]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4a19      	ldr	r2, [pc, #100]	; (8007d84 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007d1e:	4413      	add	r3, r2
 8007d20:	4299      	cmp	r1, r3
 8007d22:	d129      	bne.n	8007d78 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fe fc97 	bl	800665c <uxListRemove>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	2201      	movs	r2, #1
 8007d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3e:	43da      	mvns	r2, r3
 8007d40:	4b11      	ldr	r3, [pc, #68]	; (8007d88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4013      	ands	r3, r2
 8007d46:	4a10      	ldr	r2, [pc, #64]	; (8007d88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d48:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	2201      	movs	r2, #1
 8007d50:	409a      	lsls	r2, r3
 8007d52:	4b0d      	ldr	r3, [pc, #52]	; (8007d88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	4a0b      	ldr	r2, [pc, #44]	; (8007d88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4a06      	ldr	r2, [pc, #24]	; (8007d84 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007d6a:	441a      	add	r2, r3
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f7fe fc15 	bl	80065a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d78:	bf00      	nop
 8007d7a:	3720      	adds	r7, #32
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	20000c24 	.word	0x20000c24
 8007d84:	20000c28 	.word	0x20000c28
 8007d88:	20000d2c 	.word	0x20000d2c

08007d8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d9e:	3201      	adds	r2, #1
 8007da0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007da2:	4b03      	ldr	r3, [pc, #12]	; (8007db0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007da4:	681b      	ldr	r3, [r3, #0]
	}
 8007da6:	4618      	mov	r0, r3
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	20000c24 	.word	0x20000c24

08007db4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dbe:	4b29      	ldr	r3, [pc, #164]	; (8007e64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dc4:	4b28      	ldr	r3, [pc, #160]	; (8007e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fc46 	bl	800665c <uxListRemove>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10b      	bne.n	8007dee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007dd6:	4b24      	ldr	r3, [pc, #144]	; (8007e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ddc:	2201      	movs	r2, #1
 8007dde:	fa02 f303 	lsl.w	r3, r2, r3
 8007de2:	43da      	mvns	r2, r3
 8007de4:	4b21      	ldr	r3, [pc, #132]	; (8007e6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4013      	ands	r3, r2
 8007dea:	4a20      	ldr	r2, [pc, #128]	; (8007e6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007dec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df4:	d10a      	bne.n	8007e0c <prvAddCurrentTaskToDelayedList+0x58>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dfc:	4b1a      	ldr	r3, [pc, #104]	; (8007e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	481a      	ldr	r0, [pc, #104]	; (8007e70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e06:	f7fe fbcc 	bl	80065a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e0a:	e026      	b.n	8007e5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4413      	add	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e14:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d209      	bcs.n	8007e38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e24:	4b13      	ldr	r3, [pc, #76]	; (8007e74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	4b0f      	ldr	r3, [pc, #60]	; (8007e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3304      	adds	r3, #4
 8007e2e:	4619      	mov	r1, r3
 8007e30:	4610      	mov	r0, r2
 8007e32:	f7fe fbda 	bl	80065ea <vListInsert>
}
 8007e36:	e010      	b.n	8007e5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e38:	4b0f      	ldr	r3, [pc, #60]	; (8007e78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	4b0a      	ldr	r3, [pc, #40]	; (8007e68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4619      	mov	r1, r3
 8007e44:	4610      	mov	r0, r2
 8007e46:	f7fe fbd0 	bl	80065ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e4a:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d202      	bcs.n	8007e5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e54:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	6013      	str	r3, [r2, #0]
}
 8007e5a:	bf00      	nop
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000d28 	.word	0x20000d28
 8007e68:	20000c24 	.word	0x20000c24
 8007e6c:	20000d2c 	.word	0x20000d2c
 8007e70:	20000d10 	.word	0x20000d10
 8007e74:	20000ce0 	.word	0x20000ce0
 8007e78:	20000cdc 	.word	0x20000cdc
 8007e7c:	20000d44 	.word	0x20000d44

08007e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	3b04      	subs	r3, #4
 8007e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	3b04      	subs	r3, #4
 8007e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f023 0201 	bic.w	r2, r3, #1
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3b04      	subs	r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007eb0:	4a0c      	ldr	r2, [pc, #48]	; (8007ee4 <pxPortInitialiseStack+0x64>)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3b14      	subs	r3, #20
 8007eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3b04      	subs	r3, #4
 8007ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f06f 0202 	mvn.w	r2, #2
 8007ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3b20      	subs	r3, #32
 8007ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	08007ee9 	.word	0x08007ee9

08007ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ef2:	4b12      	ldr	r3, [pc, #72]	; (8007f3c <prvTaskExitError+0x54>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d00a      	beq.n	8007f12 <prvTaskExitError+0x2a>
	__asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60fb      	str	r3, [r7, #12]
}
 8007f0e:	bf00      	nop
 8007f10:	e7fe      	b.n	8007f10 <prvTaskExitError+0x28>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	60bb      	str	r3, [r7, #8]
}
 8007f24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f26:	bf00      	nop
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0fc      	beq.n	8007f28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f2e:	bf00      	nop
 8007f30:	bf00      	nop
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr
 8007f3c:	20000020 	.word	0x20000020

08007f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f40:	4b07      	ldr	r3, [pc, #28]	; (8007f60 <pxCurrentTCBConst2>)
 8007f42:	6819      	ldr	r1, [r3, #0]
 8007f44:	6808      	ldr	r0, [r1, #0]
 8007f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4a:	f380 8809 	msr	PSP, r0
 8007f4e:	f3bf 8f6f 	isb	sy
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f380 8811 	msr	BASEPRI, r0
 8007f5a:	4770      	bx	lr
 8007f5c:	f3af 8000 	nop.w

08007f60 <pxCurrentTCBConst2>:
 8007f60:	20000c24 	.word	0x20000c24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop

08007f68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f68:	4808      	ldr	r0, [pc, #32]	; (8007f8c <prvPortStartFirstTask+0x24>)
 8007f6a:	6800      	ldr	r0, [r0, #0]
 8007f6c:	6800      	ldr	r0, [r0, #0]
 8007f6e:	f380 8808 	msr	MSP, r0
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8814 	msr	CONTROL, r0
 8007f7a:	b662      	cpsie	i
 8007f7c:	b661      	cpsie	f
 8007f7e:	f3bf 8f4f 	dsb	sy
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	df00      	svc	0
 8007f88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f8a:	bf00      	nop
 8007f8c:	e000ed08 	.word	0xe000ed08

08007f90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f96:	4b46      	ldr	r3, [pc, #280]	; (80080b0 <xPortStartScheduler+0x120>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a46      	ldr	r2, [pc, #280]	; (80080b4 <xPortStartScheduler+0x124>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d10a      	bne.n	8007fb6 <xPortStartScheduler+0x26>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	613b      	str	r3, [r7, #16]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fb6:	4b3e      	ldr	r3, [pc, #248]	; (80080b0 <xPortStartScheduler+0x120>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a3f      	ldr	r2, [pc, #252]	; (80080b8 <xPortStartScheduler+0x128>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d10a      	bne.n	8007fd6 <xPortStartScheduler+0x46>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	60fb      	str	r3, [r7, #12]
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fd6:	4b39      	ldr	r3, [pc, #228]	; (80080bc <xPortStartScheduler+0x12c>)
 8007fd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	22ff      	movs	r2, #255	; 0xff
 8007fe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <xPortStartScheduler+0x130>)
 8007ffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ffe:	4b31      	ldr	r3, [pc, #196]	; (80080c4 <xPortStartScheduler+0x134>)
 8008000:	2207      	movs	r2, #7
 8008002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008004:	e009      	b.n	800801a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008006:	4b2f      	ldr	r3, [pc, #188]	; (80080c4 <xPortStartScheduler+0x134>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3b01      	subs	r3, #1
 800800c:	4a2d      	ldr	r2, [pc, #180]	; (80080c4 <xPortStartScheduler+0x134>)
 800800e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	005b      	lsls	r3, r3, #1
 8008016:	b2db      	uxtb	r3, r3
 8008018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800801a:	78fb      	ldrb	r3, [r7, #3]
 800801c:	b2db      	uxtb	r3, r3
 800801e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008022:	2b80      	cmp	r3, #128	; 0x80
 8008024:	d0ef      	beq.n	8008006 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008026:	4b27      	ldr	r3, [pc, #156]	; (80080c4 <xPortStartScheduler+0x134>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f1c3 0307 	rsb	r3, r3, #7
 800802e:	2b04      	cmp	r3, #4
 8008030:	d00a      	beq.n	8008048 <xPortStartScheduler+0xb8>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	60bb      	str	r3, [r7, #8]
}
 8008044:	bf00      	nop
 8008046:	e7fe      	b.n	8008046 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008048:	4b1e      	ldr	r3, [pc, #120]	; (80080c4 <xPortStartScheduler+0x134>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	021b      	lsls	r3, r3, #8
 800804e:	4a1d      	ldr	r2, [pc, #116]	; (80080c4 <xPortStartScheduler+0x134>)
 8008050:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008052:	4b1c      	ldr	r3, [pc, #112]	; (80080c4 <xPortStartScheduler+0x134>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800805a:	4a1a      	ldr	r2, [pc, #104]	; (80080c4 <xPortStartScheduler+0x134>)
 800805c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	b2da      	uxtb	r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008066:	4b18      	ldr	r3, [pc, #96]	; (80080c8 <xPortStartScheduler+0x138>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a17      	ldr	r2, [pc, #92]	; (80080c8 <xPortStartScheduler+0x138>)
 800806c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008070:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008072:	4b15      	ldr	r3, [pc, #84]	; (80080c8 <xPortStartScheduler+0x138>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a14      	ldr	r2, [pc, #80]	; (80080c8 <xPortStartScheduler+0x138>)
 8008078:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800807c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800807e:	f000 f8dd 	bl	800823c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008082:	4b12      	ldr	r3, [pc, #72]	; (80080cc <xPortStartScheduler+0x13c>)
 8008084:	2200      	movs	r2, #0
 8008086:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008088:	f000 f8fc 	bl	8008284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800808c:	4b10      	ldr	r3, [pc, #64]	; (80080d0 <xPortStartScheduler+0x140>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a0f      	ldr	r2, [pc, #60]	; (80080d0 <xPortStartScheduler+0x140>)
 8008092:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008096:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008098:	f7ff ff66 	bl	8007f68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800809c:	f7ff fa92 	bl	80075c4 <vTaskSwitchContext>
	prvTaskExitError();
 80080a0:	f7ff ff22 	bl	8007ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	e000ed00 	.word	0xe000ed00
 80080b4:	410fc271 	.word	0x410fc271
 80080b8:	410fc270 	.word	0x410fc270
 80080bc:	e000e400 	.word	0xe000e400
 80080c0:	20000d50 	.word	0x20000d50
 80080c4:	20000d54 	.word	0x20000d54
 80080c8:	e000ed20 	.word	0xe000ed20
 80080cc:	20000020 	.word	0x20000020
 80080d0:	e000ef34 	.word	0xe000ef34

080080d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	607b      	str	r3, [r7, #4]
}
 80080ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080ee:	4b0f      	ldr	r3, [pc, #60]	; (800812c <vPortEnterCritical+0x58>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	4a0d      	ldr	r2, [pc, #52]	; (800812c <vPortEnterCritical+0x58>)
 80080f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080f8:	4b0c      	ldr	r3, [pc, #48]	; (800812c <vPortEnterCritical+0x58>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d10f      	bne.n	8008120 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008100:	4b0b      	ldr	r3, [pc, #44]	; (8008130 <vPortEnterCritical+0x5c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00a      	beq.n	8008120 <vPortEnterCritical+0x4c>
	__asm volatile
 800810a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810e:	f383 8811 	msr	BASEPRI, r3
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	f3bf 8f4f 	dsb	sy
 800811a:	603b      	str	r3, [r7, #0]
}
 800811c:	bf00      	nop
 800811e:	e7fe      	b.n	800811e <vPortEnterCritical+0x4a>
	}
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	20000020 	.word	0x20000020
 8008130:	e000ed04 	.word	0xe000ed04

08008134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <vPortExitCritical+0x50>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d10a      	bne.n	8008158 <vPortExitCritical+0x24>
	__asm volatile
 8008142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	607b      	str	r3, [r7, #4]
}
 8008154:	bf00      	nop
 8008156:	e7fe      	b.n	8008156 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <vPortExitCritical+0x50>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3b01      	subs	r3, #1
 800815e:	4a09      	ldr	r2, [pc, #36]	; (8008184 <vPortExitCritical+0x50>)
 8008160:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008162:	4b08      	ldr	r3, [pc, #32]	; (8008184 <vPortExitCritical+0x50>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d105      	bne.n	8008176 <vPortExitCritical+0x42>
 800816a:	2300      	movs	r3, #0
 800816c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008174:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	20000020 	.word	0x20000020
	...

08008190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008190:	f3ef 8009 	mrs	r0, PSP
 8008194:	f3bf 8f6f 	isb	sy
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <pxCurrentTCBConst>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	f01e 0f10 	tst.w	lr, #16
 80081a0:	bf08      	it	eq
 80081a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	6010      	str	r0, [r2, #0]
 80081ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081b4:	f380 8811 	msr	BASEPRI, r0
 80081b8:	f3bf 8f4f 	dsb	sy
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f7ff fa00 	bl	80075c4 <vTaskSwitchContext>
 80081c4:	f04f 0000 	mov.w	r0, #0
 80081c8:	f380 8811 	msr	BASEPRI, r0
 80081cc:	bc09      	pop	{r0, r3}
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	6808      	ldr	r0, [r1, #0]
 80081d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081d6:	f01e 0f10 	tst.w	lr, #16
 80081da:	bf08      	it	eq
 80081dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081e0:	f380 8809 	msr	PSP, r0
 80081e4:	f3bf 8f6f 	isb	sy
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	f3af 8000 	nop.w

080081f0 <pxCurrentTCBConst>:
 80081f0:	20000c24 	.word	0x20000c24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop

080081f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	607b      	str	r3, [r7, #4]
}
 8008210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008212:	f7ff f91f 	bl	8007454 <xTaskIncrementTick>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800821c:	4b06      	ldr	r3, [pc, #24]	; (8008238 <SysTick_Handler+0x40>)
 800821e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	2300      	movs	r3, #0
 8008226:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	f383 8811 	msr	BASEPRI, r3
}
 800822e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008230:	bf00      	nop
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}
 8008238:	e000ed04 	.word	0xe000ed04

0800823c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008240:	4b0b      	ldr	r3, [pc, #44]	; (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008242:	2200      	movs	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <vPortSetupTimerInterrupt+0x38>)
 8008248:	2200      	movs	r2, #0
 800824a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800824c:	4b0a      	ldr	r3, [pc, #40]	; (8008278 <vPortSetupTimerInterrupt+0x3c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a0a      	ldr	r2, [pc, #40]	; (800827c <vPortSetupTimerInterrupt+0x40>)
 8008252:	fba2 2303 	umull	r2, r3, r2, r3
 8008256:	099b      	lsrs	r3, r3, #6
 8008258:	4a09      	ldr	r2, [pc, #36]	; (8008280 <vPortSetupTimerInterrupt+0x44>)
 800825a:	3b01      	subs	r3, #1
 800825c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800825e:	4b04      	ldr	r3, [pc, #16]	; (8008270 <vPortSetupTimerInterrupt+0x34>)
 8008260:	2207      	movs	r2, #7
 8008262:	601a      	str	r2, [r3, #0]
}
 8008264:	bf00      	nop
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	e000e010 	.word	0xe000e010
 8008274:	e000e018 	.word	0xe000e018
 8008278:	20000014 	.word	0x20000014
 800827c:	10624dd3 	.word	0x10624dd3
 8008280:	e000e014 	.word	0xe000e014

08008284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008294 <vPortEnableVFP+0x10>
 8008288:	6801      	ldr	r1, [r0, #0]
 800828a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800828e:	6001      	str	r1, [r0, #0]
 8008290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008292:	bf00      	nop
 8008294:	e000ed88 	.word	0xe000ed88

08008298 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b08a      	sub	sp, #40	; 0x28
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082a4:	f7ff f82c 	bl	8007300 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082a8:	4b5b      	ldr	r3, [pc, #364]	; (8008418 <pvPortMalloc+0x180>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082b0:	f000 f920 	bl	80084f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082b4:	4b59      	ldr	r3, [pc, #356]	; (800841c <pvPortMalloc+0x184>)
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	f040 8093 	bne.w	80083e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01d      	beq.n	8008304 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80082c8:	2208      	movs	r2, #8
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d014      	beq.n	8008304 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f023 0307 	bic.w	r3, r3, #7
 80082e0:	3308      	adds	r3, #8
 80082e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f003 0307 	and.w	r3, r3, #7
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00a      	beq.n	8008304 <pvPortMalloc+0x6c>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	617b      	str	r3, [r7, #20]
}
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d06e      	beq.n	80083e8 <pvPortMalloc+0x150>
 800830a:	4b45      	ldr	r3, [pc, #276]	; (8008420 <pvPortMalloc+0x188>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	429a      	cmp	r2, r3
 8008312:	d869      	bhi.n	80083e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008314:	4b43      	ldr	r3, [pc, #268]	; (8008424 <pvPortMalloc+0x18c>)
 8008316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008318:	4b42      	ldr	r3, [pc, #264]	; (8008424 <pvPortMalloc+0x18c>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800831e:	e004      	b.n	800832a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d903      	bls.n	800833c <pvPortMalloc+0xa4>
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f1      	bne.n	8008320 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800833c:	4b36      	ldr	r3, [pc, #216]	; (8008418 <pvPortMalloc+0x180>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008342:	429a      	cmp	r2, r3
 8008344:	d050      	beq.n	80083e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008346:	6a3b      	ldr	r3, [r7, #32]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2208      	movs	r2, #8
 800834c:	4413      	add	r3, r2
 800834e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835a:	685a      	ldr	r2, [r3, #4]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	1ad2      	subs	r2, r2, r3
 8008360:	2308      	movs	r3, #8
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	429a      	cmp	r2, r3
 8008366:	d91f      	bls.n	80083a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4413      	add	r3, r2
 800836e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008370:	69bb      	ldr	r3, [r7, #24]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <pvPortMalloc+0xf8>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	613b      	str	r3, [r7, #16]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	1ad2      	subs	r2, r2, r3
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800839c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083a2:	69b8      	ldr	r0, [r7, #24]
 80083a4:	f000 f908 	bl	80085b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083a8:	4b1d      	ldr	r3, [pc, #116]	; (8008420 <pvPortMalloc+0x188>)
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	4a1b      	ldr	r2, [pc, #108]	; (8008420 <pvPortMalloc+0x188>)
 80083b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083b6:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <pvPortMalloc+0x188>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	4b1b      	ldr	r3, [pc, #108]	; (8008428 <pvPortMalloc+0x190>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d203      	bcs.n	80083ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083c2:	4b17      	ldr	r3, [pc, #92]	; (8008420 <pvPortMalloc+0x188>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a18      	ldr	r2, [pc, #96]	; (8008428 <pvPortMalloc+0x190>)
 80083c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	4b13      	ldr	r3, [pc, #76]	; (800841c <pvPortMalloc+0x184>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	2200      	movs	r2, #0
 80083dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083de:	4b13      	ldr	r3, [pc, #76]	; (800842c <pvPortMalloc+0x194>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3301      	adds	r3, #1
 80083e4:	4a11      	ldr	r2, [pc, #68]	; (800842c <pvPortMalloc+0x194>)
 80083e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083e8:	f7fe ff98 	bl	800731c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	f003 0307 	and.w	r3, r3, #7
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <pvPortMalloc+0x174>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	60fb      	str	r3, [r7, #12]
}
 8008408:	bf00      	nop
 800840a:	e7fe      	b.n	800840a <pvPortMalloc+0x172>
	return pvReturn;
 800840c:	69fb      	ldr	r3, [r7, #28]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3728      	adds	r7, #40	; 0x28
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20004960 	.word	0x20004960
 800841c:	20004974 	.word	0x20004974
 8008420:	20004964 	.word	0x20004964
 8008424:	20004958 	.word	0x20004958
 8008428:	20004968 	.word	0x20004968
 800842c:	2000496c 	.word	0x2000496c

08008430 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d04d      	beq.n	80084de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008442:	2308      	movs	r3, #8
 8008444:	425b      	negs	r3, r3
 8008446:	697a      	ldr	r2, [r7, #20]
 8008448:	4413      	add	r3, r2
 800844a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	685a      	ldr	r2, [r3, #4]
 8008454:	4b24      	ldr	r3, [pc, #144]	; (80084e8 <vPortFree+0xb8>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4013      	ands	r3, r2
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10a      	bne.n	8008474 <vPortFree+0x44>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	60fb      	str	r3, [r7, #12]
}
 8008470:	bf00      	nop
 8008472:	e7fe      	b.n	8008472 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00a      	beq.n	8008492 <vPortFree+0x62>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	60bb      	str	r3, [r7, #8]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	685a      	ldr	r2, [r3, #4]
 8008496:	4b14      	ldr	r3, [pc, #80]	; (80084e8 <vPortFree+0xb8>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4013      	ands	r3, r2
 800849c:	2b00      	cmp	r3, #0
 800849e:	d01e      	beq.n	80084de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d11a      	bne.n	80084de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	4b0e      	ldr	r3, [pc, #56]	; (80084e8 <vPortFree+0xb8>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	43db      	mvns	r3, r3
 80084b2:	401a      	ands	r2, r3
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80084b8:	f7fe ff22 	bl	8007300 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	4b0a      	ldr	r3, [pc, #40]	; (80084ec <vPortFree+0xbc>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4413      	add	r3, r2
 80084c6:	4a09      	ldr	r2, [pc, #36]	; (80084ec <vPortFree+0xbc>)
 80084c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80084ca:	6938      	ldr	r0, [r7, #16]
 80084cc:	f000 f874 	bl	80085b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084d0:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <vPortFree+0xc0>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	3301      	adds	r3, #1
 80084d6:	4a06      	ldr	r2, [pc, #24]	; (80084f0 <vPortFree+0xc0>)
 80084d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084da:	f7fe ff1f 	bl	800731c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084de:	bf00      	nop
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20004974 	.word	0x20004974
 80084ec:	20004964 	.word	0x20004964
 80084f0:	20004970 	.word	0x20004970

080084f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084f4:	b480      	push	{r7}
 80084f6:	b085      	sub	sp, #20
 80084f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008500:	4b27      	ldr	r3, [pc, #156]	; (80085a0 <prvHeapInit+0xac>)
 8008502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	3307      	adds	r3, #7
 8008512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0307 	bic.w	r3, r3, #7
 800851a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	4a1f      	ldr	r2, [pc, #124]	; (80085a0 <prvHeapInit+0xac>)
 8008524:	4413      	add	r3, r2
 8008526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800852c:	4a1d      	ldr	r2, [pc, #116]	; (80085a4 <prvHeapInit+0xb0>)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008532:	4b1c      	ldr	r3, [pc, #112]	; (80085a4 <prvHeapInit+0xb0>)
 8008534:	2200      	movs	r2, #0
 8008536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	4413      	add	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008540:	2208      	movs	r2, #8
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f023 0307 	bic.w	r3, r3, #7
 800854e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a15      	ldr	r2, [pc, #84]	; (80085a8 <prvHeapInit+0xb4>)
 8008554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008556:	4b14      	ldr	r3, [pc, #80]	; (80085a8 <prvHeapInit+0xb4>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <prvHeapInit+0xb4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	1ad2      	subs	r2, r2, r3
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008574:	4b0c      	ldr	r3, [pc, #48]	; (80085a8 <prvHeapInit+0xb4>)
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	4a0a      	ldr	r2, [pc, #40]	; (80085ac <prvHeapInit+0xb8>)
 8008582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <prvHeapInit+0xbc>)
 800858a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <prvHeapInit+0xc0>)
 800858e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008592:	601a      	str	r2, [r3, #0]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	20000d58 	.word	0x20000d58
 80085a4:	20004958 	.word	0x20004958
 80085a8:	20004960 	.word	0x20004960
 80085ac:	20004968 	.word	0x20004968
 80085b0:	20004964 	.word	0x20004964
 80085b4:	20004974 	.word	0x20004974

080085b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80085c0:	4b28      	ldr	r3, [pc, #160]	; (8008664 <prvInsertBlockIntoFreeList+0xac>)
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e002      	b.n	80085cc <prvInsertBlockIntoFreeList+0x14>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d8f7      	bhi.n	80085c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d108      	bne.n	80085fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	685a      	ldr	r2, [r3, #4]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	441a      	add	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	441a      	add	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	429a      	cmp	r2, r3
 800860c:	d118      	bne.n	8008640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	4b15      	ldr	r3, [pc, #84]	; (8008668 <prvInsertBlockIntoFreeList+0xb0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	429a      	cmp	r2, r3
 8008618:	d00d      	beq.n	8008636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685a      	ldr	r2, [r3, #4]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	441a      	add	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	e008      	b.n	8008648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008636:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <prvInsertBlockIntoFreeList+0xb0>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	e003      	b.n	8008648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d002      	beq.n	8008656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	20004958 	.word	0x20004958
 8008668:	20004960 	.word	0x20004960

0800866c <__errno>:
 800866c:	4b01      	ldr	r3, [pc, #4]	; (8008674 <__errno+0x8>)
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	20000024 	.word	0x20000024

08008678 <__libc_init_array>:
 8008678:	b570      	push	{r4, r5, r6, lr}
 800867a:	4d0d      	ldr	r5, [pc, #52]	; (80086b0 <__libc_init_array+0x38>)
 800867c:	4c0d      	ldr	r4, [pc, #52]	; (80086b4 <__libc_init_array+0x3c>)
 800867e:	1b64      	subs	r4, r4, r5
 8008680:	10a4      	asrs	r4, r4, #2
 8008682:	2600      	movs	r6, #0
 8008684:	42a6      	cmp	r6, r4
 8008686:	d109      	bne.n	800869c <__libc_init_array+0x24>
 8008688:	4d0b      	ldr	r5, [pc, #44]	; (80086b8 <__libc_init_array+0x40>)
 800868a:	4c0c      	ldr	r4, [pc, #48]	; (80086bc <__libc_init_array+0x44>)
 800868c:	f001 fcda 	bl	800a044 <_init>
 8008690:	1b64      	subs	r4, r4, r5
 8008692:	10a4      	asrs	r4, r4, #2
 8008694:	2600      	movs	r6, #0
 8008696:	42a6      	cmp	r6, r4
 8008698:	d105      	bne.n	80086a6 <__libc_init_array+0x2e>
 800869a:	bd70      	pop	{r4, r5, r6, pc}
 800869c:	f855 3b04 	ldr.w	r3, [r5], #4
 80086a0:	4798      	blx	r3
 80086a2:	3601      	adds	r6, #1
 80086a4:	e7ee      	b.n	8008684 <__libc_init_array+0xc>
 80086a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80086aa:	4798      	blx	r3
 80086ac:	3601      	adds	r6, #1
 80086ae:	e7f2      	b.n	8008696 <__libc_init_array+0x1e>
 80086b0:	0800a2e8 	.word	0x0800a2e8
 80086b4:	0800a2e8 	.word	0x0800a2e8
 80086b8:	0800a2e8 	.word	0x0800a2e8
 80086bc:	0800a2ec 	.word	0x0800a2ec

080086c0 <memcpy>:
 80086c0:	440a      	add	r2, r1
 80086c2:	4291      	cmp	r1, r2
 80086c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086c8:	d100      	bne.n	80086cc <memcpy+0xc>
 80086ca:	4770      	bx	lr
 80086cc:	b510      	push	{r4, lr}
 80086ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086d6:	4291      	cmp	r1, r2
 80086d8:	d1f9      	bne.n	80086ce <memcpy+0xe>
 80086da:	bd10      	pop	{r4, pc}

080086dc <memset>:
 80086dc:	4402      	add	r2, r0
 80086de:	4603      	mov	r3, r0
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d100      	bne.n	80086e6 <memset+0xa>
 80086e4:	4770      	bx	lr
 80086e6:	f803 1b01 	strb.w	r1, [r3], #1
 80086ea:	e7f9      	b.n	80086e0 <memset+0x4>

080086ec <siprintf>:
 80086ec:	b40e      	push	{r1, r2, r3}
 80086ee:	b500      	push	{lr}
 80086f0:	b09c      	sub	sp, #112	; 0x70
 80086f2:	ab1d      	add	r3, sp, #116	; 0x74
 80086f4:	9002      	str	r0, [sp, #8]
 80086f6:	9006      	str	r0, [sp, #24]
 80086f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086fc:	4809      	ldr	r0, [pc, #36]	; (8008724 <siprintf+0x38>)
 80086fe:	9107      	str	r1, [sp, #28]
 8008700:	9104      	str	r1, [sp, #16]
 8008702:	4909      	ldr	r1, [pc, #36]	; (8008728 <siprintf+0x3c>)
 8008704:	f853 2b04 	ldr.w	r2, [r3], #4
 8008708:	9105      	str	r1, [sp, #20]
 800870a:	6800      	ldr	r0, [r0, #0]
 800870c:	9301      	str	r3, [sp, #4]
 800870e:	a902      	add	r1, sp, #8
 8008710:	f000 f868 	bl	80087e4 <_svfiprintf_r>
 8008714:	9b02      	ldr	r3, [sp, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	701a      	strb	r2, [r3, #0]
 800871a:	b01c      	add	sp, #112	; 0x70
 800871c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008720:	b003      	add	sp, #12
 8008722:	4770      	bx	lr
 8008724:	20000024 	.word	0x20000024
 8008728:	ffff0208 	.word	0xffff0208

0800872c <__ssputs_r>:
 800872c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008730:	688e      	ldr	r6, [r1, #8]
 8008732:	429e      	cmp	r6, r3
 8008734:	4682      	mov	sl, r0
 8008736:	460c      	mov	r4, r1
 8008738:	4690      	mov	r8, r2
 800873a:	461f      	mov	r7, r3
 800873c:	d838      	bhi.n	80087b0 <__ssputs_r+0x84>
 800873e:	898a      	ldrh	r2, [r1, #12]
 8008740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008744:	d032      	beq.n	80087ac <__ssputs_r+0x80>
 8008746:	6825      	ldr	r5, [r4, #0]
 8008748:	6909      	ldr	r1, [r1, #16]
 800874a:	eba5 0901 	sub.w	r9, r5, r1
 800874e:	6965      	ldr	r5, [r4, #20]
 8008750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008758:	3301      	adds	r3, #1
 800875a:	444b      	add	r3, r9
 800875c:	106d      	asrs	r5, r5, #1
 800875e:	429d      	cmp	r5, r3
 8008760:	bf38      	it	cc
 8008762:	461d      	movcc	r5, r3
 8008764:	0553      	lsls	r3, r2, #21
 8008766:	d531      	bpl.n	80087cc <__ssputs_r+0xa0>
 8008768:	4629      	mov	r1, r5
 800876a:	f000 fb55 	bl	8008e18 <_malloc_r>
 800876e:	4606      	mov	r6, r0
 8008770:	b950      	cbnz	r0, 8008788 <__ssputs_r+0x5c>
 8008772:	230c      	movs	r3, #12
 8008774:	f8ca 3000 	str.w	r3, [sl]
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	f04f 30ff 	mov.w	r0, #4294967295
 8008784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008788:	6921      	ldr	r1, [r4, #16]
 800878a:	464a      	mov	r2, r9
 800878c:	f7ff ff98 	bl	80086c0 <memcpy>
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800879a:	81a3      	strh	r3, [r4, #12]
 800879c:	6126      	str	r6, [r4, #16]
 800879e:	6165      	str	r5, [r4, #20]
 80087a0:	444e      	add	r6, r9
 80087a2:	eba5 0509 	sub.w	r5, r5, r9
 80087a6:	6026      	str	r6, [r4, #0]
 80087a8:	60a5      	str	r5, [r4, #8]
 80087aa:	463e      	mov	r6, r7
 80087ac:	42be      	cmp	r6, r7
 80087ae:	d900      	bls.n	80087b2 <__ssputs_r+0x86>
 80087b0:	463e      	mov	r6, r7
 80087b2:	6820      	ldr	r0, [r4, #0]
 80087b4:	4632      	mov	r2, r6
 80087b6:	4641      	mov	r1, r8
 80087b8:	f000 faa8 	bl	8008d0c <memmove>
 80087bc:	68a3      	ldr	r3, [r4, #8]
 80087be:	1b9b      	subs	r3, r3, r6
 80087c0:	60a3      	str	r3, [r4, #8]
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	4433      	add	r3, r6
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	2000      	movs	r0, #0
 80087ca:	e7db      	b.n	8008784 <__ssputs_r+0x58>
 80087cc:	462a      	mov	r2, r5
 80087ce:	f000 fb97 	bl	8008f00 <_realloc_r>
 80087d2:	4606      	mov	r6, r0
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d1e1      	bne.n	800879c <__ssputs_r+0x70>
 80087d8:	6921      	ldr	r1, [r4, #16]
 80087da:	4650      	mov	r0, sl
 80087dc:	f000 fab0 	bl	8008d40 <_free_r>
 80087e0:	e7c7      	b.n	8008772 <__ssputs_r+0x46>
	...

080087e4 <_svfiprintf_r>:
 80087e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e8:	4698      	mov	r8, r3
 80087ea:	898b      	ldrh	r3, [r1, #12]
 80087ec:	061b      	lsls	r3, r3, #24
 80087ee:	b09d      	sub	sp, #116	; 0x74
 80087f0:	4607      	mov	r7, r0
 80087f2:	460d      	mov	r5, r1
 80087f4:	4614      	mov	r4, r2
 80087f6:	d50e      	bpl.n	8008816 <_svfiprintf_r+0x32>
 80087f8:	690b      	ldr	r3, [r1, #16]
 80087fa:	b963      	cbnz	r3, 8008816 <_svfiprintf_r+0x32>
 80087fc:	2140      	movs	r1, #64	; 0x40
 80087fe:	f000 fb0b 	bl	8008e18 <_malloc_r>
 8008802:	6028      	str	r0, [r5, #0]
 8008804:	6128      	str	r0, [r5, #16]
 8008806:	b920      	cbnz	r0, 8008812 <_svfiprintf_r+0x2e>
 8008808:	230c      	movs	r3, #12
 800880a:	603b      	str	r3, [r7, #0]
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e0d1      	b.n	80089b6 <_svfiprintf_r+0x1d2>
 8008812:	2340      	movs	r3, #64	; 0x40
 8008814:	616b      	str	r3, [r5, #20]
 8008816:	2300      	movs	r3, #0
 8008818:	9309      	str	r3, [sp, #36]	; 0x24
 800881a:	2320      	movs	r3, #32
 800881c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008820:	f8cd 800c 	str.w	r8, [sp, #12]
 8008824:	2330      	movs	r3, #48	; 0x30
 8008826:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80089d0 <_svfiprintf_r+0x1ec>
 800882a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800882e:	f04f 0901 	mov.w	r9, #1
 8008832:	4623      	mov	r3, r4
 8008834:	469a      	mov	sl, r3
 8008836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800883a:	b10a      	cbz	r2, 8008840 <_svfiprintf_r+0x5c>
 800883c:	2a25      	cmp	r2, #37	; 0x25
 800883e:	d1f9      	bne.n	8008834 <_svfiprintf_r+0x50>
 8008840:	ebba 0b04 	subs.w	fp, sl, r4
 8008844:	d00b      	beq.n	800885e <_svfiprintf_r+0x7a>
 8008846:	465b      	mov	r3, fp
 8008848:	4622      	mov	r2, r4
 800884a:	4629      	mov	r1, r5
 800884c:	4638      	mov	r0, r7
 800884e:	f7ff ff6d 	bl	800872c <__ssputs_r>
 8008852:	3001      	adds	r0, #1
 8008854:	f000 80aa 	beq.w	80089ac <_svfiprintf_r+0x1c8>
 8008858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800885a:	445a      	add	r2, fp
 800885c:	9209      	str	r2, [sp, #36]	; 0x24
 800885e:	f89a 3000 	ldrb.w	r3, [sl]
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 80a2 	beq.w	80089ac <_svfiprintf_r+0x1c8>
 8008868:	2300      	movs	r3, #0
 800886a:	f04f 32ff 	mov.w	r2, #4294967295
 800886e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008872:	f10a 0a01 	add.w	sl, sl, #1
 8008876:	9304      	str	r3, [sp, #16]
 8008878:	9307      	str	r3, [sp, #28]
 800887a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800887e:	931a      	str	r3, [sp, #104]	; 0x68
 8008880:	4654      	mov	r4, sl
 8008882:	2205      	movs	r2, #5
 8008884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008888:	4851      	ldr	r0, [pc, #324]	; (80089d0 <_svfiprintf_r+0x1ec>)
 800888a:	f7f7 fcc1 	bl	8000210 <memchr>
 800888e:	9a04      	ldr	r2, [sp, #16]
 8008890:	b9d8      	cbnz	r0, 80088ca <_svfiprintf_r+0xe6>
 8008892:	06d0      	lsls	r0, r2, #27
 8008894:	bf44      	itt	mi
 8008896:	2320      	movmi	r3, #32
 8008898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800889c:	0711      	lsls	r1, r2, #28
 800889e:	bf44      	itt	mi
 80088a0:	232b      	movmi	r3, #43	; 0x2b
 80088a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80088a6:	f89a 3000 	ldrb.w	r3, [sl]
 80088aa:	2b2a      	cmp	r3, #42	; 0x2a
 80088ac:	d015      	beq.n	80088da <_svfiprintf_r+0xf6>
 80088ae:	9a07      	ldr	r2, [sp, #28]
 80088b0:	4654      	mov	r4, sl
 80088b2:	2000      	movs	r0, #0
 80088b4:	f04f 0c0a 	mov.w	ip, #10
 80088b8:	4621      	mov	r1, r4
 80088ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088be:	3b30      	subs	r3, #48	; 0x30
 80088c0:	2b09      	cmp	r3, #9
 80088c2:	d94e      	bls.n	8008962 <_svfiprintf_r+0x17e>
 80088c4:	b1b0      	cbz	r0, 80088f4 <_svfiprintf_r+0x110>
 80088c6:	9207      	str	r2, [sp, #28]
 80088c8:	e014      	b.n	80088f4 <_svfiprintf_r+0x110>
 80088ca:	eba0 0308 	sub.w	r3, r0, r8
 80088ce:	fa09 f303 	lsl.w	r3, r9, r3
 80088d2:	4313      	orrs	r3, r2
 80088d4:	9304      	str	r3, [sp, #16]
 80088d6:	46a2      	mov	sl, r4
 80088d8:	e7d2      	b.n	8008880 <_svfiprintf_r+0x9c>
 80088da:	9b03      	ldr	r3, [sp, #12]
 80088dc:	1d19      	adds	r1, r3, #4
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	9103      	str	r1, [sp, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bfbb      	ittet	lt
 80088e6:	425b      	neglt	r3, r3
 80088e8:	f042 0202 	orrlt.w	r2, r2, #2
 80088ec:	9307      	strge	r3, [sp, #28]
 80088ee:	9307      	strlt	r3, [sp, #28]
 80088f0:	bfb8      	it	lt
 80088f2:	9204      	strlt	r2, [sp, #16]
 80088f4:	7823      	ldrb	r3, [r4, #0]
 80088f6:	2b2e      	cmp	r3, #46	; 0x2e
 80088f8:	d10c      	bne.n	8008914 <_svfiprintf_r+0x130>
 80088fa:	7863      	ldrb	r3, [r4, #1]
 80088fc:	2b2a      	cmp	r3, #42	; 0x2a
 80088fe:	d135      	bne.n	800896c <_svfiprintf_r+0x188>
 8008900:	9b03      	ldr	r3, [sp, #12]
 8008902:	1d1a      	adds	r2, r3, #4
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	9203      	str	r2, [sp, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	bfb8      	it	lt
 800890c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008910:	3402      	adds	r4, #2
 8008912:	9305      	str	r3, [sp, #20]
 8008914:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80089e0 <_svfiprintf_r+0x1fc>
 8008918:	7821      	ldrb	r1, [r4, #0]
 800891a:	2203      	movs	r2, #3
 800891c:	4650      	mov	r0, sl
 800891e:	f7f7 fc77 	bl	8000210 <memchr>
 8008922:	b140      	cbz	r0, 8008936 <_svfiprintf_r+0x152>
 8008924:	2340      	movs	r3, #64	; 0x40
 8008926:	eba0 000a 	sub.w	r0, r0, sl
 800892a:	fa03 f000 	lsl.w	r0, r3, r0
 800892e:	9b04      	ldr	r3, [sp, #16]
 8008930:	4303      	orrs	r3, r0
 8008932:	3401      	adds	r4, #1
 8008934:	9304      	str	r3, [sp, #16]
 8008936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800893a:	4826      	ldr	r0, [pc, #152]	; (80089d4 <_svfiprintf_r+0x1f0>)
 800893c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008940:	2206      	movs	r2, #6
 8008942:	f7f7 fc65 	bl	8000210 <memchr>
 8008946:	2800      	cmp	r0, #0
 8008948:	d038      	beq.n	80089bc <_svfiprintf_r+0x1d8>
 800894a:	4b23      	ldr	r3, [pc, #140]	; (80089d8 <_svfiprintf_r+0x1f4>)
 800894c:	bb1b      	cbnz	r3, 8008996 <_svfiprintf_r+0x1b2>
 800894e:	9b03      	ldr	r3, [sp, #12]
 8008950:	3307      	adds	r3, #7
 8008952:	f023 0307 	bic.w	r3, r3, #7
 8008956:	3308      	adds	r3, #8
 8008958:	9303      	str	r3, [sp, #12]
 800895a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895c:	4433      	add	r3, r6
 800895e:	9309      	str	r3, [sp, #36]	; 0x24
 8008960:	e767      	b.n	8008832 <_svfiprintf_r+0x4e>
 8008962:	fb0c 3202 	mla	r2, ip, r2, r3
 8008966:	460c      	mov	r4, r1
 8008968:	2001      	movs	r0, #1
 800896a:	e7a5      	b.n	80088b8 <_svfiprintf_r+0xd4>
 800896c:	2300      	movs	r3, #0
 800896e:	3401      	adds	r4, #1
 8008970:	9305      	str	r3, [sp, #20]
 8008972:	4619      	mov	r1, r3
 8008974:	f04f 0c0a 	mov.w	ip, #10
 8008978:	4620      	mov	r0, r4
 800897a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800897e:	3a30      	subs	r2, #48	; 0x30
 8008980:	2a09      	cmp	r2, #9
 8008982:	d903      	bls.n	800898c <_svfiprintf_r+0x1a8>
 8008984:	2b00      	cmp	r3, #0
 8008986:	d0c5      	beq.n	8008914 <_svfiprintf_r+0x130>
 8008988:	9105      	str	r1, [sp, #20]
 800898a:	e7c3      	b.n	8008914 <_svfiprintf_r+0x130>
 800898c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008990:	4604      	mov	r4, r0
 8008992:	2301      	movs	r3, #1
 8008994:	e7f0      	b.n	8008978 <_svfiprintf_r+0x194>
 8008996:	ab03      	add	r3, sp, #12
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	462a      	mov	r2, r5
 800899c:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <_svfiprintf_r+0x1f8>)
 800899e:	a904      	add	r1, sp, #16
 80089a0:	4638      	mov	r0, r7
 80089a2:	f3af 8000 	nop.w
 80089a6:	1c42      	adds	r2, r0, #1
 80089a8:	4606      	mov	r6, r0
 80089aa:	d1d6      	bne.n	800895a <_svfiprintf_r+0x176>
 80089ac:	89ab      	ldrh	r3, [r5, #12]
 80089ae:	065b      	lsls	r3, r3, #25
 80089b0:	f53f af2c 	bmi.w	800880c <_svfiprintf_r+0x28>
 80089b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089b6:	b01d      	add	sp, #116	; 0x74
 80089b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089bc:	ab03      	add	r3, sp, #12
 80089be:	9300      	str	r3, [sp, #0]
 80089c0:	462a      	mov	r2, r5
 80089c2:	4b06      	ldr	r3, [pc, #24]	; (80089dc <_svfiprintf_r+0x1f8>)
 80089c4:	a904      	add	r1, sp, #16
 80089c6:	4638      	mov	r0, r7
 80089c8:	f000 f87a 	bl	8008ac0 <_printf_i>
 80089cc:	e7eb      	b.n	80089a6 <_svfiprintf_r+0x1c2>
 80089ce:	bf00      	nop
 80089d0:	0800a0d0 	.word	0x0800a0d0
 80089d4:	0800a0da 	.word	0x0800a0da
 80089d8:	00000000 	.word	0x00000000
 80089dc:	0800872d 	.word	0x0800872d
 80089e0:	0800a0d6 	.word	0x0800a0d6

080089e4 <_printf_common>:
 80089e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089e8:	4616      	mov	r6, r2
 80089ea:	4699      	mov	r9, r3
 80089ec:	688a      	ldr	r2, [r1, #8]
 80089ee:	690b      	ldr	r3, [r1, #16]
 80089f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	bfb8      	it	lt
 80089f8:	4613      	movlt	r3, r2
 80089fa:	6033      	str	r3, [r6, #0]
 80089fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a00:	4607      	mov	r7, r0
 8008a02:	460c      	mov	r4, r1
 8008a04:	b10a      	cbz	r2, 8008a0a <_printf_common+0x26>
 8008a06:	3301      	adds	r3, #1
 8008a08:	6033      	str	r3, [r6, #0]
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	0699      	lsls	r1, r3, #26
 8008a0e:	bf42      	ittt	mi
 8008a10:	6833      	ldrmi	r3, [r6, #0]
 8008a12:	3302      	addmi	r3, #2
 8008a14:	6033      	strmi	r3, [r6, #0]
 8008a16:	6825      	ldr	r5, [r4, #0]
 8008a18:	f015 0506 	ands.w	r5, r5, #6
 8008a1c:	d106      	bne.n	8008a2c <_printf_common+0x48>
 8008a1e:	f104 0a19 	add.w	sl, r4, #25
 8008a22:	68e3      	ldr	r3, [r4, #12]
 8008a24:	6832      	ldr	r2, [r6, #0]
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	42ab      	cmp	r3, r5
 8008a2a:	dc26      	bgt.n	8008a7a <_printf_common+0x96>
 8008a2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a30:	1e13      	subs	r3, r2, #0
 8008a32:	6822      	ldr	r2, [r4, #0]
 8008a34:	bf18      	it	ne
 8008a36:	2301      	movne	r3, #1
 8008a38:	0692      	lsls	r2, r2, #26
 8008a3a:	d42b      	bmi.n	8008a94 <_printf_common+0xb0>
 8008a3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a40:	4649      	mov	r1, r9
 8008a42:	4638      	mov	r0, r7
 8008a44:	47c0      	blx	r8
 8008a46:	3001      	adds	r0, #1
 8008a48:	d01e      	beq.n	8008a88 <_printf_common+0xa4>
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	68e5      	ldr	r5, [r4, #12]
 8008a4e:	6832      	ldr	r2, [r6, #0]
 8008a50:	f003 0306 	and.w	r3, r3, #6
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	bf08      	it	eq
 8008a58:	1aad      	subeq	r5, r5, r2
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	6922      	ldr	r2, [r4, #16]
 8008a5e:	bf0c      	ite	eq
 8008a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a64:	2500      	movne	r5, #0
 8008a66:	4293      	cmp	r3, r2
 8008a68:	bfc4      	itt	gt
 8008a6a:	1a9b      	subgt	r3, r3, r2
 8008a6c:	18ed      	addgt	r5, r5, r3
 8008a6e:	2600      	movs	r6, #0
 8008a70:	341a      	adds	r4, #26
 8008a72:	42b5      	cmp	r5, r6
 8008a74:	d11a      	bne.n	8008aac <_printf_common+0xc8>
 8008a76:	2000      	movs	r0, #0
 8008a78:	e008      	b.n	8008a8c <_printf_common+0xa8>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	4649      	mov	r1, r9
 8008a80:	4638      	mov	r0, r7
 8008a82:	47c0      	blx	r8
 8008a84:	3001      	adds	r0, #1
 8008a86:	d103      	bne.n	8008a90 <_printf_common+0xac>
 8008a88:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a90:	3501      	adds	r5, #1
 8008a92:	e7c6      	b.n	8008a22 <_printf_common+0x3e>
 8008a94:	18e1      	adds	r1, r4, r3
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	2030      	movs	r0, #48	; 0x30
 8008a9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a9e:	4422      	add	r2, r4
 8008aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008aa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	e7c7      	b.n	8008a3c <_printf_common+0x58>
 8008aac:	2301      	movs	r3, #1
 8008aae:	4622      	mov	r2, r4
 8008ab0:	4649      	mov	r1, r9
 8008ab2:	4638      	mov	r0, r7
 8008ab4:	47c0      	blx	r8
 8008ab6:	3001      	adds	r0, #1
 8008ab8:	d0e6      	beq.n	8008a88 <_printf_common+0xa4>
 8008aba:	3601      	adds	r6, #1
 8008abc:	e7d9      	b.n	8008a72 <_printf_common+0x8e>
	...

08008ac0 <_printf_i>:
 8008ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac4:	7e0f      	ldrb	r7, [r1, #24]
 8008ac6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ac8:	2f78      	cmp	r7, #120	; 0x78
 8008aca:	4691      	mov	r9, r2
 8008acc:	4680      	mov	r8, r0
 8008ace:	460c      	mov	r4, r1
 8008ad0:	469a      	mov	sl, r3
 8008ad2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ad6:	d807      	bhi.n	8008ae8 <_printf_i+0x28>
 8008ad8:	2f62      	cmp	r7, #98	; 0x62
 8008ada:	d80a      	bhi.n	8008af2 <_printf_i+0x32>
 8008adc:	2f00      	cmp	r7, #0
 8008ade:	f000 80d8 	beq.w	8008c92 <_printf_i+0x1d2>
 8008ae2:	2f58      	cmp	r7, #88	; 0x58
 8008ae4:	f000 80a3 	beq.w	8008c2e <_printf_i+0x16e>
 8008ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008af0:	e03a      	b.n	8008b68 <_printf_i+0xa8>
 8008af2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008af6:	2b15      	cmp	r3, #21
 8008af8:	d8f6      	bhi.n	8008ae8 <_printf_i+0x28>
 8008afa:	a101      	add	r1, pc, #4	; (adr r1, 8008b00 <_printf_i+0x40>)
 8008afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b00:	08008b59 	.word	0x08008b59
 8008b04:	08008b6d 	.word	0x08008b6d
 8008b08:	08008ae9 	.word	0x08008ae9
 8008b0c:	08008ae9 	.word	0x08008ae9
 8008b10:	08008ae9 	.word	0x08008ae9
 8008b14:	08008ae9 	.word	0x08008ae9
 8008b18:	08008b6d 	.word	0x08008b6d
 8008b1c:	08008ae9 	.word	0x08008ae9
 8008b20:	08008ae9 	.word	0x08008ae9
 8008b24:	08008ae9 	.word	0x08008ae9
 8008b28:	08008ae9 	.word	0x08008ae9
 8008b2c:	08008c79 	.word	0x08008c79
 8008b30:	08008b9d 	.word	0x08008b9d
 8008b34:	08008c5b 	.word	0x08008c5b
 8008b38:	08008ae9 	.word	0x08008ae9
 8008b3c:	08008ae9 	.word	0x08008ae9
 8008b40:	08008c9b 	.word	0x08008c9b
 8008b44:	08008ae9 	.word	0x08008ae9
 8008b48:	08008b9d 	.word	0x08008b9d
 8008b4c:	08008ae9 	.word	0x08008ae9
 8008b50:	08008ae9 	.word	0x08008ae9
 8008b54:	08008c63 	.word	0x08008c63
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	1d1a      	adds	r2, r3, #4
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	602a      	str	r2, [r5, #0]
 8008b60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e0a3      	b.n	8008cb4 <_printf_i+0x1f4>
 8008b6c:	6820      	ldr	r0, [r4, #0]
 8008b6e:	6829      	ldr	r1, [r5, #0]
 8008b70:	0606      	lsls	r6, r0, #24
 8008b72:	f101 0304 	add.w	r3, r1, #4
 8008b76:	d50a      	bpl.n	8008b8e <_printf_i+0xce>
 8008b78:	680e      	ldr	r6, [r1, #0]
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	2e00      	cmp	r6, #0
 8008b7e:	da03      	bge.n	8008b88 <_printf_i+0xc8>
 8008b80:	232d      	movs	r3, #45	; 0x2d
 8008b82:	4276      	negs	r6, r6
 8008b84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b88:	485e      	ldr	r0, [pc, #376]	; (8008d04 <_printf_i+0x244>)
 8008b8a:	230a      	movs	r3, #10
 8008b8c:	e019      	b.n	8008bc2 <_printf_i+0x102>
 8008b8e:	680e      	ldr	r6, [r1, #0]
 8008b90:	602b      	str	r3, [r5, #0]
 8008b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b96:	bf18      	it	ne
 8008b98:	b236      	sxthne	r6, r6
 8008b9a:	e7ef      	b.n	8008b7c <_printf_i+0xbc>
 8008b9c:	682b      	ldr	r3, [r5, #0]
 8008b9e:	6820      	ldr	r0, [r4, #0]
 8008ba0:	1d19      	adds	r1, r3, #4
 8008ba2:	6029      	str	r1, [r5, #0]
 8008ba4:	0601      	lsls	r1, r0, #24
 8008ba6:	d501      	bpl.n	8008bac <_printf_i+0xec>
 8008ba8:	681e      	ldr	r6, [r3, #0]
 8008baa:	e002      	b.n	8008bb2 <_printf_i+0xf2>
 8008bac:	0646      	lsls	r6, r0, #25
 8008bae:	d5fb      	bpl.n	8008ba8 <_printf_i+0xe8>
 8008bb0:	881e      	ldrh	r6, [r3, #0]
 8008bb2:	4854      	ldr	r0, [pc, #336]	; (8008d04 <_printf_i+0x244>)
 8008bb4:	2f6f      	cmp	r7, #111	; 0x6f
 8008bb6:	bf0c      	ite	eq
 8008bb8:	2308      	moveq	r3, #8
 8008bba:	230a      	movne	r3, #10
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008bc2:	6865      	ldr	r5, [r4, #4]
 8008bc4:	60a5      	str	r5, [r4, #8]
 8008bc6:	2d00      	cmp	r5, #0
 8008bc8:	bfa2      	ittt	ge
 8008bca:	6821      	ldrge	r1, [r4, #0]
 8008bcc:	f021 0104 	bicge.w	r1, r1, #4
 8008bd0:	6021      	strge	r1, [r4, #0]
 8008bd2:	b90e      	cbnz	r6, 8008bd8 <_printf_i+0x118>
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	d04d      	beq.n	8008c74 <_printf_i+0x1b4>
 8008bd8:	4615      	mov	r5, r2
 8008bda:	fbb6 f1f3 	udiv	r1, r6, r3
 8008bde:	fb03 6711 	mls	r7, r3, r1, r6
 8008be2:	5dc7      	ldrb	r7, [r0, r7]
 8008be4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008be8:	4637      	mov	r7, r6
 8008bea:	42bb      	cmp	r3, r7
 8008bec:	460e      	mov	r6, r1
 8008bee:	d9f4      	bls.n	8008bda <_printf_i+0x11a>
 8008bf0:	2b08      	cmp	r3, #8
 8008bf2:	d10b      	bne.n	8008c0c <_printf_i+0x14c>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	07de      	lsls	r6, r3, #31
 8008bf8:	d508      	bpl.n	8008c0c <_printf_i+0x14c>
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	6861      	ldr	r1, [r4, #4]
 8008bfe:	4299      	cmp	r1, r3
 8008c00:	bfde      	ittt	le
 8008c02:	2330      	movle	r3, #48	; 0x30
 8008c04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008c0c:	1b52      	subs	r2, r2, r5
 8008c0e:	6122      	str	r2, [r4, #16]
 8008c10:	f8cd a000 	str.w	sl, [sp]
 8008c14:	464b      	mov	r3, r9
 8008c16:	aa03      	add	r2, sp, #12
 8008c18:	4621      	mov	r1, r4
 8008c1a:	4640      	mov	r0, r8
 8008c1c:	f7ff fee2 	bl	80089e4 <_printf_common>
 8008c20:	3001      	adds	r0, #1
 8008c22:	d14c      	bne.n	8008cbe <_printf_i+0x1fe>
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	b004      	add	sp, #16
 8008c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2e:	4835      	ldr	r0, [pc, #212]	; (8008d04 <_printf_i+0x244>)
 8008c30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008c34:	6829      	ldr	r1, [r5, #0]
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c3c:	6029      	str	r1, [r5, #0]
 8008c3e:	061d      	lsls	r5, r3, #24
 8008c40:	d514      	bpl.n	8008c6c <_printf_i+0x1ac>
 8008c42:	07df      	lsls	r7, r3, #31
 8008c44:	bf44      	itt	mi
 8008c46:	f043 0320 	orrmi.w	r3, r3, #32
 8008c4a:	6023      	strmi	r3, [r4, #0]
 8008c4c:	b91e      	cbnz	r6, 8008c56 <_printf_i+0x196>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	f023 0320 	bic.w	r3, r3, #32
 8008c54:	6023      	str	r3, [r4, #0]
 8008c56:	2310      	movs	r3, #16
 8008c58:	e7b0      	b.n	8008bbc <_printf_i+0xfc>
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	f043 0320 	orr.w	r3, r3, #32
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	2378      	movs	r3, #120	; 0x78
 8008c64:	4828      	ldr	r0, [pc, #160]	; (8008d08 <_printf_i+0x248>)
 8008c66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c6a:	e7e3      	b.n	8008c34 <_printf_i+0x174>
 8008c6c:	0659      	lsls	r1, r3, #25
 8008c6e:	bf48      	it	mi
 8008c70:	b2b6      	uxthmi	r6, r6
 8008c72:	e7e6      	b.n	8008c42 <_printf_i+0x182>
 8008c74:	4615      	mov	r5, r2
 8008c76:	e7bb      	b.n	8008bf0 <_printf_i+0x130>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	6826      	ldr	r6, [r4, #0]
 8008c7c:	6961      	ldr	r1, [r4, #20]
 8008c7e:	1d18      	adds	r0, r3, #4
 8008c80:	6028      	str	r0, [r5, #0]
 8008c82:	0635      	lsls	r5, r6, #24
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0x1cc>
 8008c88:	6019      	str	r1, [r3, #0]
 8008c8a:	e002      	b.n	8008c92 <_printf_i+0x1d2>
 8008c8c:	0670      	lsls	r0, r6, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0x1c8>
 8008c90:	8019      	strh	r1, [r3, #0]
 8008c92:	2300      	movs	r3, #0
 8008c94:	6123      	str	r3, [r4, #16]
 8008c96:	4615      	mov	r5, r2
 8008c98:	e7ba      	b.n	8008c10 <_printf_i+0x150>
 8008c9a:	682b      	ldr	r3, [r5, #0]
 8008c9c:	1d1a      	adds	r2, r3, #4
 8008c9e:	602a      	str	r2, [r5, #0]
 8008ca0:	681d      	ldr	r5, [r3, #0]
 8008ca2:	6862      	ldr	r2, [r4, #4]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4628      	mov	r0, r5
 8008ca8:	f7f7 fab2 	bl	8000210 <memchr>
 8008cac:	b108      	cbz	r0, 8008cb2 <_printf_i+0x1f2>
 8008cae:	1b40      	subs	r0, r0, r5
 8008cb0:	6060      	str	r0, [r4, #4]
 8008cb2:	6863      	ldr	r3, [r4, #4]
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cbc:	e7a8      	b.n	8008c10 <_printf_i+0x150>
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	462a      	mov	r2, r5
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	47d0      	blx	sl
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d0ab      	beq.n	8008c24 <_printf_i+0x164>
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	079b      	lsls	r3, r3, #30
 8008cd0:	d413      	bmi.n	8008cfa <_printf_i+0x23a>
 8008cd2:	68e0      	ldr	r0, [r4, #12]
 8008cd4:	9b03      	ldr	r3, [sp, #12]
 8008cd6:	4298      	cmp	r0, r3
 8008cd8:	bfb8      	it	lt
 8008cda:	4618      	movlt	r0, r3
 8008cdc:	e7a4      	b.n	8008c28 <_printf_i+0x168>
 8008cde:	2301      	movs	r3, #1
 8008ce0:	4632      	mov	r2, r6
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	4640      	mov	r0, r8
 8008ce6:	47d0      	blx	sl
 8008ce8:	3001      	adds	r0, #1
 8008cea:	d09b      	beq.n	8008c24 <_printf_i+0x164>
 8008cec:	3501      	adds	r5, #1
 8008cee:	68e3      	ldr	r3, [r4, #12]
 8008cf0:	9903      	ldr	r1, [sp, #12]
 8008cf2:	1a5b      	subs	r3, r3, r1
 8008cf4:	42ab      	cmp	r3, r5
 8008cf6:	dcf2      	bgt.n	8008cde <_printf_i+0x21e>
 8008cf8:	e7eb      	b.n	8008cd2 <_printf_i+0x212>
 8008cfa:	2500      	movs	r5, #0
 8008cfc:	f104 0619 	add.w	r6, r4, #25
 8008d00:	e7f5      	b.n	8008cee <_printf_i+0x22e>
 8008d02:	bf00      	nop
 8008d04:	0800a0e1 	.word	0x0800a0e1
 8008d08:	0800a0f2 	.word	0x0800a0f2

08008d0c <memmove>:
 8008d0c:	4288      	cmp	r0, r1
 8008d0e:	b510      	push	{r4, lr}
 8008d10:	eb01 0402 	add.w	r4, r1, r2
 8008d14:	d902      	bls.n	8008d1c <memmove+0x10>
 8008d16:	4284      	cmp	r4, r0
 8008d18:	4623      	mov	r3, r4
 8008d1a:	d807      	bhi.n	8008d2c <memmove+0x20>
 8008d1c:	1e43      	subs	r3, r0, #1
 8008d1e:	42a1      	cmp	r1, r4
 8008d20:	d008      	beq.n	8008d34 <memmove+0x28>
 8008d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d2a:	e7f8      	b.n	8008d1e <memmove+0x12>
 8008d2c:	4402      	add	r2, r0
 8008d2e:	4601      	mov	r1, r0
 8008d30:	428a      	cmp	r2, r1
 8008d32:	d100      	bne.n	8008d36 <memmove+0x2a>
 8008d34:	bd10      	pop	{r4, pc}
 8008d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d3e:	e7f7      	b.n	8008d30 <memmove+0x24>

08008d40 <_free_r>:
 8008d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d42:	2900      	cmp	r1, #0
 8008d44:	d044      	beq.n	8008dd0 <_free_r+0x90>
 8008d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d4a:	9001      	str	r0, [sp, #4]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8008d52:	bfb8      	it	lt
 8008d54:	18e4      	addlt	r4, r4, r3
 8008d56:	f000 f913 	bl	8008f80 <__malloc_lock>
 8008d5a:	4a1e      	ldr	r2, [pc, #120]	; (8008dd4 <_free_r+0x94>)
 8008d5c:	9801      	ldr	r0, [sp, #4]
 8008d5e:	6813      	ldr	r3, [r2, #0]
 8008d60:	b933      	cbnz	r3, 8008d70 <_free_r+0x30>
 8008d62:	6063      	str	r3, [r4, #4]
 8008d64:	6014      	str	r4, [r2, #0]
 8008d66:	b003      	add	sp, #12
 8008d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d6c:	f000 b90e 	b.w	8008f8c <__malloc_unlock>
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	d908      	bls.n	8008d86 <_free_r+0x46>
 8008d74:	6825      	ldr	r5, [r4, #0]
 8008d76:	1961      	adds	r1, r4, r5
 8008d78:	428b      	cmp	r3, r1
 8008d7a:	bf01      	itttt	eq
 8008d7c:	6819      	ldreq	r1, [r3, #0]
 8008d7e:	685b      	ldreq	r3, [r3, #4]
 8008d80:	1949      	addeq	r1, r1, r5
 8008d82:	6021      	streq	r1, [r4, #0]
 8008d84:	e7ed      	b.n	8008d62 <_free_r+0x22>
 8008d86:	461a      	mov	r2, r3
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	b10b      	cbz	r3, 8008d90 <_free_r+0x50>
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	d9fa      	bls.n	8008d86 <_free_r+0x46>
 8008d90:	6811      	ldr	r1, [r2, #0]
 8008d92:	1855      	adds	r5, r2, r1
 8008d94:	42a5      	cmp	r5, r4
 8008d96:	d10b      	bne.n	8008db0 <_free_r+0x70>
 8008d98:	6824      	ldr	r4, [r4, #0]
 8008d9a:	4421      	add	r1, r4
 8008d9c:	1854      	adds	r4, r2, r1
 8008d9e:	42a3      	cmp	r3, r4
 8008da0:	6011      	str	r1, [r2, #0]
 8008da2:	d1e0      	bne.n	8008d66 <_free_r+0x26>
 8008da4:	681c      	ldr	r4, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	6053      	str	r3, [r2, #4]
 8008daa:	4421      	add	r1, r4
 8008dac:	6011      	str	r1, [r2, #0]
 8008dae:	e7da      	b.n	8008d66 <_free_r+0x26>
 8008db0:	d902      	bls.n	8008db8 <_free_r+0x78>
 8008db2:	230c      	movs	r3, #12
 8008db4:	6003      	str	r3, [r0, #0]
 8008db6:	e7d6      	b.n	8008d66 <_free_r+0x26>
 8008db8:	6825      	ldr	r5, [r4, #0]
 8008dba:	1961      	adds	r1, r4, r5
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	bf04      	itt	eq
 8008dc0:	6819      	ldreq	r1, [r3, #0]
 8008dc2:	685b      	ldreq	r3, [r3, #4]
 8008dc4:	6063      	str	r3, [r4, #4]
 8008dc6:	bf04      	itt	eq
 8008dc8:	1949      	addeq	r1, r1, r5
 8008dca:	6021      	streq	r1, [r4, #0]
 8008dcc:	6054      	str	r4, [r2, #4]
 8008dce:	e7ca      	b.n	8008d66 <_free_r+0x26>
 8008dd0:	b003      	add	sp, #12
 8008dd2:	bd30      	pop	{r4, r5, pc}
 8008dd4:	20004978 	.word	0x20004978

08008dd8 <sbrk_aligned>:
 8008dd8:	b570      	push	{r4, r5, r6, lr}
 8008dda:	4e0e      	ldr	r6, [pc, #56]	; (8008e14 <sbrk_aligned+0x3c>)
 8008ddc:	460c      	mov	r4, r1
 8008dde:	6831      	ldr	r1, [r6, #0]
 8008de0:	4605      	mov	r5, r0
 8008de2:	b911      	cbnz	r1, 8008dea <sbrk_aligned+0x12>
 8008de4:	f000 f8bc 	bl	8008f60 <_sbrk_r>
 8008de8:	6030      	str	r0, [r6, #0]
 8008dea:	4621      	mov	r1, r4
 8008dec:	4628      	mov	r0, r5
 8008dee:	f000 f8b7 	bl	8008f60 <_sbrk_r>
 8008df2:	1c43      	adds	r3, r0, #1
 8008df4:	d00a      	beq.n	8008e0c <sbrk_aligned+0x34>
 8008df6:	1cc4      	adds	r4, r0, #3
 8008df8:	f024 0403 	bic.w	r4, r4, #3
 8008dfc:	42a0      	cmp	r0, r4
 8008dfe:	d007      	beq.n	8008e10 <sbrk_aligned+0x38>
 8008e00:	1a21      	subs	r1, r4, r0
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 f8ac 	bl	8008f60 <_sbrk_r>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d101      	bne.n	8008e10 <sbrk_aligned+0x38>
 8008e0c:	f04f 34ff 	mov.w	r4, #4294967295
 8008e10:	4620      	mov	r0, r4
 8008e12:	bd70      	pop	{r4, r5, r6, pc}
 8008e14:	2000497c 	.word	0x2000497c

08008e18 <_malloc_r>:
 8008e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1c:	1ccd      	adds	r5, r1, #3
 8008e1e:	f025 0503 	bic.w	r5, r5, #3
 8008e22:	3508      	adds	r5, #8
 8008e24:	2d0c      	cmp	r5, #12
 8008e26:	bf38      	it	cc
 8008e28:	250c      	movcc	r5, #12
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	db01      	blt.n	8008e34 <_malloc_r+0x1c>
 8008e30:	42a9      	cmp	r1, r5
 8008e32:	d905      	bls.n	8008e40 <_malloc_r+0x28>
 8008e34:	230c      	movs	r3, #12
 8008e36:	603b      	str	r3, [r7, #0]
 8008e38:	2600      	movs	r6, #0
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e40:	4e2e      	ldr	r6, [pc, #184]	; (8008efc <_malloc_r+0xe4>)
 8008e42:	f000 f89d 	bl	8008f80 <__malloc_lock>
 8008e46:	6833      	ldr	r3, [r6, #0]
 8008e48:	461c      	mov	r4, r3
 8008e4a:	bb34      	cbnz	r4, 8008e9a <_malloc_r+0x82>
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4638      	mov	r0, r7
 8008e50:	f7ff ffc2 	bl	8008dd8 <sbrk_aligned>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	4604      	mov	r4, r0
 8008e58:	d14d      	bne.n	8008ef6 <_malloc_r+0xde>
 8008e5a:	6834      	ldr	r4, [r6, #0]
 8008e5c:	4626      	mov	r6, r4
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	d140      	bne.n	8008ee4 <_malloc_r+0xcc>
 8008e62:	6823      	ldr	r3, [r4, #0]
 8008e64:	4631      	mov	r1, r6
 8008e66:	4638      	mov	r0, r7
 8008e68:	eb04 0803 	add.w	r8, r4, r3
 8008e6c:	f000 f878 	bl	8008f60 <_sbrk_r>
 8008e70:	4580      	cmp	r8, r0
 8008e72:	d13a      	bne.n	8008eea <_malloc_r+0xd2>
 8008e74:	6821      	ldr	r1, [r4, #0]
 8008e76:	3503      	adds	r5, #3
 8008e78:	1a6d      	subs	r5, r5, r1
 8008e7a:	f025 0503 	bic.w	r5, r5, #3
 8008e7e:	3508      	adds	r5, #8
 8008e80:	2d0c      	cmp	r5, #12
 8008e82:	bf38      	it	cc
 8008e84:	250c      	movcc	r5, #12
 8008e86:	4629      	mov	r1, r5
 8008e88:	4638      	mov	r0, r7
 8008e8a:	f7ff ffa5 	bl	8008dd8 <sbrk_aligned>
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d02b      	beq.n	8008eea <_malloc_r+0xd2>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	442b      	add	r3, r5
 8008e96:	6023      	str	r3, [r4, #0]
 8008e98:	e00e      	b.n	8008eb8 <_malloc_r+0xa0>
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	1b52      	subs	r2, r2, r5
 8008e9e:	d41e      	bmi.n	8008ede <_malloc_r+0xc6>
 8008ea0:	2a0b      	cmp	r2, #11
 8008ea2:	d916      	bls.n	8008ed2 <_malloc_r+0xba>
 8008ea4:	1961      	adds	r1, r4, r5
 8008ea6:	42a3      	cmp	r3, r4
 8008ea8:	6025      	str	r5, [r4, #0]
 8008eaa:	bf18      	it	ne
 8008eac:	6059      	strne	r1, [r3, #4]
 8008eae:	6863      	ldr	r3, [r4, #4]
 8008eb0:	bf08      	it	eq
 8008eb2:	6031      	streq	r1, [r6, #0]
 8008eb4:	5162      	str	r2, [r4, r5]
 8008eb6:	604b      	str	r3, [r1, #4]
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f104 060b 	add.w	r6, r4, #11
 8008ebe:	f000 f865 	bl	8008f8c <__malloc_unlock>
 8008ec2:	f026 0607 	bic.w	r6, r6, #7
 8008ec6:	1d23      	adds	r3, r4, #4
 8008ec8:	1af2      	subs	r2, r6, r3
 8008eca:	d0b6      	beq.n	8008e3a <_malloc_r+0x22>
 8008ecc:	1b9b      	subs	r3, r3, r6
 8008ece:	50a3      	str	r3, [r4, r2]
 8008ed0:	e7b3      	b.n	8008e3a <_malloc_r+0x22>
 8008ed2:	6862      	ldr	r2, [r4, #4]
 8008ed4:	42a3      	cmp	r3, r4
 8008ed6:	bf0c      	ite	eq
 8008ed8:	6032      	streq	r2, [r6, #0]
 8008eda:	605a      	strne	r2, [r3, #4]
 8008edc:	e7ec      	b.n	8008eb8 <_malloc_r+0xa0>
 8008ede:	4623      	mov	r3, r4
 8008ee0:	6864      	ldr	r4, [r4, #4]
 8008ee2:	e7b2      	b.n	8008e4a <_malloc_r+0x32>
 8008ee4:	4634      	mov	r4, r6
 8008ee6:	6876      	ldr	r6, [r6, #4]
 8008ee8:	e7b9      	b.n	8008e5e <_malloc_r+0x46>
 8008eea:	230c      	movs	r3, #12
 8008eec:	603b      	str	r3, [r7, #0]
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f000 f84c 	bl	8008f8c <__malloc_unlock>
 8008ef4:	e7a1      	b.n	8008e3a <_malloc_r+0x22>
 8008ef6:	6025      	str	r5, [r4, #0]
 8008ef8:	e7de      	b.n	8008eb8 <_malloc_r+0xa0>
 8008efa:	bf00      	nop
 8008efc:	20004978 	.word	0x20004978

08008f00 <_realloc_r>:
 8008f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f04:	4680      	mov	r8, r0
 8008f06:	4614      	mov	r4, r2
 8008f08:	460e      	mov	r6, r1
 8008f0a:	b921      	cbnz	r1, 8008f16 <_realloc_r+0x16>
 8008f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f10:	4611      	mov	r1, r2
 8008f12:	f7ff bf81 	b.w	8008e18 <_malloc_r>
 8008f16:	b92a      	cbnz	r2, 8008f24 <_realloc_r+0x24>
 8008f18:	f7ff ff12 	bl	8008d40 <_free_r>
 8008f1c:	4625      	mov	r5, r4
 8008f1e:	4628      	mov	r0, r5
 8008f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f24:	f000 f838 	bl	8008f98 <_malloc_usable_size_r>
 8008f28:	4284      	cmp	r4, r0
 8008f2a:	4607      	mov	r7, r0
 8008f2c:	d802      	bhi.n	8008f34 <_realloc_r+0x34>
 8008f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f32:	d812      	bhi.n	8008f5a <_realloc_r+0x5a>
 8008f34:	4621      	mov	r1, r4
 8008f36:	4640      	mov	r0, r8
 8008f38:	f7ff ff6e 	bl	8008e18 <_malloc_r>
 8008f3c:	4605      	mov	r5, r0
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d0ed      	beq.n	8008f1e <_realloc_r+0x1e>
 8008f42:	42bc      	cmp	r4, r7
 8008f44:	4622      	mov	r2, r4
 8008f46:	4631      	mov	r1, r6
 8008f48:	bf28      	it	cs
 8008f4a:	463a      	movcs	r2, r7
 8008f4c:	f7ff fbb8 	bl	80086c0 <memcpy>
 8008f50:	4631      	mov	r1, r6
 8008f52:	4640      	mov	r0, r8
 8008f54:	f7ff fef4 	bl	8008d40 <_free_r>
 8008f58:	e7e1      	b.n	8008f1e <_realloc_r+0x1e>
 8008f5a:	4635      	mov	r5, r6
 8008f5c:	e7df      	b.n	8008f1e <_realloc_r+0x1e>
	...

08008f60 <_sbrk_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4d06      	ldr	r5, [pc, #24]	; (8008f7c <_sbrk_r+0x1c>)
 8008f64:	2300      	movs	r3, #0
 8008f66:	4604      	mov	r4, r0
 8008f68:	4608      	mov	r0, r1
 8008f6a:	602b      	str	r3, [r5, #0]
 8008f6c:	f7f9 f8a8 	bl	80020c0 <_sbrk>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d102      	bne.n	8008f7a <_sbrk_r+0x1a>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b103      	cbz	r3, 8008f7a <_sbrk_r+0x1a>
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	bd38      	pop	{r3, r4, r5, pc}
 8008f7c:	20004980 	.word	0x20004980

08008f80 <__malloc_lock>:
 8008f80:	4801      	ldr	r0, [pc, #4]	; (8008f88 <__malloc_lock+0x8>)
 8008f82:	f000 b811 	b.w	8008fa8 <__retarget_lock_acquire_recursive>
 8008f86:	bf00      	nop
 8008f88:	20004984 	.word	0x20004984

08008f8c <__malloc_unlock>:
 8008f8c:	4801      	ldr	r0, [pc, #4]	; (8008f94 <__malloc_unlock+0x8>)
 8008f8e:	f000 b80c 	b.w	8008faa <__retarget_lock_release_recursive>
 8008f92:	bf00      	nop
 8008f94:	20004984 	.word	0x20004984

08008f98 <_malloc_usable_size_r>:
 8008f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f9c:	1f18      	subs	r0, r3, #4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bfbc      	itt	lt
 8008fa2:	580b      	ldrlt	r3, [r1, r0]
 8008fa4:	18c0      	addlt	r0, r0, r3
 8008fa6:	4770      	bx	lr

08008fa8 <__retarget_lock_acquire_recursive>:
 8008fa8:	4770      	bx	lr

08008faa <__retarget_lock_release_recursive>:
 8008faa:	4770      	bx	lr
 8008fac:	0000      	movs	r0, r0
	...

08008fb0 <sin>:
 8008fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fb2:	ec53 2b10 	vmov	r2, r3, d0
 8008fb6:	4828      	ldr	r0, [pc, #160]	; (8009058 <sin+0xa8>)
 8008fb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008fbc:	4281      	cmp	r1, r0
 8008fbe:	dc07      	bgt.n	8008fd0 <sin+0x20>
 8008fc0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009050 <sin+0xa0>
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	b005      	add	sp, #20
 8008fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fcc:	f000 be6c 	b.w	8009ca8 <__kernel_sin>
 8008fd0:	4822      	ldr	r0, [pc, #136]	; (800905c <sin+0xac>)
 8008fd2:	4281      	cmp	r1, r0
 8008fd4:	dd09      	ble.n	8008fea <sin+0x3a>
 8008fd6:	ee10 0a10 	vmov	r0, s0
 8008fda:	4619      	mov	r1, r3
 8008fdc:	f7f7 f96c 	bl	80002b8 <__aeabi_dsub>
 8008fe0:	ec41 0b10 	vmov	d0, r0, r1
 8008fe4:	b005      	add	sp, #20
 8008fe6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008fea:	4668      	mov	r0, sp
 8008fec:	f000 f838 	bl	8009060 <__ieee754_rem_pio2>
 8008ff0:	f000 0003 	and.w	r0, r0, #3
 8008ff4:	2801      	cmp	r0, #1
 8008ff6:	d00c      	beq.n	8009012 <sin+0x62>
 8008ff8:	2802      	cmp	r0, #2
 8008ffa:	d011      	beq.n	8009020 <sin+0x70>
 8008ffc:	b9f0      	cbnz	r0, 800903c <sin+0x8c>
 8008ffe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009002:	ed9d 0b00 	vldr	d0, [sp]
 8009006:	2001      	movs	r0, #1
 8009008:	f000 fe4e 	bl	8009ca8 <__kernel_sin>
 800900c:	ec51 0b10 	vmov	r0, r1, d0
 8009010:	e7e6      	b.n	8008fe0 <sin+0x30>
 8009012:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009016:	ed9d 0b00 	vldr	d0, [sp]
 800901a:	f000 fa2d 	bl	8009478 <__kernel_cos>
 800901e:	e7f5      	b.n	800900c <sin+0x5c>
 8009020:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009024:	ed9d 0b00 	vldr	d0, [sp]
 8009028:	2001      	movs	r0, #1
 800902a:	f000 fe3d 	bl	8009ca8 <__kernel_sin>
 800902e:	ec53 2b10 	vmov	r2, r3, d0
 8009032:	ee10 0a10 	vmov	r0, s0
 8009036:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800903a:	e7d1      	b.n	8008fe0 <sin+0x30>
 800903c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009040:	ed9d 0b00 	vldr	d0, [sp]
 8009044:	f000 fa18 	bl	8009478 <__kernel_cos>
 8009048:	e7f1      	b.n	800902e <sin+0x7e>
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w
	...
 8009058:	3fe921fb 	.word	0x3fe921fb
 800905c:	7fefffff 	.word	0x7fefffff

08009060 <__ieee754_rem_pio2>:
 8009060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009064:	ed2d 8b02 	vpush	{d8}
 8009068:	ec55 4b10 	vmov	r4, r5, d0
 800906c:	4bca      	ldr	r3, [pc, #808]	; (8009398 <__ieee754_rem_pio2+0x338>)
 800906e:	b08b      	sub	sp, #44	; 0x2c
 8009070:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009074:	4598      	cmp	r8, r3
 8009076:	4682      	mov	sl, r0
 8009078:	9502      	str	r5, [sp, #8]
 800907a:	dc08      	bgt.n	800908e <__ieee754_rem_pio2+0x2e>
 800907c:	2200      	movs	r2, #0
 800907e:	2300      	movs	r3, #0
 8009080:	ed80 0b00 	vstr	d0, [r0]
 8009084:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009088:	f04f 0b00 	mov.w	fp, #0
 800908c:	e028      	b.n	80090e0 <__ieee754_rem_pio2+0x80>
 800908e:	4bc3      	ldr	r3, [pc, #780]	; (800939c <__ieee754_rem_pio2+0x33c>)
 8009090:	4598      	cmp	r8, r3
 8009092:	dc78      	bgt.n	8009186 <__ieee754_rem_pio2+0x126>
 8009094:	9b02      	ldr	r3, [sp, #8]
 8009096:	4ec2      	ldr	r6, [pc, #776]	; (80093a0 <__ieee754_rem_pio2+0x340>)
 8009098:	2b00      	cmp	r3, #0
 800909a:	ee10 0a10 	vmov	r0, s0
 800909e:	a3b0      	add	r3, pc, #704	; (adr r3, 8009360 <__ieee754_rem_pio2+0x300>)
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	4629      	mov	r1, r5
 80090a6:	dd39      	ble.n	800911c <__ieee754_rem_pio2+0xbc>
 80090a8:	f7f7 f906 	bl	80002b8 <__aeabi_dsub>
 80090ac:	45b0      	cmp	r8, r6
 80090ae:	4604      	mov	r4, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	d01b      	beq.n	80090ec <__ieee754_rem_pio2+0x8c>
 80090b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8009368 <__ieee754_rem_pio2+0x308>)
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	f7f7 f8fd 	bl	80002b8 <__aeabi_dsub>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	e9ca 2300 	strd	r2, r3, [sl]
 80090c6:	4620      	mov	r0, r4
 80090c8:	4629      	mov	r1, r5
 80090ca:	f7f7 f8f5 	bl	80002b8 <__aeabi_dsub>
 80090ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8009368 <__ieee754_rem_pio2+0x308>)
 80090d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d4:	f7f7 f8f0 	bl	80002b8 <__aeabi_dsub>
 80090d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80090dc:	f04f 0b01 	mov.w	fp, #1
 80090e0:	4658      	mov	r0, fp
 80090e2:	b00b      	add	sp, #44	; 0x2c
 80090e4:	ecbd 8b02 	vpop	{d8}
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	a3a0      	add	r3, pc, #640	; (adr r3, 8009370 <__ieee754_rem_pio2+0x310>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f7f7 f8e1 	bl	80002b8 <__aeabi_dsub>
 80090f6:	a3a0      	add	r3, pc, #640	; (adr r3, 8009378 <__ieee754_rem_pio2+0x318>)
 80090f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fc:	4604      	mov	r4, r0
 80090fe:	460d      	mov	r5, r1
 8009100:	f7f7 f8da 	bl	80002b8 <__aeabi_dsub>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	e9ca 2300 	strd	r2, r3, [sl]
 800910c:	4620      	mov	r0, r4
 800910e:	4629      	mov	r1, r5
 8009110:	f7f7 f8d2 	bl	80002b8 <__aeabi_dsub>
 8009114:	a398      	add	r3, pc, #608	; (adr r3, 8009378 <__ieee754_rem_pio2+0x318>)
 8009116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800911a:	e7db      	b.n	80090d4 <__ieee754_rem_pio2+0x74>
 800911c:	f7f7 f8ce 	bl	80002bc <__adddf3>
 8009120:	45b0      	cmp	r8, r6
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	d016      	beq.n	8009156 <__ieee754_rem_pio2+0xf6>
 8009128:	a38f      	add	r3, pc, #572	; (adr r3, 8009368 <__ieee754_rem_pio2+0x308>)
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	f7f7 f8c5 	bl	80002bc <__adddf3>
 8009132:	4602      	mov	r2, r0
 8009134:	460b      	mov	r3, r1
 8009136:	e9ca 2300 	strd	r2, r3, [sl]
 800913a:	4620      	mov	r0, r4
 800913c:	4629      	mov	r1, r5
 800913e:	f7f7 f8bb 	bl	80002b8 <__aeabi_dsub>
 8009142:	a389      	add	r3, pc, #548	; (adr r3, 8009368 <__ieee754_rem_pio2+0x308>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f7f7 f8b8 	bl	80002bc <__adddf3>
 800914c:	f04f 3bff 	mov.w	fp, #4294967295
 8009150:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009154:	e7c4      	b.n	80090e0 <__ieee754_rem_pio2+0x80>
 8009156:	a386      	add	r3, pc, #536	; (adr r3, 8009370 <__ieee754_rem_pio2+0x310>)
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f7f7 f8ae 	bl	80002bc <__adddf3>
 8009160:	a385      	add	r3, pc, #532	; (adr r3, 8009378 <__ieee754_rem_pio2+0x318>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	4604      	mov	r4, r0
 8009168:	460d      	mov	r5, r1
 800916a:	f7f7 f8a7 	bl	80002bc <__adddf3>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	e9ca 2300 	strd	r2, r3, [sl]
 8009176:	4620      	mov	r0, r4
 8009178:	4629      	mov	r1, r5
 800917a:	f7f7 f89d 	bl	80002b8 <__aeabi_dsub>
 800917e:	a37e      	add	r3, pc, #504	; (adr r3, 8009378 <__ieee754_rem_pio2+0x318>)
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	e7e0      	b.n	8009148 <__ieee754_rem_pio2+0xe8>
 8009186:	4b87      	ldr	r3, [pc, #540]	; (80093a4 <__ieee754_rem_pio2+0x344>)
 8009188:	4598      	cmp	r8, r3
 800918a:	f300 80d9 	bgt.w	8009340 <__ieee754_rem_pio2+0x2e0>
 800918e:	f000 fe49 	bl	8009e24 <fabs>
 8009192:	ec55 4b10 	vmov	r4, r5, d0
 8009196:	ee10 0a10 	vmov	r0, s0
 800919a:	a379      	add	r3, pc, #484	; (adr r3, 8009380 <__ieee754_rem_pio2+0x320>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	4629      	mov	r1, r5
 80091a2:	f7f7 fa41 	bl	8000628 <__aeabi_dmul>
 80091a6:	4b80      	ldr	r3, [pc, #512]	; (80093a8 <__ieee754_rem_pio2+0x348>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	f7f7 f887 	bl	80002bc <__adddf3>
 80091ae:	f7f7 fcd5 	bl	8000b5c <__aeabi_d2iz>
 80091b2:	4683      	mov	fp, r0
 80091b4:	f7f7 f9ce 	bl	8000554 <__aeabi_i2d>
 80091b8:	4602      	mov	r2, r0
 80091ba:	460b      	mov	r3, r1
 80091bc:	ec43 2b18 	vmov	d8, r2, r3
 80091c0:	a367      	add	r3, pc, #412	; (adr r3, 8009360 <__ieee754_rem_pio2+0x300>)
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	f7f7 fa2f 	bl	8000628 <__aeabi_dmul>
 80091ca:	4602      	mov	r2, r0
 80091cc:	460b      	mov	r3, r1
 80091ce:	4620      	mov	r0, r4
 80091d0:	4629      	mov	r1, r5
 80091d2:	f7f7 f871 	bl	80002b8 <__aeabi_dsub>
 80091d6:	a364      	add	r3, pc, #400	; (adr r3, 8009368 <__ieee754_rem_pio2+0x308>)
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	4606      	mov	r6, r0
 80091de:	460f      	mov	r7, r1
 80091e0:	ec51 0b18 	vmov	r0, r1, d8
 80091e4:	f7f7 fa20 	bl	8000628 <__aeabi_dmul>
 80091e8:	f1bb 0f1f 	cmp.w	fp, #31
 80091ec:	4604      	mov	r4, r0
 80091ee:	460d      	mov	r5, r1
 80091f0:	dc0d      	bgt.n	800920e <__ieee754_rem_pio2+0x1ae>
 80091f2:	4b6e      	ldr	r3, [pc, #440]	; (80093ac <__ieee754_rem_pio2+0x34c>)
 80091f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80091f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fc:	4543      	cmp	r3, r8
 80091fe:	d006      	beq.n	800920e <__ieee754_rem_pio2+0x1ae>
 8009200:	4622      	mov	r2, r4
 8009202:	462b      	mov	r3, r5
 8009204:	4630      	mov	r0, r6
 8009206:	4639      	mov	r1, r7
 8009208:	f7f7 f856 	bl	80002b8 <__aeabi_dsub>
 800920c:	e00f      	b.n	800922e <__ieee754_rem_pio2+0x1ce>
 800920e:	462b      	mov	r3, r5
 8009210:	4622      	mov	r2, r4
 8009212:	4630      	mov	r0, r6
 8009214:	4639      	mov	r1, r7
 8009216:	f7f7 f84f 	bl	80002b8 <__aeabi_dsub>
 800921a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800921e:	9303      	str	r3, [sp, #12]
 8009220:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009224:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8009228:	f1b8 0f10 	cmp.w	r8, #16
 800922c:	dc02      	bgt.n	8009234 <__ieee754_rem_pio2+0x1d4>
 800922e:	e9ca 0100 	strd	r0, r1, [sl]
 8009232:	e039      	b.n	80092a8 <__ieee754_rem_pio2+0x248>
 8009234:	a34e      	add	r3, pc, #312	; (adr r3, 8009370 <__ieee754_rem_pio2+0x310>)
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	ec51 0b18 	vmov	r0, r1, d8
 800923e:	f7f7 f9f3 	bl	8000628 <__aeabi_dmul>
 8009242:	4604      	mov	r4, r0
 8009244:	460d      	mov	r5, r1
 8009246:	4602      	mov	r2, r0
 8009248:	460b      	mov	r3, r1
 800924a:	4630      	mov	r0, r6
 800924c:	4639      	mov	r1, r7
 800924e:	f7f7 f833 	bl	80002b8 <__aeabi_dsub>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4680      	mov	r8, r0
 8009258:	4689      	mov	r9, r1
 800925a:	4630      	mov	r0, r6
 800925c:	4639      	mov	r1, r7
 800925e:	f7f7 f82b 	bl	80002b8 <__aeabi_dsub>
 8009262:	4622      	mov	r2, r4
 8009264:	462b      	mov	r3, r5
 8009266:	f7f7 f827 	bl	80002b8 <__aeabi_dsub>
 800926a:	a343      	add	r3, pc, #268	; (adr r3, 8009378 <__ieee754_rem_pio2+0x318>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	4604      	mov	r4, r0
 8009272:	460d      	mov	r5, r1
 8009274:	ec51 0b18 	vmov	r0, r1, d8
 8009278:	f7f7 f9d6 	bl	8000628 <__aeabi_dmul>
 800927c:	4622      	mov	r2, r4
 800927e:	462b      	mov	r3, r5
 8009280:	f7f7 f81a 	bl	80002b8 <__aeabi_dsub>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4604      	mov	r4, r0
 800928a:	460d      	mov	r5, r1
 800928c:	4640      	mov	r0, r8
 800928e:	4649      	mov	r1, r9
 8009290:	f7f7 f812 	bl	80002b8 <__aeabi_dsub>
 8009294:	9a03      	ldr	r2, [sp, #12]
 8009296:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800929a:	1ad3      	subs	r3, r2, r3
 800929c:	2b31      	cmp	r3, #49	; 0x31
 800929e:	dc24      	bgt.n	80092ea <__ieee754_rem_pio2+0x28a>
 80092a0:	e9ca 0100 	strd	r0, r1, [sl]
 80092a4:	4646      	mov	r6, r8
 80092a6:	464f      	mov	r7, r9
 80092a8:	e9da 8900 	ldrd	r8, r9, [sl]
 80092ac:	4630      	mov	r0, r6
 80092ae:	4642      	mov	r2, r8
 80092b0:	464b      	mov	r3, r9
 80092b2:	4639      	mov	r1, r7
 80092b4:	f7f7 f800 	bl	80002b8 <__aeabi_dsub>
 80092b8:	462b      	mov	r3, r5
 80092ba:	4622      	mov	r2, r4
 80092bc:	f7f6 fffc 	bl	80002b8 <__aeabi_dsub>
 80092c0:	9b02      	ldr	r3, [sp, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80092c8:	f6bf af0a 	bge.w	80090e0 <__ieee754_rem_pio2+0x80>
 80092cc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80092d0:	f8ca 3004 	str.w	r3, [sl, #4]
 80092d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092d8:	f8ca 8000 	str.w	r8, [sl]
 80092dc:	f8ca 0008 	str.w	r0, [sl, #8]
 80092e0:	f8ca 300c 	str.w	r3, [sl, #12]
 80092e4:	f1cb 0b00 	rsb	fp, fp, #0
 80092e8:	e6fa      	b.n	80090e0 <__ieee754_rem_pio2+0x80>
 80092ea:	a327      	add	r3, pc, #156	; (adr r3, 8009388 <__ieee754_rem_pio2+0x328>)
 80092ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f0:	ec51 0b18 	vmov	r0, r1, d8
 80092f4:	f7f7 f998 	bl	8000628 <__aeabi_dmul>
 80092f8:	4604      	mov	r4, r0
 80092fa:	460d      	mov	r5, r1
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	4640      	mov	r0, r8
 8009302:	4649      	mov	r1, r9
 8009304:	f7f6 ffd8 	bl	80002b8 <__aeabi_dsub>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4606      	mov	r6, r0
 800930e:	460f      	mov	r7, r1
 8009310:	4640      	mov	r0, r8
 8009312:	4649      	mov	r1, r9
 8009314:	f7f6 ffd0 	bl	80002b8 <__aeabi_dsub>
 8009318:	4622      	mov	r2, r4
 800931a:	462b      	mov	r3, r5
 800931c:	f7f6 ffcc 	bl	80002b8 <__aeabi_dsub>
 8009320:	a31b      	add	r3, pc, #108	; (adr r3, 8009390 <__ieee754_rem_pio2+0x330>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	4604      	mov	r4, r0
 8009328:	460d      	mov	r5, r1
 800932a:	ec51 0b18 	vmov	r0, r1, d8
 800932e:	f7f7 f97b 	bl	8000628 <__aeabi_dmul>
 8009332:	4622      	mov	r2, r4
 8009334:	462b      	mov	r3, r5
 8009336:	f7f6 ffbf 	bl	80002b8 <__aeabi_dsub>
 800933a:	4604      	mov	r4, r0
 800933c:	460d      	mov	r5, r1
 800933e:	e75f      	b.n	8009200 <__ieee754_rem_pio2+0x1a0>
 8009340:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <__ieee754_rem_pio2+0x350>)
 8009342:	4598      	cmp	r8, r3
 8009344:	dd36      	ble.n	80093b4 <__ieee754_rem_pio2+0x354>
 8009346:	ee10 2a10 	vmov	r2, s0
 800934a:	462b      	mov	r3, r5
 800934c:	4620      	mov	r0, r4
 800934e:	4629      	mov	r1, r5
 8009350:	f7f6 ffb2 	bl	80002b8 <__aeabi_dsub>
 8009354:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009358:	e9ca 0100 	strd	r0, r1, [sl]
 800935c:	e694      	b.n	8009088 <__ieee754_rem_pio2+0x28>
 800935e:	bf00      	nop
 8009360:	54400000 	.word	0x54400000
 8009364:	3ff921fb 	.word	0x3ff921fb
 8009368:	1a626331 	.word	0x1a626331
 800936c:	3dd0b461 	.word	0x3dd0b461
 8009370:	1a600000 	.word	0x1a600000
 8009374:	3dd0b461 	.word	0x3dd0b461
 8009378:	2e037073 	.word	0x2e037073
 800937c:	3ba3198a 	.word	0x3ba3198a
 8009380:	6dc9c883 	.word	0x6dc9c883
 8009384:	3fe45f30 	.word	0x3fe45f30
 8009388:	2e000000 	.word	0x2e000000
 800938c:	3ba3198a 	.word	0x3ba3198a
 8009390:	252049c1 	.word	0x252049c1
 8009394:	397b839a 	.word	0x397b839a
 8009398:	3fe921fb 	.word	0x3fe921fb
 800939c:	4002d97b 	.word	0x4002d97b
 80093a0:	3ff921fb 	.word	0x3ff921fb
 80093a4:	413921fb 	.word	0x413921fb
 80093a8:	3fe00000 	.word	0x3fe00000
 80093ac:	0800a104 	.word	0x0800a104
 80093b0:	7fefffff 	.word	0x7fefffff
 80093b4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80093b8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80093bc:	ee10 0a10 	vmov	r0, s0
 80093c0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80093c4:	ee10 6a10 	vmov	r6, s0
 80093c8:	460f      	mov	r7, r1
 80093ca:	f7f7 fbc7 	bl	8000b5c <__aeabi_d2iz>
 80093ce:	f7f7 f8c1 	bl	8000554 <__aeabi_i2d>
 80093d2:	4602      	mov	r2, r0
 80093d4:	460b      	mov	r3, r1
 80093d6:	4630      	mov	r0, r6
 80093d8:	4639      	mov	r1, r7
 80093da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093de:	f7f6 ff6b 	bl	80002b8 <__aeabi_dsub>
 80093e2:	4b23      	ldr	r3, [pc, #140]	; (8009470 <__ieee754_rem_pio2+0x410>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	f7f7 f91f 	bl	8000628 <__aeabi_dmul>
 80093ea:	460f      	mov	r7, r1
 80093ec:	4606      	mov	r6, r0
 80093ee:	f7f7 fbb5 	bl	8000b5c <__aeabi_d2iz>
 80093f2:	f7f7 f8af 	bl	8000554 <__aeabi_i2d>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	4630      	mov	r0, r6
 80093fc:	4639      	mov	r1, r7
 80093fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009402:	f7f6 ff59 	bl	80002b8 <__aeabi_dsub>
 8009406:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <__ieee754_rem_pio2+0x410>)
 8009408:	2200      	movs	r2, #0
 800940a:	f7f7 f90d 	bl	8000628 <__aeabi_dmul>
 800940e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009412:	ad04      	add	r5, sp, #16
 8009414:	f04f 0803 	mov.w	r8, #3
 8009418:	46a9      	mov	r9, r5
 800941a:	2600      	movs	r6, #0
 800941c:	2700      	movs	r7, #0
 800941e:	4632      	mov	r2, r6
 8009420:	463b      	mov	r3, r7
 8009422:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8009426:	46c3      	mov	fp, r8
 8009428:	3d08      	subs	r5, #8
 800942a:	f108 38ff 	add.w	r8, r8, #4294967295
 800942e:	f7f7 fb63 	bl	8000af8 <__aeabi_dcmpeq>
 8009432:	2800      	cmp	r0, #0
 8009434:	d1f3      	bne.n	800941e <__ieee754_rem_pio2+0x3be>
 8009436:	4b0f      	ldr	r3, [pc, #60]	; (8009474 <__ieee754_rem_pio2+0x414>)
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	2302      	movs	r3, #2
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	4622      	mov	r2, r4
 8009440:	465b      	mov	r3, fp
 8009442:	4651      	mov	r1, sl
 8009444:	4648      	mov	r0, r9
 8009446:	f000 f8df 	bl	8009608 <__kernel_rem_pio2>
 800944a:	9b02      	ldr	r3, [sp, #8]
 800944c:	2b00      	cmp	r3, #0
 800944e:	4683      	mov	fp, r0
 8009450:	f6bf ae46 	bge.w	80090e0 <__ieee754_rem_pio2+0x80>
 8009454:	e9da 2100 	ldrd	r2, r1, [sl]
 8009458:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800945c:	e9ca 2300 	strd	r2, r3, [sl]
 8009460:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8009464:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009468:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800946c:	e73a      	b.n	80092e4 <__ieee754_rem_pio2+0x284>
 800946e:	bf00      	nop
 8009470:	41700000 	.word	0x41700000
 8009474:	0800a184 	.word	0x0800a184

08009478 <__kernel_cos>:
 8009478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947c:	ec57 6b10 	vmov	r6, r7, d0
 8009480:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009484:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8009488:	ed8d 1b00 	vstr	d1, [sp]
 800948c:	da07      	bge.n	800949e <__kernel_cos+0x26>
 800948e:	ee10 0a10 	vmov	r0, s0
 8009492:	4639      	mov	r1, r7
 8009494:	f7f7 fb62 	bl	8000b5c <__aeabi_d2iz>
 8009498:	2800      	cmp	r0, #0
 800949a:	f000 8088 	beq.w	80095ae <__kernel_cos+0x136>
 800949e:	4632      	mov	r2, r6
 80094a0:	463b      	mov	r3, r7
 80094a2:	4630      	mov	r0, r6
 80094a4:	4639      	mov	r1, r7
 80094a6:	f7f7 f8bf 	bl	8000628 <__aeabi_dmul>
 80094aa:	4b51      	ldr	r3, [pc, #324]	; (80095f0 <__kernel_cos+0x178>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	4604      	mov	r4, r0
 80094b0:	460d      	mov	r5, r1
 80094b2:	f7f7 f8b9 	bl	8000628 <__aeabi_dmul>
 80094b6:	a340      	add	r3, pc, #256	; (adr r3, 80095b8 <__kernel_cos+0x140>)
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	4682      	mov	sl, r0
 80094be:	468b      	mov	fp, r1
 80094c0:	4620      	mov	r0, r4
 80094c2:	4629      	mov	r1, r5
 80094c4:	f7f7 f8b0 	bl	8000628 <__aeabi_dmul>
 80094c8:	a33d      	add	r3, pc, #244	; (adr r3, 80095c0 <__kernel_cos+0x148>)
 80094ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ce:	f7f6 fef5 	bl	80002bc <__adddf3>
 80094d2:	4622      	mov	r2, r4
 80094d4:	462b      	mov	r3, r5
 80094d6:	f7f7 f8a7 	bl	8000628 <__aeabi_dmul>
 80094da:	a33b      	add	r3, pc, #236	; (adr r3, 80095c8 <__kernel_cos+0x150>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f7f6 feea 	bl	80002b8 <__aeabi_dsub>
 80094e4:	4622      	mov	r2, r4
 80094e6:	462b      	mov	r3, r5
 80094e8:	f7f7 f89e 	bl	8000628 <__aeabi_dmul>
 80094ec:	a338      	add	r3, pc, #224	; (adr r3, 80095d0 <__kernel_cos+0x158>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	f7f6 fee3 	bl	80002bc <__adddf3>
 80094f6:	4622      	mov	r2, r4
 80094f8:	462b      	mov	r3, r5
 80094fa:	f7f7 f895 	bl	8000628 <__aeabi_dmul>
 80094fe:	a336      	add	r3, pc, #216	; (adr r3, 80095d8 <__kernel_cos+0x160>)
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f7f6 fed8 	bl	80002b8 <__aeabi_dsub>
 8009508:	4622      	mov	r2, r4
 800950a:	462b      	mov	r3, r5
 800950c:	f7f7 f88c 	bl	8000628 <__aeabi_dmul>
 8009510:	a333      	add	r3, pc, #204	; (adr r3, 80095e0 <__kernel_cos+0x168>)
 8009512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009516:	f7f6 fed1 	bl	80002bc <__adddf3>
 800951a:	4622      	mov	r2, r4
 800951c:	462b      	mov	r3, r5
 800951e:	f7f7 f883 	bl	8000628 <__aeabi_dmul>
 8009522:	4622      	mov	r2, r4
 8009524:	462b      	mov	r3, r5
 8009526:	f7f7 f87f 	bl	8000628 <__aeabi_dmul>
 800952a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800952e:	4604      	mov	r4, r0
 8009530:	460d      	mov	r5, r1
 8009532:	4630      	mov	r0, r6
 8009534:	4639      	mov	r1, r7
 8009536:	f7f7 f877 	bl	8000628 <__aeabi_dmul>
 800953a:	460b      	mov	r3, r1
 800953c:	4602      	mov	r2, r0
 800953e:	4629      	mov	r1, r5
 8009540:	4620      	mov	r0, r4
 8009542:	f7f6 feb9 	bl	80002b8 <__aeabi_dsub>
 8009546:	4b2b      	ldr	r3, [pc, #172]	; (80095f4 <__kernel_cos+0x17c>)
 8009548:	4598      	cmp	r8, r3
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	dc10      	bgt.n	8009572 <__kernel_cos+0xfa>
 8009550:	4602      	mov	r2, r0
 8009552:	460b      	mov	r3, r1
 8009554:	4650      	mov	r0, sl
 8009556:	4659      	mov	r1, fp
 8009558:	f7f6 feae 	bl	80002b8 <__aeabi_dsub>
 800955c:	460b      	mov	r3, r1
 800955e:	4926      	ldr	r1, [pc, #152]	; (80095f8 <__kernel_cos+0x180>)
 8009560:	4602      	mov	r2, r0
 8009562:	2000      	movs	r0, #0
 8009564:	f7f6 fea8 	bl	80002b8 <__aeabi_dsub>
 8009568:	ec41 0b10 	vmov	d0, r0, r1
 800956c:	b003      	add	sp, #12
 800956e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009572:	4b22      	ldr	r3, [pc, #136]	; (80095fc <__kernel_cos+0x184>)
 8009574:	4920      	ldr	r1, [pc, #128]	; (80095f8 <__kernel_cos+0x180>)
 8009576:	4598      	cmp	r8, r3
 8009578:	bfcc      	ite	gt
 800957a:	4d21      	ldrgt	r5, [pc, #132]	; (8009600 <__kernel_cos+0x188>)
 800957c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8009580:	2400      	movs	r4, #0
 8009582:	4622      	mov	r2, r4
 8009584:	462b      	mov	r3, r5
 8009586:	2000      	movs	r0, #0
 8009588:	f7f6 fe96 	bl	80002b8 <__aeabi_dsub>
 800958c:	4622      	mov	r2, r4
 800958e:	4680      	mov	r8, r0
 8009590:	4689      	mov	r9, r1
 8009592:	462b      	mov	r3, r5
 8009594:	4650      	mov	r0, sl
 8009596:	4659      	mov	r1, fp
 8009598:	f7f6 fe8e 	bl	80002b8 <__aeabi_dsub>
 800959c:	4632      	mov	r2, r6
 800959e:	463b      	mov	r3, r7
 80095a0:	f7f6 fe8a 	bl	80002b8 <__aeabi_dsub>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	4640      	mov	r0, r8
 80095aa:	4649      	mov	r1, r9
 80095ac:	e7da      	b.n	8009564 <__kernel_cos+0xec>
 80095ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80095e8 <__kernel_cos+0x170>
 80095b2:	e7db      	b.n	800956c <__kernel_cos+0xf4>
 80095b4:	f3af 8000 	nop.w
 80095b8:	be8838d4 	.word	0xbe8838d4
 80095bc:	bda8fae9 	.word	0xbda8fae9
 80095c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80095c4:	3e21ee9e 	.word	0x3e21ee9e
 80095c8:	809c52ad 	.word	0x809c52ad
 80095cc:	3e927e4f 	.word	0x3e927e4f
 80095d0:	19cb1590 	.word	0x19cb1590
 80095d4:	3efa01a0 	.word	0x3efa01a0
 80095d8:	16c15177 	.word	0x16c15177
 80095dc:	3f56c16c 	.word	0x3f56c16c
 80095e0:	5555554c 	.word	0x5555554c
 80095e4:	3fa55555 	.word	0x3fa55555
 80095e8:	00000000 	.word	0x00000000
 80095ec:	3ff00000 	.word	0x3ff00000
 80095f0:	3fe00000 	.word	0x3fe00000
 80095f4:	3fd33332 	.word	0x3fd33332
 80095f8:	3ff00000 	.word	0x3ff00000
 80095fc:	3fe90000 	.word	0x3fe90000
 8009600:	3fd20000 	.word	0x3fd20000
 8009604:	00000000 	.word	0x00000000

08009608 <__kernel_rem_pio2>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	ed2d 8b02 	vpush	{d8}
 8009610:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009614:	f112 0f14 	cmn.w	r2, #20
 8009618:	9308      	str	r3, [sp, #32]
 800961a:	9101      	str	r1, [sp, #4]
 800961c:	4bc4      	ldr	r3, [pc, #784]	; (8009930 <__kernel_rem_pio2+0x328>)
 800961e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009620:	900b      	str	r0, [sp, #44]	; 0x2c
 8009622:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009626:	9302      	str	r3, [sp, #8]
 8009628:	9b08      	ldr	r3, [sp, #32]
 800962a:	f103 33ff 	add.w	r3, r3, #4294967295
 800962e:	bfa8      	it	ge
 8009630:	1ed4      	subge	r4, r2, #3
 8009632:	9306      	str	r3, [sp, #24]
 8009634:	bfb2      	itee	lt
 8009636:	2400      	movlt	r4, #0
 8009638:	2318      	movge	r3, #24
 800963a:	fb94 f4f3 	sdivge	r4, r4, r3
 800963e:	f06f 0317 	mvn.w	r3, #23
 8009642:	fb04 3303 	mla	r3, r4, r3, r3
 8009646:	eb03 0a02 	add.w	sl, r3, r2
 800964a:	9b02      	ldr	r3, [sp, #8]
 800964c:	9a06      	ldr	r2, [sp, #24]
 800964e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8009920 <__kernel_rem_pio2+0x318>
 8009652:	eb03 0802 	add.w	r8, r3, r2
 8009656:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009658:	1aa7      	subs	r7, r4, r2
 800965a:	ae22      	add	r6, sp, #136	; 0x88
 800965c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009660:	2500      	movs	r5, #0
 8009662:	4545      	cmp	r5, r8
 8009664:	dd13      	ble.n	800968e <__kernel_rem_pio2+0x86>
 8009666:	9b08      	ldr	r3, [sp, #32]
 8009668:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8009920 <__kernel_rem_pio2+0x318>
 800966c:	aa22      	add	r2, sp, #136	; 0x88
 800966e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009672:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009676:	f04f 0800 	mov.w	r8, #0
 800967a:	9b02      	ldr	r3, [sp, #8]
 800967c:	4598      	cmp	r8, r3
 800967e:	dc2f      	bgt.n	80096e0 <__kernel_rem_pio2+0xd8>
 8009680:	ed8d 8b04 	vstr	d8, [sp, #16]
 8009684:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8009688:	462f      	mov	r7, r5
 800968a:	2600      	movs	r6, #0
 800968c:	e01b      	b.n	80096c6 <__kernel_rem_pio2+0xbe>
 800968e:	42ef      	cmn	r7, r5
 8009690:	d407      	bmi.n	80096a2 <__kernel_rem_pio2+0x9a>
 8009692:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009696:	f7f6 ff5d 	bl	8000554 <__aeabi_i2d>
 800969a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800969e:	3501      	adds	r5, #1
 80096a0:	e7df      	b.n	8009662 <__kernel_rem_pio2+0x5a>
 80096a2:	ec51 0b18 	vmov	r0, r1, d8
 80096a6:	e7f8      	b.n	800969a <__kernel_rem_pio2+0x92>
 80096a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80096b0:	f7f6 ffba 	bl	8000628 <__aeabi_dmul>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096bc:	f7f6 fdfe 	bl	80002bc <__adddf3>
 80096c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096c4:	3601      	adds	r6, #1
 80096c6:	9b06      	ldr	r3, [sp, #24]
 80096c8:	429e      	cmp	r6, r3
 80096ca:	f1a7 0708 	sub.w	r7, r7, #8
 80096ce:	ddeb      	ble.n	80096a8 <__kernel_rem_pio2+0xa0>
 80096d0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80096d4:	f108 0801 	add.w	r8, r8, #1
 80096d8:	ecab 7b02 	vstmia	fp!, {d7}
 80096dc:	3508      	adds	r5, #8
 80096de:	e7cc      	b.n	800967a <__kernel_rem_pio2+0x72>
 80096e0:	9b02      	ldr	r3, [sp, #8]
 80096e2:	aa0e      	add	r2, sp, #56	; 0x38
 80096e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096e8:	930d      	str	r3, [sp, #52]	; 0x34
 80096ea:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80096ec:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80096f0:	9c02      	ldr	r4, [sp, #8]
 80096f2:	930c      	str	r3, [sp, #48]	; 0x30
 80096f4:	00e3      	lsls	r3, r4, #3
 80096f6:	930a      	str	r3, [sp, #40]	; 0x28
 80096f8:	ab9a      	add	r3, sp, #616	; 0x268
 80096fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80096fe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8009702:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8009706:	ab72      	add	r3, sp, #456	; 0x1c8
 8009708:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800970c:	46c3      	mov	fp, r8
 800970e:	46a1      	mov	r9, r4
 8009710:	f1b9 0f00 	cmp.w	r9, #0
 8009714:	f1a5 0508 	sub.w	r5, r5, #8
 8009718:	dc77      	bgt.n	800980a <__kernel_rem_pio2+0x202>
 800971a:	ec47 6b10 	vmov	d0, r6, r7
 800971e:	4650      	mov	r0, sl
 8009720:	f000 fc0a 	bl	8009f38 <scalbn>
 8009724:	ec57 6b10 	vmov	r6, r7, d0
 8009728:	2200      	movs	r2, #0
 800972a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800972e:	ee10 0a10 	vmov	r0, s0
 8009732:	4639      	mov	r1, r7
 8009734:	f7f6 ff78 	bl	8000628 <__aeabi_dmul>
 8009738:	ec41 0b10 	vmov	d0, r0, r1
 800973c:	f000 fb7c 	bl	8009e38 <floor>
 8009740:	4b7c      	ldr	r3, [pc, #496]	; (8009934 <__kernel_rem_pio2+0x32c>)
 8009742:	ec51 0b10 	vmov	r0, r1, d0
 8009746:	2200      	movs	r2, #0
 8009748:	f7f6 ff6e 	bl	8000628 <__aeabi_dmul>
 800974c:	4602      	mov	r2, r0
 800974e:	460b      	mov	r3, r1
 8009750:	4630      	mov	r0, r6
 8009752:	4639      	mov	r1, r7
 8009754:	f7f6 fdb0 	bl	80002b8 <__aeabi_dsub>
 8009758:	460f      	mov	r7, r1
 800975a:	4606      	mov	r6, r0
 800975c:	f7f7 f9fe 	bl	8000b5c <__aeabi_d2iz>
 8009760:	9004      	str	r0, [sp, #16]
 8009762:	f7f6 fef7 	bl	8000554 <__aeabi_i2d>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4630      	mov	r0, r6
 800976c:	4639      	mov	r1, r7
 800976e:	f7f6 fda3 	bl	80002b8 <__aeabi_dsub>
 8009772:	f1ba 0f00 	cmp.w	sl, #0
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	dd6d      	ble.n	8009858 <__kernel_rem_pio2+0x250>
 800977c:	1e62      	subs	r2, r4, #1
 800977e:	ab0e      	add	r3, sp, #56	; 0x38
 8009780:	9d04      	ldr	r5, [sp, #16]
 8009782:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009786:	f1ca 0118 	rsb	r1, sl, #24
 800978a:	fa40 f301 	asr.w	r3, r0, r1
 800978e:	441d      	add	r5, r3
 8009790:	408b      	lsls	r3, r1
 8009792:	1ac0      	subs	r0, r0, r3
 8009794:	ab0e      	add	r3, sp, #56	; 0x38
 8009796:	9504      	str	r5, [sp, #16]
 8009798:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800979c:	f1ca 0317 	rsb	r3, sl, #23
 80097a0:	fa40 fb03 	asr.w	fp, r0, r3
 80097a4:	f1bb 0f00 	cmp.w	fp, #0
 80097a8:	dd65      	ble.n	8009876 <__kernel_rem_pio2+0x26e>
 80097aa:	9b04      	ldr	r3, [sp, #16]
 80097ac:	2200      	movs	r2, #0
 80097ae:	3301      	adds	r3, #1
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	4615      	mov	r5, r2
 80097b4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80097b8:	4294      	cmp	r4, r2
 80097ba:	f300 809c 	bgt.w	80098f6 <__kernel_rem_pio2+0x2ee>
 80097be:	f1ba 0f00 	cmp.w	sl, #0
 80097c2:	dd07      	ble.n	80097d4 <__kernel_rem_pio2+0x1cc>
 80097c4:	f1ba 0f01 	cmp.w	sl, #1
 80097c8:	f000 80c0 	beq.w	800994c <__kernel_rem_pio2+0x344>
 80097cc:	f1ba 0f02 	cmp.w	sl, #2
 80097d0:	f000 80c6 	beq.w	8009960 <__kernel_rem_pio2+0x358>
 80097d4:	f1bb 0f02 	cmp.w	fp, #2
 80097d8:	d14d      	bne.n	8009876 <__kernel_rem_pio2+0x26e>
 80097da:	4632      	mov	r2, r6
 80097dc:	463b      	mov	r3, r7
 80097de:	4956      	ldr	r1, [pc, #344]	; (8009938 <__kernel_rem_pio2+0x330>)
 80097e0:	2000      	movs	r0, #0
 80097e2:	f7f6 fd69 	bl	80002b8 <__aeabi_dsub>
 80097e6:	4606      	mov	r6, r0
 80097e8:	460f      	mov	r7, r1
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	d043      	beq.n	8009876 <__kernel_rem_pio2+0x26e>
 80097ee:	4650      	mov	r0, sl
 80097f0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8009928 <__kernel_rem_pio2+0x320>
 80097f4:	f000 fba0 	bl	8009f38 <scalbn>
 80097f8:	4630      	mov	r0, r6
 80097fa:	4639      	mov	r1, r7
 80097fc:	ec53 2b10 	vmov	r2, r3, d0
 8009800:	f7f6 fd5a 	bl	80002b8 <__aeabi_dsub>
 8009804:	4606      	mov	r6, r0
 8009806:	460f      	mov	r7, r1
 8009808:	e035      	b.n	8009876 <__kernel_rem_pio2+0x26e>
 800980a:	4b4c      	ldr	r3, [pc, #304]	; (800993c <__kernel_rem_pio2+0x334>)
 800980c:	2200      	movs	r2, #0
 800980e:	4630      	mov	r0, r6
 8009810:	4639      	mov	r1, r7
 8009812:	f7f6 ff09 	bl	8000628 <__aeabi_dmul>
 8009816:	f7f7 f9a1 	bl	8000b5c <__aeabi_d2iz>
 800981a:	f7f6 fe9b 	bl	8000554 <__aeabi_i2d>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	ec43 2b18 	vmov	d8, r2, r3
 8009826:	4b46      	ldr	r3, [pc, #280]	; (8009940 <__kernel_rem_pio2+0x338>)
 8009828:	2200      	movs	r2, #0
 800982a:	f7f6 fefd 	bl	8000628 <__aeabi_dmul>
 800982e:	4602      	mov	r2, r0
 8009830:	460b      	mov	r3, r1
 8009832:	4630      	mov	r0, r6
 8009834:	4639      	mov	r1, r7
 8009836:	f7f6 fd3f 	bl	80002b8 <__aeabi_dsub>
 800983a:	f7f7 f98f 	bl	8000b5c <__aeabi_d2iz>
 800983e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009842:	f84b 0b04 	str.w	r0, [fp], #4
 8009846:	ec51 0b18 	vmov	r0, r1, d8
 800984a:	f7f6 fd37 	bl	80002bc <__adddf3>
 800984e:	f109 39ff 	add.w	r9, r9, #4294967295
 8009852:	4606      	mov	r6, r0
 8009854:	460f      	mov	r7, r1
 8009856:	e75b      	b.n	8009710 <__kernel_rem_pio2+0x108>
 8009858:	d106      	bne.n	8009868 <__kernel_rem_pio2+0x260>
 800985a:	1e63      	subs	r3, r4, #1
 800985c:	aa0e      	add	r2, sp, #56	; 0x38
 800985e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009862:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8009866:	e79d      	b.n	80097a4 <__kernel_rem_pio2+0x19c>
 8009868:	4b36      	ldr	r3, [pc, #216]	; (8009944 <__kernel_rem_pio2+0x33c>)
 800986a:	2200      	movs	r2, #0
 800986c:	f7f7 f962 	bl	8000b34 <__aeabi_dcmpge>
 8009870:	2800      	cmp	r0, #0
 8009872:	d13d      	bne.n	80098f0 <__kernel_rem_pio2+0x2e8>
 8009874:	4683      	mov	fp, r0
 8009876:	2200      	movs	r2, #0
 8009878:	2300      	movs	r3, #0
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	f7f7 f93b 	bl	8000af8 <__aeabi_dcmpeq>
 8009882:	2800      	cmp	r0, #0
 8009884:	f000 80c0 	beq.w	8009a08 <__kernel_rem_pio2+0x400>
 8009888:	1e65      	subs	r5, r4, #1
 800988a:	462b      	mov	r3, r5
 800988c:	2200      	movs	r2, #0
 800988e:	9902      	ldr	r1, [sp, #8]
 8009890:	428b      	cmp	r3, r1
 8009892:	da6c      	bge.n	800996e <__kernel_rem_pio2+0x366>
 8009894:	2a00      	cmp	r2, #0
 8009896:	f000 8089 	beq.w	80099ac <__kernel_rem_pio2+0x3a4>
 800989a:	ab0e      	add	r3, sp, #56	; 0x38
 800989c:	f1aa 0a18 	sub.w	sl, sl, #24
 80098a0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 80ad 	beq.w	8009a04 <__kernel_rem_pio2+0x3fc>
 80098aa:	4650      	mov	r0, sl
 80098ac:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8009928 <__kernel_rem_pio2+0x320>
 80098b0:	f000 fb42 	bl	8009f38 <scalbn>
 80098b4:	ab9a      	add	r3, sp, #616	; 0x268
 80098b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80098ba:	ec57 6b10 	vmov	r6, r7, d0
 80098be:	00ec      	lsls	r4, r5, #3
 80098c0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80098c4:	46aa      	mov	sl, r5
 80098c6:	f1ba 0f00 	cmp.w	sl, #0
 80098ca:	f280 80d6 	bge.w	8009a7a <__kernel_rem_pio2+0x472>
 80098ce:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8009920 <__kernel_rem_pio2+0x318>
 80098d2:	462e      	mov	r6, r5
 80098d4:	2e00      	cmp	r6, #0
 80098d6:	f2c0 8104 	blt.w	8009ae2 <__kernel_rem_pio2+0x4da>
 80098da:	ab72      	add	r3, sp, #456	; 0x1c8
 80098dc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80098e0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8009948 <__kernel_rem_pio2+0x340>
 80098e4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80098e8:	f04f 0800 	mov.w	r8, #0
 80098ec:	1baf      	subs	r7, r5, r6
 80098ee:	e0ea      	b.n	8009ac6 <__kernel_rem_pio2+0x4be>
 80098f0:	f04f 0b02 	mov.w	fp, #2
 80098f4:	e759      	b.n	80097aa <__kernel_rem_pio2+0x1a2>
 80098f6:	f8d8 3000 	ldr.w	r3, [r8]
 80098fa:	b955      	cbnz	r5, 8009912 <__kernel_rem_pio2+0x30a>
 80098fc:	b123      	cbz	r3, 8009908 <__kernel_rem_pio2+0x300>
 80098fe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009902:	f8c8 3000 	str.w	r3, [r8]
 8009906:	2301      	movs	r3, #1
 8009908:	3201      	adds	r2, #1
 800990a:	f108 0804 	add.w	r8, r8, #4
 800990e:	461d      	mov	r5, r3
 8009910:	e752      	b.n	80097b8 <__kernel_rem_pio2+0x1b0>
 8009912:	1acb      	subs	r3, r1, r3
 8009914:	f8c8 3000 	str.w	r3, [r8]
 8009918:	462b      	mov	r3, r5
 800991a:	e7f5      	b.n	8009908 <__kernel_rem_pio2+0x300>
 800991c:	f3af 8000 	nop.w
	...
 800992c:	3ff00000 	.word	0x3ff00000
 8009930:	0800a2d0 	.word	0x0800a2d0
 8009934:	40200000 	.word	0x40200000
 8009938:	3ff00000 	.word	0x3ff00000
 800993c:	3e700000 	.word	0x3e700000
 8009940:	41700000 	.word	0x41700000
 8009944:	3fe00000 	.word	0x3fe00000
 8009948:	0800a290 	.word	0x0800a290
 800994c:	1e62      	subs	r2, r4, #1
 800994e:	ab0e      	add	r3, sp, #56	; 0x38
 8009950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009954:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009958:	a90e      	add	r1, sp, #56	; 0x38
 800995a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800995e:	e739      	b.n	80097d4 <__kernel_rem_pio2+0x1cc>
 8009960:	1e62      	subs	r2, r4, #1
 8009962:	ab0e      	add	r3, sp, #56	; 0x38
 8009964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009968:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800996c:	e7f4      	b.n	8009958 <__kernel_rem_pio2+0x350>
 800996e:	a90e      	add	r1, sp, #56	; 0x38
 8009970:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009974:	3b01      	subs	r3, #1
 8009976:	430a      	orrs	r2, r1
 8009978:	e789      	b.n	800988e <__kernel_rem_pio2+0x286>
 800997a:	3301      	adds	r3, #1
 800997c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009980:	2900      	cmp	r1, #0
 8009982:	d0fa      	beq.n	800997a <__kernel_rem_pio2+0x372>
 8009984:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009986:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800998a:	446a      	add	r2, sp
 800998c:	3a98      	subs	r2, #152	; 0x98
 800998e:	920a      	str	r2, [sp, #40]	; 0x28
 8009990:	9a08      	ldr	r2, [sp, #32]
 8009992:	18e3      	adds	r3, r4, r3
 8009994:	18a5      	adds	r5, r4, r2
 8009996:	aa22      	add	r2, sp, #136	; 0x88
 8009998:	f104 0801 	add.w	r8, r4, #1
 800999c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80099a0:	9304      	str	r3, [sp, #16]
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	4543      	cmp	r3, r8
 80099a6:	da04      	bge.n	80099b2 <__kernel_rem_pio2+0x3aa>
 80099a8:	461c      	mov	r4, r3
 80099aa:	e6a3      	b.n	80096f4 <__kernel_rem_pio2+0xec>
 80099ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80099ae:	2301      	movs	r3, #1
 80099b0:	e7e4      	b.n	800997c <__kernel_rem_pio2+0x374>
 80099b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099b4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80099b8:	f7f6 fdcc 	bl	8000554 <__aeabi_i2d>
 80099bc:	e8e5 0102 	strd	r0, r1, [r5], #8
 80099c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099c2:	46ab      	mov	fp, r5
 80099c4:	461c      	mov	r4, r3
 80099c6:	f04f 0900 	mov.w	r9, #0
 80099ca:	2600      	movs	r6, #0
 80099cc:	2700      	movs	r7, #0
 80099ce:	9b06      	ldr	r3, [sp, #24]
 80099d0:	4599      	cmp	r9, r3
 80099d2:	dd06      	ble.n	80099e2 <__kernel_rem_pio2+0x3da>
 80099d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80099da:	f108 0801 	add.w	r8, r8, #1
 80099de:	930a      	str	r3, [sp, #40]	; 0x28
 80099e0:	e7df      	b.n	80099a2 <__kernel_rem_pio2+0x39a>
 80099e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80099e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80099ea:	f7f6 fe1d 	bl	8000628 <__aeabi_dmul>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4630      	mov	r0, r6
 80099f4:	4639      	mov	r1, r7
 80099f6:	f7f6 fc61 	bl	80002bc <__adddf3>
 80099fa:	f109 0901 	add.w	r9, r9, #1
 80099fe:	4606      	mov	r6, r0
 8009a00:	460f      	mov	r7, r1
 8009a02:	e7e4      	b.n	80099ce <__kernel_rem_pio2+0x3c6>
 8009a04:	3d01      	subs	r5, #1
 8009a06:	e748      	b.n	800989a <__kernel_rem_pio2+0x292>
 8009a08:	ec47 6b10 	vmov	d0, r6, r7
 8009a0c:	f1ca 0000 	rsb	r0, sl, #0
 8009a10:	f000 fa92 	bl	8009f38 <scalbn>
 8009a14:	ec57 6b10 	vmov	r6, r7, d0
 8009a18:	4ba0      	ldr	r3, [pc, #640]	; (8009c9c <__kernel_rem_pio2+0x694>)
 8009a1a:	ee10 0a10 	vmov	r0, s0
 8009a1e:	2200      	movs	r2, #0
 8009a20:	4639      	mov	r1, r7
 8009a22:	f7f7 f887 	bl	8000b34 <__aeabi_dcmpge>
 8009a26:	b1f8      	cbz	r0, 8009a68 <__kernel_rem_pio2+0x460>
 8009a28:	4b9d      	ldr	r3, [pc, #628]	; (8009ca0 <__kernel_rem_pio2+0x698>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	4639      	mov	r1, r7
 8009a30:	f7f6 fdfa 	bl	8000628 <__aeabi_dmul>
 8009a34:	f7f7 f892 	bl	8000b5c <__aeabi_d2iz>
 8009a38:	4680      	mov	r8, r0
 8009a3a:	f7f6 fd8b 	bl	8000554 <__aeabi_i2d>
 8009a3e:	4b97      	ldr	r3, [pc, #604]	; (8009c9c <__kernel_rem_pio2+0x694>)
 8009a40:	2200      	movs	r2, #0
 8009a42:	f7f6 fdf1 	bl	8000628 <__aeabi_dmul>
 8009a46:	460b      	mov	r3, r1
 8009a48:	4602      	mov	r2, r0
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	f7f6 fc33 	bl	80002b8 <__aeabi_dsub>
 8009a52:	f7f7 f883 	bl	8000b5c <__aeabi_d2iz>
 8009a56:	1c65      	adds	r5, r4, #1
 8009a58:	ab0e      	add	r3, sp, #56	; 0x38
 8009a5a:	f10a 0a18 	add.w	sl, sl, #24
 8009a5e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a62:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009a66:	e720      	b.n	80098aa <__kernel_rem_pio2+0x2a2>
 8009a68:	4630      	mov	r0, r6
 8009a6a:	4639      	mov	r1, r7
 8009a6c:	f7f7 f876 	bl	8000b5c <__aeabi_d2iz>
 8009a70:	ab0e      	add	r3, sp, #56	; 0x38
 8009a72:	4625      	mov	r5, r4
 8009a74:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009a78:	e717      	b.n	80098aa <__kernel_rem_pio2+0x2a2>
 8009a7a:	ab0e      	add	r3, sp, #56	; 0x38
 8009a7c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009a80:	f7f6 fd68 	bl	8000554 <__aeabi_i2d>
 8009a84:	4632      	mov	r2, r6
 8009a86:	463b      	mov	r3, r7
 8009a88:	f7f6 fdce 	bl	8000628 <__aeabi_dmul>
 8009a8c:	4b84      	ldr	r3, [pc, #528]	; (8009ca0 <__kernel_rem_pio2+0x698>)
 8009a8e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8009a92:	2200      	movs	r2, #0
 8009a94:	4630      	mov	r0, r6
 8009a96:	4639      	mov	r1, r7
 8009a98:	f7f6 fdc6 	bl	8000628 <__aeabi_dmul>
 8009a9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009aa0:	4606      	mov	r6, r0
 8009aa2:	460f      	mov	r7, r1
 8009aa4:	e70f      	b.n	80098c6 <__kernel_rem_pio2+0x2be>
 8009aa6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8009aaa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8009aae:	f7f6 fdbb 	bl	8000628 <__aeabi_dmul>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aba:	f7f6 fbff 	bl	80002bc <__adddf3>
 8009abe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009ac2:	f108 0801 	add.w	r8, r8, #1
 8009ac6:	9b02      	ldr	r3, [sp, #8]
 8009ac8:	4598      	cmp	r8, r3
 8009aca:	dc01      	bgt.n	8009ad0 <__kernel_rem_pio2+0x4c8>
 8009acc:	45b8      	cmp	r8, r7
 8009ace:	ddea      	ble.n	8009aa6 <__kernel_rem_pio2+0x49e>
 8009ad0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8009ad4:	ab4a      	add	r3, sp, #296	; 0x128
 8009ad6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009ada:	ed87 7b00 	vstr	d7, [r7]
 8009ade:	3e01      	subs	r6, #1
 8009ae0:	e6f8      	b.n	80098d4 <__kernel_rem_pio2+0x2cc>
 8009ae2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	dc0b      	bgt.n	8009b00 <__kernel_rem_pio2+0x4f8>
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	dc35      	bgt.n	8009b58 <__kernel_rem_pio2+0x550>
 8009aec:	d059      	beq.n	8009ba2 <__kernel_rem_pio2+0x59a>
 8009aee:	9b04      	ldr	r3, [sp, #16]
 8009af0:	f003 0007 	and.w	r0, r3, #7
 8009af4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009af8:	ecbd 8b02 	vpop	{d8}
 8009afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b00:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009b02:	2b03      	cmp	r3, #3
 8009b04:	d1f3      	bne.n	8009aee <__kernel_rem_pio2+0x4e6>
 8009b06:	ab4a      	add	r3, sp, #296	; 0x128
 8009b08:	4423      	add	r3, r4
 8009b0a:	9306      	str	r3, [sp, #24]
 8009b0c:	461c      	mov	r4, r3
 8009b0e:	469a      	mov	sl, r3
 8009b10:	9502      	str	r5, [sp, #8]
 8009b12:	9b02      	ldr	r3, [sp, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f1aa 0a08 	sub.w	sl, sl, #8
 8009b1a:	dc6b      	bgt.n	8009bf4 <__kernel_rem_pio2+0x5ec>
 8009b1c:	46aa      	mov	sl, r5
 8009b1e:	f1ba 0f01 	cmp.w	sl, #1
 8009b22:	f1a4 0408 	sub.w	r4, r4, #8
 8009b26:	f300 8085 	bgt.w	8009c34 <__kernel_rem_pio2+0x62c>
 8009b2a:	9c06      	ldr	r4, [sp, #24]
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	3408      	adds	r4, #8
 8009b30:	2100      	movs	r1, #0
 8009b32:	2d01      	cmp	r5, #1
 8009b34:	f300 809d 	bgt.w	8009c72 <__kernel_rem_pio2+0x66a>
 8009b38:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8009b3c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8009b40:	f1bb 0f00 	cmp.w	fp, #0
 8009b44:	f040 809b 	bne.w	8009c7e <__kernel_rem_pio2+0x676>
 8009b48:	9b01      	ldr	r3, [sp, #4]
 8009b4a:	e9c3 5600 	strd	r5, r6, [r3]
 8009b4e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8009b52:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009b56:	e7ca      	b.n	8009aee <__kernel_rem_pio2+0x4e6>
 8009b58:	3408      	adds	r4, #8
 8009b5a:	ab4a      	add	r3, sp, #296	; 0x128
 8009b5c:	441c      	add	r4, r3
 8009b5e:	462e      	mov	r6, r5
 8009b60:	2000      	movs	r0, #0
 8009b62:	2100      	movs	r1, #0
 8009b64:	2e00      	cmp	r6, #0
 8009b66:	da36      	bge.n	8009bd6 <__kernel_rem_pio2+0x5ce>
 8009b68:	f1bb 0f00 	cmp.w	fp, #0
 8009b6c:	d039      	beq.n	8009be2 <__kernel_rem_pio2+0x5da>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b74:	9c01      	ldr	r4, [sp, #4]
 8009b76:	e9c4 2300 	strd	r2, r3, [r4]
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009b82:	f7f6 fb99 	bl	80002b8 <__aeabi_dsub>
 8009b86:	ae4c      	add	r6, sp, #304	; 0x130
 8009b88:	2401      	movs	r4, #1
 8009b8a:	42a5      	cmp	r5, r4
 8009b8c:	da2c      	bge.n	8009be8 <__kernel_rem_pio2+0x5e0>
 8009b8e:	f1bb 0f00 	cmp.w	fp, #0
 8009b92:	d002      	beq.n	8009b9a <__kernel_rem_pio2+0x592>
 8009b94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b98:	4619      	mov	r1, r3
 8009b9a:	9b01      	ldr	r3, [sp, #4]
 8009b9c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009ba0:	e7a5      	b.n	8009aee <__kernel_rem_pio2+0x4e6>
 8009ba2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8009ba6:	eb0d 0403 	add.w	r4, sp, r3
 8009baa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009bae:	2000      	movs	r0, #0
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	2d00      	cmp	r5, #0
 8009bb4:	da09      	bge.n	8009bca <__kernel_rem_pio2+0x5c2>
 8009bb6:	f1bb 0f00 	cmp.w	fp, #0
 8009bba:	d002      	beq.n	8009bc2 <__kernel_rem_pio2+0x5ba>
 8009bbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009bc0:	4619      	mov	r1, r3
 8009bc2:	9b01      	ldr	r3, [sp, #4]
 8009bc4:	e9c3 0100 	strd	r0, r1, [r3]
 8009bc8:	e791      	b.n	8009aee <__kernel_rem_pio2+0x4e6>
 8009bca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009bce:	f7f6 fb75 	bl	80002bc <__adddf3>
 8009bd2:	3d01      	subs	r5, #1
 8009bd4:	e7ed      	b.n	8009bb2 <__kernel_rem_pio2+0x5aa>
 8009bd6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009bda:	f7f6 fb6f 	bl	80002bc <__adddf3>
 8009bde:	3e01      	subs	r6, #1
 8009be0:	e7c0      	b.n	8009b64 <__kernel_rem_pio2+0x55c>
 8009be2:	4602      	mov	r2, r0
 8009be4:	460b      	mov	r3, r1
 8009be6:	e7c5      	b.n	8009b74 <__kernel_rem_pio2+0x56c>
 8009be8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009bec:	f7f6 fb66 	bl	80002bc <__adddf3>
 8009bf0:	3401      	adds	r4, #1
 8009bf2:	e7ca      	b.n	8009b8a <__kernel_rem_pio2+0x582>
 8009bf4:	e9da 8900 	ldrd	r8, r9, [sl]
 8009bf8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8009bfc:	9b02      	ldr	r3, [sp, #8]
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	9302      	str	r3, [sp, #8]
 8009c02:	4632      	mov	r2, r6
 8009c04:	463b      	mov	r3, r7
 8009c06:	4640      	mov	r0, r8
 8009c08:	4649      	mov	r1, r9
 8009c0a:	f7f6 fb57 	bl	80002bc <__adddf3>
 8009c0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009c12:	4602      	mov	r2, r0
 8009c14:	460b      	mov	r3, r1
 8009c16:	4640      	mov	r0, r8
 8009c18:	4649      	mov	r1, r9
 8009c1a:	f7f6 fb4d 	bl	80002b8 <__aeabi_dsub>
 8009c1e:	4632      	mov	r2, r6
 8009c20:	463b      	mov	r3, r7
 8009c22:	f7f6 fb4b 	bl	80002bc <__adddf3>
 8009c26:	ed9d 7b08 	vldr	d7, [sp, #32]
 8009c2a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8009c2e:	ed8a 7b00 	vstr	d7, [sl]
 8009c32:	e76e      	b.n	8009b12 <__kernel_rem_pio2+0x50a>
 8009c34:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009c38:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8009c3c:	4640      	mov	r0, r8
 8009c3e:	4632      	mov	r2, r6
 8009c40:	463b      	mov	r3, r7
 8009c42:	4649      	mov	r1, r9
 8009c44:	f7f6 fb3a 	bl	80002bc <__adddf3>
 8009c48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	4640      	mov	r0, r8
 8009c52:	4649      	mov	r1, r9
 8009c54:	f7f6 fb30 	bl	80002b8 <__aeabi_dsub>
 8009c58:	4632      	mov	r2, r6
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	f7f6 fb2e 	bl	80002bc <__adddf3>
 8009c60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009c68:	ed84 7b00 	vstr	d7, [r4]
 8009c6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c70:	e755      	b.n	8009b1e <__kernel_rem_pio2+0x516>
 8009c72:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009c76:	f7f6 fb21 	bl	80002bc <__adddf3>
 8009c7a:	3d01      	subs	r5, #1
 8009c7c:	e759      	b.n	8009b32 <__kernel_rem_pio2+0x52a>
 8009c7e:	9b01      	ldr	r3, [sp, #4]
 8009c80:	9a01      	ldr	r2, [sp, #4]
 8009c82:	601d      	str	r5, [r3, #0]
 8009c84:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8009c88:	605c      	str	r4, [r3, #4]
 8009c8a:	609f      	str	r7, [r3, #8]
 8009c8c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8009c90:	60d3      	str	r3, [r2, #12]
 8009c92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c96:	6110      	str	r0, [r2, #16]
 8009c98:	6153      	str	r3, [r2, #20]
 8009c9a:	e728      	b.n	8009aee <__kernel_rem_pio2+0x4e6>
 8009c9c:	41700000 	.word	0x41700000
 8009ca0:	3e700000 	.word	0x3e700000
 8009ca4:	00000000 	.word	0x00000000

08009ca8 <__kernel_sin>:
 8009ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	ed2d 8b04 	vpush	{d8-d9}
 8009cb0:	eeb0 8a41 	vmov.f32	s16, s2
 8009cb4:	eef0 8a61 	vmov.f32	s17, s3
 8009cb8:	ec55 4b10 	vmov	r4, r5, d0
 8009cbc:	b083      	sub	sp, #12
 8009cbe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009cc2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009cc6:	9001      	str	r0, [sp, #4]
 8009cc8:	da06      	bge.n	8009cd8 <__kernel_sin+0x30>
 8009cca:	ee10 0a10 	vmov	r0, s0
 8009cce:	4629      	mov	r1, r5
 8009cd0:	f7f6 ff44 	bl	8000b5c <__aeabi_d2iz>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d051      	beq.n	8009d7c <__kernel_sin+0xd4>
 8009cd8:	4622      	mov	r2, r4
 8009cda:	462b      	mov	r3, r5
 8009cdc:	4620      	mov	r0, r4
 8009cde:	4629      	mov	r1, r5
 8009ce0:	f7f6 fca2 	bl	8000628 <__aeabi_dmul>
 8009ce4:	4682      	mov	sl, r0
 8009ce6:	468b      	mov	fp, r1
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4620      	mov	r0, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f7f6 fc9a 	bl	8000628 <__aeabi_dmul>
 8009cf4:	a341      	add	r3, pc, #260	; (adr r3, 8009dfc <__kernel_sin+0x154>)
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	4680      	mov	r8, r0
 8009cfc:	4689      	mov	r9, r1
 8009cfe:	4650      	mov	r0, sl
 8009d00:	4659      	mov	r1, fp
 8009d02:	f7f6 fc91 	bl	8000628 <__aeabi_dmul>
 8009d06:	a33f      	add	r3, pc, #252	; (adr r3, 8009e04 <__kernel_sin+0x15c>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 fad4 	bl	80002b8 <__aeabi_dsub>
 8009d10:	4652      	mov	r2, sl
 8009d12:	465b      	mov	r3, fp
 8009d14:	f7f6 fc88 	bl	8000628 <__aeabi_dmul>
 8009d18:	a33c      	add	r3, pc, #240	; (adr r3, 8009e0c <__kernel_sin+0x164>)
 8009d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1e:	f7f6 facd 	bl	80002bc <__adddf3>
 8009d22:	4652      	mov	r2, sl
 8009d24:	465b      	mov	r3, fp
 8009d26:	f7f6 fc7f 	bl	8000628 <__aeabi_dmul>
 8009d2a:	a33a      	add	r3, pc, #232	; (adr r3, 8009e14 <__kernel_sin+0x16c>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f7f6 fac2 	bl	80002b8 <__aeabi_dsub>
 8009d34:	4652      	mov	r2, sl
 8009d36:	465b      	mov	r3, fp
 8009d38:	f7f6 fc76 	bl	8000628 <__aeabi_dmul>
 8009d3c:	a337      	add	r3, pc, #220	; (adr r3, 8009e1c <__kernel_sin+0x174>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 fabb 	bl	80002bc <__adddf3>
 8009d46:	9b01      	ldr	r3, [sp, #4]
 8009d48:	4606      	mov	r6, r0
 8009d4a:	460f      	mov	r7, r1
 8009d4c:	b9eb      	cbnz	r3, 8009d8a <__kernel_sin+0xe2>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	4650      	mov	r0, sl
 8009d54:	4659      	mov	r1, fp
 8009d56:	f7f6 fc67 	bl	8000628 <__aeabi_dmul>
 8009d5a:	a325      	add	r3, pc, #148	; (adr r3, 8009df0 <__kernel_sin+0x148>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	f7f6 faaa 	bl	80002b8 <__aeabi_dsub>
 8009d64:	4642      	mov	r2, r8
 8009d66:	464b      	mov	r3, r9
 8009d68:	f7f6 fc5e 	bl	8000628 <__aeabi_dmul>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4620      	mov	r0, r4
 8009d72:	4629      	mov	r1, r5
 8009d74:	f7f6 faa2 	bl	80002bc <__adddf3>
 8009d78:	4604      	mov	r4, r0
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	ec45 4b10 	vmov	d0, r4, r5
 8009d80:	b003      	add	sp, #12
 8009d82:	ecbd 8b04 	vpop	{d8-d9}
 8009d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8a:	4b1b      	ldr	r3, [pc, #108]	; (8009df8 <__kernel_sin+0x150>)
 8009d8c:	ec51 0b18 	vmov	r0, r1, d8
 8009d90:	2200      	movs	r2, #0
 8009d92:	f7f6 fc49 	bl	8000628 <__aeabi_dmul>
 8009d96:	4632      	mov	r2, r6
 8009d98:	ec41 0b19 	vmov	d9, r0, r1
 8009d9c:	463b      	mov	r3, r7
 8009d9e:	4640      	mov	r0, r8
 8009da0:	4649      	mov	r1, r9
 8009da2:	f7f6 fc41 	bl	8000628 <__aeabi_dmul>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	ec51 0b19 	vmov	r0, r1, d9
 8009dae:	f7f6 fa83 	bl	80002b8 <__aeabi_dsub>
 8009db2:	4652      	mov	r2, sl
 8009db4:	465b      	mov	r3, fp
 8009db6:	f7f6 fc37 	bl	8000628 <__aeabi_dmul>
 8009dba:	ec53 2b18 	vmov	r2, r3, d8
 8009dbe:	f7f6 fa7b 	bl	80002b8 <__aeabi_dsub>
 8009dc2:	a30b      	add	r3, pc, #44	; (adr r3, 8009df0 <__kernel_sin+0x148>)
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	4606      	mov	r6, r0
 8009dca:	460f      	mov	r7, r1
 8009dcc:	4640      	mov	r0, r8
 8009dce:	4649      	mov	r1, r9
 8009dd0:	f7f6 fc2a 	bl	8000628 <__aeabi_dmul>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4630      	mov	r0, r6
 8009dda:	4639      	mov	r1, r7
 8009ddc:	f7f6 fa6e 	bl	80002bc <__adddf3>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4620      	mov	r0, r4
 8009de6:	4629      	mov	r1, r5
 8009de8:	f7f6 fa66 	bl	80002b8 <__aeabi_dsub>
 8009dec:	e7c4      	b.n	8009d78 <__kernel_sin+0xd0>
 8009dee:	bf00      	nop
 8009df0:	55555549 	.word	0x55555549
 8009df4:	3fc55555 	.word	0x3fc55555
 8009df8:	3fe00000 	.word	0x3fe00000
 8009dfc:	5acfd57c 	.word	0x5acfd57c
 8009e00:	3de5d93a 	.word	0x3de5d93a
 8009e04:	8a2b9ceb 	.word	0x8a2b9ceb
 8009e08:	3e5ae5e6 	.word	0x3e5ae5e6
 8009e0c:	57b1fe7d 	.word	0x57b1fe7d
 8009e10:	3ec71de3 	.word	0x3ec71de3
 8009e14:	19c161d5 	.word	0x19c161d5
 8009e18:	3f2a01a0 	.word	0x3f2a01a0
 8009e1c:	1110f8a6 	.word	0x1110f8a6
 8009e20:	3f811111 	.word	0x3f811111

08009e24 <fabs>:
 8009e24:	ec51 0b10 	vmov	r0, r1, d0
 8009e28:	ee10 2a10 	vmov	r2, s0
 8009e2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e30:	ec43 2b10 	vmov	d0, r2, r3
 8009e34:	4770      	bx	lr
	...

08009e38 <floor>:
 8009e38:	ec51 0b10 	vmov	r0, r1, d0
 8009e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009e44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009e48:	2e13      	cmp	r6, #19
 8009e4a:	ee10 5a10 	vmov	r5, s0
 8009e4e:	ee10 8a10 	vmov	r8, s0
 8009e52:	460c      	mov	r4, r1
 8009e54:	dc32      	bgt.n	8009ebc <floor+0x84>
 8009e56:	2e00      	cmp	r6, #0
 8009e58:	da14      	bge.n	8009e84 <floor+0x4c>
 8009e5a:	a333      	add	r3, pc, #204	; (adr r3, 8009f28 <floor+0xf0>)
 8009e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e60:	f7f6 fa2c 	bl	80002bc <__adddf3>
 8009e64:	2200      	movs	r2, #0
 8009e66:	2300      	movs	r3, #0
 8009e68:	f7f6 fe6e 	bl	8000b48 <__aeabi_dcmpgt>
 8009e6c:	b138      	cbz	r0, 8009e7e <floor+0x46>
 8009e6e:	2c00      	cmp	r4, #0
 8009e70:	da57      	bge.n	8009f22 <floor+0xea>
 8009e72:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009e76:	431d      	orrs	r5, r3
 8009e78:	d001      	beq.n	8009e7e <floor+0x46>
 8009e7a:	4c2d      	ldr	r4, [pc, #180]	; (8009f30 <floor+0xf8>)
 8009e7c:	2500      	movs	r5, #0
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4628      	mov	r0, r5
 8009e82:	e025      	b.n	8009ed0 <floor+0x98>
 8009e84:	4f2b      	ldr	r7, [pc, #172]	; (8009f34 <floor+0xfc>)
 8009e86:	4137      	asrs	r7, r6
 8009e88:	ea01 0307 	and.w	r3, r1, r7
 8009e8c:	4303      	orrs	r3, r0
 8009e8e:	d01f      	beq.n	8009ed0 <floor+0x98>
 8009e90:	a325      	add	r3, pc, #148	; (adr r3, 8009f28 <floor+0xf0>)
 8009e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e96:	f7f6 fa11 	bl	80002bc <__adddf3>
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f7f6 fe53 	bl	8000b48 <__aeabi_dcmpgt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	d0eb      	beq.n	8009e7e <floor+0x46>
 8009ea6:	2c00      	cmp	r4, #0
 8009ea8:	bfbe      	ittt	lt
 8009eaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009eae:	fa43 f606 	asrlt.w	r6, r3, r6
 8009eb2:	19a4      	addlt	r4, r4, r6
 8009eb4:	ea24 0407 	bic.w	r4, r4, r7
 8009eb8:	2500      	movs	r5, #0
 8009eba:	e7e0      	b.n	8009e7e <floor+0x46>
 8009ebc:	2e33      	cmp	r6, #51	; 0x33
 8009ebe:	dd0b      	ble.n	8009ed8 <floor+0xa0>
 8009ec0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009ec4:	d104      	bne.n	8009ed0 <floor+0x98>
 8009ec6:	ee10 2a10 	vmov	r2, s0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	f7f6 f9f6 	bl	80002bc <__adddf3>
 8009ed0:	ec41 0b10 	vmov	d0, r0, r1
 8009ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ed8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009edc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee0:	fa23 f707 	lsr.w	r7, r3, r7
 8009ee4:	4207      	tst	r7, r0
 8009ee6:	d0f3      	beq.n	8009ed0 <floor+0x98>
 8009ee8:	a30f      	add	r3, pc, #60	; (adr r3, 8009f28 <floor+0xf0>)
 8009eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eee:	f7f6 f9e5 	bl	80002bc <__adddf3>
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f7f6 fe27 	bl	8000b48 <__aeabi_dcmpgt>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	d0bf      	beq.n	8009e7e <floor+0x46>
 8009efe:	2c00      	cmp	r4, #0
 8009f00:	da02      	bge.n	8009f08 <floor+0xd0>
 8009f02:	2e14      	cmp	r6, #20
 8009f04:	d103      	bne.n	8009f0e <floor+0xd6>
 8009f06:	3401      	adds	r4, #1
 8009f08:	ea25 0507 	bic.w	r5, r5, r7
 8009f0c:	e7b7      	b.n	8009e7e <floor+0x46>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009f14:	fa03 f606 	lsl.w	r6, r3, r6
 8009f18:	4435      	add	r5, r6
 8009f1a:	4545      	cmp	r5, r8
 8009f1c:	bf38      	it	cc
 8009f1e:	18e4      	addcc	r4, r4, r3
 8009f20:	e7f2      	b.n	8009f08 <floor+0xd0>
 8009f22:	2500      	movs	r5, #0
 8009f24:	462c      	mov	r4, r5
 8009f26:	e7aa      	b.n	8009e7e <floor+0x46>
 8009f28:	8800759c 	.word	0x8800759c
 8009f2c:	7e37e43c 	.word	0x7e37e43c
 8009f30:	bff00000 	.word	0xbff00000
 8009f34:	000fffff 	.word	0x000fffff

08009f38 <scalbn>:
 8009f38:	b570      	push	{r4, r5, r6, lr}
 8009f3a:	ec55 4b10 	vmov	r4, r5, d0
 8009f3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009f42:	4606      	mov	r6, r0
 8009f44:	462b      	mov	r3, r5
 8009f46:	b99a      	cbnz	r2, 8009f70 <scalbn+0x38>
 8009f48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009f4c:	4323      	orrs	r3, r4
 8009f4e:	d036      	beq.n	8009fbe <scalbn+0x86>
 8009f50:	4b39      	ldr	r3, [pc, #228]	; (800a038 <scalbn+0x100>)
 8009f52:	4629      	mov	r1, r5
 8009f54:	ee10 0a10 	vmov	r0, s0
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f7f6 fb65 	bl	8000628 <__aeabi_dmul>
 8009f5e:	4b37      	ldr	r3, [pc, #220]	; (800a03c <scalbn+0x104>)
 8009f60:	429e      	cmp	r6, r3
 8009f62:	4604      	mov	r4, r0
 8009f64:	460d      	mov	r5, r1
 8009f66:	da10      	bge.n	8009f8a <scalbn+0x52>
 8009f68:	a32b      	add	r3, pc, #172	; (adr r3, 800a018 <scalbn+0xe0>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	e03a      	b.n	8009fe6 <scalbn+0xae>
 8009f70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009f74:	428a      	cmp	r2, r1
 8009f76:	d10c      	bne.n	8009f92 <scalbn+0x5a>
 8009f78:	ee10 2a10 	vmov	r2, s0
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	4629      	mov	r1, r5
 8009f80:	f7f6 f99c 	bl	80002bc <__adddf3>
 8009f84:	4604      	mov	r4, r0
 8009f86:	460d      	mov	r5, r1
 8009f88:	e019      	b.n	8009fbe <scalbn+0x86>
 8009f8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009f8e:	460b      	mov	r3, r1
 8009f90:	3a36      	subs	r2, #54	; 0x36
 8009f92:	4432      	add	r2, r6
 8009f94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009f98:	428a      	cmp	r2, r1
 8009f9a:	dd08      	ble.n	8009fae <scalbn+0x76>
 8009f9c:	2d00      	cmp	r5, #0
 8009f9e:	a120      	add	r1, pc, #128	; (adr r1, 800a020 <scalbn+0xe8>)
 8009fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa4:	da1c      	bge.n	8009fe0 <scalbn+0xa8>
 8009fa6:	a120      	add	r1, pc, #128	; (adr r1, 800a028 <scalbn+0xf0>)
 8009fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fac:	e018      	b.n	8009fe0 <scalbn+0xa8>
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	dd08      	ble.n	8009fc4 <scalbn+0x8c>
 8009fb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009fb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009fba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009fbe:	ec45 4b10 	vmov	d0, r4, r5
 8009fc2:	bd70      	pop	{r4, r5, r6, pc}
 8009fc4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009fc8:	da19      	bge.n	8009ffe <scalbn+0xc6>
 8009fca:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009fce:	429e      	cmp	r6, r3
 8009fd0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009fd4:	dd0a      	ble.n	8009fec <scalbn+0xb4>
 8009fd6:	a112      	add	r1, pc, #72	; (adr r1, 800a020 <scalbn+0xe8>)
 8009fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e2      	bne.n	8009fa6 <scalbn+0x6e>
 8009fe0:	a30f      	add	r3, pc, #60	; (adr r3, 800a020 <scalbn+0xe8>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f7f6 fb1f 	bl	8000628 <__aeabi_dmul>
 8009fea:	e7cb      	b.n	8009f84 <scalbn+0x4c>
 8009fec:	a10a      	add	r1, pc, #40	; (adr r1, 800a018 <scalbn+0xe0>)
 8009fee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d0b8      	beq.n	8009f68 <scalbn+0x30>
 8009ff6:	a10e      	add	r1, pc, #56	; (adr r1, 800a030 <scalbn+0xf8>)
 8009ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ffc:	e7b4      	b.n	8009f68 <scalbn+0x30>
 8009ffe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a002:	3236      	adds	r2, #54	; 0x36
 800a004:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a008:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a00c:	4620      	mov	r0, r4
 800a00e:	4b0c      	ldr	r3, [pc, #48]	; (800a040 <scalbn+0x108>)
 800a010:	2200      	movs	r2, #0
 800a012:	e7e8      	b.n	8009fe6 <scalbn+0xae>
 800a014:	f3af 8000 	nop.w
 800a018:	c2f8f359 	.word	0xc2f8f359
 800a01c:	01a56e1f 	.word	0x01a56e1f
 800a020:	8800759c 	.word	0x8800759c
 800a024:	7e37e43c 	.word	0x7e37e43c
 800a028:	8800759c 	.word	0x8800759c
 800a02c:	fe37e43c 	.word	0xfe37e43c
 800a030:	c2f8f359 	.word	0xc2f8f359
 800a034:	81a56e1f 	.word	0x81a56e1f
 800a038:	43500000 	.word	0x43500000
 800a03c:	ffff3cb0 	.word	0xffff3cb0
 800a040:	3c900000 	.word	0x3c900000

0800a044 <_init>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr

0800a050 <_fini>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	bf00      	nop
 800a054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a056:	bc08      	pop	{r3}
 800a058:	469e      	mov	lr, r3
 800a05a:	4770      	bx	lr
